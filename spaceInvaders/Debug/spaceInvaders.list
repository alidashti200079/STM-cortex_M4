
spaceInvaders.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbf4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018f0  0800cd84  0800cd84  0001cd84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e674  0800e674  000202bc  2**0
                  CONTENTS
  4 .ARM          00000000  0800e674  0800e674  000202bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e674  0800e674  000202bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e674  0800e674  0001e674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e678  0800e678  0001e678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002bc  20000000  0800e67c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202bc  2**0
                  CONTENTS
 10 .bss          000019ec  200002bc  200002bc  000202bc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001ca8  20001ca8  000202bc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021bb6  00000000  00000000  000202ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b11  00000000  00000000  00041ea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a08  00000000  00000000  000459b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000018d8  00000000  00000000  000473c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022690  00000000  00000000  00048c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000211b0  00000000  00000000  0006b328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce296  00000000  00000000  0008c4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015a76e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007aa8  00000000  00000000  0015a7c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002bc 	.word	0x200002bc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cd6c 	.word	0x0800cd6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c0 	.word	0x200002c0
 80001cc:	0800cd6c 	.word	0x0800cd6c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08e      	sub	sp, #56	; 0x38
 8000284:	af0a      	add	r7, sp, #40	; 0x28
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	4608      	mov	r0, r1
 800028a:	4611      	mov	r1, r2
 800028c:	461a      	mov	r2, r3
 800028e:	4603      	mov	r3, r0
 8000290:	817b      	strh	r3, [r7, #10]
 8000292:	460b      	mov	r3, r1
 8000294:	813b      	strh	r3, [r7, #8]
 8000296:	4613      	mov	r3, r2
 8000298:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 800029a:	4b1d      	ldr	r3, [pc, #116]	; (8000310 <LiquidCrystal+0x90>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d019      	beq.n	80002d6 <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002a2:	8939      	ldrh	r1, [r7, #8]
 80002a4:	897a      	ldrh	r2, [r7, #10]
 80002a6:	2300      	movs	r3, #0
 80002a8:	9308      	str	r3, [sp, #32]
 80002aa:	2300      	movs	r3, #0
 80002ac:	9307      	str	r3, [sp, #28]
 80002ae:	2300      	movs	r3, #0
 80002b0:	9306      	str	r3, [sp, #24]
 80002b2:	2300      	movs	r3, #0
 80002b4:	9305      	str	r3, [sp, #20]
 80002b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002b8:	9304      	str	r3, [sp, #16]
 80002ba:	8c3b      	ldrh	r3, [r7, #32]
 80002bc:	9303      	str	r3, [sp, #12]
 80002be:	8bbb      	ldrh	r3, [r7, #28]
 80002c0:	9302      	str	r3, [sp, #8]
 80002c2:	8b3b      	ldrh	r3, [r7, #24]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	88fb      	ldrh	r3, [r7, #6]
 80002c8:	9300      	str	r3, [sp, #0]
 80002ca:	460b      	mov	r3, r1
 80002cc:	68f9      	ldr	r1, [r7, #12]
 80002ce:	2001      	movs	r0, #1
 80002d0:	f000 f820 	bl	8000314 <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 80002d4:	e018      	b.n	8000308 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002d6:	8939      	ldrh	r1, [r7, #8]
 80002d8:	897a      	ldrh	r2, [r7, #10]
 80002da:	2300      	movs	r3, #0
 80002dc:	9308      	str	r3, [sp, #32]
 80002de:	2300      	movs	r3, #0
 80002e0:	9307      	str	r3, [sp, #28]
 80002e2:	2300      	movs	r3, #0
 80002e4:	9306      	str	r3, [sp, #24]
 80002e6:	2300      	movs	r3, #0
 80002e8:	9305      	str	r3, [sp, #20]
 80002ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002ec:	9304      	str	r3, [sp, #16]
 80002ee:	8c3b      	ldrh	r3, [r7, #32]
 80002f0:	9303      	str	r3, [sp, #12]
 80002f2:	8bbb      	ldrh	r3, [r7, #28]
 80002f4:	9302      	str	r3, [sp, #8]
 80002f6:	8b3b      	ldrh	r3, [r7, #24]
 80002f8:	9301      	str	r3, [sp, #4]
 80002fa:	88fb      	ldrh	r3, [r7, #6]
 80002fc:	9300      	str	r3, [sp, #0]
 80002fe:	460b      	mov	r3, r1
 8000300:	68f9      	ldr	r1, [r7, #12]
 8000302:	2000      	movs	r0, #0
 8000304:	f000 f806 	bl	8000314 <init>
}
 8000308:	bf00      	nop
 800030a:	3710      	adds	r7, #16
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20000000 	.word	0x20000000

08000314 <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	60b9      	str	r1, [r7, #8]
 800031c:	4611      	mov	r1, r2
 800031e:	461a      	mov	r2, r3
 8000320:	4603      	mov	r3, r0
 8000322:	73fb      	strb	r3, [r7, #15]
 8000324:	460b      	mov	r3, r1
 8000326:	81bb      	strh	r3, [r7, #12]
 8000328:	4613      	mov	r3, r2
 800032a:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 800032c:	4a1a      	ldr	r2, [pc, #104]	; (8000398 <init+0x84>)
 800032e:	89bb      	ldrh	r3, [r7, #12]
 8000330:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 8000332:	4a1a      	ldr	r2, [pc, #104]	; (800039c <init+0x88>)
 8000334:	88fb      	ldrh	r3, [r7, #6]
 8000336:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000338:	4a19      	ldr	r2, [pc, #100]	; (80003a0 <init+0x8c>)
 800033a:	8b3b      	ldrh	r3, [r7, #24]
 800033c:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 800033e:	4a19      	ldr	r2, [pc, #100]	; (80003a4 <init+0x90>)
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	6013      	str	r3, [r2, #0]
  
  _data_pins[0] = d0;
 8000344:	4a18      	ldr	r2, [pc, #96]	; (80003a8 <init+0x94>)
 8000346:	8bbb      	ldrh	r3, [r7, #28]
 8000348:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 800034a:	4a17      	ldr	r2, [pc, #92]	; (80003a8 <init+0x94>)
 800034c:	8c3b      	ldrh	r3, [r7, #32]
 800034e:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8000350:	4a15      	ldr	r2, [pc, #84]	; (80003a8 <init+0x94>)
 8000352:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000354:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3; 
 8000356:	4a14      	ldr	r2, [pc, #80]	; (80003a8 <init+0x94>)
 8000358:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800035a:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 800035c:	4a12      	ldr	r2, [pc, #72]	; (80003a8 <init+0x94>)
 800035e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000360:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 8000362:	4a11      	ldr	r2, [pc, #68]	; (80003a8 <init+0x94>)
 8000364:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000366:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8000368:	4a0f      	ldr	r2, [pc, #60]	; (80003a8 <init+0x94>)
 800036a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800036c:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 800036e:	4a0e      	ldr	r2, [pc, #56]	; (80003a8 <init+0x94>)
 8000370:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000372:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8000374:	7bfb      	ldrb	r3, [r7, #15]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d003      	beq.n	8000382 <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800037a:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <init+0x98>)
 800037c:	2200      	movs	r2, #0
 800037e:	701a      	strb	r2, [r3, #0]
 8000380:	e002      	b.n	8000388 <init+0x74>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000382:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <init+0x98>)
 8000384:	2210      	movs	r2, #16
 8000386:	701a      	strb	r2, [r3, #0]
  
  begin(16, 2);
 8000388:	2102      	movs	r1, #2
 800038a:	2010      	movs	r0, #16
 800038c:	f000 f810 	bl	80003b0 <begin>
}
 8000390:	bf00      	nop
 8000392:	3710      	adds	r7, #16
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	200003b4 	.word	0x200003b4
 800039c:	20000394 	.word	0x20000394
 80003a0:	200003b2 	.word	0x200003b2
 80003a4:	20000398 	.word	0x20000398
 80003a8:	200003a0 	.word	0x200003a0
 80003ac:	200003b1 	.word	0x200003b1

080003b0 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b088      	sub	sp, #32
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	460a      	mov	r2, r1
 80003ba:	71fb      	strb	r3, [r7, #7]
 80003bc:	4613      	mov	r3, r2
 80003be:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 80003c0:	79bb      	ldrb	r3, [r7, #6]
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d906      	bls.n	80003d4 <begin+0x24>
    _displayfunction |= LCD_2LINE;
 80003c6:	4b77      	ldr	r3, [pc, #476]	; (80005a4 <begin+0x1f4>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	f043 0308 	orr.w	r3, r3, #8
 80003ce:	b2da      	uxtb	r2, r3
 80003d0:	4b74      	ldr	r3, [pc, #464]	; (80005a4 <begin+0x1f4>)
 80003d2:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 80003d4:	4a74      	ldr	r2, [pc, #464]	; (80005a8 <begin+0x1f8>)
 80003d6:	79bb      	ldrb	r3, [r7, #6]
 80003d8:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
 80003da:	79fa      	ldrb	r2, [r7, #7]
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	3340      	adds	r3, #64	; 0x40
 80003e0:	2140      	movs	r1, #64	; 0x40
 80003e2:	2000      	movs	r0, #0
 80003e4:	f000 f988 	bl	80006f8 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 80003e8:	4b70      	ldr	r3, [pc, #448]	; (80005ac <begin+0x1fc>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d009      	beq.n	8000404 <begin+0x54>
 80003f0:	79bb      	ldrb	r3, [r7, #6]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d106      	bne.n	8000404 <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 80003f6:	4b6b      	ldr	r3, [pc, #428]	; (80005a4 <begin+0x1f4>)
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	f043 0304 	orr.w	r3, r3, #4
 80003fe:	b2da      	uxtb	r2, r3
 8000400:	4b68      	ldr	r3, [pc, #416]	; (80005a4 <begin+0x1f4>)
 8000402:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8000404:	f000 f8e4 	bl	80005d0 <enableClock>
  
  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000408:	2303      	movs	r3, #3
 800040a:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 800040c:	2301      	movs	r3, #1
 800040e:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8000410:	4b67      	ldr	r3, [pc, #412]	; (80005b0 <begin+0x200>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d01b      	beq.n	8000450 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000418:	4b66      	ldr	r3, [pc, #408]	; (80005b4 <begin+0x204>)
 800041a:	881a      	ldrh	r2, [r3, #0]
 800041c:	4b66      	ldr	r3, [pc, #408]	; (80005b8 <begin+0x208>)
 800041e:	881b      	ldrh	r3, [r3, #0]
 8000420:	4313      	orrs	r3, r2
 8000422:	b29a      	uxth	r2, r3
 8000424:	4b65      	ldr	r3, [pc, #404]	; (80005bc <begin+0x20c>)
 8000426:	881b      	ldrh	r3, [r3, #0]
 8000428:	4313      	orrs	r3, r2
 800042a:	b29a      	uxth	r2, r3
 800042c:	4b64      	ldr	r3, [pc, #400]	; (80005c0 <begin+0x210>)
 800042e:	881b      	ldrh	r3, [r3, #0]
 8000430:	4313      	orrs	r3, r2
 8000432:	b29a      	uxth	r2, r3
 8000434:	4b62      	ldr	r3, [pc, #392]	; (80005c0 <begin+0x210>)
 8000436:	885b      	ldrh	r3, [r3, #2]
 8000438:	4313      	orrs	r3, r2
 800043a:	b29a      	uxth	r2, r3
 800043c:	4b60      	ldr	r3, [pc, #384]	; (80005c0 <begin+0x210>)
 800043e:	889b      	ldrh	r3, [r3, #4]
 8000440:	4313      	orrs	r3, r2
 8000442:	b29a      	uxth	r2, r3
 8000444:	4b5e      	ldr	r3, [pc, #376]	; (80005c0 <begin+0x210>)
 8000446:	88db      	ldrh	r3, [r3, #6]
 8000448:	4313      	orrs	r3, r2
 800044a:	b29b      	uxth	r3, r3
 800044c:	60fb      	str	r3, [r7, #12]
 800044e:	e02a      	b.n	80004a6 <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000450:	4b58      	ldr	r3, [pc, #352]	; (80005b4 <begin+0x204>)
 8000452:	881a      	ldrh	r2, [r3, #0]
 8000454:	4b58      	ldr	r3, [pc, #352]	; (80005b8 <begin+0x208>)
 8000456:	881b      	ldrh	r3, [r3, #0]
 8000458:	4313      	orrs	r3, r2
 800045a:	b29a      	uxth	r2, r3
 800045c:	4b57      	ldr	r3, [pc, #348]	; (80005bc <begin+0x20c>)
 800045e:	881b      	ldrh	r3, [r3, #0]
 8000460:	4313      	orrs	r3, r2
 8000462:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000464:	4b56      	ldr	r3, [pc, #344]	; (80005c0 <begin+0x210>)
 8000466:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000468:	4313      	orrs	r3, r2
 800046a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800046c:	4b54      	ldr	r3, [pc, #336]	; (80005c0 <begin+0x210>)
 800046e:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000470:	4313      	orrs	r3, r2
 8000472:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000474:	4b52      	ldr	r3, [pc, #328]	; (80005c0 <begin+0x210>)
 8000476:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000478:	4313      	orrs	r3, r2
 800047a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800047c:	4b50      	ldr	r3, [pc, #320]	; (80005c0 <begin+0x210>)
 800047e:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000480:	4313      	orrs	r3, r2
 8000482:	b29a      	uxth	r2, r3
 8000484:	4b4e      	ldr	r3, [pc, #312]	; (80005c0 <begin+0x210>)
 8000486:	891b      	ldrh	r3, [r3, #8]
 8000488:	4313      	orrs	r3, r2
 800048a:	b29a      	uxth	r2, r3
 800048c:	4b4c      	ldr	r3, [pc, #304]	; (80005c0 <begin+0x210>)
 800048e:	895b      	ldrh	r3, [r3, #10]
 8000490:	4313      	orrs	r3, r2
 8000492:	b29a      	uxth	r2, r3
 8000494:	4b4a      	ldr	r3, [pc, #296]	; (80005c0 <begin+0x210>)
 8000496:	899b      	ldrh	r3, [r3, #12]
 8000498:	4313      	orrs	r3, r2
 800049a:	b29a      	uxth	r2, r3
 800049c:	4b48      	ldr	r3, [pc, #288]	; (80005c0 <begin+0x210>)
 800049e:	89db      	ldrh	r3, [r3, #14]
 80004a0:	4313      	orrs	r3, r2
 80004a2:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80004a4:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 80004a6:	4b47      	ldr	r3, [pc, #284]	; (80005c4 <begin+0x214>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f107 020c 	add.w	r2, r7, #12
 80004ae:	4611      	mov	r1, r2
 80004b0:	4618      	mov	r0, r3
 80004b2:	f006 fb07 	bl	8006ac4 <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50); 
 80004b6:	2032      	movs	r0, #50	; 0x32
 80004b8:	f004 fe30 	bl	800511c <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 80004bc:	4b41      	ldr	r3, [pc, #260]	; (80005c4 <begin+0x214>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a3c      	ldr	r2, [pc, #240]	; (80005b4 <begin+0x204>)
 80004c2:	8811      	ldrh	r1, [r2, #0]
 80004c4:	2200      	movs	r2, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f006 fc8e 	bl	8006de8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80004cc:	4b3d      	ldr	r3, [pc, #244]	; (80005c4 <begin+0x214>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a3a      	ldr	r2, [pc, #232]	; (80005bc <begin+0x20c>)
 80004d2:	8811      	ldrh	r1, [r2, #0]
 80004d4:	2200      	movs	r2, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f006 fc86 	bl	8006de8 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) { 
 80004dc:	4b36      	ldr	r3, [pc, #216]	; (80005b8 <begin+0x208>)
 80004de:	881b      	ldrh	r3, [r3, #0]
 80004e0:	2bff      	cmp	r3, #255	; 0xff
 80004e2:	d007      	beq.n	80004f4 <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80004e4:	4b37      	ldr	r3, [pc, #220]	; (80005c4 <begin+0x214>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a33      	ldr	r2, [pc, #204]	; (80005b8 <begin+0x208>)
 80004ea:	8811      	ldrh	r1, [r2, #0]
 80004ec:	2200      	movs	r2, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f006 fc7a 	bl	8006de8 <HAL_GPIO_WritePin>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 80004f4:	4b2b      	ldr	r3, [pc, #172]	; (80005a4 <begin+0x1f4>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	f003 0310 	and.w	r3, r3, #16
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d115      	bne.n	800052c <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 fa45 	bl	8000990 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000506:	2005      	movs	r0, #5
 8000508:	f004 fe08 	bl	800511c <HAL_Delay>

    // second try
    write4bits(0x03);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 fa3f 	bl	8000990 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000512:	2005      	movs	r0, #5
 8000514:	f004 fe02 	bl	800511c <HAL_Delay>
    
    // third go!
    write4bits(0x03); 
 8000518:	2003      	movs	r0, #3
 800051a:	f000 fa39 	bl	8000990 <write4bits>
    HAL_Delay(1);
 800051e:	2001      	movs	r0, #1
 8000520:	f004 fdfc 	bl	800511c <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02); 
 8000524:	2002      	movs	r0, #2
 8000526:	f000 fa33 	bl	8000990 <write4bits>
 800052a:	e01d      	b.n	8000568 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 800052c:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <begin+0x1f4>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	f043 0320 	orr.w	r3, r3, #32
 8000534:	b2db      	uxtb	r3, r3
 8000536:	4618      	mov	r0, r3
 8000538:	f000 f9a4 	bl	8000884 <command>
    HAL_Delay(5);  // wait more than 4.1ms
 800053c:	2005      	movs	r0, #5
 800053e:	f004 fded 	bl	800511c <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8000542:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <begin+0x1f4>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	f043 0320 	orr.w	r3, r3, #32
 800054a:	b2db      	uxtb	r3, r3
 800054c:	4618      	mov	r0, r3
 800054e:	f000 f999 	bl	8000884 <command>
    HAL_Delay(1);
 8000552:	2001      	movs	r0, #1
 8000554:	f004 fde2 	bl	800511c <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <begin+0x1f4>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	f043 0320 	orr.w	r3, r3, #32
 8000560:	b2db      	uxtb	r3, r3
 8000562:	4618      	mov	r0, r3
 8000564:	f000 f98e 	bl	8000884 <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
 8000568:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <begin+0x1f4>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	f043 0320 	orr.w	r3, r3, #32
 8000570:	b2db      	uxtb	r3, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f986 	bl	8000884 <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <begin+0x218>)
 800057a:	2204      	movs	r2, #4
 800057c:	701a      	strb	r2, [r3, #0]
  display();
 800057e:	f000 f917 	bl	80007b0 <display>

  // clear it off
  clear();
 8000582:	f000 f8d9 	bl	8000738 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <begin+0x21c>)
 8000588:	2202      	movs	r2, #2
 800058a:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <begin+0x21c>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	f043 0304 	orr.w	r3, r3, #4
 8000594:	b2db      	uxtb	r3, r3
 8000596:	4618      	mov	r0, r3
 8000598:	f000 f974 	bl	8000884 <command>

}
 800059c:	bf00      	nop
 800059e:	3720      	adds	r7, #32
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200003b1 	.word	0x200003b1
 80005a8:	2000039d 	.word	0x2000039d
 80005ac:	200002d8 	.word	0x200002d8
 80005b0:	20000000 	.word	0x20000000
 80005b4:	200003b4 	.word	0x200003b4
 80005b8:	20000394 	.word	0x20000394
 80005bc:	200003b2 	.word	0x200003b2
 80005c0:	200003a0 	.word	0x200003a0
 80005c4:	20000398 	.word	0x20000398
 80005c8:	2000039c 	.word	0x2000039c
 80005cc:	200003b0 	.word	0x200003b0

080005d0 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{  
 80005d0:	b480      	push	{r7}
 80005d2:	b089      	sub	sp, #36	; 0x24
 80005d4:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 80005d6:	4b41      	ldr	r3, [pc, #260]	; (80006dc <enableClock+0x10c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80005de:	d10c      	bne.n	80005fa <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80005e0:	4b3f      	ldr	r3, [pc, #252]	; (80006e0 <enableClock+0x110>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	4a3e      	ldr	r2, [pc, #248]	; (80006e0 <enableClock+0x110>)
 80005e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ea:	6153      	str	r3, [r2, #20]
 80005ec:	4b3c      	ldr	r3, [pc, #240]	; (80006e0 <enableClock+0x110>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005f4:	61fb      	str	r3, [r7, #28]
 80005f6:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 80005f8:	e06a      	b.n	80006d0 <enableClock+0x100>
  else if(_port == GPIOB)
 80005fa:	4b38      	ldr	r3, [pc, #224]	; (80006dc <enableClock+0x10c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a39      	ldr	r2, [pc, #228]	; (80006e4 <enableClock+0x114>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d10c      	bne.n	800061e <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000604:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <enableClock+0x110>)
 8000606:	695b      	ldr	r3, [r3, #20]
 8000608:	4a35      	ldr	r2, [pc, #212]	; (80006e0 <enableClock+0x110>)
 800060a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800060e:	6153      	str	r3, [r2, #20]
 8000610:	4b33      	ldr	r3, [pc, #204]	; (80006e0 <enableClock+0x110>)
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000618:	61bb      	str	r3, [r7, #24]
 800061a:	69bb      	ldr	r3, [r7, #24]
}
 800061c:	e058      	b.n	80006d0 <enableClock+0x100>
  else if(_port == GPIOB)
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <enableClock+0x10c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a30      	ldr	r2, [pc, #192]	; (80006e4 <enableClock+0x114>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d10c      	bne.n	8000642 <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000628:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <enableClock+0x110>)
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	4a2c      	ldr	r2, [pc, #176]	; (80006e0 <enableClock+0x110>)
 800062e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000632:	6153      	str	r3, [r2, #20]
 8000634:	4b2a      	ldr	r3, [pc, #168]	; (80006e0 <enableClock+0x110>)
 8000636:	695b      	ldr	r3, [r3, #20]
 8000638:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	697b      	ldr	r3, [r7, #20]
}
 8000640:	e046      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOC)
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <enableClock+0x10c>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a28      	ldr	r2, [pc, #160]	; (80006e8 <enableClock+0x118>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d10c      	bne.n	8000666 <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800064c:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <enableClock+0x110>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	4a23      	ldr	r2, [pc, #140]	; (80006e0 <enableClock+0x110>)
 8000652:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000656:	6153      	str	r3, [r2, #20]
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <enableClock+0x110>)
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000660:	613b      	str	r3, [r7, #16]
 8000662:	693b      	ldr	r3, [r7, #16]
}
 8000664:	e034      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOD)
 8000666:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <enableClock+0x10c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a20      	ldr	r2, [pc, #128]	; (80006ec <enableClock+0x11c>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d10c      	bne.n	800068a <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <enableClock+0x110>)
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	4a1a      	ldr	r2, [pc, #104]	; (80006e0 <enableClock+0x110>)
 8000676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800067a:	6153      	str	r3, [r2, #20]
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <enableClock+0x110>)
 800067e:	695b      	ldr	r3, [r3, #20]
 8000680:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fb      	ldr	r3, [r7, #12]
}
 8000688:	e022      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOE)
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <enableClock+0x10c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <enableClock+0x120>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d10c      	bne.n	80006ae <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <enableClock+0x110>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <enableClock+0x110>)
 800069a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800069e:	6153      	str	r3, [r2, #20]
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <enableClock+0x110>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
}
 80006ac:	e010      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOF)
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <enableClock+0x10c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a10      	ldr	r2, [pc, #64]	; (80006f4 <enableClock+0x124>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d10b      	bne.n	80006d0 <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <enableClock+0x110>)
 80006ba:	695b      	ldr	r3, [r3, #20]
 80006bc:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <enableClock+0x110>)
 80006be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006c2:	6153      	str	r3, [r2, #20]
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <enableClock+0x110>)
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
}
 80006d0:	bf00      	nop
 80006d2:	3724      	adds	r7, #36	; 0x24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	20000398 	.word	0x20000398
 80006e0:	40021000 	.word	0x40021000
 80006e4:	48000400 	.word	0x48000400
 80006e8:	48000800 	.word	0x48000800
 80006ec:	48000c00 	.word	0x48000c00
 80006f0:	48001000 	.word	0x48001000
 80006f4:	48001400 	.word	0x48001400

080006f8 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
 8000704:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <setRowOffsets+0x3c>)
 800070c:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <setRowOffsets+0x3c>)
 8000714:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <setRowOffsets+0x3c>)
 800071c:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b04      	ldr	r3, [pc, #16]	; (8000734 <setRowOffsets+0x3c>)
 8000724:	70da      	strb	r2, [r3, #3]
}
 8000726:	bf00      	nop
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	20000390 	.word	0x20000390

08000738 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 800073c:	2001      	movs	r0, #1
 800073e:	f000 f8a1 	bl	8000884 <command>
  HAL_Delay(2);  // this command takes a long time!
 8000742:	2002      	movs	r0, #2
 8000744:	f004 fcea 	bl	800511c <HAL_Delay>
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	4613      	mov	r3, r2
 800075a:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 800075c:	2304      	movs	r3, #4
 800075e:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 8000760:	79bb      	ldrb	r3, [r7, #6]
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	429a      	cmp	r2, r3
 8000766:	d803      	bhi.n	8000770 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	b2db      	uxtb	r3, r3
 800076c:	3b01      	subs	r3, #1
 800076e:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8000770:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <setCursor+0x5c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	79ba      	ldrb	r2, [r7, #6]
 8000776:	429a      	cmp	r2, r3
 8000778:	d303      	bcc.n	8000782 <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <setCursor+0x5c>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	3b01      	subs	r3, #1
 8000780:	71bb      	strb	r3, [r7, #6]
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 8000782:	79bb      	ldrb	r3, [r7, #6]
 8000784:	4a09      	ldr	r2, [pc, #36]	; (80007ac <setCursor+0x60>)
 8000786:	5cd2      	ldrb	r2, [r2, r3]
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	4413      	add	r3, r2
 800078c:	b2db      	uxtb	r3, r3
 800078e:	b25b      	sxtb	r3, r3
 8000790:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000794:	b25b      	sxtb	r3, r3
 8000796:	b2db      	uxtb	r3, r3
 8000798:	4618      	mov	r0, r3
 800079a:	f000 f873 	bl	8000884 <command>
}
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	2000039d 	.word	0x2000039d
 80007ac:	20000390 	.word	0x20000390

080007b0 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <display+0x28>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <display+0x28>)
 80007c0:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <display+0x28>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	f043 0308 	orr.w	r3, r3, #8
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 f859 	bl	8000884 <command>
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	2000039c 	.word	0x2000039c

080007dc <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d101      	bne.n	80007ee <print+0x12>
 80007ea:	2300      	movs	r3, #0
 80007ec:	e01d      	b.n	800082a <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff fcec 	bl	80001d0 <strlen>
 80007f8:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]

  while (size--) {
 80007fe:	e00c      	b.n	800081a <print+0x3e>
    if (write(*buffer++)) n++;
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	1c5a      	adds	r2, r3, #1
 8000804:	617a      	str	r2, [r7, #20]
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f000 f849 	bl	80008a0 <write>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d008      	beq.n	8000826 <print+0x4a>
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	3301      	adds	r3, #1
 8000818:	60fb      	str	r3, [r7, #12]
  while (size--) {
 800081a:	693b      	ldr	r3, [r7, #16]
 800081c:	1e5a      	subs	r2, r3, #1
 800081e:	613a      	str	r2, [r7, #16]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d1ed      	bne.n	8000800 <print+0x24>
 8000824:	e000      	b.n	8000828 <print+0x4c>
    else break;
 8000826:	bf00      	nop
  }
  return n;
 8000828:	68fb      	ldr	r3, [r7, #12]
}
 800082a:	4618      	mov	r0, r3
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <createChar>:

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void createChar(uint8_t location, uint8_t charmap[]) {
 8000832:	b580      	push	{r7, lr}
 8000834:	b084      	sub	sp, #16
 8000836:	af00      	add	r7, sp, #0
 8000838:	4603      	mov	r3, r0
 800083a:	6039      	str	r1, [r7, #0]
 800083c:	71fb      	strb	r3, [r7, #7]
  location &= 0x7; // we only have 8 locations 0-7
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	f003 0307 	and.w	r3, r3, #7
 8000844:	71fb      	strb	r3, [r7, #7]
  command(LCD_SETCGRAMADDR | (location << 3));
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	b25b      	sxtb	r3, r3
 800084c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000850:	b25b      	sxtb	r3, r3
 8000852:	b2db      	uxtb	r3, r3
 8000854:	4618      	mov	r0, r3
 8000856:	f000 f815 	bl	8000884 <command>
  for (int i=0; i<8; i++) {
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	e009      	b.n	8000874 <createChar+0x42>
    write(charmap[i]);
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	683a      	ldr	r2, [r7, #0]
 8000864:	4413      	add	r3, r2
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4618      	mov	r0, r3
 800086a:	f000 f819 	bl	80008a0 <write>
  for (int i=0; i<8; i++) {
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3301      	adds	r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	2b07      	cmp	r3, #7
 8000878:	ddf2      	ble.n	8000860 <createChar+0x2e>
  }
}
 800087a:	bf00      	nop
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <command>:

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f814 	bl	80008c0 <send>
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <write>:

inline size_t write(uint8_t value) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2101      	movs	r1, #1
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f806 	bl	80008c0 <send>
  return 1; // assume sucess
 80008b4:	2301      	movs	r3, #1
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	460a      	mov	r2, r1
 80008ca:	71fb      	strb	r3, [r7, #7]
 80008cc:	4613      	mov	r3, r2
 80008ce:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <send+0x6c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a16      	ldr	r2, [pc, #88]	; (8000930 <send+0x70>)
 80008d6:	8811      	ldrh	r1, [r2, #0]
 80008d8:	79ba      	ldrb	r2, [r7, #6]
 80008da:	4618      	mov	r0, r3
 80008dc:	f006 fa84 	bl	8006de8 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <send+0x74>)
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	2bff      	cmp	r3, #255	; 0xff
 80008e6:	d007      	beq.n	80008f8 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <send+0x6c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a11      	ldr	r2, [pc, #68]	; (8000934 <send+0x74>)
 80008ee:	8811      	ldrh	r1, [r2, #0]
 80008f0:	2200      	movs	r2, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f006 fa78 	bl	8006de8 <HAL_GPIO_WritePin>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <send+0x78>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	f003 0310 	and.w	r3, r3, #16
 8000900:	2b00      	cmp	r3, #0
 8000902:	d004      	beq.n	800090e <send+0x4e>
    write8bits(value); 
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f86c 	bl	80009e4 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 800090c:	e009      	b.n	8000922 <send+0x62>
    write4bits(value>>4);
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	091b      	lsrs	r3, r3, #4
 8000912:	b2db      	uxtb	r3, r3
 8000914:	4618      	mov	r0, r3
 8000916:	f000 f83b 	bl	8000990 <write4bits>
    write4bits(value);
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	4618      	mov	r0, r3
 800091e:	f000 f837 	bl	8000990 <write4bits>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000398 	.word	0x20000398
 8000930:	200003b4 	.word	0x200003b4
 8000934:	20000394 	.word	0x20000394
 8000938:	200003b1 	.word	0x200003b1

0800093c <pulseEnable>:

void pulseEnable(void) {
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <pulseEnable+0x4c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a11      	ldr	r2, [pc, #68]	; (800098c <pulseEnable+0x50>)
 8000946:	8811      	ldrh	r1, [r2, #0]
 8000948:	2200      	movs	r2, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f006 fa4c 	bl	8006de8 <HAL_GPIO_WritePin>
  HAL_Delay(1);    
 8000950:	2001      	movs	r0, #1
 8000952:	f004 fbe3 	bl	800511c <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <pulseEnable+0x4c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a0c      	ldr	r2, [pc, #48]	; (800098c <pulseEnable+0x50>)
 800095c:	8811      	ldrh	r1, [r2, #0]
 800095e:	2201      	movs	r2, #1
 8000960:	4618      	mov	r0, r3
 8000962:	f006 fa41 	bl	8006de8 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 8000966:	2001      	movs	r0, #1
 8000968:	f004 fbd8 	bl	800511c <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <pulseEnable+0x4c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a06      	ldr	r2, [pc, #24]	; (800098c <pulseEnable+0x50>)
 8000972:	8811      	ldrh	r1, [r2, #0]
 8000974:	2200      	movs	r2, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f006 fa36 	bl	8006de8 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 800097c:	2001      	movs	r0, #1
 800097e:	f004 fbcd 	bl	800511c <HAL_Delay>
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000398 	.word	0x20000398
 800098c:	200003b2 	.word	0x200003b2

08000990 <write4bits>:

void write4bits(uint8_t value) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	e013      	b.n	80009c8 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <write4bits+0x4c>)
 80009a2:	6818      	ldr	r0, [r3, #0]
 80009a4:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <write4bits+0x50>)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80009ac:	79fa      	ldrb	r2, [r7, #7]
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	fa42 f303 	asr.w	r3, r2, r3
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	461a      	mov	r2, r3
 80009be:	f006 fa13 	bl	8006de8 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	3301      	adds	r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	dde8      	ble.n	80009a0 <write4bits+0x10>
  }

  pulseEnable();
 80009ce:	f7ff ffb5 	bl	800093c <pulseEnable>
}
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000398 	.word	0x20000398
 80009e0:	200003a0 	.word	0x200003a0

080009e4 <write8bits>:

void write8bits(uint8_t value) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	e013      	b.n	8000a1c <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <write8bits+0x4c>)
 80009f6:	6818      	ldr	r0, [r3, #0]
 80009f8:	4a0e      	ldr	r2, [pc, #56]	; (8000a34 <write8bits+0x50>)
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000a00:	79fa      	ldrb	r2, [r7, #7]
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	fa42 f303 	asr.w	r3, r2, r3
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	461a      	mov	r2, r3
 8000a12:	f006 f9e9 	bl	8006de8 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2b07      	cmp	r3, #7
 8000a20:	dde8      	ble.n	80009f4 <write8bits+0x10>
  }
  
  pulseEnable();
 8000a22:	f7ff ff8b 	bl	800093c <pulseEnable>
}
 8000a26:	bf00      	nop
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000398 	.word	0x20000398
 8000a34:	200003a0 	.word	0x200003a0

08000a38 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a3c:	f3bf 8f4f 	dsb	sy
}
 8000a40:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <__NVIC_SystemReset+0x24>)
 8000a44:	68db      	ldr	r3, [r3, #12]
 8000a46:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000a4a:	4904      	ldr	r1, [pc, #16]	; (8000a5c <__NVIC_SystemReset+0x24>)
 8000a4c:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <__NVIC_SystemReset+0x28>)
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a52:	f3bf 8f4f 	dsb	sy
}
 8000a56:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <__NVIC_SystemReset+0x20>
 8000a5c:	e000ed00 	.word	0xe000ed00
 8000a60:	05fa0004 	.word	0x05fa0004

08000a64 <start_page>:
  0x04,
  0x07,
  0x00
};

void start_page() {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af04      	add	r7, sp, #16
	LiquidCrystal(GPIOD, GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11, GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14);
 8000a6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a6e:	9303      	str	r3, [sp, #12]
 8000a70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a74:	9302      	str	r3, [sp, #8]
 8000a76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a7a:	9301      	str	r3, [sp, #4]
 8000a7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a80:	9300      	str	r3, [sp, #0]
 8000a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a8e:	487d      	ldr	r0, [pc, #500]	; (8000c84 <start_page+0x220>)
 8000a90:	f7ff fbf6 	bl	8000280 <LiquidCrystal>

	createChar(0, sword);
 8000a94:	497c      	ldr	r1, [pc, #496]	; (8000c88 <start_page+0x224>)
 8000a96:	2000      	movs	r0, #0
 8000a98:	f7ff fecb 	bl	8000832 <createChar>
	createChar(1, enemy);
 8000a9c:	497b      	ldr	r1, [pc, #492]	; (8000c8c <start_page+0x228>)
 8000a9e:	2001      	movs	r0, #1
 8000aa0:	f7ff fec7 	bl	8000832 <createChar>
	createChar(2, ship);
 8000aa4:	497a      	ldr	r1, [pc, #488]	; (8000c90 <start_page+0x22c>)
 8000aa6:	2002      	movs	r0, #2
 8000aa8:	f7ff fec3 	bl	8000832 <createChar>

	setCursor(0,0);
 8000aac:	2100      	movs	r1, #0
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f7ff fe4c 	bl	800074c <setCursor>
	print("#");
 8000ab4:	4877      	ldr	r0, [pc, #476]	; (8000c94 <start_page+0x230>)
 8000ab6:	f7ff fe91 	bl	80007dc <print>
	print("#");
 8000aba:	4876      	ldr	r0, [pc, #472]	; (8000c94 <start_page+0x230>)
 8000abc:	f7ff fe8e 	bl	80007dc <print>
	setCursor(0,1);
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f7ff fe42 	bl	800074c <setCursor>
	print("#");
 8000ac8:	4872      	ldr	r0, [pc, #456]	; (8000c94 <start_page+0x230>)
 8000aca:	f7ff fe87 	bl	80007dc <print>

	setCursor(18,0);
 8000ace:	2100      	movs	r1, #0
 8000ad0:	2012      	movs	r0, #18
 8000ad2:	f7ff fe3b 	bl	800074c <setCursor>
	print("#");
 8000ad6:	486f      	ldr	r0, [pc, #444]	; (8000c94 <start_page+0x230>)
 8000ad8:	f7ff fe80 	bl	80007dc <print>
	print("#");
 8000adc:	486d      	ldr	r0, [pc, #436]	; (8000c94 <start_page+0x230>)
 8000ade:	f7ff fe7d 	bl	80007dc <print>
	setCursor(19,1);
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	2013      	movs	r0, #19
 8000ae6:	f7ff fe31 	bl	800074c <setCursor>
	print("#");
 8000aea:	486a      	ldr	r0, [pc, #424]	; (8000c94 <start_page+0x230>)
 8000aec:	f7ff fe76 	bl	80007dc <print>

	setCursor(20,1);
 8000af0:	2101      	movs	r1, #1
 8000af2:	2014      	movs	r0, #20
 8000af4:	f7ff fe2a 	bl	800074c <setCursor>
	print("#");
 8000af8:	4866      	ldr	r0, [pc, #408]	; (8000c94 <start_page+0x230>)
 8000afa:	f7ff fe6f 	bl	80007dc <print>
	print("#");
 8000afe:	4865      	ldr	r0, [pc, #404]	; (8000c94 <start_page+0x230>)
 8000b00:	f7ff fe6c 	bl	80007dc <print>
	setCursor(20,0);
 8000b04:	2100      	movs	r1, #0
 8000b06:	2014      	movs	r0, #20
 8000b08:	f7ff fe20 	bl	800074c <setCursor>
	print("#");
 8000b0c:	4861      	ldr	r0, [pc, #388]	; (8000c94 <start_page+0x230>)
 8000b0e:	f7ff fe65 	bl	80007dc <print>

	setCursor(38,1);
 8000b12:	2101      	movs	r1, #1
 8000b14:	2026      	movs	r0, #38	; 0x26
 8000b16:	f7ff fe19 	bl	800074c <setCursor>
	print("#");
 8000b1a:	485e      	ldr	r0, [pc, #376]	; (8000c94 <start_page+0x230>)
 8000b1c:	f7ff fe5e 	bl	80007dc <print>
	print("#");
 8000b20:	485c      	ldr	r0, [pc, #368]	; (8000c94 <start_page+0x230>)
 8000b22:	f7ff fe5b 	bl	80007dc <print>
	setCursor(39,0);
 8000b26:	2100      	movs	r1, #0
 8000b28:	2027      	movs	r0, #39	; 0x27
 8000b2a:	f7ff fe0f 	bl	800074c <setCursor>
	print("#");
 8000b2e:	4859      	ldr	r0, [pc, #356]	; (8000c94 <start_page+0x230>)
 8000b30:	f7ff fe54 	bl	80007dc <print>

	setCursor(7,0);
 8000b34:	2100      	movs	r1, #0
 8000b36:	2007      	movs	r0, #7
 8000b38:	f7ff fe08 	bl	800074c <setCursor>
	print("SPACE");
 8000b3c:	4856      	ldr	r0, [pc, #344]	; (8000c98 <start_page+0x234>)
 8000b3e:	f7ff fe4d 	bl	80007dc <print>
	setCursor(5,1);
 8000b42:	2101      	movs	r1, #1
 8000b44:	2005      	movs	r0, #5
 8000b46:	f7ff fe01 	bl	800074c <setCursor>
	print("INVADERS ");
 8000b4a:	4854      	ldr	r0, [pc, #336]	; (8000c9c <start_page+0x238>)
 8000b4c:	f7ff fe46 	bl	80007dc <print>
	write(0);
 8000b50:	2000      	movs	r0, #0
 8000b52:	f7ff fea5 	bl	80008a0 <write>

	int i = 5;
 8000b56:	2305      	movs	r3, #5
 8000b58:	607b      	str	r3, [r7, #4]
	while ( i > 0 )
 8000b5a:	e08a      	b.n	8000c72 <start_page+0x20e>
	{
		if ( i == 5 )
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2b05      	cmp	r3, #5
 8000b60:	d11b      	bne.n	8000b9a <start_page+0x136>
		{
			setCursor(31,0);
 8000b62:	2100      	movs	r1, #0
 8000b64:	201f      	movs	r0, #31
 8000b66:	f7ff fdf1 	bl	800074c <setCursor>
			print(" ");
 8000b6a:	484d      	ldr	r0, [pc, #308]	; (8000ca0 <start_page+0x23c>)
 8000b6c:	f7ff fe36 	bl	80007dc <print>
			setCursor(34,0);
 8000b70:	2100      	movs	r1, #0
 8000b72:	2022      	movs	r0, #34	; 0x22
 8000b74:	f7ff fdea 	bl	800074c <setCursor>
			write(1);
 8000b78:	2001      	movs	r0, #1
 8000b7a:	f7ff fe91 	bl	80008a0 <write>

			setCursor(26,0);
 8000b7e:	2100      	movs	r1, #0
 8000b80:	201a      	movs	r0, #26
 8000b82:	f7ff fde3 	bl	800074c <setCursor>
			print(" ");
 8000b86:	4846      	ldr	r0, [pc, #280]	; (8000ca0 <start_page+0x23c>)
 8000b88:	f7ff fe28 	bl	80007dc <print>
			setCursor(26,1);
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	201a      	movs	r0, #26
 8000b90:	f7ff fddc 	bl	800074c <setCursor>
			write(2);
 8000b94:	2002      	movs	r0, #2
 8000b96:	f7ff fe83 	bl	80008a0 <write>
		}
		if ( i == 4 )
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2b04      	cmp	r3, #4
 8000b9e:	d11b      	bne.n	8000bd8 <start_page+0x174>
		{
			setCursor(34,0);
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	2022      	movs	r0, #34	; 0x22
 8000ba4:	f7ff fdd2 	bl	800074c <setCursor>
			print(" ");
 8000ba8:	483d      	ldr	r0, [pc, #244]	; (8000ca0 <start_page+0x23c>)
 8000baa:	f7ff fe17 	bl	80007dc <print>
			setCursor(33,0);
 8000bae:	2100      	movs	r1, #0
 8000bb0:	2021      	movs	r0, #33	; 0x21
 8000bb2:	f7ff fdcb 	bl	800074c <setCursor>
			write(1);
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	f7ff fe72 	bl	80008a0 <write>

			setCursor(26,1);
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	201a      	movs	r0, #26
 8000bc0:	f7ff fdc4 	bl	800074c <setCursor>
			print(" ");
 8000bc4:	4836      	ldr	r0, [pc, #216]	; (8000ca0 <start_page+0x23c>)
 8000bc6:	f7ff fe09 	bl	80007dc <print>
			setCursor(26,0);
 8000bca:	2100      	movs	r1, #0
 8000bcc:	201a      	movs	r0, #26
 8000bce:	f7ff fdbd 	bl	800074c <setCursor>
			write(2);
 8000bd2:	2002      	movs	r0, #2
 8000bd4:	f7ff fe64 	bl	80008a0 <write>
		}
		if ( i == 3 )
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2b03      	cmp	r3, #3
 8000bdc:	d11b      	bne.n	8000c16 <start_page+0x1b2>
		{
			setCursor(33,0);
 8000bde:	2100      	movs	r1, #0
 8000be0:	2021      	movs	r0, #33	; 0x21
 8000be2:	f7ff fdb3 	bl	800074c <setCursor>
			print(" ");
 8000be6:	482e      	ldr	r0, [pc, #184]	; (8000ca0 <start_page+0x23c>)
 8000be8:	f7ff fdf8 	bl	80007dc <print>
			setCursor(32,0);
 8000bec:	2100      	movs	r1, #0
 8000bee:	2020      	movs	r0, #32
 8000bf0:	f7ff fdac 	bl	800074c <setCursor>
			write(1);
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	f7ff fe53 	bl	80008a0 <write>

			setCursor(26,0);
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	201a      	movs	r0, #26
 8000bfe:	f7ff fda5 	bl	800074c <setCursor>
			print(" ");
 8000c02:	4827      	ldr	r0, [pc, #156]	; (8000ca0 <start_page+0x23c>)
 8000c04:	f7ff fdea 	bl	80007dc <print>
			setCursor(26,1);
 8000c08:	2101      	movs	r1, #1
 8000c0a:	201a      	movs	r0, #26
 8000c0c:	f7ff fd9e 	bl	800074c <setCursor>
			write(2);
 8000c10:	2002      	movs	r0, #2
 8000c12:	f7ff fe45 	bl	80008a0 <write>
		}
		if ( i == 2 )
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d11d      	bne.n	8000c58 <start_page+0x1f4>
		{
			setCursor(32,0);
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	2020      	movs	r0, #32
 8000c20:	f7ff fd94 	bl	800074c <setCursor>
			print(" ");
 8000c24:	481e      	ldr	r0, [pc, #120]	; (8000ca0 <start_page+0x23c>)
 8000c26:	f7ff fdd9 	bl	80007dc <print>
			setCursor(31,0);
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	201f      	movs	r0, #31
 8000c2e:	f7ff fd8d 	bl	800074c <setCursor>
			write(1);
 8000c32:	2001      	movs	r0, #1
 8000c34:	f7ff fe34 	bl	80008a0 <write>

			setCursor(26,1);
 8000c38:	2101      	movs	r1, #1
 8000c3a:	201a      	movs	r0, #26
 8000c3c:	f7ff fd86 	bl	800074c <setCursor>
			print(" ");
 8000c40:	4817      	ldr	r0, [pc, #92]	; (8000ca0 <start_page+0x23c>)
 8000c42:	f7ff fdcb 	bl	80007dc <print>
			setCursor(26,0);
 8000c46:	2100      	movs	r1, #0
 8000c48:	201a      	movs	r0, #26
 8000c4a:	f7ff fd7f 	bl	800074c <setCursor>
			write(2);
 8000c4e:	2002      	movs	r0, #2
 8000c50:	f7ff fe26 	bl	80008a0 <write>
			i = 6;
 8000c54:	2306      	movs	r3, #6
 8000c56:	607b      	str	r3, [r7, #4]
		}
		if ( onMenu == 1 )
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <start_page+0x240>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d101      	bne.n	8000c64 <start_page+0x200>
		{
			i = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	607b      	str	r3, [r7, #4]
		}

		HAL_Delay(1000);
 8000c64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c68:	f004 fa58 	bl	800511c <HAL_Delay>
		i--;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	607b      	str	r3, [r7, #4]
	while ( i > 0 )
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	f73f af71 	bgt.w	8000b5c <start_page+0xf8>
	}

}
 8000c7a:	bf00      	nop
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	48000c00 	.word	0x48000c00
 8000c88:	200001d8 	.word	0x200001d8
 8000c8c:	200001e0 	.word	0x200001e0
 8000c90:	200001e8 	.word	0x200001e8
 8000c94:	0800cd84 	.word	0x0800cd84
 8000c98:	0800cd88 	.word	0x0800cd88
 8000c9c:	0800cd90 	.word	0x0800cd90
 8000ca0:	0800cd9c 	.word	0x0800cd9c
 8000ca4:	200002dc 	.word	0x200002dc

08000ca8 <menu>:

void menu() {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0

	musicOn();
 8000cae:	f003 fbcd 	bl	800444c <musicOn>

	createChar(1, enemy);
 8000cb2:	4943      	ldr	r1, [pc, #268]	; (8000dc0 <menu+0x118>)
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	f7ff fdbc 	bl	8000832 <createChar>

	x = 0;
 8000cba:	4b42      	ldr	r3, [pc, #264]	; (8000dc4 <menu+0x11c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
	int i = 39;
 8000cc0:	2327      	movs	r3, #39	; 0x27
 8000cc2:	607b      	str	r3, [r7, #4]
	while ( onMenu == 1 ) {
 8000cc4:	e05c      	b.n	8000d80 <menu+0xd8>

		HAL_ADC_Start_IT(&hadc1);
 8000cc6:	4840      	ldr	r0, [pc, #256]	; (8000dc8 <menu+0x120>)
 8000cc8:	f004 fc4a 	bl	8005560 <HAL_ADC_Start_IT>

		if ( x == 0 ) {
 8000ccc:	4b3d      	ldr	r3, [pc, #244]	; (8000dc4 <menu+0x11c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d117      	bne.n	8000d04 <menu+0x5c>
			setCursor(0,0);
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f7ff fd38 	bl	800074c <setCursor>
			print("                                                                                  ");
 8000cdc:	483b      	ldr	r0, [pc, #236]	; (8000dcc <menu+0x124>)
 8000cde:	f7ff fd7d 	bl	80007dc <print>

			setCursor(3,1);
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	2003      	movs	r0, #3
 8000ce6:	f7ff fd31 	bl	800074c <setCursor>
			print("Start Game -> B");
 8000cea:	4839      	ldr	r0, [pc, #228]	; (8000dd0 <menu+0x128>)
 8000cec:	f7ff fd76 	bl	80007dc <print>
			setCursor(25,0);
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2019      	movs	r0, #25
 8000cf4:	f7ff fd2a 	bl	800074c <setCursor>
			print("About -> C");
 8000cf8:	4836      	ldr	r0, [pc, #216]	; (8000dd4 <menu+0x12c>)
 8000cfa:	f7ff fd6f 	bl	80007dc <print>

			x = 1;
 8000cfe:	4b31      	ldr	r3, [pc, #196]	; (8000dc4 <menu+0x11c>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	601a      	str	r2, [r3, #0]
		}

		setCursor(i,1);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	2101      	movs	r1, #1
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fd1e 	bl	800074c <setCursor>
		write(1);
 8000d10:	2001      	movs	r0, #1
 8000d12:	f7ff fdc5 	bl	80008a0 <write>

		HAL_Delay(250);
 8000d16:	20fa      	movs	r0, #250	; 0xfa
 8000d18:	f004 fa00 	bl	800511c <HAL_Delay>
		setCursor(8,0);
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	2008      	movs	r0, #8
 8000d20:	f7ff fd14 	bl	800074c <setCursor>
		print("MENU");
 8000d24:	482c      	ldr	r0, [pc, #176]	; (8000dd8 <menu+0x130>)
 8000d26:	f7ff fd59 	bl	80007dc <print>
		HAL_Delay(550);
 8000d2a:	f240 2026 	movw	r0, #550	; 0x226
 8000d2e:	f004 f9f5 	bl	800511c <HAL_Delay>
		setCursor(8,0);
 8000d32:	2100      	movs	r1, #0
 8000d34:	2008      	movs	r0, #8
 8000d36:	f7ff fd09 	bl	800074c <setCursor>
		print("    ");
 8000d3a:	4828      	ldr	r0, [pc, #160]	; (8000ddc <menu+0x134>)
 8000d3c:	f7ff fd4e 	bl	80007dc <print>

		setCursor(i,1);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	2101      	movs	r1, #1
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fd00 	bl	800074c <setCursor>
		print(" ");
 8000d4c:	4824      	ldr	r0, [pc, #144]	; (8000de0 <menu+0x138>)
 8000d4e:	f7ff fd45 	bl	80007dc <print>
		i--;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	3b01      	subs	r3, #1
 8000d56:	607b      	str	r3, [r7, #4]
		if ( i == 19 ) i = 39;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2b13      	cmp	r3, #19
 8000d5c:	d101      	bne.n	8000d62 <menu+0xba>
 8000d5e:	2327      	movs	r3, #39	; 0x27
 8000d60:	607b      	str	r3, [r7, #4]

		if( kpad == 'B' || kpad == 'C' || kpad == 'D') onMenu = 0;
 8000d62:	4b20      	ldr	r3, [pc, #128]	; (8000de4 <menu+0x13c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2b42      	cmp	r3, #66	; 0x42
 8000d68:	d007      	beq.n	8000d7a <menu+0xd2>
 8000d6a:	4b1e      	ldr	r3, [pc, #120]	; (8000de4 <menu+0x13c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2b43      	cmp	r3, #67	; 0x43
 8000d70:	d003      	beq.n	8000d7a <menu+0xd2>
 8000d72:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <menu+0x13c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2b44      	cmp	r3, #68	; 0x44
 8000d78:	d102      	bne.n	8000d80 <menu+0xd8>
 8000d7a:	4b1b      	ldr	r3, [pc, #108]	; (8000de8 <menu+0x140>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
	while ( onMenu == 1 ) {
 8000d80:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <menu+0x140>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d09e      	beq.n	8000cc6 <menu+0x1e>
	}
	if( kpad == 'C' ) {
 8000d88:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <menu+0x13c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b43      	cmp	r3, #67	; 0x43
 8000d8e:	d102      	bne.n	8000d96 <menu+0xee>
		about();
 8000d90:	f000 f82e 	bl	8000df0 <about>
		startGame();
	} else if ( kpad == 'D' ) {
		boss_fight();
	}

}
 8000d94:	e00f      	b.n	8000db6 <menu+0x10e>
	} else if ( kpad == 'B' ) {
 8000d96:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <menu+0x13c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2b42      	cmp	r3, #66	; 0x42
 8000d9c:	d105      	bne.n	8000daa <menu+0x102>
		start_game = 1;
 8000d9e:	4b13      	ldr	r3, [pc, #76]	; (8000dec <menu+0x144>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	601a      	str	r2, [r3, #0]
		startGame();
 8000da4:	f000 f8ba 	bl	8000f1c <startGame>
}
 8000da8:	e005      	b.n	8000db6 <menu+0x10e>
	} else if ( kpad == 'D' ) {
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <menu+0x13c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2b44      	cmp	r3, #68	; 0x44
 8000db0:	d101      	bne.n	8000db6 <menu+0x10e>
		boss_fight();
 8000db2:	f002 f861 	bl	8002e78 <boss_fight>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	200001e0 	.word	0x200001e0
 8000dc4:	200002e0 	.word	0x200002e0
 8000dc8:	20000e0c 	.word	0x20000e0c
 8000dcc:	0800cda0 	.word	0x0800cda0
 8000dd0:	0800cdf4 	.word	0x0800cdf4
 8000dd4:	0800ce04 	.word	0x0800ce04
 8000dd8:	0800ce10 	.word	0x0800ce10
 8000ddc:	0800ce18 	.word	0x0800ce18
 8000de0:	0800cd9c 	.word	0x0800cd9c
 8000de4:	20000244 	.word	0x20000244
 8000de8:	200002dc 	.word	0x200002dc
 8000dec:	200002e4 	.word	0x200002e4

08000df0 <about>:

void about() {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af02      	add	r7, sp, #8

	x = 0;
 8000df6:	4b3b      	ldr	r3, [pc, #236]	; (8000ee4 <about+0xf4>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
	while ( kpad == 'C' ) {
 8000dfc:	e060      	b.n	8000ec0 <about+0xd0>
		if ( x == 0 )
 8000dfe:	4b39      	ldr	r3, [pc, #228]	; (8000ee4 <about+0xf4>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d117      	bne.n	8000e36 <about+0x46>
		{
			setCursor(0,0);
 8000e06:	2100      	movs	r1, #0
 8000e08:	2000      	movs	r0, #0
 8000e0a:	f7ff fc9f 	bl	800074c <setCursor>
			print("                                                                                  ");
 8000e0e:	4836      	ldr	r0, [pc, #216]	; (8000ee8 <about+0xf8>)
 8000e10:	f7ff fce4 	bl	80007dc <print>
			setCursor(5,1);
 8000e14:	2101      	movs	r1, #1
 8000e16:	2005      	movs	r0, #5
 8000e18:	f7ff fc98 	bl	800074c <setCursor>
			print("Ali Dashti");
 8000e1c:	4833      	ldr	r0, [pc, #204]	; (8000eec <about+0xfc>)
 8000e1e:	f7ff fcdd 	bl	80007dc <print>
			setCursor(23,0);
 8000e22:	2100      	movs	r1, #0
 8000e24:	2017      	movs	r0, #23
 8000e26:	f7ff fc91 	bl	800074c <setCursor>
			print("Sajjad Cheravi");
 8000e2a:	4831      	ldr	r0, [pc, #196]	; (8000ef0 <about+0x100>)
 8000e2c:	f7ff fcd6 	bl	80007dc <print>
			x = 1;
 8000e30:	4b2c      	ldr	r3, [pc, #176]	; (8000ee4 <about+0xf4>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	601a      	str	r2, [r3, #0]
		}

		HAL_Delay(250);
 8000e36:	20fa      	movs	r0, #250	; 0xfa
 8000e38:	f004 f970 	bl	800511c <HAL_Delay>
		setCursor(7,0);
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2007      	movs	r0, #7
 8000e40:	f7ff fc84 	bl	800074c <setCursor>
		print("about");
 8000e44:	482b      	ldr	r0, [pc, #172]	; (8000ef4 <about+0x104>)
 8000e46:	f7ff fcc9 	bl	80007dc <print>
		HAL_Delay(550);
 8000e4a:	f240 2026 	movw	r0, #550	; 0x226
 8000e4e:	f004 f965 	bl	800511c <HAL_Delay>
		setCursor(7,0);
 8000e52:	2100      	movs	r1, #0
 8000e54:	2007      	movs	r0, #7
 8000e56:	f7ff fc79 	bl	800074c <setCursor>
		print("     ");
 8000e5a:	4827      	ldr	r0, [pc, #156]	; (8000ef8 <about+0x108>)
 8000e5c:	f7ff fcbe 	bl	80007dc <print>

		HAL_RTC_GetTime(&hrtc, &mytime, RTC_FORMAT_BIN);
 8000e60:	2200      	movs	r2, #0
 8000e62:	4926      	ldr	r1, [pc, #152]	; (8000efc <about+0x10c>)
 8000e64:	4826      	ldr	r0, [pc, #152]	; (8000f00 <about+0x110>)
 8000e66:	f007 fe3b 	bl	8008ae0 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &mydate, RTC_FORMAT_BIN);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	4925      	ldr	r1, [pc, #148]	; (8000f04 <about+0x114>)
 8000e6e:	4824      	ldr	r0, [pc, #144]	; (8000f00 <about+0x110>)
 8000e70:	f007 ff3b 	bl	8008cea <HAL_RTC_GetDate>
		setCursor(20,1);
 8000e74:	2101      	movs	r1, #1
 8000e76:	2014      	movs	r0, #20
 8000e78:	f7ff fc68 	bl	800074c <setCursor>
		sprintf(Time, " %2d:%2d:%2d ", mytime.Hours, mytime.Minutes, mytime.Seconds);
 8000e7c:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <about+0x10c>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	461a      	mov	r2, r3
 8000e82:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <about+0x10c>)
 8000e84:	785b      	ldrb	r3, [r3, #1]
 8000e86:	4619      	mov	r1, r3
 8000e88:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <about+0x10c>)
 8000e8a:	789b      	ldrb	r3, [r3, #2]
 8000e8c:	9300      	str	r3, [sp, #0]
 8000e8e:	460b      	mov	r3, r1
 8000e90:	491d      	ldr	r1, [pc, #116]	; (8000f08 <about+0x118>)
 8000e92:	481e      	ldr	r0, [pc, #120]	; (8000f0c <about+0x11c>)
 8000e94:	f00a fdd6 	bl	800ba44 <siprintf>
		print(Time);
 8000e98:	481c      	ldr	r0, [pc, #112]	; (8000f0c <about+0x11c>)
 8000e9a:	f7ff fc9f 	bl	80007dc <print>
		sprintf(Date, " 20%d/%d/%d", mydate.Year, mydate.Month, mydate.Date);
 8000e9e:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <about+0x114>)
 8000ea0:	78db      	ldrb	r3, [r3, #3]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <about+0x114>)
 8000ea6:	785b      	ldrb	r3, [r3, #1]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <about+0x114>)
 8000eac:	789b      	ldrb	r3, [r3, #2]
 8000eae:	9300      	str	r3, [sp, #0]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	4917      	ldr	r1, [pc, #92]	; (8000f10 <about+0x120>)
 8000eb4:	4817      	ldr	r0, [pc, #92]	; (8000f14 <about+0x124>)
 8000eb6:	f00a fdc5 	bl	800ba44 <siprintf>
		print(Date);
 8000eba:	4816      	ldr	r0, [pc, #88]	; (8000f14 <about+0x124>)
 8000ebc:	f7ff fc8e 	bl	80007dc <print>
	while ( kpad == 'C' ) {
 8000ec0:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <about+0x128>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b43      	cmp	r3, #67	; 0x43
 8000ec6:	d09a      	beq.n	8000dfe <about+0xe>

	}
	if ( kpad == 'A' ) {
 8000ec8:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <about+0x128>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b41      	cmp	r3, #65	; 0x41
 8000ece:	d101      	bne.n	8000ed4 <about+0xe4>
		NVIC_SystemReset();
 8000ed0:	f7ff fdb2 	bl	8000a38 <__NVIC_SystemReset>
	} else {
		kpad = 'C';
 8000ed4:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <about+0x128>)
 8000ed6:	2243      	movs	r2, #67	; 0x43
 8000ed8:	601a      	str	r2, [r3, #0]
		about();
 8000eda:	f7ff ff89 	bl	8000df0 <about>
	}

}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	200002e0 	.word	0x200002e0
 8000ee8:	0800cda0 	.word	0x0800cda0
 8000eec:	0800ce20 	.word	0x0800ce20
 8000ef0:	0800ce2c 	.word	0x0800ce2c
 8000ef4:	0800ce3c 	.word	0x0800ce3c
 8000ef8:	0800ce44 	.word	0x0800ce44
 8000efc:	2000193c 	.word	0x2000193c
 8000f00:	20000e5c 	.word	0x20000e5c
 8000f04:	20000e7c 	.word	0x20000e7c
 8000f08:	0800ce4c 	.word	0x0800ce4c
 8000f0c:	200012a4 	.word	0x200012a4
 8000f10:	0800ce5c 	.word	0x0800ce5c
 8000f14:	20000e00 	.word	0x20000e00
 8000f18:	20000244 	.word	0x20000244

08000f1c <startGame>:


void startGame() {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0

	x = 0;
 8000f20:	4ba5      	ldr	r3, [pc, #660]	; (80011b8 <startGame+0x29c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
	while ( kpad == 'B' ) {
 8000f26:	e13a      	b.n	800119e <startGame+0x282>
		if ( x == 0 && start_game == 1 )
 8000f28:	4ba3      	ldr	r3, [pc, #652]	; (80011b8 <startGame+0x29c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d121      	bne.n	8000f74 <startGame+0x58>
 8000f30:	4ba2      	ldr	r3, [pc, #648]	; (80011bc <startGame+0x2a0>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d11d      	bne.n	8000f74 <startGame+0x58>
		{
			HAL_UART_Transmit(&huart2, msg1, sizeof(unsigned char) * 18, 100);
 8000f38:	2364      	movs	r3, #100	; 0x64
 8000f3a:	2212      	movs	r2, #18
 8000f3c:	49a0      	ldr	r1, [pc, #640]	; (80011c0 <startGame+0x2a4>)
 8000f3e:	48a1      	ldr	r0, [pc, #644]	; (80011c4 <startGame+0x2a8>)
 8000f40:	f009 fac2 	bl	800a4c8 <HAL_UART_Transmit>

			setCursor(0,0);
 8000f44:	2100      	movs	r1, #0
 8000f46:	2000      	movs	r0, #0
 8000f48:	f7ff fc00 	bl	800074c <setCursor>
			print("                                                                                  ");
 8000f4c:	489e      	ldr	r0, [pc, #632]	; (80011c8 <startGame+0x2ac>)
 8000f4e:	f7ff fc45 	bl	80007dc <print>
			setCursor(2,1);
 8000f52:	2101      	movs	r1, #1
 8000f54:	2002      	movs	r0, #2
 8000f56:	f7ff fbf9 	bl	800074c <setCursor>
			print("Enter your name");
 8000f5a:	489c      	ldr	r0, [pc, #624]	; (80011cc <startGame+0x2b0>)
 8000f5c:	f7ff fc3e 	bl	80007dc <print>
			setCursor(22,0);
 8000f60:	2100      	movs	r1, #0
 8000f62:	2016      	movs	r0, #22
 8000f64:	f7ff fbf2 	bl	800074c <setCursor>
			print("and then press *");
 8000f68:	4899      	ldr	r0, [pc, #612]	; (80011d0 <startGame+0x2b4>)
 8000f6a:	f7ff fc37 	bl	80007dc <print>
			x = 1;
 8000f6e:	4b92      	ldr	r3, [pc, #584]	; (80011b8 <startGame+0x29c>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	601a      	str	r2, [r3, #0]
		}
		if ( x == 0 && start_game == 2 )
 8000f74:	4b90      	ldr	r3, [pc, #576]	; (80011b8 <startGame+0x29c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d122      	bne.n	8000fc2 <startGame+0xa6>
 8000f7c:	4b8f      	ldr	r3, [pc, #572]	; (80011bc <startGame+0x2a0>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d11e      	bne.n	8000fc2 <startGame+0xa6>
		{
			setCursor(0,0);
 8000f84:	2100      	movs	r1, #0
 8000f86:	2000      	movs	r0, #0
 8000f88:	f7ff fbe0 	bl	800074c <setCursor>
			print("                                                                                  ");
 8000f8c:	488e      	ldr	r0, [pc, #568]	; (80011c8 <startGame+0x2ac>)
 8000f8e:	f7ff fc25 	bl	80007dc <print>
			setCursor(2,0);
 8000f92:	2100      	movs	r1, #0
 8000f94:	2002      	movs	r0, #2
 8000f96:	f7ff fbd9 	bl	800074c <setCursor>
			print("your name is :");
 8000f9a:	488e      	ldr	r0, [pc, #568]	; (80011d4 <startGame+0x2b8>)
 8000f9c:	f7ff fc1e 	bl	80007dc <print>
			setCursor(3,1);
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	2003      	movs	r0, #3
 8000fa4:	f7ff fbd2 	bl	800074c <setCursor>
			print(name);
 8000fa8:	488b      	ldr	r0, [pc, #556]	; (80011d8 <startGame+0x2bc>)
 8000faa:	f7ff fc17 	bl	80007dc <print>
			setCursor(24,0);
 8000fae:	2100      	movs	r1, #0
 8000fb0:	2018      	movs	r0, #24
 8000fb2:	f7ff fbcb 	bl	800074c <setCursor>
			print("accept -> *");
 8000fb6:	4889      	ldr	r0, [pc, #548]	; (80011dc <startGame+0x2c0>)
 8000fb8:	f7ff fc10 	bl	80007dc <print>
			x = 1;
 8000fbc:	4b7e      	ldr	r3, [pc, #504]	; (80011b8 <startGame+0x29c>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	601a      	str	r2, [r3, #0]
		}
		if ( x == 0 && start_game == 3 )
 8000fc2:	4b7d      	ldr	r3, [pc, #500]	; (80011b8 <startGame+0x29c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d129      	bne.n	800101e <startGame+0x102>
 8000fca:	4b7c      	ldr	r3, [pc, #496]	; (80011bc <startGame+0x2a0>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2b03      	cmp	r3, #3
 8000fd0:	d125      	bne.n	800101e <startGame+0x102>
		{
			setCursor(0,0);
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	f7ff fbb9 	bl	800074c <setCursor>
			print("                                                                                  ");
 8000fda:	487b      	ldr	r0, [pc, #492]	; (80011c8 <startGame+0x2ac>)
 8000fdc:	f7ff fbfe 	bl	80007dc <print>
			setCursor(2,0);
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	2002      	movs	r0, #2
 8000fe4:	f7ff fbb2 	bl	800074c <setCursor>
			print("Select game mode");
 8000fe8:	487d      	ldr	r0, [pc, #500]	; (80011e0 <startGame+0x2c4>)
 8000fea:	f7ff fbf7 	bl	80007dc <print>
			setCursor(5,1);
 8000fee:	2101      	movs	r1, #1
 8000ff0:	2005      	movs	r0, #5
 8000ff2:	f7ff fbab 	bl	800074c <setCursor>
			print("Easy -> 1");
 8000ff6:	487b      	ldr	r0, [pc, #492]	; (80011e4 <startGame+0x2c8>)
 8000ff8:	f7ff fbf0 	bl	80007dc <print>
			setCursor(24,0);
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	2018      	movs	r0, #24
 8001000:	f7ff fba4 	bl	800074c <setCursor>
			print("Normal -> 2");
 8001004:	4878      	ldr	r0, [pc, #480]	; (80011e8 <startGame+0x2cc>)
 8001006:	f7ff fbe9 	bl	80007dc <print>
			setCursor(25,1);
 800100a:	2101      	movs	r1, #1
 800100c:	2019      	movs	r0, #25
 800100e:	f7ff fb9d 	bl	800074c <setCursor>
			print("Hard -> 3");
 8001012:	4876      	ldr	r0, [pc, #472]	; (80011ec <startGame+0x2d0>)
 8001014:	f7ff fbe2 	bl	80007dc <print>
			x = 1;
 8001018:	4b67      	ldr	r3, [pc, #412]	; (80011b8 <startGame+0x29c>)
 800101a:	2201      	movs	r2, #1
 800101c:	601a      	str	r2, [r3, #0]
		}
		if ( x == 0 && start_game == 4 )
 800101e:	4b66      	ldr	r3, [pc, #408]	; (80011b8 <startGame+0x29c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d145      	bne.n	80010b2 <startGame+0x196>
 8001026:	4b65      	ldr	r3, [pc, #404]	; (80011bc <startGame+0x2a0>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b04      	cmp	r3, #4
 800102c:	d141      	bne.n	80010b2 <startGame+0x196>
		{
			setCursor(0,0);
 800102e:	2100      	movs	r1, #0
 8001030:	2000      	movs	r0, #0
 8001032:	f7ff fb8b 	bl	800074c <setCursor>
			print("                                                                                  ");
 8001036:	4864      	ldr	r0, [pc, #400]	; (80011c8 <startGame+0x2ac>)
 8001038:	f7ff fbd0 	bl	80007dc <print>
			if ( mode == 1 )
 800103c:	4b6c      	ldr	r3, [pc, #432]	; (80011f0 <startGame+0x2d4>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d107      	bne.n	8001054 <startGame+0x138>
			{
				setCursor(4,0);
 8001044:	2100      	movs	r1, #0
 8001046:	2004      	movs	r0, #4
 8001048:	f7ff fb80 	bl	800074c <setCursor>
				print("mode : Easy");
 800104c:	4869      	ldr	r0, [pc, #420]	; (80011f4 <startGame+0x2d8>)
 800104e:	f7ff fbc5 	bl	80007dc <print>
 8001052:	e016      	b.n	8001082 <startGame+0x166>
			}
			else if ( mode == 2 )
 8001054:	4b66      	ldr	r3, [pc, #408]	; (80011f0 <startGame+0x2d4>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b02      	cmp	r3, #2
 800105a:	d107      	bne.n	800106c <startGame+0x150>
			{
				setCursor(4,0);
 800105c:	2100      	movs	r1, #0
 800105e:	2004      	movs	r0, #4
 8001060:	f7ff fb74 	bl	800074c <setCursor>
				print("mode : Normal");
 8001064:	4864      	ldr	r0, [pc, #400]	; (80011f8 <startGame+0x2dc>)
 8001066:	f7ff fbb9 	bl	80007dc <print>
 800106a:	e00a      	b.n	8001082 <startGame+0x166>
			}
			else if ( mode == 3 )
 800106c:	4b60      	ldr	r3, [pc, #384]	; (80011f0 <startGame+0x2d4>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b03      	cmp	r3, #3
 8001072:	d106      	bne.n	8001082 <startGame+0x166>
			{
				setCursor(4,0);
 8001074:	2100      	movs	r1, #0
 8001076:	2004      	movs	r0, #4
 8001078:	f7ff fb68 	bl	800074c <setCursor>
				print("mode : Hard");
 800107c:	485f      	ldr	r0, [pc, #380]	; (80011fc <startGame+0x2e0>)
 800107e:	f7ff fbad 	bl	80007dc <print>
			}
			setCursor(4,1);
 8001082:	2101      	movs	r1, #1
 8001084:	2004      	movs	r0, #4
 8001086:	f7ff fb61 	bl	800074c <setCursor>
			print("are you sure?");
 800108a:	485d      	ldr	r0, [pc, #372]	; (8001200 <startGame+0x2e4>)
 800108c:	f7ff fba6 	bl	80007dc <print>
			setCursor(25,0);
 8001090:	2100      	movs	r1, #0
 8001092:	2019      	movs	r0, #25
 8001094:	f7ff fb5a 	bl	800074c <setCursor>
			print("Start -> *");
 8001098:	485a      	ldr	r0, [pc, #360]	; (8001204 <startGame+0x2e8>)
 800109a:	f7ff fb9f 	bl	80007dc <print>
			setCursor(26,1);
 800109e:	2101      	movs	r1, #1
 80010a0:	201a      	movs	r0, #26
 80010a2:	f7ff fb53 	bl	800074c <setCursor>
			print("Back -> #");
 80010a6:	4858      	ldr	r0, [pc, #352]	; (8001208 <startGame+0x2ec>)
 80010a8:	f7ff fb98 	bl	80007dc <print>
			x = 1;
 80010ac:	4b42      	ldr	r3, [pc, #264]	; (80011b8 <startGame+0x29c>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	601a      	str	r2, [r3, #0]
		}

		if ( kpad == '#' )
 80010b2:	4b56      	ldr	r3, [pc, #344]	; (800120c <startGame+0x2f0>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2b23      	cmp	r3, #35	; 0x23
 80010b8:	d10a      	bne.n	80010d0 <startGame+0x1b4>
		{
			kpad = 'B';
 80010ba:	4b54      	ldr	r3, [pc, #336]	; (800120c <startGame+0x2f0>)
 80010bc:	2242      	movs	r2, #66	; 0x42
 80010be:	601a      	str	r2, [r3, #0]
			start_game--;
 80010c0:	4b3e      	ldr	r3, [pc, #248]	; (80011bc <startGame+0x2a0>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	3b01      	subs	r3, #1
 80010c6:	4a3d      	ldr	r2, [pc, #244]	; (80011bc <startGame+0x2a0>)
 80010c8:	6013      	str	r3, [r2, #0]
			x = 0;
 80010ca:	4b3b      	ldr	r3, [pc, #236]	; (80011b8 <startGame+0x29c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
		}

		if ( kpad == '*' )
 80010d0:	4b4e      	ldr	r3, [pc, #312]	; (800120c <startGame+0x2f0>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b2a      	cmp	r3, #42	; 0x2a
 80010d6:	d10b      	bne.n	80010f0 <startGame+0x1d4>
		{
			kpad = 'B';
 80010d8:	4b4c      	ldr	r3, [pc, #304]	; (800120c <startGame+0x2f0>)
 80010da:	2242      	movs	r2, #66	; 0x42
 80010dc:	601a      	str	r2, [r3, #0]
			start_game++;
 80010de:	4b37      	ldr	r3, [pc, #220]	; (80011bc <startGame+0x2a0>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	3301      	adds	r3, #1
 80010e4:	4a35      	ldr	r2, [pc, #212]	; (80011bc <startGame+0x2a0>)
 80010e6:	6013      	str	r3, [r2, #0]
			x = 0;
 80010e8:	4b33      	ldr	r3, [pc, #204]	; (80011b8 <startGame+0x29c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	e037      	b.n	8001160 <startGame+0x244>
		} else if ( kpad == 1 ) {
 80010f0:	4b46      	ldr	r3, [pc, #280]	; (800120c <startGame+0x2f0>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d10e      	bne.n	8001116 <startGame+0x1fa>
			kpad = 'B';
 80010f8:	4b44      	ldr	r3, [pc, #272]	; (800120c <startGame+0x2f0>)
 80010fa:	2242      	movs	r2, #66	; 0x42
 80010fc:	601a      	str	r2, [r3, #0]
			start_game++;
 80010fe:	4b2f      	ldr	r3, [pc, #188]	; (80011bc <startGame+0x2a0>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	3301      	adds	r3, #1
 8001104:	4a2d      	ldr	r2, [pc, #180]	; (80011bc <startGame+0x2a0>)
 8001106:	6013      	str	r3, [r2, #0]
			x = 0;
 8001108:	4b2b      	ldr	r3, [pc, #172]	; (80011b8 <startGame+0x29c>)
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
			mode = 1;
 800110e:	4b38      	ldr	r3, [pc, #224]	; (80011f0 <startGame+0x2d4>)
 8001110:	2201      	movs	r2, #1
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	e024      	b.n	8001160 <startGame+0x244>
		} else if ( kpad == 2 ) {
 8001116:	4b3d      	ldr	r3, [pc, #244]	; (800120c <startGame+0x2f0>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2b02      	cmp	r3, #2
 800111c:	d10e      	bne.n	800113c <startGame+0x220>
			kpad = 'B';
 800111e:	4b3b      	ldr	r3, [pc, #236]	; (800120c <startGame+0x2f0>)
 8001120:	2242      	movs	r2, #66	; 0x42
 8001122:	601a      	str	r2, [r3, #0]
			start_game++;
 8001124:	4b25      	ldr	r3, [pc, #148]	; (80011bc <startGame+0x2a0>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	3301      	adds	r3, #1
 800112a:	4a24      	ldr	r2, [pc, #144]	; (80011bc <startGame+0x2a0>)
 800112c:	6013      	str	r3, [r2, #0]
			x = 0;
 800112e:	4b22      	ldr	r3, [pc, #136]	; (80011b8 <startGame+0x29c>)
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
			mode = 2;
 8001134:	4b2e      	ldr	r3, [pc, #184]	; (80011f0 <startGame+0x2d4>)
 8001136:	2202      	movs	r2, #2
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	e011      	b.n	8001160 <startGame+0x244>
		} else if ( kpad == 3 ) {
 800113c:	4b33      	ldr	r3, [pc, #204]	; (800120c <startGame+0x2f0>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b03      	cmp	r3, #3
 8001142:	d10d      	bne.n	8001160 <startGame+0x244>
			kpad = 'B';
 8001144:	4b31      	ldr	r3, [pc, #196]	; (800120c <startGame+0x2f0>)
 8001146:	2242      	movs	r2, #66	; 0x42
 8001148:	601a      	str	r2, [r3, #0]
			start_game++;
 800114a:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <startGame+0x2a0>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	3301      	adds	r3, #1
 8001150:	4a1a      	ldr	r2, [pc, #104]	; (80011bc <startGame+0x2a0>)
 8001152:	6013      	str	r3, [r2, #0]
			x = 0;
 8001154:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <startGame+0x29c>)
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
			mode = 3;
 800115a:	4b25      	ldr	r3, [pc, #148]	; (80011f0 <startGame+0x2d4>)
 800115c:	2203      	movs	r2, #3
 800115e:	601a      	str	r2, [r3, #0]
		}

		if ( start_game == 5 )
 8001160:	4b16      	ldr	r3, [pc, #88]	; (80011bc <startGame+0x2a0>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b05      	cmp	r3, #5
 8001166:	d11a      	bne.n	800119e <startGame+0x282>
		{
			kpad = -1;
 8001168:	4b28      	ldr	r3, [pc, #160]	; (800120c <startGame+0x2f0>)
 800116a:	f04f 32ff 	mov.w	r2, #4294967295
 800116e:	601a      	str	r2, [r3, #0]
			gameOn = 1;
 8001170:	4b27      	ldr	r3, [pc, #156]	; (8001210 <startGame+0x2f4>)
 8001172:	2201      	movs	r2, #1
 8001174:	601a      	str	r2, [r3, #0]
			if ( mode == 1 ) game_mode1();
 8001176:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <startGame+0x2d4>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d102      	bne.n	8001184 <startGame+0x268>
 800117e:	f000 fd47 	bl	8001c10 <game_mode1>
 8001182:	e00c      	b.n	800119e <startGame+0x282>
			else if ( mode == 2 ) game_mode2();
 8001184:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <startGame+0x2d4>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b02      	cmp	r3, #2
 800118a:	d102      	bne.n	8001192 <startGame+0x276>
 800118c:	f000 ff70 	bl	8002070 <game_mode2>
 8001190:	e005      	b.n	800119e <startGame+0x282>
			else if ( mode == 3 ) game_mode3();
 8001192:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <startGame+0x2d4>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2b03      	cmp	r3, #3
 8001198:	d101      	bne.n	800119e <startGame+0x282>
 800119a:	f001 f999 	bl	80024d0 <game_mode3>
	while ( kpad == 'B' ) {
 800119e:	4b1b      	ldr	r3, [pc, #108]	; (800120c <startGame+0x2f0>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2b42      	cmp	r3, #66	; 0x42
 80011a4:	f43f aec0 	beq.w	8000f28 <startGame+0xc>
		}

	}
	if ( kpad == 'A' ) {
 80011a8:	4b18      	ldr	r3, [pc, #96]	; (800120c <startGame+0x2f0>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b41      	cmp	r3, #65	; 0x41
 80011ae:	d131      	bne.n	8001214 <startGame+0x2f8>
		menu();
 80011b0:	f7ff fd7a 	bl	8000ca8 <menu>
	} else {
		kpad = 'B';
		startGame();
	}

}
 80011b4:	e087      	b.n	80012c6 <startGame+0x3aa>
 80011b6:	bf00      	nop
 80011b8:	200002e0 	.word	0x200002e0
 80011bc:	200002e4 	.word	0x200002e4
 80011c0:	2000001c 	.word	0x2000001c
 80011c4:	200012ac 	.word	0x200012ac
 80011c8:	0800cda0 	.word	0x0800cda0
 80011cc:	0800ce68 	.word	0x0800ce68
 80011d0:	0800ce78 	.word	0x0800ce78
 80011d4:	0800ce8c 	.word	0x0800ce8c
 80011d8:	20001c84 	.word	0x20001c84
 80011dc:	0800ce9c 	.word	0x0800ce9c
 80011e0:	0800cea8 	.word	0x0800cea8
 80011e4:	0800cebc 	.word	0x0800cebc
 80011e8:	0800cec8 	.word	0x0800cec8
 80011ec:	0800ced4 	.word	0x0800ced4
 80011f0:	20000004 	.word	0x20000004
 80011f4:	0800cee0 	.word	0x0800cee0
 80011f8:	0800ceec 	.word	0x0800ceec
 80011fc:	0800cefc 	.word	0x0800cefc
 8001200:	0800cf08 	.word	0x0800cf08
 8001204:	0800cf18 	.word	0x0800cf18
 8001208:	0800cf24 	.word	0x0800cf24
 800120c:	20000244 	.word	0x20000244
 8001210:	200002ec 	.word	0x200002ec
	} else if ( kpad == '#' ) {
 8001214:	4b2d      	ldr	r3, [pc, #180]	; (80012cc <startGame+0x3b0>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b23      	cmp	r3, #35	; 0x23
 800121a:	d10a      	bne.n	8001232 <startGame+0x316>
		kpad = 'B';
 800121c:	4b2b      	ldr	r3, [pc, #172]	; (80012cc <startGame+0x3b0>)
 800121e:	2242      	movs	r2, #66	; 0x42
 8001220:	601a      	str	r2, [r3, #0]
		start_game--;
 8001222:	4b2b      	ldr	r3, [pc, #172]	; (80012d0 <startGame+0x3b4>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	3b01      	subs	r3, #1
 8001228:	4a29      	ldr	r2, [pc, #164]	; (80012d0 <startGame+0x3b4>)
 800122a:	6013      	str	r3, [r2, #0]
		startGame();
 800122c:	f7ff fe76 	bl	8000f1c <startGame>
}
 8001230:	e049      	b.n	80012c6 <startGame+0x3aa>
	} else if ( kpad == '*' ) {
 8001232:	4b26      	ldr	r3, [pc, #152]	; (80012cc <startGame+0x3b0>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2b2a      	cmp	r3, #42	; 0x2a
 8001238:	d10a      	bne.n	8001250 <startGame+0x334>
		kpad = 'B';
 800123a:	4b24      	ldr	r3, [pc, #144]	; (80012cc <startGame+0x3b0>)
 800123c:	2242      	movs	r2, #66	; 0x42
 800123e:	601a      	str	r2, [r3, #0]
		start_game++;
 8001240:	4b23      	ldr	r3, [pc, #140]	; (80012d0 <startGame+0x3b4>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	3301      	adds	r3, #1
 8001246:	4a22      	ldr	r2, [pc, #136]	; (80012d0 <startGame+0x3b4>)
 8001248:	6013      	str	r3, [r2, #0]
		startGame();
 800124a:	f7ff fe67 	bl	8000f1c <startGame>
}
 800124e:	e03a      	b.n	80012c6 <startGame+0x3aa>
	} else if ( kpad == 1 ) {
 8001250:	4b1e      	ldr	r3, [pc, #120]	; (80012cc <startGame+0x3b0>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d10d      	bne.n	8001274 <startGame+0x358>
		kpad = 'B';
 8001258:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <startGame+0x3b0>)
 800125a:	2242      	movs	r2, #66	; 0x42
 800125c:	601a      	str	r2, [r3, #0]
		start_game++;
 800125e:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <startGame+0x3b4>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	3301      	adds	r3, #1
 8001264:	4a1a      	ldr	r2, [pc, #104]	; (80012d0 <startGame+0x3b4>)
 8001266:	6013      	str	r3, [r2, #0]
		mode = 1;
 8001268:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <startGame+0x3b8>)
 800126a:	2201      	movs	r2, #1
 800126c:	601a      	str	r2, [r3, #0]
		startGame();
 800126e:	f7ff fe55 	bl	8000f1c <startGame>
}
 8001272:	e028      	b.n	80012c6 <startGame+0x3aa>
	} else if ( kpad == 2 ) {
 8001274:	4b15      	ldr	r3, [pc, #84]	; (80012cc <startGame+0x3b0>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b02      	cmp	r3, #2
 800127a:	d10d      	bne.n	8001298 <startGame+0x37c>
		kpad = 'B';
 800127c:	4b13      	ldr	r3, [pc, #76]	; (80012cc <startGame+0x3b0>)
 800127e:	2242      	movs	r2, #66	; 0x42
 8001280:	601a      	str	r2, [r3, #0]
		start_game++;
 8001282:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <startGame+0x3b4>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	3301      	adds	r3, #1
 8001288:	4a11      	ldr	r2, [pc, #68]	; (80012d0 <startGame+0x3b4>)
 800128a:	6013      	str	r3, [r2, #0]
		mode = 2;
 800128c:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <startGame+0x3b8>)
 800128e:	2202      	movs	r2, #2
 8001290:	601a      	str	r2, [r3, #0]
		startGame();
 8001292:	f7ff fe43 	bl	8000f1c <startGame>
}
 8001296:	e016      	b.n	80012c6 <startGame+0x3aa>
	} else if ( kpad == 3 ) {
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <startGame+0x3b0>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b03      	cmp	r3, #3
 800129e:	d10d      	bne.n	80012bc <startGame+0x3a0>
		kpad = 'B';
 80012a0:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <startGame+0x3b0>)
 80012a2:	2242      	movs	r2, #66	; 0x42
 80012a4:	601a      	str	r2, [r3, #0]
		start_game++;
 80012a6:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <startGame+0x3b4>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	3301      	adds	r3, #1
 80012ac:	4a08      	ldr	r2, [pc, #32]	; (80012d0 <startGame+0x3b4>)
 80012ae:	6013      	str	r3, [r2, #0]
		mode = 3;
 80012b0:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <startGame+0x3b8>)
 80012b2:	2203      	movs	r2, #3
 80012b4:	601a      	str	r2, [r3, #0]
		startGame();
 80012b6:	f7ff fe31 	bl	8000f1c <startGame>
}
 80012ba:	e004      	b.n	80012c6 <startGame+0x3aa>
		kpad = 'B';
 80012bc:	4b03      	ldr	r3, [pc, #12]	; (80012cc <startGame+0x3b0>)
 80012be:	2242      	movs	r2, #66	; 0x42
 80012c0:	601a      	str	r2, [r3, #0]
		startGame();
 80012c2:	f7ff fe2b 	bl	8000f1c <startGame>
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000244 	.word	0x20000244
 80012d0:	200002e4 	.word	0x200002e4
 80012d4:	20000004 	.word	0x20000004

080012d8 <ship_do>:

void ship_do( int col ) { //col az 1 ta 4
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]

	//createChar(2, ship);

	if ( col == 1 )
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d11b      	bne.n	800131e <ship_do+0x46>
	{
		setCursor(20,1);
 80012e6:	2101      	movs	r1, #1
 80012e8:	2014      	movs	r0, #20
 80012ea:	f7ff fa2f 	bl	800074c <setCursor>
		print(" ");
 80012ee:	483c      	ldr	r0, [pc, #240]	; (80013e0 <ship_do+0x108>)
 80012f0:	f7ff fa74 	bl	80007dc <print>
		setCursor(0,1);
 80012f4:	2101      	movs	r1, #1
 80012f6:	2000      	movs	r0, #0
 80012f8:	f7ff fa28 	bl	800074c <setCursor>
		print(" ");
 80012fc:	4838      	ldr	r0, [pc, #224]	; (80013e0 <ship_do+0x108>)
 80012fe:	f7ff fa6d 	bl	80007dc <print>
		setCursor(0,0);
 8001302:	2100      	movs	r1, #0
 8001304:	2000      	movs	r0, #0
 8001306:	f7ff fa21 	bl	800074c <setCursor>
		write(2);
 800130a:	2002      	movs	r0, #2
 800130c:	f7ff fac8 	bl	80008a0 <write>
		ship_row = 0;
 8001310:	4b34      	ldr	r3, [pc, #208]	; (80013e4 <ship_do+0x10c>)
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
		ship_col = 0;
 8001316:	4b34      	ldr	r3, [pc, #208]	; (80013e8 <ship_do+0x110>)
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
		write(2);
		ship_row = 20;
		ship_col = 1;
	}

}
 800131c:	e05b      	b.n	80013d6 <ship_do+0xfe>
	} else if ( col == 2 ) {
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b02      	cmp	r3, #2
 8001322:	d11b      	bne.n	800135c <ship_do+0x84>
		setCursor(0,0);
 8001324:	2100      	movs	r1, #0
 8001326:	2000      	movs	r0, #0
 8001328:	f7ff fa10 	bl	800074c <setCursor>
		print(" ");
 800132c:	482c      	ldr	r0, [pc, #176]	; (80013e0 <ship_do+0x108>)
 800132e:	f7ff fa55 	bl	80007dc <print>
		setCursor(20,0);
 8001332:	2100      	movs	r1, #0
 8001334:	2014      	movs	r0, #20
 8001336:	f7ff fa09 	bl	800074c <setCursor>
		print(" ");
 800133a:	4829      	ldr	r0, [pc, #164]	; (80013e0 <ship_do+0x108>)
 800133c:	f7ff fa4e 	bl	80007dc <print>
		setCursor(0,1);
 8001340:	2101      	movs	r1, #1
 8001342:	2000      	movs	r0, #0
 8001344:	f7ff fa02 	bl	800074c <setCursor>
		write(2);
 8001348:	2002      	movs	r0, #2
 800134a:	f7ff faa9 	bl	80008a0 <write>
		ship_row = 0;
 800134e:	4b25      	ldr	r3, [pc, #148]	; (80013e4 <ship_do+0x10c>)
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
		ship_col = 1;
 8001354:	4b24      	ldr	r3, [pc, #144]	; (80013e8 <ship_do+0x110>)
 8001356:	2201      	movs	r2, #1
 8001358:	601a      	str	r2, [r3, #0]
}
 800135a:	e03c      	b.n	80013d6 <ship_do+0xfe>
	} else if ( col == 3 ) {
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b03      	cmp	r3, #3
 8001360:	d11b      	bne.n	800139a <ship_do+0xc2>
		setCursor(0,1);
 8001362:	2101      	movs	r1, #1
 8001364:	2000      	movs	r0, #0
 8001366:	f7ff f9f1 	bl	800074c <setCursor>
		print(" ");
 800136a:	481d      	ldr	r0, [pc, #116]	; (80013e0 <ship_do+0x108>)
 800136c:	f7ff fa36 	bl	80007dc <print>
		setCursor(20,1);
 8001370:	2101      	movs	r1, #1
 8001372:	2014      	movs	r0, #20
 8001374:	f7ff f9ea 	bl	800074c <setCursor>
		print(" ");
 8001378:	4819      	ldr	r0, [pc, #100]	; (80013e0 <ship_do+0x108>)
 800137a:	f7ff fa2f 	bl	80007dc <print>
		setCursor(20,0);
 800137e:	2100      	movs	r1, #0
 8001380:	2014      	movs	r0, #20
 8001382:	f7ff f9e3 	bl	800074c <setCursor>
		write(2);
 8001386:	2002      	movs	r0, #2
 8001388:	f7ff fa8a 	bl	80008a0 <write>
		ship_row = 20;
 800138c:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <ship_do+0x10c>)
 800138e:	2214      	movs	r2, #20
 8001390:	601a      	str	r2, [r3, #0]
		ship_col = 0;
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <ship_do+0x110>)
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
}
 8001398:	e01d      	b.n	80013d6 <ship_do+0xfe>
	} else if ( col == 4 ) {
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b04      	cmp	r3, #4
 800139e:	d11a      	bne.n	80013d6 <ship_do+0xfe>
		setCursor(20,0);
 80013a0:	2100      	movs	r1, #0
 80013a2:	2014      	movs	r0, #20
 80013a4:	f7ff f9d2 	bl	800074c <setCursor>
		print(" ");
 80013a8:	480d      	ldr	r0, [pc, #52]	; (80013e0 <ship_do+0x108>)
 80013aa:	f7ff fa17 	bl	80007dc <print>
		setCursor(0,0);
 80013ae:	2100      	movs	r1, #0
 80013b0:	2000      	movs	r0, #0
 80013b2:	f7ff f9cb 	bl	800074c <setCursor>
		print(" ");
 80013b6:	480a      	ldr	r0, [pc, #40]	; (80013e0 <ship_do+0x108>)
 80013b8:	f7ff fa10 	bl	80007dc <print>
		setCursor(20,1);
 80013bc:	2101      	movs	r1, #1
 80013be:	2014      	movs	r0, #20
 80013c0:	f7ff f9c4 	bl	800074c <setCursor>
		write(2);
 80013c4:	2002      	movs	r0, #2
 80013c6:	f7ff fa6b 	bl	80008a0 <write>
		ship_row = 20;
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <ship_do+0x10c>)
 80013cc:	2214      	movs	r2, #20
 80013ce:	601a      	str	r2, [r3, #0]
		ship_col = 1;
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <ship_do+0x110>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	601a      	str	r2, [r3, #0]
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	0800cd9c 	.word	0x0800cd9c
 80013e4:	200006d8 	.word	0x200006d8
 80013e8:	200011f0 	.word	0x200011f0

080013ec <bullet_1>:

void bullet_1( int row, int col ) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]

	//createChar(3, bullet1);

	if ( row == 1 )
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d10b      	bne.n	8001414 <bullet_1+0x28>
	{
		setCursor(row,col);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	b2d2      	uxtb	r2, r2
 8001404:	4611      	mov	r1, r2
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff f9a0 	bl	800074c <setCursor>
		write(3);
 800140c:	2003      	movs	r0, #3
 800140e:	f7ff fa47 	bl	80008a0 <write>
		print(" ");
		setCursor(row,col);
		write(3);
	}

}
 8001412:	e039      	b.n	8001488 <bullet_1+0x9c>
	} else if ( row == 20 ) {
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b14      	cmp	r3, #20
 8001418:	d10d      	bne.n	8001436 <bullet_1+0x4a>
		setCursor(row-1,col);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	b2db      	uxtb	r3, r3
 800141e:	3b01      	subs	r3, #1
 8001420:	b2db      	uxtb	r3, r3
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	b2d2      	uxtb	r2, r2
 8001426:	4611      	mov	r1, r2
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff f98f 	bl	800074c <setCursor>
		print(" ");
 800142e:	4818      	ldr	r0, [pc, #96]	; (8001490 <bullet_1+0xa4>)
 8001430:	f7ff f9d4 	bl	80007dc <print>
}
 8001434:	e028      	b.n	8001488 <bullet_1+0x9c>
	} else if ( row == 40 ) {
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2b28      	cmp	r3, #40	; 0x28
 800143a:	d10d      	bne.n	8001458 <bullet_1+0x6c>
		setCursor(row-1,col);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	b2db      	uxtb	r3, r3
 8001440:	3b01      	subs	r3, #1
 8001442:	b2db      	uxtb	r3, r3
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	4611      	mov	r1, r2
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff f97e 	bl	800074c <setCursor>
		print(" ");
 8001450:	480f      	ldr	r0, [pc, #60]	; (8001490 <bullet_1+0xa4>)
 8001452:	f7ff f9c3 	bl	80007dc <print>
}
 8001456:	e017      	b.n	8001488 <bullet_1+0x9c>
		setCursor(row-1,col);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	b2db      	uxtb	r3, r3
 800145c:	3b01      	subs	r3, #1
 800145e:	b2db      	uxtb	r3, r3
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	4611      	mov	r1, r2
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff f970 	bl	800074c <setCursor>
		print(" ");
 800146c:	4808      	ldr	r0, [pc, #32]	; (8001490 <bullet_1+0xa4>)
 800146e:	f7ff f9b5 	bl	80007dc <print>
		setCursor(row,col);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	b2d2      	uxtb	r2, r2
 800147a:	4611      	mov	r1, r2
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff f965 	bl	800074c <setCursor>
		write(3);
 8001482:	2003      	movs	r0, #3
 8001484:	f7ff fa0c 	bl	80008a0 <write>
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	0800cd9c 	.word	0x0800cd9c

08001494 <bullet_2>:

void bullet_2( int row, int col ) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]

	//createChar(4, bullet2);

	if ( row == 0 )
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d10d      	bne.n	80014c0 <bullet_2+0x2c>
	{
		setCursor(row+1,col);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	3301      	adds	r3, #1
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	b2d2      	uxtb	r2, r2
 80014b0:	4611      	mov	r1, r2
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff f94a 	bl	800074c <setCursor>
		print(" ");
 80014b8:	4818      	ldr	r0, [pc, #96]	; (800151c <bullet_2+0x88>)
 80014ba:	f7ff f98f 	bl	80007dc <print>
		print(" ");
		setCursor(row,col);
		write(4);
	}

}
 80014be:	e028      	b.n	8001512 <bullet_2+0x7e>
	} else if ( row == 20 ) {
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b14      	cmp	r3, #20
 80014c4:	d10d      	bne.n	80014e2 <bullet_2+0x4e>
		setCursor(row+1,col);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	3301      	adds	r3, #1
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	683a      	ldr	r2, [r7, #0]
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	4611      	mov	r1, r2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f939 	bl	800074c <setCursor>
		print(" ");
 80014da:	4810      	ldr	r0, [pc, #64]	; (800151c <bullet_2+0x88>)
 80014dc:	f7ff f97e 	bl	80007dc <print>
}
 80014e0:	e017      	b.n	8001512 <bullet_2+0x7e>
		setCursor(row+1,col);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	3301      	adds	r3, #1
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	b2d2      	uxtb	r2, r2
 80014ee:	4611      	mov	r1, r2
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff f92b 	bl	800074c <setCursor>
		print(" ");
 80014f6:	4809      	ldr	r0, [pc, #36]	; (800151c <bullet_2+0x88>)
 80014f8:	f7ff f970 	bl	80007dc <print>
		setCursor(row,col);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	4611      	mov	r1, r2
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff f920 	bl	800074c <setCursor>
		write(4);
 800150c:	2004      	movs	r0, #4
 800150e:	f7ff f9c7 	bl	80008a0 <write>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	0800cd9c 	.word	0x0800cd9c

08001520 <enemy_do>:

void enemy_do( int row, int col ) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]

	//createChar(1, enemy);

	if ( row == 19 || row == 39 )
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b13      	cmp	r3, #19
 800152e:	d002      	beq.n	8001536 <enemy_do+0x16>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b27      	cmp	r3, #39	; 0x27
 8001534:	d10b      	bne.n	800154e <enemy_do+0x2e>
	{
		setCursor(row,col);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	b2db      	uxtb	r3, r3
 800153a:	683a      	ldr	r2, [r7, #0]
 800153c:	b2d2      	uxtb	r2, r2
 800153e:	4611      	mov	r1, r2
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff f903 	bl	800074c <setCursor>
		write(1);
 8001546:	2001      	movs	r0, #1
 8001548:	f7ff f9aa 	bl	80008a0 <write>
 800154c:	e018      	b.n	8001580 <enemy_do+0x60>
	} else {
		setCursor(row+1,col);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	3301      	adds	r3, #1
 8001554:	b2db      	uxtb	r3, r3
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	4611      	mov	r1, r2
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff f8f5 	bl	800074c <setCursor>
		print(" ");
 8001562:	4809      	ldr	r0, [pc, #36]	; (8001588 <enemy_do+0x68>)
 8001564:	f7ff f93a 	bl	80007dc <print>
		setCursor(row,col);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	b2d2      	uxtb	r2, r2
 8001570:	4611      	mov	r1, r2
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff f8ea 	bl	800074c <setCursor>
		write(1);
 8001578:	2001      	movs	r0, #1
 800157a:	f7ff f991 	bl	80008a0 <write>
	}

}
 800157e:	bf00      	nop
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	0800cd9c 	.word	0x0800cd9c

0800158c <bump>:

void bump() {
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0

	//Ship's bullet to the enemy
	for ( int i = 0; i < n; i++ )
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
 8001596:	e05d      	b.n	8001654 <bump+0xc8>
	{
		for ( int j = 0; j < shot; j++ )
 8001598:	2300      	movs	r3, #0
 800159a:	613b      	str	r3, [r7, #16]
 800159c:	e052      	b.n	8001644 <bump+0xb8>
		{
			if ( shot_row[j] < 40 )
 800159e:	4a87      	ldr	r2, [pc, #540]	; (80017bc <bump+0x230>)
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a6:	2b27      	cmp	r3, #39	; 0x27
 80015a8:	dc49      	bgt.n	800163e <bump+0xb2>
			{
				if ( shot_row[j] == enemy_row[i] && shot_col[j] == enemy_col[i] )
 80015aa:	4a84      	ldr	r2, [pc, #528]	; (80017bc <bump+0x230>)
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015b2:	4983      	ldr	r1, [pc, #524]	; (80017c0 <bump+0x234>)
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d13f      	bne.n	800163e <bump+0xb2>
 80015be:	4a81      	ldr	r2, [pc, #516]	; (80017c4 <bump+0x238>)
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015c6:	4980      	ldr	r1, [pc, #512]	; (80017c8 <bump+0x23c>)
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d135      	bne.n	800163e <bump+0xb2>
				{
					setCursor(enemy_row[i],enemy_col[i]);
 80015d2:	4a7b      	ldr	r2, [pc, #492]	; (80017c0 <bump+0x234>)
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	497a      	ldr	r1, [pc, #488]	; (80017c8 <bump+0x23c>)
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	4619      	mov	r1, r3
 80015e8:	4610      	mov	r0, r2
 80015ea:	f7ff f8af 	bl	800074c <setCursor>
					print(" ");
 80015ee:	4877      	ldr	r0, [pc, #476]	; (80017cc <bump+0x240>)
 80015f0:	f7ff f8f4 	bl	80007dc <print>
					setCursor(enemy_row[i]-1,enemy_col[i]);
 80015f4:	4a72      	ldr	r2, [pc, #456]	; (80017c0 <bump+0x234>)
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	3b01      	subs	r3, #1
 8001600:	b2da      	uxtb	r2, r3
 8001602:	4971      	ldr	r1, [pc, #452]	; (80017c8 <bump+0x23c>)
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800160a:	b2db      	uxtb	r3, r3
 800160c:	4619      	mov	r1, r3
 800160e:	4610      	mov	r0, r2
 8001610:	f7ff f89c 	bl	800074c <setCursor>
					print(" ");
 8001614:	486d      	ldr	r0, [pc, #436]	; (80017cc <bump+0x240>)
 8001616:	f7ff f8e1 	bl	80007dc <print>
					shot_row[j] = 41;
 800161a:	4a68      	ldr	r2, [pc, #416]	; (80017bc <bump+0x230>)
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	2129      	movs	r1, #41	; 0x29
 8001620:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					enemy_row[i] = -1;
 8001624:	4a66      	ldr	r2, [pc, #408]	; (80017c0 <bump+0x234>)
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	f04f 31ff 	mov.w	r1, #4294967295
 800162c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					kill++;
 8001630:	4b67      	ldr	r3, [pc, #412]	; (80017d0 <bump+0x244>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	3301      	adds	r3, #1
 8001636:	4a66      	ldr	r2, [pc, #408]	; (80017d0 <bump+0x244>)
 8001638:	6013      	str	r3, [r2, #0]
					bump_1();
 800163a:	f002 ff15 	bl	8004468 <bump_1>
		for ( int j = 0; j < shot; j++ )
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	3301      	adds	r3, #1
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	4b63      	ldr	r3, [pc, #396]	; (80017d4 <bump+0x248>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	429a      	cmp	r2, r3
 800164c:	dba7      	blt.n	800159e <bump+0x12>
	for ( int i = 0; i < n; i++ )
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	3301      	adds	r3, #1
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	4b60      	ldr	r3, [pc, #384]	; (80017d8 <bump+0x24c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	697a      	ldr	r2, [r7, #20]
 800165a:	429a      	cmp	r2, r3
 800165c:	db9c      	blt.n	8001598 <bump+0xc>
			}
		}
	}

	//Ship bullet to enemy bullet
	for ( int i = 0; i < shot; i++ )
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	e071      	b.n	8001748 <bump+0x1bc>
	{
		for ( int j = 0; j < shotE_count; j++ )
 8001664:	2300      	movs	r3, #0
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	e066      	b.n	8001738 <bump+0x1ac>
		{
			if ( shot_row[i] < 40 && shotE_row[j] > 0 )
 800166a:	4a54      	ldr	r2, [pc, #336]	; (80017bc <bump+0x230>)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001672:	2b27      	cmp	r3, #39	; 0x27
 8001674:	dc5d      	bgt.n	8001732 <bump+0x1a6>
 8001676:	4a59      	ldr	r2, [pc, #356]	; (80017dc <bump+0x250>)
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800167e:	2b00      	cmp	r3, #0
 8001680:	dd57      	ble.n	8001732 <bump+0x1a6>
			{
				if ( shot_row[i] == shotE_row[j] && shot_col[i] == shotE_col[j] )
 8001682:	4a4e      	ldr	r2, [pc, #312]	; (80017bc <bump+0x230>)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800168a:	4954      	ldr	r1, [pc, #336]	; (80017dc <bump+0x250>)
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001692:	429a      	cmp	r2, r3
 8001694:	d14d      	bne.n	8001732 <bump+0x1a6>
 8001696:	4a4b      	ldr	r2, [pc, #300]	; (80017c4 <bump+0x238>)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800169e:	4950      	ldr	r1, [pc, #320]	; (80017e0 <bump+0x254>)
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d143      	bne.n	8001732 <bump+0x1a6>
				{
					setCursor(shot_row[i]+1,shot_col[i]);
 80016aa:	4a44      	ldr	r2, [pc, #272]	; (80017bc <bump+0x230>)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	3301      	adds	r3, #1
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	4942      	ldr	r1, [pc, #264]	; (80017c4 <bump+0x238>)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	4619      	mov	r1, r3
 80016c4:	4610      	mov	r0, r2
 80016c6:	f7ff f841 	bl	800074c <setCursor>
					print(" ");
 80016ca:	4840      	ldr	r0, [pc, #256]	; (80017cc <bump+0x240>)
 80016cc:	f7ff f886 	bl	80007dc <print>
					setCursor(shot_row[i],shot_col[i]);
 80016d0:	4a3a      	ldr	r2, [pc, #232]	; (80017bc <bump+0x230>)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	493a      	ldr	r1, [pc, #232]	; (80017c4 <bump+0x238>)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	4619      	mov	r1, r3
 80016e6:	4610      	mov	r0, r2
 80016e8:	f7ff f830 	bl	800074c <setCursor>
					print(" ");
 80016ec:	4837      	ldr	r0, [pc, #220]	; (80017cc <bump+0x240>)
 80016ee:	f7ff f875 	bl	80007dc <print>
					setCursor(shot_row[i]-1,shot_col[i]);
 80016f2:	4a32      	ldr	r2, [pc, #200]	; (80017bc <bump+0x230>)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	3b01      	subs	r3, #1
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	4930      	ldr	r1, [pc, #192]	; (80017c4 <bump+0x238>)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001708:	b2db      	uxtb	r3, r3
 800170a:	4619      	mov	r1, r3
 800170c:	4610      	mov	r0, r2
 800170e:	f7ff f81d 	bl	800074c <setCursor>
					print(" ");
 8001712:	482e      	ldr	r0, [pc, #184]	; (80017cc <bump+0x240>)
 8001714:	f7ff f862 	bl	80007dc <print>
					shot_row[i] = 41;
 8001718:	4a28      	ldr	r2, [pc, #160]	; (80017bc <bump+0x230>)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2129      	movs	r1, #41	; 0x29
 800171e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					shotE_row[j] = -1;
 8001722:	4a2e      	ldr	r2, [pc, #184]	; (80017dc <bump+0x250>)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	f04f 31ff 	mov.w	r1, #4294967295
 800172a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					bump_2();
 800172e:	f002 fea5 	bl	800447c <bump_2>
		for ( int j = 0; j < shotE_count; j++ )
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	3301      	adds	r3, #1
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	4b2a      	ldr	r3, [pc, #168]	; (80017e4 <bump+0x258>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	68ba      	ldr	r2, [r7, #8]
 800173e:	429a      	cmp	r2, r3
 8001740:	db93      	blt.n	800166a <bump+0xde>
	for ( int i = 0; i < shot; i++ )
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	3301      	adds	r3, #1
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	4b22      	ldr	r3, [pc, #136]	; (80017d4 <bump+0x248>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68fa      	ldr	r2, [r7, #12]
 800174e:	429a      	cmp	r2, r3
 8001750:	db88      	blt.n	8001664 <bump+0xd8>
			}
		}
	}

	//Enemy bullet to the ship
	for ( int i = 0; i < shotE_count; i++ )
 8001752:	2300      	movs	r3, #0
 8001754:	607b      	str	r3, [r7, #4]
 8001756:	e029      	b.n	80017ac <bump+0x220>
	{
		if ( shotE_row[i] > -1 )
 8001758:	4a20      	ldr	r2, [pc, #128]	; (80017dc <bump+0x250>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001760:	2b00      	cmp	r3, #0
 8001762:	db20      	blt.n	80017a6 <bump+0x21a>
		{
			if ( shotE_row[i] == ship_row && shotE_col[i] == ship_col )
 8001764:	4a1d      	ldr	r2, [pc, #116]	; (80017dc <bump+0x250>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800176c:	4b1e      	ldr	r3, [pc, #120]	; (80017e8 <bump+0x25c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	429a      	cmp	r2, r3
 8001772:	d118      	bne.n	80017a6 <bump+0x21a>
 8001774:	4a1a      	ldr	r2, [pc, #104]	; (80017e0 <bump+0x254>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800177c:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <bump+0x260>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	d110      	bne.n	80017a6 <bump+0x21a>
			{
				health1--;
 8001784:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <bump+0x264>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	3b01      	subs	r3, #1
 800178a:	4a19      	ldr	r2, [pc, #100]	; (80017f0 <bump+0x264>)
 800178c:	6013      	str	r3, [r2, #0]
				health2--;
 800178e:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <bump+0x268>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	3b01      	subs	r3, #1
 8001794:	4a17      	ldr	r2, [pc, #92]	; (80017f4 <bump+0x268>)
 8001796:	6013      	str	r3, [r2, #0]
				health3--;
 8001798:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <bump+0x26c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	3b01      	subs	r3, #1
 800179e:	4a16      	ldr	r2, [pc, #88]	; (80017f8 <bump+0x26c>)
 80017a0:	6013      	str	r3, [r2, #0]
				bump_3();
 80017a2:	f002 fe75 	bl	8004490 <bump_3>
	for ( int i = 0; i < shotE_count; i++ )
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	3301      	adds	r3, #1
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	4b0d      	ldr	r3, [pc, #52]	; (80017e4 <bump+0x258>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	dbd0      	blt.n	8001758 <bump+0x1cc>
			}
		}
	}

	//Enemy to the ship
	for ( int i = 0; i < n; i++ )
 80017b6:	2300      	movs	r3, #0
 80017b8:	603b      	str	r3, [r7, #0]
 80017ba:	e04f      	b.n	800185c <bump+0x2d0>
 80017bc:	20001950 	.word	0x20001950
 80017c0:	20001330 	.word	0x20001330
 80017c4:	20000ed0 	.word	0x20000ed0
 80017c8:	20000774 	.word	0x20000774
 80017cc:	0800cd9c 	.word	0x0800cd9c
 80017d0:	20000300 	.word	0x20000300
 80017d4:	200002f0 	.word	0x200002f0
 80017d8:	20000248 	.word	0x20000248
 80017dc:	20000a94 	.word	0x20000a94
 80017e0:	200003b8 	.word	0x200003b8
 80017e4:	200002f8 	.word	0x200002f8
 80017e8:	200006d8 	.word	0x200006d8
 80017ec:	200011f0 	.word	0x200011f0
 80017f0:	20000008 	.word	0x20000008
 80017f4:	2000000c 	.word	0x2000000c
 80017f8:	20000010 	.word	0x20000010
	{
		if ( enemy_row[i] > -1 )
 80017fc:	4a7e      	ldr	r2, [pc, #504]	; (80019f8 <bump+0x46c>)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001804:	2b00      	cmp	r3, #0
 8001806:	db26      	blt.n	8001856 <bump+0x2ca>
		{
			if ( enemy_row[i] == ship_row && enemy_col[i] == ship_col )
 8001808:	4a7b      	ldr	r2, [pc, #492]	; (80019f8 <bump+0x46c>)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001810:	4b7a      	ldr	r3, [pc, #488]	; (80019fc <bump+0x470>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	429a      	cmp	r2, r3
 8001816:	d11e      	bne.n	8001856 <bump+0x2ca>
 8001818:	4a79      	ldr	r2, [pc, #484]	; (8001a00 <bump+0x474>)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001820:	4b78      	ldr	r3, [pc, #480]	; (8001a04 <bump+0x478>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	429a      	cmp	r2, r3
 8001826:	d116      	bne.n	8001856 <bump+0x2ca>
			{
				health1--;
 8001828:	4b77      	ldr	r3, [pc, #476]	; (8001a08 <bump+0x47c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	3b01      	subs	r3, #1
 800182e:	4a76      	ldr	r2, [pc, #472]	; (8001a08 <bump+0x47c>)
 8001830:	6013      	str	r3, [r2, #0]
				health2--;
 8001832:	4b76      	ldr	r3, [pc, #472]	; (8001a0c <bump+0x480>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	3b01      	subs	r3, #1
 8001838:	4a74      	ldr	r2, [pc, #464]	; (8001a0c <bump+0x480>)
 800183a:	6013      	str	r3, [r2, #0]
				health3--;
 800183c:	4b74      	ldr	r3, [pc, #464]	; (8001a10 <bump+0x484>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	3b01      	subs	r3, #1
 8001842:	4a73      	ldr	r2, [pc, #460]	; (8001a10 <bump+0x484>)
 8001844:	6013      	str	r3, [r2, #0]
				enemy_row[i] = -1;
 8001846:	4a6c      	ldr	r2, [pc, #432]	; (80019f8 <bump+0x46c>)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	f04f 31ff 	mov.w	r1, #4294967295
 800184e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				bump_3();
 8001852:	f002 fe1d 	bl	8004490 <bump_3>
	for ( int i = 0; i < n; i++ )
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	3301      	adds	r3, #1
 800185a:	603b      	str	r3, [r7, #0]
 800185c:	4b6d      	ldr	r3, [pc, #436]	; (8001a14 <bump+0x488>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	429a      	cmp	r2, r3
 8001864:	dbca      	blt.n	80017fc <bump+0x270>
			}
		}
	}

	if ( mode == 1 )
 8001866:	4b6c      	ldr	r3, [pc, #432]	; (8001a18 <bump+0x48c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d13e      	bne.n	80018ec <bump+0x360>
	{
		if ( kill == 15 )
 800186e:	4b6b      	ldr	r3, [pc, #428]	; (8001a1c <bump+0x490>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2b0f      	cmp	r3, #15
 8001874:	d108      	bne.n	8001888 <bump+0x2fc>
		{
			//end game and win
			//boss_fight();
			endGame = 1;
 8001876:	4b6a      	ldr	r3, [pc, #424]	; (8001a20 <bump+0x494>)
 8001878:	2201      	movs	r2, #1
 800187a:	601a      	str	r2, [r3, #0]
			victory(kill);
 800187c:	4b67      	ldr	r3, [pc, #412]	; (8001a1c <bump+0x490>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f000 f8d9 	bl	8001a38 <victory>
 8001886:	e01d      	b.n	80018c4 <bump+0x338>
		} else if ( health1 == 0 )
 8001888:	4b5f      	ldr	r3, [pc, #380]	; (8001a08 <bump+0x47c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d108      	bne.n	80018a2 <bump+0x316>
		{
			//end game and lose
			endGame = 1;
 8001890:	4b63      	ldr	r3, [pc, #396]	; (8001a20 <bump+0x494>)
 8001892:	2201      	movs	r2, #1
 8001894:	601a      	str	r2, [r3, #0]
			losing(kill);
 8001896:	4b61      	ldr	r3, [pc, #388]	; (8001a1c <bump+0x490>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f000 f942 	bl	8001b24 <losing>
 80018a0:	e010      	b.n	80018c4 <bump+0x338>
		} else if ( health1 == 1 && showOnce == 0 ) {
 80018a2:	4b59      	ldr	r3, [pc, #356]	; (8001a08 <bump+0x47c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d10c      	bne.n	80018c4 <bump+0x338>
 80018aa:	4b5e      	ldr	r3, [pc, #376]	; (8001a24 <bump+0x498>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d108      	bne.n	80018c4 <bump+0x338>
			HAL_UART_Transmit(&huart2, msg5, sizeof(unsigned char) * 23, 100);
 80018b2:	2364      	movs	r3, #100	; 0x64
 80018b4:	2217      	movs	r2, #23
 80018b6:	495c      	ldr	r1, [pc, #368]	; (8001a28 <bump+0x49c>)
 80018b8:	485c      	ldr	r0, [pc, #368]	; (8001a2c <bump+0x4a0>)
 80018ba:	f008 fe05 	bl	800a4c8 <HAL_UART_Transmit>
			showOnce = 1;
 80018be:	4b59      	ldr	r3, [pc, #356]	; (8001a24 <bump+0x498>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	601a      	str	r2, [r3, #0]
		}
		if ( kill == 12 && showOnce2 == 0 )
 80018c4:	4b55      	ldr	r3, [pc, #340]	; (8001a1c <bump+0x490>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b0c      	cmp	r3, #12
 80018ca:	f040 8090 	bne.w	80019ee <bump+0x462>
 80018ce:	4b58      	ldr	r3, [pc, #352]	; (8001a30 <bump+0x4a4>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f040 808b 	bne.w	80019ee <bump+0x462>
		{
			HAL_UART_Transmit(&huart2, msg6, sizeof(unsigned char) * 32, 100);
 80018d8:	2364      	movs	r3, #100	; 0x64
 80018da:	2220      	movs	r2, #32
 80018dc:	4955      	ldr	r1, [pc, #340]	; (8001a34 <bump+0x4a8>)
 80018de:	4853      	ldr	r0, [pc, #332]	; (8001a2c <bump+0x4a0>)
 80018e0:	f008 fdf2 	bl	800a4c8 <HAL_UART_Transmit>
			showOnce2 = 1;
 80018e4:	4b52      	ldr	r3, [pc, #328]	; (8001a30 <bump+0x4a4>)
 80018e6:	2201      	movs	r2, #1
 80018e8:	601a      	str	r2, [r3, #0]
		}

	}


}
 80018ea:	e080      	b.n	80019ee <bump+0x462>
	} else if ( mode == 2 ) {
 80018ec:	4b4a      	ldr	r3, [pc, #296]	; (8001a18 <bump+0x48c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d13c      	bne.n	800196e <bump+0x3e2>
		if ( kill == 25 )
 80018f4:	4b49      	ldr	r3, [pc, #292]	; (8001a1c <bump+0x490>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2b19      	cmp	r3, #25
 80018fa:	d108      	bne.n	800190e <bump+0x382>
			endGame = 1;
 80018fc:	4b48      	ldr	r3, [pc, #288]	; (8001a20 <bump+0x494>)
 80018fe:	2201      	movs	r2, #1
 8001900:	601a      	str	r2, [r3, #0]
			victory(kill);
 8001902:	4b46      	ldr	r3, [pc, #280]	; (8001a1c <bump+0x490>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f000 f896 	bl	8001a38 <victory>
 800190c:	e01d      	b.n	800194a <bump+0x3be>
		} else if ( health2 == 0 )
 800190e:	4b3f      	ldr	r3, [pc, #252]	; (8001a0c <bump+0x480>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d108      	bne.n	8001928 <bump+0x39c>
			endGame = 1;
 8001916:	4b42      	ldr	r3, [pc, #264]	; (8001a20 <bump+0x494>)
 8001918:	2201      	movs	r2, #1
 800191a:	601a      	str	r2, [r3, #0]
			losing(kill);
 800191c:	4b3f      	ldr	r3, [pc, #252]	; (8001a1c <bump+0x490>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f000 f8ff 	bl	8001b24 <losing>
 8001926:	e010      	b.n	800194a <bump+0x3be>
		} else if ( health2 == 1 && showOnce == 0 ) {
 8001928:	4b38      	ldr	r3, [pc, #224]	; (8001a0c <bump+0x480>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d10c      	bne.n	800194a <bump+0x3be>
 8001930:	4b3c      	ldr	r3, [pc, #240]	; (8001a24 <bump+0x498>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d108      	bne.n	800194a <bump+0x3be>
			HAL_UART_Transmit(&huart2, msg5, sizeof(unsigned char) * 23, 100);
 8001938:	2364      	movs	r3, #100	; 0x64
 800193a:	2217      	movs	r2, #23
 800193c:	493a      	ldr	r1, [pc, #232]	; (8001a28 <bump+0x49c>)
 800193e:	483b      	ldr	r0, [pc, #236]	; (8001a2c <bump+0x4a0>)
 8001940:	f008 fdc2 	bl	800a4c8 <HAL_UART_Transmit>
			showOnce = 1;
 8001944:	4b37      	ldr	r3, [pc, #220]	; (8001a24 <bump+0x498>)
 8001946:	2201      	movs	r2, #1
 8001948:	601a      	str	r2, [r3, #0]
		if ( kill == 22 && showOnce2 == 0 )
 800194a:	4b34      	ldr	r3, [pc, #208]	; (8001a1c <bump+0x490>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2b16      	cmp	r3, #22
 8001950:	d14d      	bne.n	80019ee <bump+0x462>
 8001952:	4b37      	ldr	r3, [pc, #220]	; (8001a30 <bump+0x4a4>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d149      	bne.n	80019ee <bump+0x462>
			HAL_UART_Transmit(&huart2, msg6, sizeof(unsigned char) * 32, 100);
 800195a:	2364      	movs	r3, #100	; 0x64
 800195c:	2220      	movs	r2, #32
 800195e:	4935      	ldr	r1, [pc, #212]	; (8001a34 <bump+0x4a8>)
 8001960:	4832      	ldr	r0, [pc, #200]	; (8001a2c <bump+0x4a0>)
 8001962:	f008 fdb1 	bl	800a4c8 <HAL_UART_Transmit>
			showOnce2 = 1;
 8001966:	4b32      	ldr	r3, [pc, #200]	; (8001a30 <bump+0x4a4>)
 8001968:	2201      	movs	r2, #1
 800196a:	601a      	str	r2, [r3, #0]
}
 800196c:	e03f      	b.n	80019ee <bump+0x462>
	} else if ( mode == 3 ) {
 800196e:	4b2a      	ldr	r3, [pc, #168]	; (8001a18 <bump+0x48c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2b03      	cmp	r3, #3
 8001974:	d13b      	bne.n	80019ee <bump+0x462>
		if ( kill == 35 )
 8001976:	4b29      	ldr	r3, [pc, #164]	; (8001a1c <bump+0x490>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2b23      	cmp	r3, #35	; 0x23
 800197c:	d108      	bne.n	8001990 <bump+0x404>
			endGame = 1;
 800197e:	4b28      	ldr	r3, [pc, #160]	; (8001a20 <bump+0x494>)
 8001980:	2201      	movs	r2, #1
 8001982:	601a      	str	r2, [r3, #0]
			victory(kill);
 8001984:	4b25      	ldr	r3, [pc, #148]	; (8001a1c <bump+0x490>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f000 f855 	bl	8001a38 <victory>
 800198e:	e01d      	b.n	80019cc <bump+0x440>
		} else if ( health3 == 0 )
 8001990:	4b1f      	ldr	r3, [pc, #124]	; (8001a10 <bump+0x484>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d108      	bne.n	80019aa <bump+0x41e>
			endGame = 1;
 8001998:	4b21      	ldr	r3, [pc, #132]	; (8001a20 <bump+0x494>)
 800199a:	2201      	movs	r2, #1
 800199c:	601a      	str	r2, [r3, #0]
			losing(kill);
 800199e:	4b1f      	ldr	r3, [pc, #124]	; (8001a1c <bump+0x490>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f000 f8be 	bl	8001b24 <losing>
 80019a8:	e010      	b.n	80019cc <bump+0x440>
		} else if ( health3 == 1 && showOnce == 0 ) {
 80019aa:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <bump+0x484>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d10c      	bne.n	80019cc <bump+0x440>
 80019b2:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <bump+0x498>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d108      	bne.n	80019cc <bump+0x440>
			HAL_UART_Transmit(&huart2, msg5, sizeof(unsigned char) * 23, 100);
 80019ba:	2364      	movs	r3, #100	; 0x64
 80019bc:	2217      	movs	r2, #23
 80019be:	491a      	ldr	r1, [pc, #104]	; (8001a28 <bump+0x49c>)
 80019c0:	481a      	ldr	r0, [pc, #104]	; (8001a2c <bump+0x4a0>)
 80019c2:	f008 fd81 	bl	800a4c8 <HAL_UART_Transmit>
			showOnce = 1;
 80019c6:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <bump+0x498>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	601a      	str	r2, [r3, #0]
		if ( kill == 32 && showOnce2 == 0 )
 80019cc:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <bump+0x490>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b20      	cmp	r3, #32
 80019d2:	d10c      	bne.n	80019ee <bump+0x462>
 80019d4:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <bump+0x4a4>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d108      	bne.n	80019ee <bump+0x462>
			HAL_UART_Transmit(&huart2, msg6, sizeof(unsigned char) * 32, 100);
 80019dc:	2364      	movs	r3, #100	; 0x64
 80019de:	2220      	movs	r2, #32
 80019e0:	4914      	ldr	r1, [pc, #80]	; (8001a34 <bump+0x4a8>)
 80019e2:	4812      	ldr	r0, [pc, #72]	; (8001a2c <bump+0x4a0>)
 80019e4:	f008 fd70 	bl	800a4c8 <HAL_UART_Transmit>
			showOnce2 = 1;
 80019e8:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <bump+0x4a4>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	601a      	str	r2, [r3, #0]
}
 80019ee:	bf00      	nop
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20001330 	.word	0x20001330
 80019fc:	200006d8 	.word	0x200006d8
 8001a00:	20000774 	.word	0x20000774
 8001a04:	200011f0 	.word	0x200011f0
 8001a08:	20000008 	.word	0x20000008
 8001a0c:	2000000c 	.word	0x2000000c
 8001a10:	20000010 	.word	0x20000010
 8001a14:	20000248 	.word	0x20000248
 8001a18:	20000004 	.word	0x20000004
 8001a1c:	20000300 	.word	0x20000300
 8001a20:	200002e8 	.word	0x200002e8
 8001a24:	20000304 	.word	0x20000304
 8001a28:	2000013c 	.word	0x2000013c
 8001a2c:	200012ac 	.word	0x200012ac
 8001a30:	20000308 	.word	0x20000308
 8001a34:	20000154 	.word	0x20000154

08001a38 <victory>:

void victory( int kill ) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart2, msg7, sizeof(unsigned char) * 11, 100);
 8001a40:	2364      	movs	r3, #100	; 0x64
 8001a42:	220b      	movs	r2, #11
 8001a44:	492c      	ldr	r1, [pc, #176]	; (8001af8 <victory+0xc0>)
 8001a46:	482d      	ldr	r0, [pc, #180]	; (8001afc <victory+0xc4>)
 8001a48:	f008 fd3e 	bl	800a4c8 <HAL_UART_Transmit>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a52:	482b      	ldr	r0, [pc, #172]	; (8001b00 <victory+0xc8>)
 8001a54:	f005 f9c8 	bl	8006de8 <HAL_GPIO_WritePin>
	createChar(5, smile);
 8001a58:	492a      	ldr	r1, [pc, #168]	; (8001b04 <victory+0xcc>)
 8001a5a:	2005      	movs	r0, #5
 8001a5c:	f7fe fee9 	bl	8000832 <createChar>

	setCursor(0,0);
 8001a60:	2100      	movs	r1, #0
 8001a62:	2000      	movs	r0, #0
 8001a64:	f7fe fe72 	bl	800074c <setCursor>
	print("                                                                                  ");
 8001a68:	4827      	ldr	r0, [pc, #156]	; (8001b08 <victory+0xd0>)
 8001a6a:	f7fe feb7 	bl	80007dc <print>

	char ckill[2];
	sprintf(ckill, "%d", kill);
 8001a6e:	f107 030c 	add.w	r3, r7, #12
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	4925      	ldr	r1, [pc, #148]	; (8001b0c <victory+0xd4>)
 8001a76:	4618      	mov	r0, r3
 8001a78:	f009 ffe4 	bl	800ba44 <siprintf>
	while ( kpad != 'A' )
 8001a7c:	e02e      	b.n	8001adc <victory+0xa4>
	{
		setCursor(5,0);
 8001a7e:	2100      	movs	r1, #0
 8001a80:	2005      	movs	r0, #5
 8001a82:	f7fe fe63 	bl	800074c <setCursor>
		write(5);
 8001a86:	2005      	movs	r0, #5
 8001a88:	f7fe ff0a 	bl	80008a0 <write>

		setCursor(7,0);
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	2007      	movs	r0, #7
 8001a90:	f7fe fe5c 	bl	800074c <setCursor>
		print("VICTORY");
 8001a94:	481e      	ldr	r0, [pc, #120]	; (8001b10 <victory+0xd8>)
 8001a96:	f7fe fea1 	bl	80007dc <print>

		setCursor(15,0);
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	200f      	movs	r0, #15
 8001a9e:	f7fe fe55 	bl	800074c <setCursor>
		write(5);
 8001aa2:	2005      	movs	r0, #5
 8001aa4:	f7fe fefc 	bl	80008a0 <write>

		setCursor(3,1);
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	2003      	movs	r0, #3
 8001aac:	f7fe fe4e 	bl	800074c <setCursor>
		print(name);
 8001ab0:	4818      	ldr	r0, [pc, #96]	; (8001b14 <victory+0xdc>)
 8001ab2:	f7fe fe93 	bl	80007dc <print>

		setCursor(26,0);
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	201a      	movs	r0, #26
 8001aba:	f7fe fe47 	bl	800074c <setCursor>
		print("you won!");
 8001abe:	4816      	ldr	r0, [pc, #88]	; (8001b18 <victory+0xe0>)
 8001ac0:	f7fe fe8c 	bl	80007dc <print>


		setCursor(25,1);
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	2019      	movs	r0, #25
 8001ac8:	f7fe fe40 	bl	800074c <setCursor>
		print("Kill : ");
 8001acc:	4813      	ldr	r0, [pc, #76]	; (8001b1c <victory+0xe4>)
 8001ace:	f7fe fe85 	bl	80007dc <print>
		print(ckill);
 8001ad2:	f107 030c 	add.w	r3, r7, #12
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7fe fe80 	bl	80007dc <print>
	while ( kpad != 'A' )
 8001adc:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <victory+0xe8>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2b41      	cmp	r3, #65	; 0x41
 8001ae2:	d1cc      	bne.n	8001a7e <victory+0x46>
	}

	if ( kpad == 'A' ) NVIC_SystemReset();
 8001ae4:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <victory+0xe8>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b41      	cmp	r3, #65	; 0x41
 8001aea:	d101      	bne.n	8001af0 <victory+0xb8>
 8001aec:	f7fe ffa4 	bl	8000a38 <__NVIC_SystemReset>

}
 8001af0:	bf00      	nop
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20000178 	.word	0x20000178
 8001afc:	200012ac 	.word	0x200012ac
 8001b00:	48000800 	.word	0x48000800
 8001b04:	20000208 	.word	0x20000208
 8001b08:	0800cda0 	.word	0x0800cda0
 8001b0c:	0800cf30 	.word	0x0800cf30
 8001b10:	0800cf34 	.word	0x0800cf34
 8001b14:	20001c84 	.word	0x20001c84
 8001b18:	0800cf3c 	.word	0x0800cf3c
 8001b1c:	0800cf48 	.word	0x0800cf48
 8001b20:	20000244 	.word	0x20000244

08001b24 <losing>:

void losing( int kill ) {
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart2, msg8, sizeof(unsigned char) * 12, 100);
 8001b2c:	2364      	movs	r3, #100	; 0x64
 8001b2e:	220c      	movs	r2, #12
 8001b30:	492c      	ldr	r1, [pc, #176]	; (8001be4 <losing+0xc0>)
 8001b32:	482d      	ldr	r0, [pc, #180]	; (8001be8 <losing+0xc4>)
 8001b34:	f008 fcc8 	bl	800a4c8 <HAL_UART_Transmit>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b3e:	482b      	ldr	r0, [pc, #172]	; (8001bec <losing+0xc8>)
 8001b40:	f005 f952 	bl	8006de8 <HAL_GPIO_WritePin>
	createChar(6, sad);
 8001b44:	492a      	ldr	r1, [pc, #168]	; (8001bf0 <losing+0xcc>)
 8001b46:	2006      	movs	r0, #6
 8001b48:	f7fe fe73 	bl	8000832 <createChar>

	setCursor(0,0);
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	2000      	movs	r0, #0
 8001b50:	f7fe fdfc 	bl	800074c <setCursor>
	print("                                                                                  ");
 8001b54:	4827      	ldr	r0, [pc, #156]	; (8001bf4 <losing+0xd0>)
 8001b56:	f7fe fe41 	bl	80007dc <print>

	char ckill[2];
	sprintf(ckill, "%d", kill);
 8001b5a:	f107 030c 	add.w	r3, r7, #12
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	4925      	ldr	r1, [pc, #148]	; (8001bf8 <losing+0xd4>)
 8001b62:	4618      	mov	r0, r3
 8001b64:	f009 ff6e 	bl	800ba44 <siprintf>
	while ( kpad != 'A' )
 8001b68:	e02e      	b.n	8001bc8 <losing+0xa4>
	{
		setCursor(4,0);
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	2004      	movs	r0, #4
 8001b6e:	f7fe fded 	bl	800074c <setCursor>
		write(6);
 8001b72:	2006      	movs	r0, #6
 8001b74:	f7fe fe94 	bl	80008a0 <write>

		setCursor(6,0);
 8001b78:	2100      	movs	r1, #0
 8001b7a:	2006      	movs	r0, #6
 8001b7c:	f7fe fde6 	bl	800074c <setCursor>
		print("Game Over");
 8001b80:	481e      	ldr	r0, [pc, #120]	; (8001bfc <losing+0xd8>)
 8001b82:	f7fe fe2b 	bl	80007dc <print>

		setCursor(16,0);
 8001b86:	2100      	movs	r1, #0
 8001b88:	2010      	movs	r0, #16
 8001b8a:	f7fe fddf 	bl	800074c <setCursor>
		write(6);
 8001b8e:	2006      	movs	r0, #6
 8001b90:	f7fe fe86 	bl	80008a0 <write>

		setCursor(3,1);
 8001b94:	2101      	movs	r1, #1
 8001b96:	2003      	movs	r0, #3
 8001b98:	f7fe fdd8 	bl	800074c <setCursor>
		print(name);
 8001b9c:	4818      	ldr	r0, [pc, #96]	; (8001c00 <losing+0xdc>)
 8001b9e:	f7fe fe1d 	bl	80007dc <print>

		setCursor(26,0);
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	201a      	movs	r0, #26
 8001ba6:	f7fe fdd1 	bl	800074c <setCursor>
		print("you lose!");
 8001baa:	4816      	ldr	r0, [pc, #88]	; (8001c04 <losing+0xe0>)
 8001bac:	f7fe fe16 	bl	80007dc <print>


		setCursor(25,1);
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	2019      	movs	r0, #25
 8001bb4:	f7fe fdca 	bl	800074c <setCursor>
		print("Kill : ");
 8001bb8:	4813      	ldr	r0, [pc, #76]	; (8001c08 <losing+0xe4>)
 8001bba:	f7fe fe0f 	bl	80007dc <print>
		print(ckill);
 8001bbe:	f107 030c 	add.w	r3, r7, #12
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7fe fe0a 	bl	80007dc <print>
	while ( kpad != 'A' )
 8001bc8:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <losing+0xe8>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b41      	cmp	r3, #65	; 0x41
 8001bce:	d1cc      	bne.n	8001b6a <losing+0x46>
	}

	if ( kpad == 'A' ) NVIC_SystemReset();
 8001bd0:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <losing+0xe8>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b41      	cmp	r3, #65	; 0x41
 8001bd6:	d101      	bne.n	8001bdc <losing+0xb8>
 8001bd8:	f7fe ff2e 	bl	8000a38 <__NVIC_SystemReset>

}
 8001bdc:	bf00      	nop
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20000184 	.word	0x20000184
 8001be8:	200012ac 	.word	0x200012ac
 8001bec:	48000800 	.word	0x48000800
 8001bf0:	20000210 	.word	0x20000210
 8001bf4:	0800cda0 	.word	0x0800cda0
 8001bf8:	0800cf30 	.word	0x0800cf30
 8001bfc:	0800cf50 	.word	0x0800cf50
 8001c00:	20001c84 	.word	0x20001c84
 8001c04:	0800cf5c 	.word	0x0800cf5c
 8001c08:	0800cf48 	.word	0x0800cf48
 8001c0c:	20000244 	.word	0x20000244

08001c10 <game_mode1>:

//Easy
void game_mode1() {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b086      	sub	sp, #24
 8001c14:	af00      	add	r7, sp, #0

	silent_();
 8001c16:	f002 fc45 	bl	80044a4 <silent_>

	HAL_UART_Transmit(&huart2, msg2, sizeof(unsigned char) * 84, 100);
 8001c1a:	2364      	movs	r3, #100	; 0x64
 8001c1c:	2254      	movs	r2, #84	; 0x54
 8001c1e:	4979      	ldr	r1, [pc, #484]	; (8001e04 <game_mode1+0x1f4>)
 8001c20:	4879      	ldr	r0, [pc, #484]	; (8001e08 <game_mode1+0x1f8>)
 8001c22:	f008 fc51 	bl	800a4c8 <HAL_UART_Transmit>

	HAL_TIM_Base_Start_IT(&htim2);
 8001c26:	4879      	ldr	r0, [pc, #484]	; (8001e0c <game_mode1+0x1fc>)
 8001c28:	f007 fa40 	bl	80090ac <HAL_TIM_Base_Start_IT>

	createChar(1, enemy);
 8001c2c:	4978      	ldr	r1, [pc, #480]	; (8001e10 <game_mode1+0x200>)
 8001c2e:	2001      	movs	r0, #1
 8001c30:	f7fe fdff 	bl	8000832 <createChar>
	createChar(2, ship);
 8001c34:	4977      	ldr	r1, [pc, #476]	; (8001e14 <game_mode1+0x204>)
 8001c36:	2002      	movs	r0, #2
 8001c38:	f7fe fdfb 	bl	8000832 <createChar>
	createChar(3, bullet1);
 8001c3c:	4976      	ldr	r1, [pc, #472]	; (8001e18 <game_mode1+0x208>)
 8001c3e:	2003      	movs	r0, #3
 8001c40:	f7fe fdf7 	bl	8000832 <createChar>
	createChar(4, bullet2);
 8001c44:	4975      	ldr	r1, [pc, #468]	; (8001e1c <game_mode1+0x20c>)
 8001c46:	2004      	movs	r0, #4
 8001c48:	f7fe fdf3 	bl	8000832 <createChar>

	setCursor(0,0);
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	2000      	movs	r0, #0
 8001c50:	f7fe fd7c 	bl	800074c <setCursor>
	print("                                                                                  ");
 8001c54:	4872      	ldr	r0, [pc, #456]	; (8001e20 <game_mode1+0x210>)
 8001c56:	f7fe fdc1 	bl	80007dc <print>

	enemy_col[0] = 0;
 8001c5a:	4b72      	ldr	r3, [pc, #456]	; (8001e24 <game_mode1+0x214>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
	enemy_col[1] = 0;
 8001c60:	4b70      	ldr	r3, [pc, #448]	; (8001e24 <game_mode1+0x214>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	605a      	str	r2, [r3, #4]
	enemy_row[0] = 19;
 8001c66:	4b70      	ldr	r3, [pc, #448]	; (8001e28 <game_mode1+0x218>)
 8001c68:	2213      	movs	r2, #19
 8001c6a:	601a      	str	r2, [r3, #0]
	enemy_row[1] = 39;
 8001c6c:	4b6e      	ldr	r3, [pc, #440]	; (8001e28 <game_mode1+0x218>)
 8001c6e:	2227      	movs	r2, #39	; 0x27
 8001c70:	605a      	str	r2, [r3, #4]

	int col = 2;
 8001c72:	2302      	movs	r3, #2
 8001c74:	617b      	str	r3, [r7, #20]
	ship_do(col);
 8001c76:	6978      	ldr	r0, [r7, #20]
 8001c78:	f7ff fb2e 	bl	80012d8 <ship_do>

	int r = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	603b      	str	r3, [r7, #0]

	while ( endGame == 0 ) {
 8001c80:	e1d9      	b.n	8002036 <game_mode1+0x426>

		//Auto control
		if ( kpad == 1 )
 8001c82:	4b6a      	ldr	r3, [pc, #424]	; (8001e2c <game_mode1+0x21c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d10b      	bne.n	8001ca2 <game_mode1+0x92>
		{
			autoShip(col);
 8001c8a:	6978      	ldr	r0, [r7, #20]
 8001c8c:	f001 fb22 	bl	80032d4 <autoShip>
			if ( col == 4 )
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d102      	bne.n	8001c9c <game_mode1+0x8c>
			{
				col = 1;
 8001c96:	2301      	movs	r3, #1
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	e002      	b.n	8001ca2 <game_mode1+0x92>
			} else {
				col++;
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	617b      	str	r3, [r7, #20]
			}
		}

		//fire
		if ( kpad == 5 )
 8001ca2:	4b62      	ldr	r3, [pc, #392]	; (8001e2c <game_mode1+0x21c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2b05      	cmp	r3, #5
 8001ca8:	d149      	bne.n	8001d3e <game_mode1+0x12e>
		{
			if ( col == 1 )
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d10c      	bne.n	8001cca <game_mode1+0xba>
			{
				shot_col[shot] = 0;
 8001cb0:	4b5f      	ldr	r3, [pc, #380]	; (8001e30 <game_mode1+0x220>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a5f      	ldr	r2, [pc, #380]	; (8001e34 <game_mode1+0x224>)
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				shot_row[shot] = 1;
 8001cbc:	4b5c      	ldr	r3, [pc, #368]	; (8001e30 <game_mode1+0x220>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a5d      	ldr	r2, [pc, #372]	; (8001e38 <game_mode1+0x228>)
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001cc8:	e02e      	b.n	8001d28 <game_mode1+0x118>
			} else if ( col == 2 ) {
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d10c      	bne.n	8001cea <game_mode1+0xda>
				shot_col[shot] = 1;
 8001cd0:	4b57      	ldr	r3, [pc, #348]	; (8001e30 <game_mode1+0x220>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a57      	ldr	r2, [pc, #348]	; (8001e34 <game_mode1+0x224>)
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				shot_row[shot] = 1;
 8001cdc:	4b54      	ldr	r3, [pc, #336]	; (8001e30 <game_mode1+0x220>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a55      	ldr	r2, [pc, #340]	; (8001e38 <game_mode1+0x228>)
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001ce8:	e01e      	b.n	8001d28 <game_mode1+0x118>
			} else if ( col == 3 ) {
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	2b03      	cmp	r3, #3
 8001cee:	d10c      	bne.n	8001d0a <game_mode1+0xfa>
				shot_col[shot] = 0;
 8001cf0:	4b4f      	ldr	r3, [pc, #316]	; (8001e30 <game_mode1+0x220>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a4f      	ldr	r2, [pc, #316]	; (8001e34 <game_mode1+0x224>)
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				shot_row[shot] = 21;
 8001cfc:	4b4c      	ldr	r3, [pc, #304]	; (8001e30 <game_mode1+0x220>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a4d      	ldr	r2, [pc, #308]	; (8001e38 <game_mode1+0x228>)
 8001d02:	2115      	movs	r1, #21
 8001d04:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001d08:	e00e      	b.n	8001d28 <game_mode1+0x118>
			} else if ( col == 4 ) {
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d10b      	bne.n	8001d28 <game_mode1+0x118>
				shot_col[shot] = 1;
 8001d10:	4b47      	ldr	r3, [pc, #284]	; (8001e30 <game_mode1+0x220>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a47      	ldr	r2, [pc, #284]	; (8001e34 <game_mode1+0x224>)
 8001d16:	2101      	movs	r1, #1
 8001d18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				shot_row[shot] = 21;
 8001d1c:	4b44      	ldr	r3, [pc, #272]	; (8001e30 <game_mode1+0x220>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a45      	ldr	r2, [pc, #276]	; (8001e38 <game_mode1+0x228>)
 8001d22:	2115      	movs	r1, #21
 8001d24:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}

			shot++;
 8001d28:	4b41      	ldr	r3, [pc, #260]	; (8001e30 <game_mode1+0x220>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	4a40      	ldr	r2, [pc, #256]	; (8001e30 <game_mode1+0x220>)
 8001d30:	6013      	str	r3, [r2, #0]
			kpad = -1;
 8001d32:	4b3e      	ldr	r3, [pc, #248]	; (8001e2c <game_mode1+0x21c>)
 8001d34:	f04f 32ff 	mov.w	r2, #4294967295
 8001d38:	601a      	str	r2, [r3, #0]
			shot_1();
 8001d3a:	f002 fbbd 	bl	80044b8 <shot_1>
		}
		if ( shot > 0 )
 8001d3e:	4b3c      	ldr	r3, [pc, #240]	; (8001e30 <game_mode1+0x220>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	dd30      	ble.n	8001da8 <game_mode1+0x198>
		{
			for ( int i = 0; i < shot; i++ )
 8001d46:	2300      	movs	r3, #0
 8001d48:	613b      	str	r3, [r7, #16]
 8001d4a:	e028      	b.n	8001d9e <game_mode1+0x18e>
			{
				if ( shot_row[i] < 41 )
 8001d4c:	4a3a      	ldr	r2, [pc, #232]	; (8001e38 <game_mode1+0x228>)
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d54:	2b28      	cmp	r3, #40	; 0x28
 8001d56:	dc0b      	bgt.n	8001d70 <game_mode1+0x160>
				{
					bullet_1(shot_row[i], shot_col[i]);
 8001d58:	4a37      	ldr	r2, [pc, #220]	; (8001e38 <game_mode1+0x228>)
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d60:	4934      	ldr	r1, [pc, #208]	; (8001e34 <game_mode1+0x224>)
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4610      	mov	r0, r2
 8001d6c:	f7ff fb3e 	bl	80013ec <bullet_1>
				}
				if ( shot_row[i] == 20 ) shot_row[i] = 40;
 8001d70:	4a31      	ldr	r2, [pc, #196]	; (8001e38 <game_mode1+0x228>)
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d78:	2b14      	cmp	r3, #20
 8001d7a:	d104      	bne.n	8001d86 <game_mode1+0x176>
 8001d7c:	4a2e      	ldr	r2, [pc, #184]	; (8001e38 <game_mode1+0x228>)
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	2128      	movs	r1, #40	; 0x28
 8001d82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				shot_row[i]++;
 8001d86:	4a2c      	ldr	r2, [pc, #176]	; (8001e38 <game_mode1+0x228>)
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d8e:	1c5a      	adds	r2, r3, #1
 8001d90:	4929      	ldr	r1, [pc, #164]	; (8001e38 <game_mode1+0x228>)
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for ( int i = 0; i < shot; i++ )
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	613b      	str	r3, [r7, #16]
 8001d9e:	4b24      	ldr	r3, [pc, #144]	; (8001e30 <game_mode1+0x220>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	dbd1      	blt.n	8001d4c <game_mode1+0x13c>
			}
		}

		//turn right
		if ( kpad == 9 )
 8001da8:	4b20      	ldr	r3, [pc, #128]	; (8001e2c <game_mode1+0x21c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2b09      	cmp	r3, #9
 8001dae:	d10c      	bne.n	8001dca <game_mode1+0x1ba>
		{
			if ( col == 4 )
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d102      	bne.n	8001dbc <game_mode1+0x1ac>
			{
				col = 1;
 8001db6:	2301      	movs	r3, #1
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	e002      	b.n	8001dc2 <game_mode1+0x1b2>
			} else {
				col++;
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	617b      	str	r3, [r7, #20]
			}
			kpad = -1;
 8001dc2:	4b1a      	ldr	r3, [pc, #104]	; (8001e2c <game_mode1+0x21c>)
 8001dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc8:	601a      	str	r2, [r3, #0]
		}

		//turn left
		if ( kpad == 7 )
 8001dca:	4b18      	ldr	r3, [pc, #96]	; (8001e2c <game_mode1+0x21c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2b07      	cmp	r3, #7
 8001dd0:	d10c      	bne.n	8001dec <game_mode1+0x1dc>
		{
			if ( col == 1 )
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d102      	bne.n	8001dde <game_mode1+0x1ce>
			{
				col = 4;
 8001dd8:	2304      	movs	r3, #4
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	e002      	b.n	8001de4 <game_mode1+0x1d4>
			} else {
				col--;
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	3b01      	subs	r3, #1
 8001de2:	617b      	str	r3, [r7, #20]
			}
			kpad = -1;
 8001de4:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <game_mode1+0x21c>)
 8001de6:	f04f 32ff 	mov.w	r2, #4294967295
 8001dea:	601a      	str	r2, [r3, #0]
		}

		ship_do(col);
 8001dec:	6978      	ldr	r0, [r7, #20]
 8001dee:	f7ff fa73 	bl	80012d8 <ship_do>

		if ( nCop != n )
 8001df2:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <game_mode1+0x22c>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <game_mode1+0x230>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d072      	beq.n	8001ee4 <game_mode1+0x2d4>
		{
			for ( int i = 0; i < n; i = i + 2 )
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	e063      	b.n	8001ecc <game_mode1+0x2bc>
 8001e04:	20000030 	.word	0x20000030
 8001e08:	200012ac 	.word	0x200012ac
 8001e0c:	20001258 	.word	0x20001258
 8001e10:	200001e0 	.word	0x200001e0
 8001e14:	200001e8 	.word	0x200001e8
 8001e18:	200001f0 	.word	0x200001f0
 8001e1c:	200001f8 	.word	0x200001f8
 8001e20:	0800cda0 	.word	0x0800cda0
 8001e24:	20000774 	.word	0x20000774
 8001e28:	20001330 	.word	0x20001330
 8001e2c:	20000244 	.word	0x20000244
 8001e30:	200002f0 	.word	0x200002f0
 8001e34:	20000ed0 	.word	0x20000ed0
 8001e38:	20001950 	.word	0x20001950
 8001e3c:	200002f4 	.word	0x200002f4
 8001e40:	20000248 	.word	0x20000248
			{
				if ( enemy_row[i] >= 0 ) enemy_do(enemy_row[i], enemy_col[i]);
 8001e44:	4a81      	ldr	r2, [pc, #516]	; (800204c <game_mode1+0x43c>)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	db0b      	blt.n	8001e68 <game_mode1+0x258>
 8001e50:	4a7e      	ldr	r2, [pc, #504]	; (800204c <game_mode1+0x43c>)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e58:	497d      	ldr	r1, [pc, #500]	; (8002050 <game_mode1+0x440>)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e60:	4619      	mov	r1, r3
 8001e62:	4610      	mov	r0, r2
 8001e64:	f7ff fb5c 	bl	8001520 <enemy_do>
				if ( enemy_row[i+1] >= 0 ) enemy_do(enemy_row[i+1], enemy_col[i+1]);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	4a77      	ldr	r2, [pc, #476]	; (800204c <game_mode1+0x43c>)
 8001e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	db0d      	blt.n	8001e92 <game_mode1+0x282>
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	4a74      	ldr	r2, [pc, #464]	; (800204c <game_mode1+0x43c>)
 8001e7c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	3301      	adds	r3, #1
 8001e84:	4972      	ldr	r1, [pc, #456]	; (8002050 <game_mode1+0x440>)
 8001e86:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4610      	mov	r0, r2
 8001e8e:	f7ff fb47 	bl	8001520 <enemy_do>
				if ( enemy_row[i] == 20 ) enemy_row[i] = -1;
 8001e92:	4a6e      	ldr	r2, [pc, #440]	; (800204c <game_mode1+0x43c>)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9a:	2b14      	cmp	r3, #20
 8001e9c:	d105      	bne.n	8001eaa <game_mode1+0x29a>
 8001e9e:	4a6b      	ldr	r2, [pc, #428]	; (800204c <game_mode1+0x43c>)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if ( enemy_row[i+1] == 20 ) enemy_row[i+1] = -1;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	3301      	adds	r3, #1
 8001eae:	4a67      	ldr	r2, [pc, #412]	; (800204c <game_mode1+0x43c>)
 8001eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb4:	2b14      	cmp	r3, #20
 8001eb6:	d106      	bne.n	8001ec6 <game_mode1+0x2b6>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	4a63      	ldr	r2, [pc, #396]	; (800204c <game_mode1+0x43c>)
 8001ebe:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for ( int i = 0; i < n; i = i + 2 )
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	3302      	adds	r3, #2
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	4b61      	ldr	r3, [pc, #388]	; (8002054 <game_mode1+0x444>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	dbb6      	blt.n	8001e44 <game_mode1+0x234>
			}

			nCop = n;
 8001ed6:	4b5f      	ldr	r3, [pc, #380]	; (8002054 <game_mode1+0x444>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a5f      	ldr	r2, [pc, #380]	; (8002058 <game_mode1+0x448>)
 8001edc:	6013      	str	r3, [r2, #0]
			shotE = 0;
 8001ede:	4b5f      	ldr	r3, [pc, #380]	; (800205c <game_mode1+0x44c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
		}

		if ( n%2 == 0 && shotE == 0 )
 8001ee4:	4b5b      	ldr	r3, [pc, #364]	; (8002054 <game_mode1+0x444>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d12f      	bne.n	8001f50 <game_mode1+0x340>
 8001ef0:	4b5a      	ldr	r3, [pc, #360]	; (800205c <game_mode1+0x44c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d12b      	bne.n	8001f50 <game_mode1+0x340>
		{
			r = rand() % n ;
 8001ef8:	f009 fd64 	bl	800b9c4 <rand>
 8001efc:	4602      	mov	r2, r0
 8001efe:	4b55      	ldr	r3, [pc, #340]	; (8002054 <game_mode1+0x444>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	fb92 f1f3 	sdiv	r1, r2, r3
 8001f06:	fb03 f301 	mul.w	r3, r3, r1
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	603b      	str	r3, [r7, #0]
			if ( enemy_row[r] > 1 )
 8001f0e:	4a4f      	ldr	r2, [pc, #316]	; (800204c <game_mode1+0x43c>)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	dd1a      	ble.n	8001f50 <game_mode1+0x340>
			{
				shotE_row[shotE_count] = enemy_row[r]-1;
 8001f1a:	4a4c      	ldr	r2, [pc, #304]	; (800204c <game_mode1+0x43c>)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f22:	4b4f      	ldr	r3, [pc, #316]	; (8002060 <game_mode1+0x450>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	3a01      	subs	r2, #1
 8001f28:	494e      	ldr	r1, [pc, #312]	; (8002064 <game_mode1+0x454>)
 8001f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				shotE_col[shotE_count] = enemy_col[r];
 8001f2e:	4b4c      	ldr	r3, [pc, #304]	; (8002060 <game_mode1+0x450>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4947      	ldr	r1, [pc, #284]	; (8002050 <game_mode1+0x440>)
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001f3a:	494b      	ldr	r1, [pc, #300]	; (8002068 <game_mode1+0x458>)
 8001f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				shotE = 1;
 8001f40:	4b46      	ldr	r3, [pc, #280]	; (800205c <game_mode1+0x44c>)
 8001f42:	2201      	movs	r2, #1
 8001f44:	601a      	str	r2, [r3, #0]
				shotE_count++;
 8001f46:	4b46      	ldr	r3, [pc, #280]	; (8002060 <game_mode1+0x450>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	4a44      	ldr	r2, [pc, #272]	; (8002060 <game_mode1+0x450>)
 8001f4e:	6013      	str	r3, [r2, #0]
			}
		}

		if ( shotE_count > 0 )
 8001f50:	4b43      	ldr	r3, [pc, #268]	; (8002060 <game_mode1+0x450>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	dd6c      	ble.n	8002032 <game_mode1+0x422>
		{
			for ( int i = 0; i < shotE_count; i++ )
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60bb      	str	r3, [r7, #8]
 8001f5c:	e064      	b.n	8002028 <game_mode1+0x418>
			{
				if ( shotE_row[i] >= 0 )
 8001f5e:	4a41      	ldr	r2, [pc, #260]	; (8002064 <game_mode1+0x454>)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	db4f      	blt.n	800200a <game_mode1+0x3fa>
				{
					bullet_2(shotE_row[i], shotE_col[i]);
 8001f6a:	4a3e      	ldr	r2, [pc, #248]	; (8002064 <game_mode1+0x454>)
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f72:	493d      	ldr	r1, [pc, #244]	; (8002068 <game_mode1+0x458>)
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	f7ff fa89 	bl	8001494 <bullet_2>
					HAL_Delay(50);
 8001f82:	2032      	movs	r0, #50	; 0x32
 8001f84:	f003 f8ca 	bl	800511c <HAL_Delay>
					for ( int j = 0; j < n; j++ )
 8001f88:	2300      	movs	r3, #0
 8001f8a:	607b      	str	r3, [r7, #4]
 8001f8c:	e02f      	b.n	8001fee <game_mode1+0x3de>
					{
						if ( shotE_row[i] > 0 && enemy_row[j] > 0 )
 8001f8e:	4a35      	ldr	r2, [pc, #212]	; (8002064 <game_mode1+0x454>)
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	dd26      	ble.n	8001fe8 <game_mode1+0x3d8>
 8001f9a:	4a2c      	ldr	r2, [pc, #176]	; (800204c <game_mode1+0x43c>)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	dd20      	ble.n	8001fe8 <game_mode1+0x3d8>
						{
							if ( shotE_row[i] == enemy_row[j]-1 && shotE_col[i] == enemy_col[j] )
 8001fa6:	4a2f      	ldr	r2, [pc, #188]	; (8002064 <game_mode1+0x454>)
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001fae:	4927      	ldr	r1, [pc, #156]	; (800204c <game_mode1+0x43c>)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d115      	bne.n	8001fe8 <game_mode1+0x3d8>
 8001fbc:	4a2a      	ldr	r2, [pc, #168]	; (8002068 <game_mode1+0x458>)
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001fc4:	4922      	ldr	r1, [pc, #136]	; (8002050 <game_mode1+0x440>)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d10b      	bne.n	8001fe8 <game_mode1+0x3d8>
							{
								 enemy_do(enemy_row[j], enemy_col[j]);
 8001fd0:	4a1e      	ldr	r2, [pc, #120]	; (800204c <game_mode1+0x43c>)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001fd8:	491d      	ldr	r1, [pc, #116]	; (8002050 <game_mode1+0x440>)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4610      	mov	r0, r2
 8001fe4:	f7ff fa9c 	bl	8001520 <enemy_do>
					for ( int j = 0; j < n; j++ )
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3301      	adds	r3, #1
 8001fec:	607b      	str	r3, [r7, #4]
 8001fee:	4b19      	ldr	r3, [pc, #100]	; (8002054 <game_mode1+0x444>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	dbca      	blt.n	8001f8e <game_mode1+0x37e>
							}
						}
					}
					shotE_row[i]--;
 8001ff8:	4a1a      	ldr	r2, [pc, #104]	; (8002064 <game_mode1+0x454>)
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002000:	1e5a      	subs	r2, r3, #1
 8002002:	4918      	ldr	r1, [pc, #96]	; (8002064 <game_mode1+0x454>)
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				}
				if ( shotE_row[i] == 19 ) shotE_row[i] = -1;
 800200a:	4a16      	ldr	r2, [pc, #88]	; (8002064 <game_mode1+0x454>)
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002012:	2b13      	cmp	r3, #19
 8002014:	d105      	bne.n	8002022 <game_mode1+0x412>
 8002016:	4a13      	ldr	r2, [pc, #76]	; (8002064 <game_mode1+0x454>)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	f04f 31ff 	mov.w	r1, #4294967295
 800201e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for ( int i = 0; i < shotE_count; i++ )
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	3301      	adds	r3, #1
 8002026:	60bb      	str	r3, [r7, #8]
 8002028:	4b0d      	ldr	r3, [pc, #52]	; (8002060 <game_mode1+0x450>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68ba      	ldr	r2, [r7, #8]
 800202e:	429a      	cmp	r2, r3
 8002030:	db95      	blt.n	8001f5e <game_mode1+0x34e>

			}
		}

		bump();
 8002032:	f7ff faab 	bl	800158c <bump>
	while ( endGame == 0 ) {
 8002036:	4b0d      	ldr	r3, [pc, #52]	; (800206c <game_mode1+0x45c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	f43f ae21 	beq.w	8001c82 <game_mode1+0x72>

	}

}
 8002040:	bf00      	nop
 8002042:	bf00      	nop
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20001330 	.word	0x20001330
 8002050:	20000774 	.word	0x20000774
 8002054:	20000248 	.word	0x20000248
 8002058:	200002f4 	.word	0x200002f4
 800205c:	200002fc 	.word	0x200002fc
 8002060:	200002f8 	.word	0x200002f8
 8002064:	20000a94 	.word	0x20000a94
 8002068:	200003b8 	.word	0x200003b8
 800206c:	200002e8 	.word	0x200002e8

08002070 <game_mode2>:

//Normal
void game_mode2() {
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0

	silent_();
 8002076:	f002 fa15 	bl	80044a4 <silent_>

	HAL_UART_Transmit(&huart2, msg3, sizeof(unsigned char) * 86, 100);
 800207a:	2364      	movs	r3, #100	; 0x64
 800207c:	2256      	movs	r2, #86	; 0x56
 800207e:	4979      	ldr	r1, [pc, #484]	; (8002264 <game_mode2+0x1f4>)
 8002080:	4879      	ldr	r0, [pc, #484]	; (8002268 <game_mode2+0x1f8>)
 8002082:	f008 fa21 	bl	800a4c8 <HAL_UART_Transmit>

	HAL_TIM_Base_Start_IT(&htim3);
 8002086:	4879      	ldr	r0, [pc, #484]	; (800226c <game_mode2+0x1fc>)
 8002088:	f007 f810 	bl	80090ac <HAL_TIM_Base_Start_IT>

	createChar(1, enemy);
 800208c:	4978      	ldr	r1, [pc, #480]	; (8002270 <game_mode2+0x200>)
 800208e:	2001      	movs	r0, #1
 8002090:	f7fe fbcf 	bl	8000832 <createChar>
	createChar(2, ship);
 8002094:	4977      	ldr	r1, [pc, #476]	; (8002274 <game_mode2+0x204>)
 8002096:	2002      	movs	r0, #2
 8002098:	f7fe fbcb 	bl	8000832 <createChar>
	createChar(3, bullet1);
 800209c:	4976      	ldr	r1, [pc, #472]	; (8002278 <game_mode2+0x208>)
 800209e:	2003      	movs	r0, #3
 80020a0:	f7fe fbc7 	bl	8000832 <createChar>
	createChar(4, bullet2);
 80020a4:	4975      	ldr	r1, [pc, #468]	; (800227c <game_mode2+0x20c>)
 80020a6:	2004      	movs	r0, #4
 80020a8:	f7fe fbc3 	bl	8000832 <createChar>

	setCursor(0,0);
 80020ac:	2100      	movs	r1, #0
 80020ae:	2000      	movs	r0, #0
 80020b0:	f7fe fb4c 	bl	800074c <setCursor>
	print("                                                                                  ");
 80020b4:	4872      	ldr	r0, [pc, #456]	; (8002280 <game_mode2+0x210>)
 80020b6:	f7fe fb91 	bl	80007dc <print>

	enemy_col[0] = 0;
 80020ba:	4b72      	ldr	r3, [pc, #456]	; (8002284 <game_mode2+0x214>)
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
	enemy_col[1] = 0;
 80020c0:	4b70      	ldr	r3, [pc, #448]	; (8002284 <game_mode2+0x214>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	605a      	str	r2, [r3, #4]
	enemy_row[0] = 19;
 80020c6:	4b70      	ldr	r3, [pc, #448]	; (8002288 <game_mode2+0x218>)
 80020c8:	2213      	movs	r2, #19
 80020ca:	601a      	str	r2, [r3, #0]
	enemy_row[1] = 39;
 80020cc:	4b6e      	ldr	r3, [pc, #440]	; (8002288 <game_mode2+0x218>)
 80020ce:	2227      	movs	r2, #39	; 0x27
 80020d0:	605a      	str	r2, [r3, #4]

	int col = 2;
 80020d2:	2302      	movs	r3, #2
 80020d4:	617b      	str	r3, [r7, #20]
	ship_do(col);
 80020d6:	6978      	ldr	r0, [r7, #20]
 80020d8:	f7ff f8fe 	bl	80012d8 <ship_do>

	int r = 0;
 80020dc:	2300      	movs	r3, #0
 80020de:	603b      	str	r3, [r7, #0]

	while ( endGame == 0 ) {
 80020e0:	e1d9      	b.n	8002496 <game_mode2+0x426>

		//Auto control
		if ( kpad == 1 )
 80020e2:	4b6a      	ldr	r3, [pc, #424]	; (800228c <game_mode2+0x21c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d10b      	bne.n	8002102 <game_mode2+0x92>
		{
			autoShip(col);
 80020ea:	6978      	ldr	r0, [r7, #20]
 80020ec:	f001 f8f2 	bl	80032d4 <autoShip>
			if ( col == 4 )
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	d102      	bne.n	80020fc <game_mode2+0x8c>
			{
				col = 1;
 80020f6:	2301      	movs	r3, #1
 80020f8:	617b      	str	r3, [r7, #20]
 80020fa:	e002      	b.n	8002102 <game_mode2+0x92>
			} else {
				col++;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	3301      	adds	r3, #1
 8002100:	617b      	str	r3, [r7, #20]
			}
		}

		//fire
		if ( kpad == 5 )
 8002102:	4b62      	ldr	r3, [pc, #392]	; (800228c <game_mode2+0x21c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2b05      	cmp	r3, #5
 8002108:	d149      	bne.n	800219e <game_mode2+0x12e>
		{
			if ( col == 1 )
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d10c      	bne.n	800212a <game_mode2+0xba>
			{
				shot_col[shot] = 0;
 8002110:	4b5f      	ldr	r3, [pc, #380]	; (8002290 <game_mode2+0x220>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a5f      	ldr	r2, [pc, #380]	; (8002294 <game_mode2+0x224>)
 8002116:	2100      	movs	r1, #0
 8002118:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				shot_row[shot] = 1;
 800211c:	4b5c      	ldr	r3, [pc, #368]	; (8002290 <game_mode2+0x220>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a5d      	ldr	r2, [pc, #372]	; (8002298 <game_mode2+0x228>)
 8002122:	2101      	movs	r1, #1
 8002124:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8002128:	e02e      	b.n	8002188 <game_mode2+0x118>
			} else if ( col == 2 ) {
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	2b02      	cmp	r3, #2
 800212e:	d10c      	bne.n	800214a <game_mode2+0xda>
				shot_col[shot] = 1;
 8002130:	4b57      	ldr	r3, [pc, #348]	; (8002290 <game_mode2+0x220>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a57      	ldr	r2, [pc, #348]	; (8002294 <game_mode2+0x224>)
 8002136:	2101      	movs	r1, #1
 8002138:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				shot_row[shot] = 1;
 800213c:	4b54      	ldr	r3, [pc, #336]	; (8002290 <game_mode2+0x220>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a55      	ldr	r2, [pc, #340]	; (8002298 <game_mode2+0x228>)
 8002142:	2101      	movs	r1, #1
 8002144:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8002148:	e01e      	b.n	8002188 <game_mode2+0x118>
			} else if ( col == 3 ) {
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	2b03      	cmp	r3, #3
 800214e:	d10c      	bne.n	800216a <game_mode2+0xfa>
				shot_col[shot] = 0;
 8002150:	4b4f      	ldr	r3, [pc, #316]	; (8002290 <game_mode2+0x220>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a4f      	ldr	r2, [pc, #316]	; (8002294 <game_mode2+0x224>)
 8002156:	2100      	movs	r1, #0
 8002158:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				shot_row[shot] = 21;
 800215c:	4b4c      	ldr	r3, [pc, #304]	; (8002290 <game_mode2+0x220>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a4d      	ldr	r2, [pc, #308]	; (8002298 <game_mode2+0x228>)
 8002162:	2115      	movs	r1, #21
 8002164:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8002168:	e00e      	b.n	8002188 <game_mode2+0x118>
			} else if ( col == 4 ) {
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	2b04      	cmp	r3, #4
 800216e:	d10b      	bne.n	8002188 <game_mode2+0x118>
				shot_col[shot] = 1;
 8002170:	4b47      	ldr	r3, [pc, #284]	; (8002290 <game_mode2+0x220>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a47      	ldr	r2, [pc, #284]	; (8002294 <game_mode2+0x224>)
 8002176:	2101      	movs	r1, #1
 8002178:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				shot_row[shot] = 21;
 800217c:	4b44      	ldr	r3, [pc, #272]	; (8002290 <game_mode2+0x220>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a45      	ldr	r2, [pc, #276]	; (8002298 <game_mode2+0x228>)
 8002182:	2115      	movs	r1, #21
 8002184:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}

			shot++;
 8002188:	4b41      	ldr	r3, [pc, #260]	; (8002290 <game_mode2+0x220>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	3301      	adds	r3, #1
 800218e:	4a40      	ldr	r2, [pc, #256]	; (8002290 <game_mode2+0x220>)
 8002190:	6013      	str	r3, [r2, #0]
			kpad = -1;
 8002192:	4b3e      	ldr	r3, [pc, #248]	; (800228c <game_mode2+0x21c>)
 8002194:	f04f 32ff 	mov.w	r2, #4294967295
 8002198:	601a      	str	r2, [r3, #0]
			shot_1();
 800219a:	f002 f98d 	bl	80044b8 <shot_1>
		}
		if ( shot > 0 )
 800219e:	4b3c      	ldr	r3, [pc, #240]	; (8002290 <game_mode2+0x220>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	dd30      	ble.n	8002208 <game_mode2+0x198>
		{
			for ( int i = 0; i < shot; i++ )
 80021a6:	2300      	movs	r3, #0
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	e028      	b.n	80021fe <game_mode2+0x18e>
			{
				if ( shot_row[i] < 41 )
 80021ac:	4a3a      	ldr	r2, [pc, #232]	; (8002298 <game_mode2+0x228>)
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b4:	2b28      	cmp	r3, #40	; 0x28
 80021b6:	dc0b      	bgt.n	80021d0 <game_mode2+0x160>
				{
					bullet_1(shot_row[i], shot_col[i]);
 80021b8:	4a37      	ldr	r2, [pc, #220]	; (8002298 <game_mode2+0x228>)
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80021c0:	4934      	ldr	r1, [pc, #208]	; (8002294 <game_mode2+0x224>)
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80021c8:	4619      	mov	r1, r3
 80021ca:	4610      	mov	r0, r2
 80021cc:	f7ff f90e 	bl	80013ec <bullet_1>
				}
				if ( shot_row[i] == 20 ) shot_row[i] = 40;
 80021d0:	4a31      	ldr	r2, [pc, #196]	; (8002298 <game_mode2+0x228>)
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d8:	2b14      	cmp	r3, #20
 80021da:	d104      	bne.n	80021e6 <game_mode2+0x176>
 80021dc:	4a2e      	ldr	r2, [pc, #184]	; (8002298 <game_mode2+0x228>)
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	2128      	movs	r1, #40	; 0x28
 80021e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				shot_row[i]++;
 80021e6:	4a2c      	ldr	r2, [pc, #176]	; (8002298 <game_mode2+0x228>)
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	4929      	ldr	r1, [pc, #164]	; (8002298 <game_mode2+0x228>)
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for ( int i = 0; i < shot; i++ )
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	3301      	adds	r3, #1
 80021fc:	613b      	str	r3, [r7, #16]
 80021fe:	4b24      	ldr	r3, [pc, #144]	; (8002290 <game_mode2+0x220>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	429a      	cmp	r2, r3
 8002206:	dbd1      	blt.n	80021ac <game_mode2+0x13c>
			}
		}

		//turn right
		if ( kpad == 9 )
 8002208:	4b20      	ldr	r3, [pc, #128]	; (800228c <game_mode2+0x21c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2b09      	cmp	r3, #9
 800220e:	d10c      	bne.n	800222a <game_mode2+0x1ba>
		{
			if ( col == 4 )
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	2b04      	cmp	r3, #4
 8002214:	d102      	bne.n	800221c <game_mode2+0x1ac>
			{
				col = 1;
 8002216:	2301      	movs	r3, #1
 8002218:	617b      	str	r3, [r7, #20]
 800221a:	e002      	b.n	8002222 <game_mode2+0x1b2>
			} else {
				col++;
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	3301      	adds	r3, #1
 8002220:	617b      	str	r3, [r7, #20]
			}
			kpad = -1;
 8002222:	4b1a      	ldr	r3, [pc, #104]	; (800228c <game_mode2+0x21c>)
 8002224:	f04f 32ff 	mov.w	r2, #4294967295
 8002228:	601a      	str	r2, [r3, #0]
		}

		//turn left
		if ( kpad == 7 )
 800222a:	4b18      	ldr	r3, [pc, #96]	; (800228c <game_mode2+0x21c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2b07      	cmp	r3, #7
 8002230:	d10c      	bne.n	800224c <game_mode2+0x1dc>
		{
			if ( col == 1 )
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d102      	bne.n	800223e <game_mode2+0x1ce>
			{
				col = 4;
 8002238:	2304      	movs	r3, #4
 800223a:	617b      	str	r3, [r7, #20]
 800223c:	e002      	b.n	8002244 <game_mode2+0x1d4>
			} else {
				col--;
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	3b01      	subs	r3, #1
 8002242:	617b      	str	r3, [r7, #20]
			}
			kpad = -1;
 8002244:	4b11      	ldr	r3, [pc, #68]	; (800228c <game_mode2+0x21c>)
 8002246:	f04f 32ff 	mov.w	r2, #4294967295
 800224a:	601a      	str	r2, [r3, #0]
		}

		ship_do(col);
 800224c:	6978      	ldr	r0, [r7, #20]
 800224e:	f7ff f843 	bl	80012d8 <ship_do>

		if ( nCop != n )
 8002252:	4b12      	ldr	r3, [pc, #72]	; (800229c <game_mode2+0x22c>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <game_mode2+0x230>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	429a      	cmp	r2, r3
 800225c:	d072      	beq.n	8002344 <game_mode2+0x2d4>
		{
			for ( int i = 0; i < n; i = i + 2 )
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	e063      	b.n	800232c <game_mode2+0x2bc>
 8002264:	20000088 	.word	0x20000088
 8002268:	200012ac 	.word	0x200012ac
 800226c:	20000db4 	.word	0x20000db4
 8002270:	200001e0 	.word	0x200001e0
 8002274:	200001e8 	.word	0x200001e8
 8002278:	200001f0 	.word	0x200001f0
 800227c:	200001f8 	.word	0x200001f8
 8002280:	0800cda0 	.word	0x0800cda0
 8002284:	20000774 	.word	0x20000774
 8002288:	20001330 	.word	0x20001330
 800228c:	20000244 	.word	0x20000244
 8002290:	200002f0 	.word	0x200002f0
 8002294:	20000ed0 	.word	0x20000ed0
 8002298:	20001950 	.word	0x20001950
 800229c:	200002f4 	.word	0x200002f4
 80022a0:	20000248 	.word	0x20000248
			{
				if ( enemy_row[i] >= 0 ) enemy_do(enemy_row[i], enemy_col[i]);
 80022a4:	4a81      	ldr	r2, [pc, #516]	; (80024ac <game_mode2+0x43c>)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	db0b      	blt.n	80022c8 <game_mode2+0x258>
 80022b0:	4a7e      	ldr	r2, [pc, #504]	; (80024ac <game_mode2+0x43c>)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80022b8:	497d      	ldr	r1, [pc, #500]	; (80024b0 <game_mode2+0x440>)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80022c0:	4619      	mov	r1, r3
 80022c2:	4610      	mov	r0, r2
 80022c4:	f7ff f92c 	bl	8001520 <enemy_do>
				if ( enemy_row[i+1] >= 0 ) enemy_do(enemy_row[i+1], enemy_col[i+1]);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	3301      	adds	r3, #1
 80022cc:	4a77      	ldr	r2, [pc, #476]	; (80024ac <game_mode2+0x43c>)
 80022ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	db0d      	blt.n	80022f2 <game_mode2+0x282>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	3301      	adds	r3, #1
 80022da:	4a74      	ldr	r2, [pc, #464]	; (80024ac <game_mode2+0x43c>)
 80022dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	3301      	adds	r3, #1
 80022e4:	4972      	ldr	r1, [pc, #456]	; (80024b0 <game_mode2+0x440>)
 80022e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80022ea:	4619      	mov	r1, r3
 80022ec:	4610      	mov	r0, r2
 80022ee:	f7ff f917 	bl	8001520 <enemy_do>
				if ( enemy_row[i] == 20 ) enemy_row[i] = -1;
 80022f2:	4a6e      	ldr	r2, [pc, #440]	; (80024ac <game_mode2+0x43c>)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022fa:	2b14      	cmp	r3, #20
 80022fc:	d105      	bne.n	800230a <game_mode2+0x29a>
 80022fe:	4a6b      	ldr	r2, [pc, #428]	; (80024ac <game_mode2+0x43c>)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f04f 31ff 	mov.w	r1, #4294967295
 8002306:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if ( enemy_row[i+1] == 20 ) enemy_row[i+1] = -1;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	3301      	adds	r3, #1
 800230e:	4a67      	ldr	r2, [pc, #412]	; (80024ac <game_mode2+0x43c>)
 8002310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002314:	2b14      	cmp	r3, #20
 8002316:	d106      	bne.n	8002326 <game_mode2+0x2b6>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	3301      	adds	r3, #1
 800231c:	4a63      	ldr	r2, [pc, #396]	; (80024ac <game_mode2+0x43c>)
 800231e:	f04f 31ff 	mov.w	r1, #4294967295
 8002322:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for ( int i = 0; i < n; i = i + 2 )
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	3302      	adds	r3, #2
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	4b61      	ldr	r3, [pc, #388]	; (80024b4 <game_mode2+0x444>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	429a      	cmp	r2, r3
 8002334:	dbb6      	blt.n	80022a4 <game_mode2+0x234>
			}

			nCop = n;
 8002336:	4b5f      	ldr	r3, [pc, #380]	; (80024b4 <game_mode2+0x444>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a5f      	ldr	r2, [pc, #380]	; (80024b8 <game_mode2+0x448>)
 800233c:	6013      	str	r3, [r2, #0]
			shotE = 0;
 800233e:	4b5f      	ldr	r3, [pc, #380]	; (80024bc <game_mode2+0x44c>)
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
		}

		if ( n%2 == 0 && shotE == 0 )
 8002344:	4b5b      	ldr	r3, [pc, #364]	; (80024b4 <game_mode2+0x444>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b00      	cmp	r3, #0
 800234e:	d12f      	bne.n	80023b0 <game_mode2+0x340>
 8002350:	4b5a      	ldr	r3, [pc, #360]	; (80024bc <game_mode2+0x44c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d12b      	bne.n	80023b0 <game_mode2+0x340>
		{
			r = rand() % n ;
 8002358:	f009 fb34 	bl	800b9c4 <rand>
 800235c:	4602      	mov	r2, r0
 800235e:	4b55      	ldr	r3, [pc, #340]	; (80024b4 <game_mode2+0x444>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	fb92 f1f3 	sdiv	r1, r2, r3
 8002366:	fb03 f301 	mul.w	r3, r3, r1
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	603b      	str	r3, [r7, #0]
			if ( enemy_row[r] > 1 )
 800236e:	4a4f      	ldr	r2, [pc, #316]	; (80024ac <game_mode2+0x43c>)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002376:	2b01      	cmp	r3, #1
 8002378:	dd1a      	ble.n	80023b0 <game_mode2+0x340>
			{
				shotE_row[shotE_count] = enemy_row[r]-1;
 800237a:	4a4c      	ldr	r2, [pc, #304]	; (80024ac <game_mode2+0x43c>)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002382:	4b4f      	ldr	r3, [pc, #316]	; (80024c0 <game_mode2+0x450>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	3a01      	subs	r2, #1
 8002388:	494e      	ldr	r1, [pc, #312]	; (80024c4 <game_mode2+0x454>)
 800238a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				shotE_col[shotE_count] = enemy_col[r];
 800238e:	4b4c      	ldr	r3, [pc, #304]	; (80024c0 <game_mode2+0x450>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4947      	ldr	r1, [pc, #284]	; (80024b0 <game_mode2+0x440>)
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800239a:	494b      	ldr	r1, [pc, #300]	; (80024c8 <game_mode2+0x458>)
 800239c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				shotE = 1;
 80023a0:	4b46      	ldr	r3, [pc, #280]	; (80024bc <game_mode2+0x44c>)
 80023a2:	2201      	movs	r2, #1
 80023a4:	601a      	str	r2, [r3, #0]
				shotE_count++;
 80023a6:	4b46      	ldr	r3, [pc, #280]	; (80024c0 <game_mode2+0x450>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	3301      	adds	r3, #1
 80023ac:	4a44      	ldr	r2, [pc, #272]	; (80024c0 <game_mode2+0x450>)
 80023ae:	6013      	str	r3, [r2, #0]
			}
		}

		if ( shotE_count > 0 )
 80023b0:	4b43      	ldr	r3, [pc, #268]	; (80024c0 <game_mode2+0x450>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	dd6c      	ble.n	8002492 <game_mode2+0x422>
		{
			for ( int i = 0; i < shotE_count; i++ )
 80023b8:	2300      	movs	r3, #0
 80023ba:	60bb      	str	r3, [r7, #8]
 80023bc:	e064      	b.n	8002488 <game_mode2+0x418>
			{
				if ( shotE_row[i] >= 0 )
 80023be:	4a41      	ldr	r2, [pc, #260]	; (80024c4 <game_mode2+0x454>)
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	db4f      	blt.n	800246a <game_mode2+0x3fa>
				{
					bullet_2(shotE_row[i], shotE_col[i]);
 80023ca:	4a3e      	ldr	r2, [pc, #248]	; (80024c4 <game_mode2+0x454>)
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80023d2:	493d      	ldr	r1, [pc, #244]	; (80024c8 <game_mode2+0x458>)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80023da:	4619      	mov	r1, r3
 80023dc:	4610      	mov	r0, r2
 80023de:	f7ff f859 	bl	8001494 <bullet_2>
					HAL_Delay(50);
 80023e2:	2032      	movs	r0, #50	; 0x32
 80023e4:	f002 fe9a 	bl	800511c <HAL_Delay>
					for ( int j = 0; j < n; j++ )
 80023e8:	2300      	movs	r3, #0
 80023ea:	607b      	str	r3, [r7, #4]
 80023ec:	e02f      	b.n	800244e <game_mode2+0x3de>
					{
						if ( shotE_row[i] > 0 && enemy_row[j] > 0 )
 80023ee:	4a35      	ldr	r2, [pc, #212]	; (80024c4 <game_mode2+0x454>)
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	dd26      	ble.n	8002448 <game_mode2+0x3d8>
 80023fa:	4a2c      	ldr	r2, [pc, #176]	; (80024ac <game_mode2+0x43c>)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002402:	2b00      	cmp	r3, #0
 8002404:	dd20      	ble.n	8002448 <game_mode2+0x3d8>
						{
							if ( shotE_row[i] == enemy_row[j]-1 && shotE_col[i] == enemy_col[j] )
 8002406:	4a2f      	ldr	r2, [pc, #188]	; (80024c4 <game_mode2+0x454>)
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800240e:	4927      	ldr	r1, [pc, #156]	; (80024ac <game_mode2+0x43c>)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002416:	3b01      	subs	r3, #1
 8002418:	429a      	cmp	r2, r3
 800241a:	d115      	bne.n	8002448 <game_mode2+0x3d8>
 800241c:	4a2a      	ldr	r2, [pc, #168]	; (80024c8 <game_mode2+0x458>)
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002424:	4922      	ldr	r1, [pc, #136]	; (80024b0 <game_mode2+0x440>)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800242c:	429a      	cmp	r2, r3
 800242e:	d10b      	bne.n	8002448 <game_mode2+0x3d8>
							{
								 enemy_do(enemy_row[j], enemy_col[j]);
 8002430:	4a1e      	ldr	r2, [pc, #120]	; (80024ac <game_mode2+0x43c>)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002438:	491d      	ldr	r1, [pc, #116]	; (80024b0 <game_mode2+0x440>)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002440:	4619      	mov	r1, r3
 8002442:	4610      	mov	r0, r2
 8002444:	f7ff f86c 	bl	8001520 <enemy_do>
					for ( int j = 0; j < n; j++ )
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3301      	adds	r3, #1
 800244c:	607b      	str	r3, [r7, #4]
 800244e:	4b19      	ldr	r3, [pc, #100]	; (80024b4 <game_mode2+0x444>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	429a      	cmp	r2, r3
 8002456:	dbca      	blt.n	80023ee <game_mode2+0x37e>
							}
						}
					}
					shotE_row[i]--;
 8002458:	4a1a      	ldr	r2, [pc, #104]	; (80024c4 <game_mode2+0x454>)
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002460:	1e5a      	subs	r2, r3, #1
 8002462:	4918      	ldr	r1, [pc, #96]	; (80024c4 <game_mode2+0x454>)
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				}
				if ( shotE_row[i] == 19 ) shotE_row[i] = -1;
 800246a:	4a16      	ldr	r2, [pc, #88]	; (80024c4 <game_mode2+0x454>)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002472:	2b13      	cmp	r3, #19
 8002474:	d105      	bne.n	8002482 <game_mode2+0x412>
 8002476:	4a13      	ldr	r2, [pc, #76]	; (80024c4 <game_mode2+0x454>)
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	f04f 31ff 	mov.w	r1, #4294967295
 800247e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for ( int i = 0; i < shotE_count; i++ )
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	3301      	adds	r3, #1
 8002486:	60bb      	str	r3, [r7, #8]
 8002488:	4b0d      	ldr	r3, [pc, #52]	; (80024c0 <game_mode2+0x450>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	429a      	cmp	r2, r3
 8002490:	db95      	blt.n	80023be <game_mode2+0x34e>

			}
		}

		bump();
 8002492:	f7ff f87b 	bl	800158c <bump>
	while ( endGame == 0 ) {
 8002496:	4b0d      	ldr	r3, [pc, #52]	; (80024cc <game_mode2+0x45c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	f43f ae21 	beq.w	80020e2 <game_mode2+0x72>

	}

}
 80024a0:	bf00      	nop
 80024a2:	bf00      	nop
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	20001330 	.word	0x20001330
 80024b0:	20000774 	.word	0x20000774
 80024b4:	20000248 	.word	0x20000248
 80024b8:	200002f4 	.word	0x200002f4
 80024bc:	200002fc 	.word	0x200002fc
 80024c0:	200002f8 	.word	0x200002f8
 80024c4:	20000a94 	.word	0x20000a94
 80024c8:	200003b8 	.word	0x200003b8
 80024cc:	200002e8 	.word	0x200002e8

080024d0 <game_mode3>:

//Hard
void game_mode3() {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0

	silent_();
 80024d6:	f001 ffe5 	bl	80044a4 <silent_>

	HAL_UART_Transmit(&huart2, msg4, sizeof(unsigned char) * 84, 100);
 80024da:	2364      	movs	r3, #100	; 0x64
 80024dc:	2254      	movs	r2, #84	; 0x54
 80024de:	497a      	ldr	r1, [pc, #488]	; (80026c8 <game_mode3+0x1f8>)
 80024e0:	487a      	ldr	r0, [pc, #488]	; (80026cc <game_mode3+0x1fc>)
 80024e2:	f007 fff1 	bl	800a4c8 <HAL_UART_Transmit>

	HAL_TIM_Base_Start_IT(&htim6);
 80024e6:	487a      	ldr	r0, [pc, #488]	; (80026d0 <game_mode3+0x200>)
 80024e8:	f006 fde0 	bl	80090ac <HAL_TIM_Base_Start_IT>

	createChar(1, enemy);
 80024ec:	4979      	ldr	r1, [pc, #484]	; (80026d4 <game_mode3+0x204>)
 80024ee:	2001      	movs	r0, #1
 80024f0:	f7fe f99f 	bl	8000832 <createChar>
	createChar(2, ship);
 80024f4:	4978      	ldr	r1, [pc, #480]	; (80026d8 <game_mode3+0x208>)
 80024f6:	2002      	movs	r0, #2
 80024f8:	f7fe f99b 	bl	8000832 <createChar>
	createChar(3, bullet1);
 80024fc:	4977      	ldr	r1, [pc, #476]	; (80026dc <game_mode3+0x20c>)
 80024fe:	2003      	movs	r0, #3
 8002500:	f7fe f997 	bl	8000832 <createChar>
	createChar(4, bullet2);
 8002504:	4976      	ldr	r1, [pc, #472]	; (80026e0 <game_mode3+0x210>)
 8002506:	2004      	movs	r0, #4
 8002508:	f7fe f993 	bl	8000832 <createChar>

	setCursor(0,0);
 800250c:	2100      	movs	r1, #0
 800250e:	2000      	movs	r0, #0
 8002510:	f7fe f91c 	bl	800074c <setCursor>
	print("                                                                                  ");
 8002514:	4873      	ldr	r0, [pc, #460]	; (80026e4 <game_mode3+0x214>)
 8002516:	f7fe f961 	bl	80007dc <print>

	enemy_col[0] = 0;
 800251a:	4b73      	ldr	r3, [pc, #460]	; (80026e8 <game_mode3+0x218>)
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
	enemy_col[1] = 0;
 8002520:	4b71      	ldr	r3, [pc, #452]	; (80026e8 <game_mode3+0x218>)
 8002522:	2200      	movs	r2, #0
 8002524:	605a      	str	r2, [r3, #4]
	enemy_row[0] = -1;
 8002526:	4b71      	ldr	r3, [pc, #452]	; (80026ec <game_mode3+0x21c>)
 8002528:	f04f 32ff 	mov.w	r2, #4294967295
 800252c:	601a      	str	r2, [r3, #0]
	enemy_row[1] = -1;
 800252e:	4b6f      	ldr	r3, [pc, #444]	; (80026ec <game_mode3+0x21c>)
 8002530:	f04f 32ff 	mov.w	r2, #4294967295
 8002534:	605a      	str	r2, [r3, #4]

	int col = 2;
 8002536:	2302      	movs	r3, #2
 8002538:	617b      	str	r3, [r7, #20]
	ship_do(col);
 800253a:	6978      	ldr	r0, [r7, #20]
 800253c:	f7fe fecc 	bl	80012d8 <ship_do>

	int r = 0;
 8002540:	2300      	movs	r3, #0
 8002542:	603b      	str	r3, [r7, #0]

	while ( endGame == 0 ) {
 8002544:	e1d6      	b.n	80028f4 <game_mode3+0x424>

		//Auto control
		if ( kpad == 1 )
 8002546:	4b6a      	ldr	r3, [pc, #424]	; (80026f0 <game_mode3+0x220>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d10b      	bne.n	8002566 <game_mode3+0x96>
		{
			autoShip(col);
 800254e:	6978      	ldr	r0, [r7, #20]
 8002550:	f000 fec0 	bl	80032d4 <autoShip>
			if ( col == 4 )
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	2b04      	cmp	r3, #4
 8002558:	d102      	bne.n	8002560 <game_mode3+0x90>
			{
				col = 1;
 800255a:	2301      	movs	r3, #1
 800255c:	617b      	str	r3, [r7, #20]
 800255e:	e002      	b.n	8002566 <game_mode3+0x96>
			} else {
				col++;
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	3301      	adds	r3, #1
 8002564:	617b      	str	r3, [r7, #20]
			}
		}

		//fire
		if ( kpad == 5 )
 8002566:	4b62      	ldr	r3, [pc, #392]	; (80026f0 <game_mode3+0x220>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b05      	cmp	r3, #5
 800256c:	d149      	bne.n	8002602 <game_mode3+0x132>
		{
			if ( col == 1 )
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d10c      	bne.n	800258e <game_mode3+0xbe>
			{
				shot_col[shot] = 0;
 8002574:	4b5f      	ldr	r3, [pc, #380]	; (80026f4 <game_mode3+0x224>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a5f      	ldr	r2, [pc, #380]	; (80026f8 <game_mode3+0x228>)
 800257a:	2100      	movs	r1, #0
 800257c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				shot_row[shot] = 1;
 8002580:	4b5c      	ldr	r3, [pc, #368]	; (80026f4 <game_mode3+0x224>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a5d      	ldr	r2, [pc, #372]	; (80026fc <game_mode3+0x22c>)
 8002586:	2101      	movs	r1, #1
 8002588:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800258c:	e02e      	b.n	80025ec <game_mode3+0x11c>
			} else if ( col == 2 ) {
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	2b02      	cmp	r3, #2
 8002592:	d10c      	bne.n	80025ae <game_mode3+0xde>
				shot_col[shot] = 1;
 8002594:	4b57      	ldr	r3, [pc, #348]	; (80026f4 <game_mode3+0x224>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a57      	ldr	r2, [pc, #348]	; (80026f8 <game_mode3+0x228>)
 800259a:	2101      	movs	r1, #1
 800259c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				shot_row[shot] = 1;
 80025a0:	4b54      	ldr	r3, [pc, #336]	; (80026f4 <game_mode3+0x224>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a55      	ldr	r2, [pc, #340]	; (80026fc <game_mode3+0x22c>)
 80025a6:	2101      	movs	r1, #1
 80025a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80025ac:	e01e      	b.n	80025ec <game_mode3+0x11c>
			} else if ( col == 3 ) {
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d10c      	bne.n	80025ce <game_mode3+0xfe>
				shot_col[shot] = 0;
 80025b4:	4b4f      	ldr	r3, [pc, #316]	; (80026f4 <game_mode3+0x224>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a4f      	ldr	r2, [pc, #316]	; (80026f8 <game_mode3+0x228>)
 80025ba:	2100      	movs	r1, #0
 80025bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				shot_row[shot] = 21;
 80025c0:	4b4c      	ldr	r3, [pc, #304]	; (80026f4 <game_mode3+0x224>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a4d      	ldr	r2, [pc, #308]	; (80026fc <game_mode3+0x22c>)
 80025c6:	2115      	movs	r1, #21
 80025c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80025cc:	e00e      	b.n	80025ec <game_mode3+0x11c>
			} else if ( col == 4 ) {
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	2b04      	cmp	r3, #4
 80025d2:	d10b      	bne.n	80025ec <game_mode3+0x11c>
				shot_col[shot] = 1;
 80025d4:	4b47      	ldr	r3, [pc, #284]	; (80026f4 <game_mode3+0x224>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a47      	ldr	r2, [pc, #284]	; (80026f8 <game_mode3+0x228>)
 80025da:	2101      	movs	r1, #1
 80025dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				shot_row[shot] = 21;
 80025e0:	4b44      	ldr	r3, [pc, #272]	; (80026f4 <game_mode3+0x224>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a45      	ldr	r2, [pc, #276]	; (80026fc <game_mode3+0x22c>)
 80025e6:	2115      	movs	r1, #21
 80025e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}

			shot++;
 80025ec:	4b41      	ldr	r3, [pc, #260]	; (80026f4 <game_mode3+0x224>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	3301      	adds	r3, #1
 80025f2:	4a40      	ldr	r2, [pc, #256]	; (80026f4 <game_mode3+0x224>)
 80025f4:	6013      	str	r3, [r2, #0]
			kpad = -1;
 80025f6:	4b3e      	ldr	r3, [pc, #248]	; (80026f0 <game_mode3+0x220>)
 80025f8:	f04f 32ff 	mov.w	r2, #4294967295
 80025fc:	601a      	str	r2, [r3, #0]
			shot_1();
 80025fe:	f001 ff5b 	bl	80044b8 <shot_1>
		}
		if ( shot > 0 )
 8002602:	4b3c      	ldr	r3, [pc, #240]	; (80026f4 <game_mode3+0x224>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	dd30      	ble.n	800266c <game_mode3+0x19c>
		{
			for ( int i = 0; i < shot; i++ )
 800260a:	2300      	movs	r3, #0
 800260c:	613b      	str	r3, [r7, #16]
 800260e:	e028      	b.n	8002662 <game_mode3+0x192>
			{
				if ( shot_row[i] < 41 )
 8002610:	4a3a      	ldr	r2, [pc, #232]	; (80026fc <game_mode3+0x22c>)
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002618:	2b28      	cmp	r3, #40	; 0x28
 800261a:	dc0b      	bgt.n	8002634 <game_mode3+0x164>
				{
					bullet_1(shot_row[i], shot_col[i]);
 800261c:	4a37      	ldr	r2, [pc, #220]	; (80026fc <game_mode3+0x22c>)
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002624:	4934      	ldr	r1, [pc, #208]	; (80026f8 <game_mode3+0x228>)
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800262c:	4619      	mov	r1, r3
 800262e:	4610      	mov	r0, r2
 8002630:	f7fe fedc 	bl	80013ec <bullet_1>
				}
				if ( shot_row[i] == 20 ) shot_row[i] = 40;
 8002634:	4a31      	ldr	r2, [pc, #196]	; (80026fc <game_mode3+0x22c>)
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800263c:	2b14      	cmp	r3, #20
 800263e:	d104      	bne.n	800264a <game_mode3+0x17a>
 8002640:	4a2e      	ldr	r2, [pc, #184]	; (80026fc <game_mode3+0x22c>)
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	2128      	movs	r1, #40	; 0x28
 8002646:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				shot_row[i]++;
 800264a:	4a2c      	ldr	r2, [pc, #176]	; (80026fc <game_mode3+0x22c>)
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002652:	1c5a      	adds	r2, r3, #1
 8002654:	4929      	ldr	r1, [pc, #164]	; (80026fc <game_mode3+0x22c>)
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for ( int i = 0; i < shot; i++ )
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	3301      	adds	r3, #1
 8002660:	613b      	str	r3, [r7, #16]
 8002662:	4b24      	ldr	r3, [pc, #144]	; (80026f4 <game_mode3+0x224>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	429a      	cmp	r2, r3
 800266a:	dbd1      	blt.n	8002610 <game_mode3+0x140>
			}
		}

		//turn right
		if ( kpad == 9 )
 800266c:	4b20      	ldr	r3, [pc, #128]	; (80026f0 <game_mode3+0x220>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2b09      	cmp	r3, #9
 8002672:	d10c      	bne.n	800268e <game_mode3+0x1be>
		{
			if ( col == 4 )
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	2b04      	cmp	r3, #4
 8002678:	d102      	bne.n	8002680 <game_mode3+0x1b0>
			{
				col = 1;
 800267a:	2301      	movs	r3, #1
 800267c:	617b      	str	r3, [r7, #20]
 800267e:	e002      	b.n	8002686 <game_mode3+0x1b6>
			} else {
				col++;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	3301      	adds	r3, #1
 8002684:	617b      	str	r3, [r7, #20]
			}
			kpad = -1;
 8002686:	4b1a      	ldr	r3, [pc, #104]	; (80026f0 <game_mode3+0x220>)
 8002688:	f04f 32ff 	mov.w	r2, #4294967295
 800268c:	601a      	str	r2, [r3, #0]
		}

		//turn left
		if ( kpad == 7 )
 800268e:	4b18      	ldr	r3, [pc, #96]	; (80026f0 <game_mode3+0x220>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2b07      	cmp	r3, #7
 8002694:	d10c      	bne.n	80026b0 <game_mode3+0x1e0>
		{
			if ( col == 1 )
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d102      	bne.n	80026a2 <game_mode3+0x1d2>
			{
				col = 4;
 800269c:	2304      	movs	r3, #4
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	e002      	b.n	80026a8 <game_mode3+0x1d8>
			} else {
				col--;
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	3b01      	subs	r3, #1
 80026a6:	617b      	str	r3, [r7, #20]
			}
			kpad = -1;
 80026a8:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <game_mode3+0x220>)
 80026aa:	f04f 32ff 	mov.w	r2, #4294967295
 80026ae:	601a      	str	r2, [r3, #0]
		}

		ship_do(col);
 80026b0:	6978      	ldr	r0, [r7, #20]
 80026b2:	f7fe fe11 	bl	80012d8 <ship_do>

		if ( nCop != n )
 80026b6:	4b12      	ldr	r3, [pc, #72]	; (8002700 <game_mode3+0x230>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	4b12      	ldr	r3, [pc, #72]	; (8002704 <game_mode3+0x234>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d072      	beq.n	80027a8 <game_mode3+0x2d8>
		{
			for ( int i = 0; i < n; i = i + 2 )
 80026c2:	2300      	movs	r3, #0
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	e063      	b.n	8002790 <game_mode3+0x2c0>
 80026c8:	200000e4 	.word	0x200000e4
 80026cc:	200012ac 	.word	0x200012ac
 80026d0:	20000e84 	.word	0x20000e84
 80026d4:	200001e0 	.word	0x200001e0
 80026d8:	200001e8 	.word	0x200001e8
 80026dc:	200001f0 	.word	0x200001f0
 80026e0:	200001f8 	.word	0x200001f8
 80026e4:	0800cda0 	.word	0x0800cda0
 80026e8:	20000774 	.word	0x20000774
 80026ec:	20001330 	.word	0x20001330
 80026f0:	20000244 	.word	0x20000244
 80026f4:	200002f0 	.word	0x200002f0
 80026f8:	20000ed0 	.word	0x20000ed0
 80026fc:	20001950 	.word	0x20001950
 8002700:	200002f4 	.word	0x200002f4
 8002704:	20000248 	.word	0x20000248
			{
				if ( enemy_row[i] >= 0 ) enemy_do(enemy_row[i], enemy_col[i]);
 8002708:	4a7f      	ldr	r2, [pc, #508]	; (8002908 <game_mode3+0x438>)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002710:	2b00      	cmp	r3, #0
 8002712:	db0b      	blt.n	800272c <game_mode3+0x25c>
 8002714:	4a7c      	ldr	r2, [pc, #496]	; (8002908 <game_mode3+0x438>)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800271c:	497b      	ldr	r1, [pc, #492]	; (800290c <game_mode3+0x43c>)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002724:	4619      	mov	r1, r3
 8002726:	4610      	mov	r0, r2
 8002728:	f7fe fefa 	bl	8001520 <enemy_do>
				if ( enemy_row[i+1] >= 0 ) enemy_do(enemy_row[i+1], enemy_col[i+1]);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	3301      	adds	r3, #1
 8002730:	4a75      	ldr	r2, [pc, #468]	; (8002908 <game_mode3+0x438>)
 8002732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002736:	2b00      	cmp	r3, #0
 8002738:	db0d      	blt.n	8002756 <game_mode3+0x286>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	3301      	adds	r3, #1
 800273e:	4a72      	ldr	r2, [pc, #456]	; (8002908 <game_mode3+0x438>)
 8002740:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	3301      	adds	r3, #1
 8002748:	4970      	ldr	r1, [pc, #448]	; (800290c <game_mode3+0x43c>)
 800274a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800274e:	4619      	mov	r1, r3
 8002750:	4610      	mov	r0, r2
 8002752:	f7fe fee5 	bl	8001520 <enemy_do>
				if ( enemy_row[i] == 20 ) enemy_row[i] = -1;
 8002756:	4a6c      	ldr	r2, [pc, #432]	; (8002908 <game_mode3+0x438>)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800275e:	2b14      	cmp	r3, #20
 8002760:	d105      	bne.n	800276e <game_mode3+0x29e>
 8002762:	4a69      	ldr	r2, [pc, #420]	; (8002908 <game_mode3+0x438>)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f04f 31ff 	mov.w	r1, #4294967295
 800276a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if ( enemy_row[i+1] == 20 ) enemy_row[i+1] = -1;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	3301      	adds	r3, #1
 8002772:	4a65      	ldr	r2, [pc, #404]	; (8002908 <game_mode3+0x438>)
 8002774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002778:	2b14      	cmp	r3, #20
 800277a:	d106      	bne.n	800278a <game_mode3+0x2ba>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	3301      	adds	r3, #1
 8002780:	4a61      	ldr	r2, [pc, #388]	; (8002908 <game_mode3+0x438>)
 8002782:	f04f 31ff 	mov.w	r1, #4294967295
 8002786:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for ( int i = 0; i < n; i = i + 2 )
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	3302      	adds	r3, #2
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	4b5f      	ldr	r3, [pc, #380]	; (8002910 <game_mode3+0x440>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	429a      	cmp	r2, r3
 8002798:	dbb6      	blt.n	8002708 <game_mode3+0x238>
			}

			nCop = n;
 800279a:	4b5d      	ldr	r3, [pc, #372]	; (8002910 <game_mode3+0x440>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a5d      	ldr	r2, [pc, #372]	; (8002914 <game_mode3+0x444>)
 80027a0:	6013      	str	r3, [r2, #0]
			shotE = 0;
 80027a2:	4b5d      	ldr	r3, [pc, #372]	; (8002918 <game_mode3+0x448>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
		}

		if ( n%4 == 0 && shotE == 0 )
 80027a8:	4b59      	ldr	r3, [pc, #356]	; (8002910 <game_mode3+0x440>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0303 	and.w	r3, r3, #3
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d12f      	bne.n	8002814 <game_mode3+0x344>
 80027b4:	4b58      	ldr	r3, [pc, #352]	; (8002918 <game_mode3+0x448>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d12b      	bne.n	8002814 <game_mode3+0x344>
		{
			r = rand() % n ;
 80027bc:	f009 f902 	bl	800b9c4 <rand>
 80027c0:	4602      	mov	r2, r0
 80027c2:	4b53      	ldr	r3, [pc, #332]	; (8002910 <game_mode3+0x440>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	fb92 f1f3 	sdiv	r1, r2, r3
 80027ca:	fb03 f301 	mul.w	r3, r3, r1
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	603b      	str	r3, [r7, #0]
			if ( enemy_row[r] > 1 )
 80027d2:	4a4d      	ldr	r2, [pc, #308]	; (8002908 <game_mode3+0x438>)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	dd1a      	ble.n	8002814 <game_mode3+0x344>
			{
				shotE_row[shotE_count] = enemy_row[r]-1;
 80027de:	4a4a      	ldr	r2, [pc, #296]	; (8002908 <game_mode3+0x438>)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80027e6:	4b4d      	ldr	r3, [pc, #308]	; (800291c <game_mode3+0x44c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	3a01      	subs	r2, #1
 80027ec:	494c      	ldr	r1, [pc, #304]	; (8002920 <game_mode3+0x450>)
 80027ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				shotE_col[shotE_count] = enemy_col[r];
 80027f2:	4b4a      	ldr	r3, [pc, #296]	; (800291c <game_mode3+0x44c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4945      	ldr	r1, [pc, #276]	; (800290c <game_mode3+0x43c>)
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80027fe:	4949      	ldr	r1, [pc, #292]	; (8002924 <game_mode3+0x454>)
 8002800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				shotE = 1;
 8002804:	4b44      	ldr	r3, [pc, #272]	; (8002918 <game_mode3+0x448>)
 8002806:	2201      	movs	r2, #1
 8002808:	601a      	str	r2, [r3, #0]
				shotE_count++;
 800280a:	4b44      	ldr	r3, [pc, #272]	; (800291c <game_mode3+0x44c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	3301      	adds	r3, #1
 8002810:	4a42      	ldr	r2, [pc, #264]	; (800291c <game_mode3+0x44c>)
 8002812:	6013      	str	r3, [r2, #0]
			}
		}

		if ( shotE_count > 0 )
 8002814:	4b41      	ldr	r3, [pc, #260]	; (800291c <game_mode3+0x44c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	dd69      	ble.n	80028f0 <game_mode3+0x420>
		{
			for ( int i = 0; i < shotE_count; i++ )
 800281c:	2300      	movs	r3, #0
 800281e:	60bb      	str	r3, [r7, #8]
 8002820:	e061      	b.n	80028e6 <game_mode3+0x416>
			{
				if ( shotE_row[i] >= 0 )
 8002822:	4a3f      	ldr	r2, [pc, #252]	; (8002920 <game_mode3+0x450>)
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800282a:	2b00      	cmp	r3, #0
 800282c:	db4c      	blt.n	80028c8 <game_mode3+0x3f8>
				{
					bullet_2(shotE_row[i], shotE_col[i]);
 800282e:	4a3c      	ldr	r2, [pc, #240]	; (8002920 <game_mode3+0x450>)
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002836:	493b      	ldr	r1, [pc, #236]	; (8002924 <game_mode3+0x454>)
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800283e:	4619      	mov	r1, r3
 8002840:	4610      	mov	r0, r2
 8002842:	f7fe fe27 	bl	8001494 <bullet_2>
					for ( int j = 0; j < n; j++ )
 8002846:	2300      	movs	r3, #0
 8002848:	607b      	str	r3, [r7, #4]
 800284a:	e02f      	b.n	80028ac <game_mode3+0x3dc>
					{
						if ( shotE_row[i] > 0 && enemy_row[j] > 0 )
 800284c:	4a34      	ldr	r2, [pc, #208]	; (8002920 <game_mode3+0x450>)
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002854:	2b00      	cmp	r3, #0
 8002856:	dd26      	ble.n	80028a6 <game_mode3+0x3d6>
 8002858:	4a2b      	ldr	r2, [pc, #172]	; (8002908 <game_mode3+0x438>)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002860:	2b00      	cmp	r3, #0
 8002862:	dd20      	ble.n	80028a6 <game_mode3+0x3d6>
						{
							if ( shotE_row[i] == enemy_row[j]-1 && shotE_col[i] == enemy_col[j] )
 8002864:	4a2e      	ldr	r2, [pc, #184]	; (8002920 <game_mode3+0x450>)
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800286c:	4926      	ldr	r1, [pc, #152]	; (8002908 <game_mode3+0x438>)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002874:	3b01      	subs	r3, #1
 8002876:	429a      	cmp	r2, r3
 8002878:	d115      	bne.n	80028a6 <game_mode3+0x3d6>
 800287a:	4a2a      	ldr	r2, [pc, #168]	; (8002924 <game_mode3+0x454>)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002882:	4922      	ldr	r1, [pc, #136]	; (800290c <game_mode3+0x43c>)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800288a:	429a      	cmp	r2, r3
 800288c:	d10b      	bne.n	80028a6 <game_mode3+0x3d6>
							{
								 enemy_do(enemy_row[j], enemy_col[j]);
 800288e:	4a1e      	ldr	r2, [pc, #120]	; (8002908 <game_mode3+0x438>)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002896:	491d      	ldr	r1, [pc, #116]	; (800290c <game_mode3+0x43c>)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800289e:	4619      	mov	r1, r3
 80028a0:	4610      	mov	r0, r2
 80028a2:	f7fe fe3d 	bl	8001520 <enemy_do>
					for ( int j = 0; j < n; j++ )
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	3301      	adds	r3, #1
 80028aa:	607b      	str	r3, [r7, #4]
 80028ac:	4b18      	ldr	r3, [pc, #96]	; (8002910 <game_mode3+0x440>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	dbca      	blt.n	800284c <game_mode3+0x37c>
							}
						}
					}
					shotE_row[i]--;
 80028b6:	4a1a      	ldr	r2, [pc, #104]	; (8002920 <game_mode3+0x450>)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028be:	1e5a      	subs	r2, r3, #1
 80028c0:	4917      	ldr	r1, [pc, #92]	; (8002920 <game_mode3+0x450>)
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				}
				if ( shotE_row[i] == 19 ) shotE_row[i] = -1;
 80028c8:	4a15      	ldr	r2, [pc, #84]	; (8002920 <game_mode3+0x450>)
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d0:	2b13      	cmp	r3, #19
 80028d2:	d105      	bne.n	80028e0 <game_mode3+0x410>
 80028d4:	4a12      	ldr	r2, [pc, #72]	; (8002920 <game_mode3+0x450>)
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	f04f 31ff 	mov.w	r1, #4294967295
 80028dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for ( int i = 0; i < shotE_count; i++ )
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	3301      	adds	r3, #1
 80028e4:	60bb      	str	r3, [r7, #8]
 80028e6:	4b0d      	ldr	r3, [pc, #52]	; (800291c <game_mode3+0x44c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	db98      	blt.n	8002822 <game_mode3+0x352>

			}
		}

		bump();
 80028f0:	f7fe fe4c 	bl	800158c <bump>
	while ( endGame == 0 ) {
 80028f4:	4b0c      	ldr	r3, [pc, #48]	; (8002928 <game_mode3+0x458>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f43f ae24 	beq.w	8002546 <game_mode3+0x76>

	}

}
 80028fe:	bf00      	nop
 8002900:	bf00      	nop
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	20001330 	.word	0x20001330
 800290c:	20000774 	.word	0x20000774
 8002910:	20000248 	.word	0x20000248
 8002914:	200002f4 	.word	0x200002f4
 8002918:	200002fc 	.word	0x200002fc
 800291c:	200002f8 	.word	0x200002f8
 8002920:	20000a94 	.word	0x20000a94
 8002924:	200003b8 	.word	0x200003b8
 8002928:	200002e8 	.word	0x200002e8

0800292c <boss>:

void boss( int row , int col ) {
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]

	setCursor(row-1,1);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	b2db      	uxtb	r3, r3
 800293a:	3b01      	subs	r3, #1
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2101      	movs	r1, #1
 8002940:	4618      	mov	r0, r3
 8002942:	f7fd ff03 	bl	800074c <setCursor>
	print("     ");
 8002946:	489a      	ldr	r0, [pc, #616]	; (8002bb0 <boss+0x284>)
 8002948:	f7fd ff48 	bl	80007dc <print>
	setCursor(row-1,0);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	b2db      	uxtb	r3, r3
 8002950:	3b01      	subs	r3, #1
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2100      	movs	r1, #0
 8002956:	4618      	mov	r0, r3
 8002958:	f7fd fef8 	bl	800074c <setCursor>
	print("     ");
 800295c:	4894      	ldr	r0, [pc, #592]	; (8002bb0 <boss+0x284>)
 800295e:	f7fd ff3d 	bl	80007dc <print>
	setCursor(row+20-1,1);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	b2db      	uxtb	r3, r3
 8002966:	3313      	adds	r3, #19
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2101      	movs	r1, #1
 800296c:	4618      	mov	r0, r3
 800296e:	f7fd feed 	bl	800074c <setCursor>
	print("     ");
 8002972:	488f      	ldr	r0, [pc, #572]	; (8002bb0 <boss+0x284>)
 8002974:	f7fd ff32 	bl	80007dc <print>
	setCursor(row+20-1,0);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	b2db      	uxtb	r3, r3
 800297c:	3313      	adds	r3, #19
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2100      	movs	r1, #0
 8002982:	4618      	mov	r0, r3
 8002984:	f7fd fee2 	bl	800074c <setCursor>
	print("     ");
 8002988:	4889      	ldr	r0, [pc, #548]	; (8002bb0 <boss+0x284>)
 800298a:	f7fd ff27 	bl	80007dc <print>

	if ( col == 2 )
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	2b02      	cmp	r3, #2
 8002992:	d156      	bne.n	8002a42 <boss+0x116>
	{
		//middle
		setCursor(row,1);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2101      	movs	r1, #1
 800299a:	4618      	mov	r0, r3
 800299c:	f7fd fed6 	bl	800074c <setCursor>
		write(8);
 80029a0:	2008      	movs	r0, #8
 80029a2:	f7fd ff7d 	bl	80008a0 <write>
		setCursor(row+20,0);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	3314      	adds	r3, #20
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2100      	movs	r1, #0
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7fd fecb 	bl	800074c <setCursor>
		write(8);
 80029b6:	2008      	movs	r0, #8
 80029b8:	f7fd ff72 	bl	80008a0 <write>
		setCursor(row+1,1);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	3301      	adds	r3, #1
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2101      	movs	r1, #1
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fd fec0 	bl	800074c <setCursor>
		write(8);
 80029cc:	2008      	movs	r0, #8
 80029ce:	f7fd ff67 	bl	80008a0 <write>
		setCursor(row+21,0);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	3315      	adds	r3, #21
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2100      	movs	r1, #0
 80029dc:	4618      	mov	r0, r3
 80029de:	f7fd feb5 	bl	800074c <setCursor>
		write(8);
 80029e2:	2008      	movs	r0, #8
 80029e4:	f7fd ff5c 	bl	80008a0 <write>

		setCursor(row-1,1);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	3b01      	subs	r3, #1
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2101      	movs	r1, #1
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fd feaa 	bl	800074c <setCursor>
		write(5);
 80029f8:	2005      	movs	r0, #5
 80029fa:	f7fd ff51 	bl	80008a0 <write>
		setCursor((row+20)-1,0);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	3313      	adds	r3, #19
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2100      	movs	r1, #0
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7fd fe9f 	bl	800074c <setCursor>
		write(5);
 8002a0e:	2005      	movs	r0, #5
 8002a10:	f7fd ff46 	bl	80008a0 <write>

		setCursor(row+2,1);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	3302      	adds	r3, #2
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fd fe94 	bl	800074c <setCursor>
		write(6);
 8002a24:	2006      	movs	r0, #6
 8002a26:	f7fd ff3b 	bl	80008a0 <write>
		setCursor((row+21)+1,0);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	3316      	adds	r3, #22
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2100      	movs	r1, #0
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7fd fe89 	bl	800074c <setCursor>
		write(7);
 8002a3a:	2007      	movs	r0, #7
 8002a3c:	f7fd ff30 	bl	80008a0 <write>
		write(6);
		setCursor(row+2,0);
		write(7);
	}

}
 8002a40:	e0b2      	b.n	8002ba8 <boss+0x27c>
	} else if ( col == 3 ) {
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	d158      	bne.n	8002afa <boss+0x1ce>
		setCursor(row+20,0);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	3314      	adds	r3, #20
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2100      	movs	r1, #0
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7fd fe7a 	bl	800074c <setCursor>
		write(8);
 8002a58:	2008      	movs	r0, #8
 8002a5a:	f7fd ff21 	bl	80008a0 <write>
		setCursor(row+20,1);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	3314      	adds	r3, #20
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2101      	movs	r1, #1
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7fd fe6f 	bl	800074c <setCursor>
		write(8);
 8002a6e:	2008      	movs	r0, #8
 8002a70:	f7fd ff16 	bl	80008a0 <write>
		setCursor(row+21,0);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	3315      	adds	r3, #21
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fd fe64 	bl	800074c <setCursor>
		write(8);
 8002a84:	2008      	movs	r0, #8
 8002a86:	f7fd ff0b 	bl	80008a0 <write>
		setCursor(row+21,1);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	3315      	adds	r3, #21
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2101      	movs	r1, #1
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7fd fe59 	bl	800074c <setCursor>
		write(8);
 8002a9a:	2008      	movs	r0, #8
 8002a9c:	f7fd ff00 	bl	80008a0 <write>
		setCursor((row+20)-1,1);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	3313      	adds	r3, #19
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fd fe4e 	bl	800074c <setCursor>
		write(5);
 8002ab0:	2005      	movs	r0, #5
 8002ab2:	f7fd fef5 	bl	80008a0 <write>
		setCursor((row+20)-1,0);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	3313      	adds	r3, #19
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2100      	movs	r1, #0
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7fd fe43 	bl	800074c <setCursor>
		write(5);
 8002ac6:	2005      	movs	r0, #5
 8002ac8:	f7fd feea 	bl	80008a0 <write>
		setCursor((row+21)+1,1);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	3316      	adds	r3, #22
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fd fe38 	bl	800074c <setCursor>
		write(6);
 8002adc:	2006      	movs	r0, #6
 8002ade:	f7fd fedf 	bl	80008a0 <write>
		setCursor((row+21)+1,0);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	3316      	adds	r3, #22
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2100      	movs	r1, #0
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7fd fe2d 	bl	800074c <setCursor>
		write(7);
 8002af2:	2007      	movs	r0, #7
 8002af4:	f7fd fed4 	bl	80008a0 <write>
}
 8002af8:	e056      	b.n	8002ba8 <boss+0x27c>
	} else if ( col == 1 ) {
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d153      	bne.n	8002ba8 <boss+0x27c>
		setCursor(row,1);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	2101      	movs	r1, #1
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fd fe20 	bl	800074c <setCursor>
		write(8);
 8002b0c:	2008      	movs	r0, #8
 8002b0e:	f7fd fec7 	bl	80008a0 <write>
		setCursor(row,0);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2100      	movs	r1, #0
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7fd fe17 	bl	800074c <setCursor>
		write(8);
 8002b1e:	2008      	movs	r0, #8
 8002b20:	f7fd febe 	bl	80008a0 <write>
		setCursor(row+1,1);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	3301      	adds	r3, #1
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fd fe0c 	bl	800074c <setCursor>
		write(8);
 8002b34:	2008      	movs	r0, #8
 8002b36:	f7fd feb3 	bl	80008a0 <write>
		setCursor(row+1,0);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	3301      	adds	r3, #1
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2100      	movs	r1, #0
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fd fe01 	bl	800074c <setCursor>
		write(8);
 8002b4a:	2008      	movs	r0, #8
 8002b4c:	f7fd fea8 	bl	80008a0 <write>
		setCursor(row-1,1);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	3b01      	subs	r3, #1
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2101      	movs	r1, #1
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fd fdf6 	bl	800074c <setCursor>
		write(5);
 8002b60:	2005      	movs	r0, #5
 8002b62:	f7fd fe9d 	bl	80008a0 <write>
		setCursor(row-1,0);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2100      	movs	r1, #0
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7fd fdeb 	bl	800074c <setCursor>
		write(5);
 8002b76:	2005      	movs	r0, #5
 8002b78:	f7fd fe92 	bl	80008a0 <write>
		setCursor(row+2,1);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	3302      	adds	r3, #2
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2101      	movs	r1, #1
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fd fde0 	bl	800074c <setCursor>
		write(6);
 8002b8c:	2006      	movs	r0, #6
 8002b8e:	f7fd fe87 	bl	80008a0 <write>
		setCursor(row+2,0);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	3302      	adds	r3, #2
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fd fdd5 	bl	800074c <setCursor>
		write(7);
 8002ba2:	2007      	movs	r0, #7
 8002ba4:	f7fd fe7c 	bl	80008a0 <write>
}
 8002ba8:	bf00      	nop
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	0800ce44 	.word	0x0800ce44

08002bb4 <bump_bossfight>:

void bump_bossfight( int bossRow1, int bossCol1 ,int bossRow2, int bossCol2 ) {
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08a      	sub	sp, #40	; 0x28
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
 8002bc0:	603b      	str	r3, [r7, #0]

	//Ship's bullet to the enemy
	for ( int j = 0; j < shot; j++ )
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc6:	e043      	b.n	8002c50 <bump_bossfight+0x9c>
	{
		if ( shot_row[j] < 40 )
 8002bc8:	4a9d      	ldr	r2, [pc, #628]	; (8002e40 <bump_bossfight+0x28c>)
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd0:	2b27      	cmp	r3, #39	; 0x27
 8002bd2:	dc3a      	bgt.n	8002c4a <bump_bossfight+0x96>
		{
			if ( (shot_row[j] == bossRow1 && shot_col[j] == bossCol1) || (shot_row[j] == bossRow2 && shot_col[j] == bossCol2) )
 8002bd4:	4a9a      	ldr	r2, [pc, #616]	; (8002e40 <bump_bossfight+0x28c>)
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d106      	bne.n	8002bf0 <bump_bossfight+0x3c>
 8002be2:	4a98      	ldr	r2, [pc, #608]	; (8002e44 <bump_bossfight+0x290>)
 8002be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d00d      	beq.n	8002c0c <bump_bossfight+0x58>
 8002bf0:	4a93      	ldr	r2, [pc, #588]	; (8002e40 <bump_bossfight+0x28c>)
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d125      	bne.n	8002c4a <bump_bossfight+0x96>
 8002bfe:	4a91      	ldr	r2, [pc, #580]	; (8002e44 <bump_bossfight+0x290>)
 8002c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d11e      	bne.n	8002c4a <bump_bossfight+0x96>
			{
				setCursor(shot_row[j]-1,shot_col[j]);
 8002c0c:	4a8c      	ldr	r2, [pc, #560]	; (8002e40 <bump_bossfight+0x28c>)
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	3b01      	subs	r3, #1
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	498a      	ldr	r1, [pc, #552]	; (8002e44 <bump_bossfight+0x290>)
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	4619      	mov	r1, r3
 8002c26:	4610      	mov	r0, r2
 8002c28:	f7fd fd90 	bl	800074c <setCursor>
				print(" ");
 8002c2c:	4886      	ldr	r0, [pc, #536]	; (8002e48 <bump_bossfight+0x294>)
 8002c2e:	f7fd fdd5 	bl	80007dc <print>
				shot_row[j] = 41;
 8002c32:	4a83      	ldr	r2, [pc, #524]	; (8002e40 <bump_bossfight+0x28c>)
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	2129      	movs	r1, #41	; 0x29
 8002c38:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				bosshealth--;
 8002c3c:	4b83      	ldr	r3, [pc, #524]	; (8002e4c <bump_bossfight+0x298>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	3b01      	subs	r3, #1
 8002c42:	4a82      	ldr	r2, [pc, #520]	; (8002e4c <bump_bossfight+0x298>)
 8002c44:	6013      	str	r3, [r2, #0]
				bump_1();
 8002c46:	f001 fc0f 	bl	8004468 <bump_1>
	for ( int j = 0; j < shot; j++ )
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c50:	4b7f      	ldr	r3, [pc, #508]	; (8002e50 <bump_bossfight+0x29c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c56:	429a      	cmp	r2, r3
 8002c58:	dbb6      	blt.n	8002bc8 <bump_bossfight+0x14>
			}
		}
	}

	//Ship bullet to enemy bullet
	for ( int i = 0; i < shot; i++ )
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	623b      	str	r3, [r7, #32]
 8002c5e:	e077      	b.n	8002d50 <bump_bossfight+0x19c>
	{
		for ( int j = 0; j < shot_enemyBoss; j++ )
 8002c60:	2300      	movs	r3, #0
 8002c62:	61fb      	str	r3, [r7, #28]
 8002c64:	e06a      	b.n	8002d3c <bump_bossfight+0x188>
		{
			if ( shot_row[i] < 40 && shotE_row[j] > 0 )
 8002c66:	4a76      	ldr	r2, [pc, #472]	; (8002e40 <bump_bossfight+0x28c>)
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c6e:	2b27      	cmp	r3, #39	; 0x27
 8002c70:	dc5d      	bgt.n	8002d2e <bump_bossfight+0x17a>
 8002c72:	4a78      	ldr	r2, [pc, #480]	; (8002e54 <bump_bossfight+0x2a0>)
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	dd57      	ble.n	8002d2e <bump_bossfight+0x17a>
			{
				if ( shot_row[i] == shotE_row[j] && shot_col[i] == shotE_col[j] )
 8002c7e:	4a70      	ldr	r2, [pc, #448]	; (8002e40 <bump_bossfight+0x28c>)
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002c86:	4973      	ldr	r1, [pc, #460]	; (8002e54 <bump_bossfight+0x2a0>)
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d14d      	bne.n	8002d2e <bump_bossfight+0x17a>
 8002c92:	4a6c      	ldr	r2, [pc, #432]	; (8002e44 <bump_bossfight+0x290>)
 8002c94:	6a3b      	ldr	r3, [r7, #32]
 8002c96:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002c9a:	496f      	ldr	r1, [pc, #444]	; (8002e58 <bump_bossfight+0x2a4>)
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d143      	bne.n	8002d2e <bump_bossfight+0x17a>
				{
					setCursor(shot_row[i]+1,shot_col[i]);
 8002ca6:	4a66      	ldr	r2, [pc, #408]	; (8002e40 <bump_bossfight+0x28c>)
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
 8002caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	4963      	ldr	r1, [pc, #396]	; (8002e44 <bump_bossfight+0x290>)
 8002cb6:	6a3b      	ldr	r3, [r7, #32]
 8002cb8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4610      	mov	r0, r2
 8002cc2:	f7fd fd43 	bl	800074c <setCursor>
					print("  ");
 8002cc6:	4865      	ldr	r0, [pc, #404]	; (8002e5c <bump_bossfight+0x2a8>)
 8002cc8:	f7fd fd88 	bl	80007dc <print>
					setCursor(shot_row[i],shot_col[i]);
 8002ccc:	4a5c      	ldr	r2, [pc, #368]	; (8002e40 <bump_bossfight+0x28c>)
 8002cce:	6a3b      	ldr	r3, [r7, #32]
 8002cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	495b      	ldr	r1, [pc, #364]	; (8002e44 <bump_bossfight+0x290>)
 8002cd8:	6a3b      	ldr	r3, [r7, #32]
 8002cda:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	4610      	mov	r0, r2
 8002ce4:	f7fd fd32 	bl	800074c <setCursor>
					print("  ");
 8002ce8:	485c      	ldr	r0, [pc, #368]	; (8002e5c <bump_bossfight+0x2a8>)
 8002cea:	f7fd fd77 	bl	80007dc <print>
					setCursor(shot_row[i]-1,shot_col[i]);
 8002cee:	4a54      	ldr	r2, [pc, #336]	; (8002e40 <bump_bossfight+0x28c>)
 8002cf0:	6a3b      	ldr	r3, [r7, #32]
 8002cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	4951      	ldr	r1, [pc, #324]	; (8002e44 <bump_bossfight+0x290>)
 8002cfe:	6a3b      	ldr	r3, [r7, #32]
 8002d00:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	4619      	mov	r1, r3
 8002d08:	4610      	mov	r0, r2
 8002d0a:	f7fd fd1f 	bl	800074c <setCursor>
					print("  ");
 8002d0e:	4853      	ldr	r0, [pc, #332]	; (8002e5c <bump_bossfight+0x2a8>)
 8002d10:	f7fd fd64 	bl	80007dc <print>
					shot_row[i] = 41;
 8002d14:	4a4a      	ldr	r2, [pc, #296]	; (8002e40 <bump_bossfight+0x28c>)
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	2129      	movs	r1, #41	; 0x29
 8002d1a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					shotE_row[j] = -1;
 8002d1e:	4a4d      	ldr	r2, [pc, #308]	; (8002e54 <bump_bossfight+0x2a0>)
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	f04f 31ff 	mov.w	r1, #4294967295
 8002d26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					bump_2();
 8002d2a:	f001 fba7 	bl	800447c <bump_2>
				}
			}
			if (shot_enemyBoss >= 6 ) break;
 8002d2e:	4b4c      	ldr	r3, [pc, #304]	; (8002e60 <bump_bossfight+0x2ac>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2b05      	cmp	r3, #5
 8002d34:	dc08      	bgt.n	8002d48 <bump_bossfight+0x194>
		for ( int j = 0; j < shot_enemyBoss; j++ )
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	61fb      	str	r3, [r7, #28]
 8002d3c:	4b48      	ldr	r3, [pc, #288]	; (8002e60 <bump_bossfight+0x2ac>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	69fa      	ldr	r2, [r7, #28]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	db8f      	blt.n	8002c66 <bump_bossfight+0xb2>
 8002d46:	e000      	b.n	8002d4a <bump_bossfight+0x196>
			if (shot_enemyBoss >= 6 ) break;
 8002d48:	bf00      	nop
	for ( int i = 0; i < shot; i++ )
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	623b      	str	r3, [r7, #32]
 8002d50:	4b3f      	ldr	r3, [pc, #252]	; (8002e50 <bump_bossfight+0x29c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6a3a      	ldr	r2, [r7, #32]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	db82      	blt.n	8002c60 <bump_bossfight+0xac>
		}
	}

	//Enemy bullet to the ship
	for ( int i = 0; i < shot_enemyBoss; i++ )
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61bb      	str	r3, [r7, #24]
 8002d5e:	e023      	b.n	8002da8 <bump_bossfight+0x1f4>
	{
		if ( shotE_row[i] > -1 )
 8002d60:	4a3c      	ldr	r2, [pc, #240]	; (8002e54 <bump_bossfight+0x2a0>)
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	db16      	blt.n	8002d9a <bump_bossfight+0x1e6>
		{
			if ( shotE_row[i] == ship_row && shotE_col[i] == ship_col )
 8002d6c:	4a39      	ldr	r2, [pc, #228]	; (8002e54 <bump_bossfight+0x2a0>)
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002d74:	4b3b      	ldr	r3, [pc, #236]	; (8002e64 <bump_bossfight+0x2b0>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d10e      	bne.n	8002d9a <bump_bossfight+0x1e6>
 8002d7c:	4a36      	ldr	r2, [pc, #216]	; (8002e58 <bump_bossfight+0x2a4>)
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002d84:	4b38      	ldr	r3, [pc, #224]	; (8002e68 <bump_bossfight+0x2b4>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d106      	bne.n	8002d9a <bump_bossfight+0x1e6>
			{
				ship_bossfight_health--;
 8002d8c:	4b37      	ldr	r3, [pc, #220]	; (8002e6c <bump_bossfight+0x2b8>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	3b01      	subs	r3, #1
 8002d92:	4a36      	ldr	r2, [pc, #216]	; (8002e6c <bump_bossfight+0x2b8>)
 8002d94:	6013      	str	r3, [r2, #0]
				bump_3();
 8002d96:	f001 fb7b 	bl	8004490 <bump_3>
			}
		}
		if (shot_enemyBoss >= 6 ) break;
 8002d9a:	4b31      	ldr	r3, [pc, #196]	; (8002e60 <bump_bossfight+0x2ac>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2b05      	cmp	r3, #5
 8002da0:	dc08      	bgt.n	8002db4 <bump_bossfight+0x200>
	for ( int i = 0; i < shot_enemyBoss; i++ )
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	3301      	adds	r3, #1
 8002da6:	61bb      	str	r3, [r7, #24]
 8002da8:	4b2d      	ldr	r3, [pc, #180]	; (8002e60 <bump_bossfight+0x2ac>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	dbd6      	blt.n	8002d60 <bump_bossfight+0x1ac>
 8002db2:	e000      	b.n	8002db6 <bump_bossfight+0x202>
		if (shot_enemyBoss >= 6 ) break;
 8002db4:	bf00      	nop
	}

	//Enemy to the ship
	for ( int i = 0; i < n; i++ )
 8002db6:	2300      	movs	r3, #0
 8002db8:	617b      	str	r3, [r7, #20]
 8002dba:	e020      	b.n	8002dfe <bump_bossfight+0x24a>
	{
		if ( bossRow1 > -1 )
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	db1a      	blt.n	8002df8 <bump_bossfight+0x244>
		{
			if ( (bossRow1 == ship_row && bossCol1 == ship_col) || (bossRow2 == ship_row && bossCol2 == ship_col) )
 8002dc2:	4b28      	ldr	r3, [pc, #160]	; (8002e64 <bump_bossfight+0x2b0>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d104      	bne.n	8002dd6 <bump_bossfight+0x222>
 8002dcc:	4b26      	ldr	r3, [pc, #152]	; (8002e68 <bump_bossfight+0x2b4>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d009      	beq.n	8002dea <bump_bossfight+0x236>
 8002dd6:	4b23      	ldr	r3, [pc, #140]	; (8002e64 <bump_bossfight+0x2b0>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d10b      	bne.n	8002df8 <bump_bossfight+0x244>
 8002de0:	4b21      	ldr	r3, [pc, #132]	; (8002e68 <bump_bossfight+0x2b4>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d106      	bne.n	8002df8 <bump_bossfight+0x244>
			{
				ship_bossfight_health--;
 8002dea:	4b20      	ldr	r3, [pc, #128]	; (8002e6c <bump_bossfight+0x2b8>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	4a1e      	ldr	r2, [pc, #120]	; (8002e6c <bump_bossfight+0x2b8>)
 8002df2:	6013      	str	r3, [r2, #0]
				bump_3();
 8002df4:	f001 fb4c 	bl	8004490 <bump_3>
	for ( int i = 0; i < n; i++ )
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	617b      	str	r3, [r7, #20]
 8002dfe:	4b1c      	ldr	r3, [pc, #112]	; (8002e70 <bump_bossfight+0x2bc>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	dbd9      	blt.n	8002dbc <bump_bossfight+0x208>
			}
		}
	}


	if ( ship_bossfight_health == 0 )
 8002e08:	4b18      	ldr	r3, [pc, #96]	; (8002e6c <bump_bossfight+0x2b8>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d105      	bne.n	8002e1c <bump_bossfight+0x268>
	{
		losing(kill);
 8002e10:	4b18      	ldr	r3, [pc, #96]	; (8002e74 <bump_bossfight+0x2c0>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fe fe85 	bl	8001b24 <losing>
	} else if ( bosshealth == 0 ) {
		kill++;
		victory(kill);
	}

}
 8002e1a:	e00d      	b.n	8002e38 <bump_bossfight+0x284>
	} else if ( bosshealth == 0 ) {
 8002e1c:	4b0b      	ldr	r3, [pc, #44]	; (8002e4c <bump_bossfight+0x298>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d109      	bne.n	8002e38 <bump_bossfight+0x284>
		kill++;
 8002e24:	4b13      	ldr	r3, [pc, #76]	; (8002e74 <bump_bossfight+0x2c0>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	4a12      	ldr	r2, [pc, #72]	; (8002e74 <bump_bossfight+0x2c0>)
 8002e2c:	6013      	str	r3, [r2, #0]
		victory(kill);
 8002e2e:	4b11      	ldr	r3, [pc, #68]	; (8002e74 <bump_bossfight+0x2c0>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fe fe00 	bl	8001a38 <victory>
}
 8002e38:	bf00      	nop
 8002e3a:	3728      	adds	r7, #40	; 0x28
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	20001950 	.word	0x20001950
 8002e44:	20000ed0 	.word	0x20000ed0
 8002e48:	0800cd9c 	.word	0x0800cd9c
 8002e4c:	20000014 	.word	0x20000014
 8002e50:	200002f0 	.word	0x200002f0
 8002e54:	20000a94 	.word	0x20000a94
 8002e58:	200003b8 	.word	0x200003b8
 8002e5c:	0800cf68 	.word	0x0800cf68
 8002e60:	2000030c 	.word	0x2000030c
 8002e64:	200006d8 	.word	0x200006d8
 8002e68:	200011f0 	.word	0x200011f0
 8002e6c:	20000018 	.word	0x20000018
 8002e70:	20000248 	.word	0x20000248
 8002e74:	20000300 	.word	0x20000300

08002e78 <boss_fight>:

void boss_fight() {
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0

	silent_();
 8002e7e:	f001 fb11 	bl	80044a4 <silent_>

	HAL_UART_Transmit(&huart2, msg9, sizeof(unsigned char) * 65, 100);
 8002e82:	2364      	movs	r3, #100	; 0x64
 8002e84:	2241      	movs	r2, #65	; 0x41
 8002e86:	49a7      	ldr	r1, [pc, #668]	; (8003124 <boss_fight+0x2ac>)
 8002e88:	48a7      	ldr	r0, [pc, #668]	; (8003128 <boss_fight+0x2b0>)
 8002e8a:	f007 fb1d 	bl	800a4c8 <HAL_UART_Transmit>

	createChar(8, full);
 8002e8e:	49a7      	ldr	r1, [pc, #668]	; (800312c <boss_fight+0x2b4>)
 8002e90:	2008      	movs	r0, #8
 8002e92:	f7fd fcce 	bl	8000832 <createChar>
	createChar(5, boss1);
 8002e96:	49a6      	ldr	r1, [pc, #664]	; (8003130 <boss_fight+0x2b8>)
 8002e98:	2005      	movs	r0, #5
 8002e9a:	f7fd fcca 	bl	8000832 <createChar>
	createChar(6, boss2);
 8002e9e:	49a5      	ldr	r1, [pc, #660]	; (8003134 <boss_fight+0x2bc>)
 8002ea0:	2006      	movs	r0, #6
 8002ea2:	f7fd fcc6 	bl	8000832 <createChar>
	createChar(7, boss3);
 8002ea6:	49a4      	ldr	r1, [pc, #656]	; (8003138 <boss_fight+0x2c0>)
 8002ea8:	2007      	movs	r0, #7
 8002eaa:	f7fd fcc2 	bl	8000832 <createChar>

	createChar(2, ship);
 8002eae:	49a3      	ldr	r1, [pc, #652]	; (800313c <boss_fight+0x2c4>)
 8002eb0:	2002      	movs	r0, #2
 8002eb2:	f7fd fcbe 	bl	8000832 <createChar>
	createChar(3, bullet1);
 8002eb6:	49a2      	ldr	r1, [pc, #648]	; (8003140 <boss_fight+0x2c8>)
 8002eb8:	2003      	movs	r0, #3
 8002eba:	f7fd fcba 	bl	8000832 <createChar>
	createChar(4, bullet3);
 8002ebe:	49a1      	ldr	r1, [pc, #644]	; (8003144 <boss_fight+0x2cc>)
 8002ec0:	2004      	movs	r0, #4
 8002ec2:	f7fd fcb6 	bl	8000832 <createChar>

	setCursor(0,0);
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	2000      	movs	r0, #0
 8002eca:	f7fd fc3f 	bl	800074c <setCursor>
	print("                                                                                  ");
 8002ece:	489e      	ldr	r0, [pc, #632]	; (8003148 <boss_fight+0x2d0>)
 8002ed0:	f7fd fc84 	bl	80007dc <print>

	bossfightmelody();
 8002ed4:	f001 fafa 	bl	80044cc <bossfightmelody>

	int row = 17;
 8002ed8:	2311      	movs	r3, #17
 8002eda:	617b      	str	r3, [r7, #20]
	int colE = 2;
 8002edc:	2302      	movs	r3, #2
 8002ede:	613b      	str	r3, [r7, #16]
	boss(row, colE);
 8002ee0:	6939      	ldr	r1, [r7, #16]
 8002ee2:	6978      	ldr	r0, [r7, #20]
 8002ee4:	f7ff fd22 	bl	800292c <boss>

	int col = 2;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	60fb      	str	r3, [r7, #12]
	ship_do(col);
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f7fe f9f3 	bl	80012d8 <ship_do>

	int i = 100;
 8002ef2:	2364      	movs	r3, #100	; 0x64
 8002ef4:	60bb      	str	r3, [r7, #8]

	while ( bosshealth > 0 && ship_bossfight_health > 0 ) {
 8002ef6:	e1d5      	b.n	80032a4 <boss_fight+0x42c>

		//fire
		if ( kpad == 5 )
 8002ef8:	4b94      	ldr	r3, [pc, #592]	; (800314c <boss_fight+0x2d4>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2b05      	cmp	r3, #5
 8002efe:	d149      	bne.n	8002f94 <boss_fight+0x11c>
		{
			if ( col == 1 )
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d10c      	bne.n	8002f20 <boss_fight+0xa8>
			{
				shot_col[shot] = 0;
 8002f06:	4b92      	ldr	r3, [pc, #584]	; (8003150 <boss_fight+0x2d8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a92      	ldr	r2, [pc, #584]	; (8003154 <boss_fight+0x2dc>)
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				shot_row[shot] = 1;
 8002f12:	4b8f      	ldr	r3, [pc, #572]	; (8003150 <boss_fight+0x2d8>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a90      	ldr	r2, [pc, #576]	; (8003158 <boss_fight+0x2e0>)
 8002f18:	2101      	movs	r1, #1
 8002f1a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8002f1e:	e02e      	b.n	8002f7e <boss_fight+0x106>
			} else if ( col == 2 ) {
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d10c      	bne.n	8002f40 <boss_fight+0xc8>
				shot_col[shot] = 1;
 8002f26:	4b8a      	ldr	r3, [pc, #552]	; (8003150 <boss_fight+0x2d8>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a8a      	ldr	r2, [pc, #552]	; (8003154 <boss_fight+0x2dc>)
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				shot_row[shot] = 1;
 8002f32:	4b87      	ldr	r3, [pc, #540]	; (8003150 <boss_fight+0x2d8>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a88      	ldr	r2, [pc, #544]	; (8003158 <boss_fight+0x2e0>)
 8002f38:	2101      	movs	r1, #1
 8002f3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8002f3e:	e01e      	b.n	8002f7e <boss_fight+0x106>
			} else if ( col == 3 ) {
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2b03      	cmp	r3, #3
 8002f44:	d10c      	bne.n	8002f60 <boss_fight+0xe8>
				shot_col[shot] = 0;
 8002f46:	4b82      	ldr	r3, [pc, #520]	; (8003150 <boss_fight+0x2d8>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a82      	ldr	r2, [pc, #520]	; (8003154 <boss_fight+0x2dc>)
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				shot_row[shot] = 21;
 8002f52:	4b7f      	ldr	r3, [pc, #508]	; (8003150 <boss_fight+0x2d8>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a80      	ldr	r2, [pc, #512]	; (8003158 <boss_fight+0x2e0>)
 8002f58:	2115      	movs	r1, #21
 8002f5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8002f5e:	e00e      	b.n	8002f7e <boss_fight+0x106>
			} else if ( col == 4 ) {
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	d10b      	bne.n	8002f7e <boss_fight+0x106>
				shot_col[shot] = 1;
 8002f66:	4b7a      	ldr	r3, [pc, #488]	; (8003150 <boss_fight+0x2d8>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a7a      	ldr	r2, [pc, #488]	; (8003154 <boss_fight+0x2dc>)
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				shot_row[shot] = 21;
 8002f72:	4b77      	ldr	r3, [pc, #476]	; (8003150 <boss_fight+0x2d8>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a78      	ldr	r2, [pc, #480]	; (8003158 <boss_fight+0x2e0>)
 8002f78:	2115      	movs	r1, #21
 8002f7a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}

			shot++;
 8002f7e:	4b74      	ldr	r3, [pc, #464]	; (8003150 <boss_fight+0x2d8>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	3301      	adds	r3, #1
 8002f84:	4a72      	ldr	r2, [pc, #456]	; (8003150 <boss_fight+0x2d8>)
 8002f86:	6013      	str	r3, [r2, #0]
			kpad = -1;
 8002f88:	4b70      	ldr	r3, [pc, #448]	; (800314c <boss_fight+0x2d4>)
 8002f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8002f8e:	601a      	str	r2, [r3, #0]
			shot_1();
 8002f90:	f001 fa92 	bl	80044b8 <shot_1>
		}
		if ( shot > 0 )
 8002f94:	4b6e      	ldr	r3, [pc, #440]	; (8003150 <boss_fight+0x2d8>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	dd30      	ble.n	8002ffe <boss_fight+0x186>
		{
			for ( int i = 0; i < shot; i++ )
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	607b      	str	r3, [r7, #4]
 8002fa0:	e028      	b.n	8002ff4 <boss_fight+0x17c>
			{
				if ( shot_row[i] < 41 )
 8002fa2:	4a6d      	ldr	r2, [pc, #436]	; (8003158 <boss_fight+0x2e0>)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002faa:	2b28      	cmp	r3, #40	; 0x28
 8002fac:	dc0b      	bgt.n	8002fc6 <boss_fight+0x14e>
				{
					bullet_1(shot_row[i], shot_col[i]);
 8002fae:	4a6a      	ldr	r2, [pc, #424]	; (8003158 <boss_fight+0x2e0>)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002fb6:	4967      	ldr	r1, [pc, #412]	; (8003154 <boss_fight+0x2dc>)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4610      	mov	r0, r2
 8002fc2:	f7fe fa13 	bl	80013ec <bullet_1>
				}
				if ( shot_row[i] == 20 ) shot_row[i] = 40;
 8002fc6:	4a64      	ldr	r2, [pc, #400]	; (8003158 <boss_fight+0x2e0>)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fce:	2b14      	cmp	r3, #20
 8002fd0:	d104      	bne.n	8002fdc <boss_fight+0x164>
 8002fd2:	4a61      	ldr	r2, [pc, #388]	; (8003158 <boss_fight+0x2e0>)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2128      	movs	r1, #40	; 0x28
 8002fd8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				shot_row[i]++;
 8002fdc:	4a5e      	ldr	r2, [pc, #376]	; (8003158 <boss_fight+0x2e0>)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fe4:	1c5a      	adds	r2, r3, #1
 8002fe6:	495c      	ldr	r1, [pc, #368]	; (8003158 <boss_fight+0x2e0>)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for ( int i = 0; i < shot; i++ )
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	607b      	str	r3, [r7, #4]
 8002ff4:	4b56      	ldr	r3, [pc, #344]	; (8003150 <boss_fight+0x2d8>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	dbd1      	blt.n	8002fa2 <boss_fight+0x12a>
			}
		}

		//turn right
		if ( kpad == 9 )
 8002ffe:	4b53      	ldr	r3, [pc, #332]	; (800314c <boss_fight+0x2d4>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2b09      	cmp	r3, #9
 8003004:	d10c      	bne.n	8003020 <boss_fight+0x1a8>
		{
			if ( col == 4 )
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2b04      	cmp	r3, #4
 800300a:	d102      	bne.n	8003012 <boss_fight+0x19a>
			{
				col = 1;
 800300c:	2301      	movs	r3, #1
 800300e:	60fb      	str	r3, [r7, #12]
 8003010:	e002      	b.n	8003018 <boss_fight+0x1a0>
			} else {
				col++;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	3301      	adds	r3, #1
 8003016:	60fb      	str	r3, [r7, #12]
			}
			kpad = -1;
 8003018:	4b4c      	ldr	r3, [pc, #304]	; (800314c <boss_fight+0x2d4>)
 800301a:	f04f 32ff 	mov.w	r2, #4294967295
 800301e:	601a      	str	r2, [r3, #0]
		}

		//turn left
		if ( kpad == 7 )
 8003020:	4b4a      	ldr	r3, [pc, #296]	; (800314c <boss_fight+0x2d4>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2b07      	cmp	r3, #7
 8003026:	d10c      	bne.n	8003042 <boss_fight+0x1ca>
		{
			if ( col == 1 )
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d102      	bne.n	8003034 <boss_fight+0x1bc>
			{
				col = 4;
 800302e:	2304      	movs	r3, #4
 8003030:	60fb      	str	r3, [r7, #12]
 8003032:	e002      	b.n	800303a <boss_fight+0x1c2>
			} else {
				col--;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	3b01      	subs	r3, #1
 8003038:	60fb      	str	r3, [r7, #12]
			}
			kpad = -1;
 800303a:	4b44      	ldr	r3, [pc, #272]	; (800314c <boss_fight+0x2d4>)
 800303c:	f04f 32ff 	mov.w	r2, #4294967295
 8003040:	601a      	str	r2, [r3, #0]
		}

		ship_do(col);
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f7fe f948 	bl	80012d8 <ship_do>

		if ( shot_enemyBoss > 0 )
 8003048:	4b44      	ldr	r3, [pc, #272]	; (800315c <boss_fight+0x2e4>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	f340 808c 	ble.w	800316a <boss_fight+0x2f2>
		{
			for ( int i = 0; i < shot_enemyBoss; i = i + 2 )
 8003052:	2300      	movs	r3, #0
 8003054:	603b      	str	r3, [r7, #0]
 8003056:	e05e      	b.n	8003116 <boss_fight+0x29e>
			{
				if ( shotE_row[i] >= 0 )
 8003058:	4a41      	ldr	r2, [pc, #260]	; (8003160 <boss_fight+0x2e8>)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003060:	2b00      	cmp	r3, #0
 8003062:	db17      	blt.n	8003094 <boss_fight+0x21c>
				{
					bullet_2(shotE_row[i], shotE_col[i]);
 8003064:	4a3e      	ldr	r2, [pc, #248]	; (8003160 <boss_fight+0x2e8>)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800306c:	493d      	ldr	r1, [pc, #244]	; (8003164 <boss_fight+0x2ec>)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003074:	4619      	mov	r1, r3
 8003076:	4610      	mov	r0, r2
 8003078:	f7fe fa0c 	bl	8001494 <bullet_2>
					HAL_Delay(50);
 800307c:	2032      	movs	r0, #50	; 0x32
 800307e:	f002 f84d 	bl	800511c <HAL_Delay>
					shotE_row[i]--;
 8003082:	4a37      	ldr	r2, [pc, #220]	; (8003160 <boss_fight+0x2e8>)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800308a:	1e5a      	subs	r2, r3, #1
 800308c:	4934      	ldr	r1, [pc, #208]	; (8003160 <boss_fight+0x2e8>)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				}
				if ( shotE_row[i+1] >= 0 )
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	3301      	adds	r3, #1
 8003098:	4a31      	ldr	r2, [pc, #196]	; (8003160 <boss_fight+0x2e8>)
 800309a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	db19      	blt.n	80030d6 <boss_fight+0x25e>
				{
					bullet_2(shotE_row[i+1], shotE_col[i+1]);
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	3301      	adds	r3, #1
 80030a6:	4a2e      	ldr	r2, [pc, #184]	; (8003160 <boss_fight+0x2e8>)
 80030a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	3301      	adds	r3, #1
 80030b0:	492c      	ldr	r1, [pc, #176]	; (8003164 <boss_fight+0x2ec>)
 80030b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80030b6:	4619      	mov	r1, r3
 80030b8:	4610      	mov	r0, r2
 80030ba:	f7fe f9eb 	bl	8001494 <bullet_2>
					HAL_Delay(50);
 80030be:	2032      	movs	r0, #50	; 0x32
 80030c0:	f002 f82c 	bl	800511c <HAL_Delay>
					shotE_row[i+1]--;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	3301      	adds	r3, #1
 80030c8:	4a25      	ldr	r2, [pc, #148]	; (8003160 <boss_fight+0x2e8>)
 80030ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80030ce:	3a01      	subs	r2, #1
 80030d0:	4923      	ldr	r1, [pc, #140]	; (8003160 <boss_fight+0x2e8>)
 80030d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				}
				if ( shotE_row[i] == 19 ) shotE_row[i] = -1;
 80030d6:	4a22      	ldr	r2, [pc, #136]	; (8003160 <boss_fight+0x2e8>)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030de:	2b13      	cmp	r3, #19
 80030e0:	d105      	bne.n	80030ee <boss_fight+0x276>
 80030e2:	4a1f      	ldr	r2, [pc, #124]	; (8003160 <boss_fight+0x2e8>)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	f04f 31ff 	mov.w	r1, #4294967295
 80030ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if ( shotE_row[i+1] == 19 ) shotE_row[i+1] = -1;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	3301      	adds	r3, #1
 80030f2:	4a1b      	ldr	r2, [pc, #108]	; (8003160 <boss_fight+0x2e8>)
 80030f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030f8:	2b13      	cmp	r3, #19
 80030fa:	d106      	bne.n	800310a <boss_fight+0x292>
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	3301      	adds	r3, #1
 8003100:	4a17      	ldr	r2, [pc, #92]	; (8003160 <boss_fight+0x2e8>)
 8003102:	f04f 31ff 	mov.w	r1, #4294967295
 8003106:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if ( i == 4 ) break;
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b04      	cmp	r3, #4
 800310e:	d02b      	beq.n	8003168 <boss_fight+0x2f0>
			for ( int i = 0; i < shot_enemyBoss; i = i + 2 )
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	3302      	adds	r3, #2
 8003114:	603b      	str	r3, [r7, #0]
 8003116:	4b11      	ldr	r3, [pc, #68]	; (800315c <boss_fight+0x2e4>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	429a      	cmp	r2, r3
 800311e:	db9b      	blt.n	8003058 <boss_fight+0x1e0>
 8003120:	e023      	b.n	800316a <boss_fight+0x2f2>
 8003122:	bf00      	nop
 8003124:	20000194 	.word	0x20000194
 8003128:	200012ac 	.word	0x200012ac
 800312c:	20000218 	.word	0x20000218
 8003130:	20000220 	.word	0x20000220
 8003134:	20000228 	.word	0x20000228
 8003138:	20000230 	.word	0x20000230
 800313c:	200001e8 	.word	0x200001e8
 8003140:	200001f0 	.word	0x200001f0
 8003144:	20000200 	.word	0x20000200
 8003148:	0800cda0 	.word	0x0800cda0
 800314c:	20000244 	.word	0x20000244
 8003150:	200002f0 	.word	0x200002f0
 8003154:	20000ed0 	.word	0x20000ed0
 8003158:	20001950 	.word	0x20001950
 800315c:	2000030c 	.word	0x2000030c
 8003160:	20000a94 	.word	0x20000a94
 8003164:	200003b8 	.word	0x200003b8
				if ( i == 4 ) break;
 8003168:	bf00      	nop
			}
		}

		if ( i == 80 )
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	2b50      	cmp	r3, #80	; 0x50
 800316e:	d11d      	bne.n	80031ac <boss_fight+0x334>
		{
			row--;
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	3b01      	subs	r3, #1
 8003174:	617b      	str	r3, [r7, #20]
			shot_enemyBoss = 0;
 8003176:	4b52      	ldr	r3, [pc, #328]	; (80032c0 <boss_fight+0x448>)
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
			boss(row, colE);
 800317c:	6939      	ldr	r1, [r7, #16]
 800317e:	6978      	ldr	r0, [r7, #20]
 8003180:	f7ff fbd4 	bl	800292c <boss>
			shotE_row[0] = row-3;
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	3b03      	subs	r3, #3
 8003188:	4a4e      	ldr	r2, [pc, #312]	; (80032c4 <boss_fight+0x44c>)
 800318a:	6013      	str	r3, [r2, #0]
			shotE_col[0] = 1;
 800318c:	4b4e      	ldr	r3, [pc, #312]	; (80032c8 <boss_fight+0x450>)
 800318e:	2201      	movs	r2, #1
 8003190:	601a      	str	r2, [r3, #0]
			shotE_row[1] = row+17;
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	3311      	adds	r3, #17
 8003196:	4a4b      	ldr	r2, [pc, #300]	; (80032c4 <boss_fight+0x44c>)
 8003198:	6053      	str	r3, [r2, #4]
			shotE_col[1] = 0;
 800319a:	4b4b      	ldr	r3, [pc, #300]	; (80032c8 <boss_fight+0x450>)
 800319c:	2200      	movs	r2, #0
 800319e:	605a      	str	r2, [r3, #4]
			shot_enemyBoss = shot_enemyBoss + 2;
 80031a0:	4b47      	ldr	r3, [pc, #284]	; (80032c0 <boss_fight+0x448>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	3302      	adds	r3, #2
 80031a6:	4a46      	ldr	r2, [pc, #280]	; (80032c0 <boss_fight+0x448>)
 80031a8:	6013      	str	r3, [r2, #0]
 80031aa:	e052      	b.n	8003252 <boss_fight+0x3da>
		} else if ( i == 60 ) {
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2b3c      	cmp	r3, #60	; 0x3c
 80031b0:	d11a      	bne.n	80031e8 <boss_fight+0x370>
			colE++;
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	3301      	adds	r3, #1
 80031b6:	613b      	str	r3, [r7, #16]
			boss(row, colE);
 80031b8:	6939      	ldr	r1, [r7, #16]
 80031ba:	6978      	ldr	r0, [r7, #20]
 80031bc:	f7ff fbb6 	bl	800292c <boss>
			shotE_row[2] = row+17;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	3311      	adds	r3, #17
 80031c4:	4a3f      	ldr	r2, [pc, #252]	; (80032c4 <boss_fight+0x44c>)
 80031c6:	6093      	str	r3, [r2, #8]
			shotE_col[2] = 0;
 80031c8:	4b3f      	ldr	r3, [pc, #252]	; (80032c8 <boss_fight+0x450>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	609a      	str	r2, [r3, #8]
			shotE_row[3] = row+17;
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	3311      	adds	r3, #17
 80031d2:	4a3c      	ldr	r2, [pc, #240]	; (80032c4 <boss_fight+0x44c>)
 80031d4:	60d3      	str	r3, [r2, #12]
			shotE_col[3] = 1;
 80031d6:	4b3c      	ldr	r3, [pc, #240]	; (80032c8 <boss_fight+0x450>)
 80031d8:	2201      	movs	r2, #1
 80031da:	60da      	str	r2, [r3, #12]
			shot_enemyBoss = shot_enemyBoss + 2;
 80031dc:	4b38      	ldr	r3, [pc, #224]	; (80032c0 <boss_fight+0x448>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	3302      	adds	r3, #2
 80031e2:	4a37      	ldr	r2, [pc, #220]	; (80032c0 <boss_fight+0x448>)
 80031e4:	6013      	str	r3, [r2, #0]
 80031e6:	e034      	b.n	8003252 <boss_fight+0x3da>
		} else if ( i == 40 ) {
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	2b28      	cmp	r3, #40	; 0x28
 80031ec:	d107      	bne.n	80031fe <boss_fight+0x386>
			colE--;
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	3b01      	subs	r3, #1
 80031f2:	613b      	str	r3, [r7, #16]
			boss(row, colE);
 80031f4:	6939      	ldr	r1, [r7, #16]
 80031f6:	6978      	ldr	r0, [r7, #20]
 80031f8:	f7ff fb98 	bl	800292c <boss>
 80031fc:	e029      	b.n	8003252 <boss_fight+0x3da>
		} else if ( i == 20 ) {
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	2b14      	cmp	r3, #20
 8003202:	d11a      	bne.n	800323a <boss_fight+0x3c2>
			colE--;
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	3b01      	subs	r3, #1
 8003208:	613b      	str	r3, [r7, #16]
			boss(row, colE);
 800320a:	6939      	ldr	r1, [r7, #16]
 800320c:	6978      	ldr	r0, [r7, #20]
 800320e:	f7ff fb8d 	bl	800292c <boss>
			shotE_row[4] = row-3;
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	3b03      	subs	r3, #3
 8003216:	4a2b      	ldr	r2, [pc, #172]	; (80032c4 <boss_fight+0x44c>)
 8003218:	6113      	str	r3, [r2, #16]
			shotE_col[4] = 0;
 800321a:	4b2b      	ldr	r3, [pc, #172]	; (80032c8 <boss_fight+0x450>)
 800321c:	2200      	movs	r2, #0
 800321e:	611a      	str	r2, [r3, #16]
			shotE_row[5] = row-3;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	3b03      	subs	r3, #3
 8003224:	4a27      	ldr	r2, [pc, #156]	; (80032c4 <boss_fight+0x44c>)
 8003226:	6153      	str	r3, [r2, #20]
			shotE_col[5] = 1;
 8003228:	4b27      	ldr	r3, [pc, #156]	; (80032c8 <boss_fight+0x450>)
 800322a:	2201      	movs	r2, #1
 800322c:	615a      	str	r2, [r3, #20]
			shot_enemyBoss = shot_enemyBoss + 2;
 800322e:	4b24      	ldr	r3, [pc, #144]	; (80032c0 <boss_fight+0x448>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	3302      	adds	r3, #2
 8003234:	4a22      	ldr	r2, [pc, #136]	; (80032c0 <boss_fight+0x448>)
 8003236:	6013      	str	r3, [r2, #0]
 8003238:	e00b      	b.n	8003252 <boss_fight+0x3da>
		} else if ( i == 0 ) {
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d108      	bne.n	8003252 <boss_fight+0x3da>
			colE++;
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	3301      	adds	r3, #1
 8003244:	613b      	str	r3, [r7, #16]
			boss(row, colE);
 8003246:	6939      	ldr	r1, [r7, #16]
 8003248:	6978      	ldr	r0, [r7, #20]
 800324a:	f7ff fb6f 	bl	800292c <boss>
			i = 100;
 800324e:	2364      	movs	r3, #100	; 0x64
 8003250:	60bb      	str	r3, [r7, #8]
		}
		i--;
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	3b01      	subs	r3, #1
 8003256:	60bb      	str	r3, [r7, #8]

		if ( colE == 2 )
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	2b02      	cmp	r3, #2
 800325c:	d109      	bne.n	8003272 <boss_fight+0x3fa>
		{
			bump_bossfight(row-1,1,row+19,0);
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	1e58      	subs	r0, r3, #1
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	f103 0213 	add.w	r2, r3, #19
 8003268:	2300      	movs	r3, #0
 800326a:	2101      	movs	r1, #1
 800326c:	f7ff fca2 	bl	8002bb4 <bump_bossfight>
 8003270:	e018      	b.n	80032a4 <boss_fight+0x42c>
		} else if ( colE == 3 ) {
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	2b03      	cmp	r3, #3
 8003276:	d10a      	bne.n	800328e <boss_fight+0x416>
			bump_bossfight(row+19,1,row+19,0);
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	f103 0013 	add.w	r0, r3, #19
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f103 0213 	add.w	r2, r3, #19
 8003284:	2300      	movs	r3, #0
 8003286:	2101      	movs	r1, #1
 8003288:	f7ff fc94 	bl	8002bb4 <bump_bossfight>
 800328c:	e00a      	b.n	80032a4 <boss_fight+0x42c>
		} else if ( colE == 1 ) {
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d107      	bne.n	80032a4 <boss_fight+0x42c>
			bump_bossfight(row-1,1,row-1,0);
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	1e58      	subs	r0, r3, #1
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	1e5a      	subs	r2, r3, #1
 800329c:	2300      	movs	r3, #0
 800329e:	2101      	movs	r1, #1
 80032a0:	f7ff fc88 	bl	8002bb4 <bump_bossfight>
	while ( bosshealth > 0 && ship_bossfight_health > 0 ) {
 80032a4:	4b09      	ldr	r3, [pc, #36]	; (80032cc <boss_fight+0x454>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	dd04      	ble.n	80032b6 <boss_fight+0x43e>
 80032ac:	4b08      	ldr	r3, [pc, #32]	; (80032d0 <boss_fight+0x458>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f73f ae21 	bgt.w	8002ef8 <boss_fight+0x80>
		}



	}
}
 80032b6:	bf00      	nop
 80032b8:	3718      	adds	r7, #24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	2000030c 	.word	0x2000030c
 80032c4:	20000a94 	.word	0x20000a94
 80032c8:	200003b8 	.word	0x200003b8
 80032cc:	20000014 	.word	0x20000014
 80032d0:	20000018 	.word	0x20000018

080032d4 <autoShip>:

void autoShip( int col ) {
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]

	if ( autoFire == 1 || autoFire == 2 || autoFire == 3 || autoFire == 4 ) {
 80032dc:	4b47      	ldr	r3, [pc, #284]	; (80033fc <autoShip+0x128>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d00b      	beq.n	80032fc <autoShip+0x28>
 80032e4:	4b45      	ldr	r3, [pc, #276]	; (80033fc <autoShip+0x128>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d007      	beq.n	80032fc <autoShip+0x28>
 80032ec:	4b43      	ldr	r3, [pc, #268]	; (80033fc <autoShip+0x128>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2b03      	cmp	r3, #3
 80032f2:	d003      	beq.n	80032fc <autoShip+0x28>
 80032f4:	4b41      	ldr	r3, [pc, #260]	; (80033fc <autoShip+0x128>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2b04      	cmp	r3, #4
 80032fa:	d105      	bne.n	8003308 <autoShip+0x34>
		autoFire++;
 80032fc:	4b3f      	ldr	r3, [pc, #252]	; (80033fc <autoShip+0x128>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	3301      	adds	r3, #1
 8003302:	4a3e      	ldr	r2, [pc, #248]	; (80033fc <autoShip+0x128>)
 8003304:	6013      	str	r3, [r2, #0]
 8003306:	e006      	b.n	8003316 <autoShip+0x42>
	} else if ( autoFire == 5 ) {
 8003308:	4b3c      	ldr	r3, [pc, #240]	; (80033fc <autoShip+0x128>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2b05      	cmp	r3, #5
 800330e:	d102      	bne.n	8003316 <autoShip+0x42>
		autoFire = 0;
 8003310:	4b3a      	ldr	r3, [pc, #232]	; (80033fc <autoShip+0x128>)
 8003312:	2200      	movs	r2, #0
 8003314:	601a      	str	r2, [r3, #0]
	}

	//fire
	if ( col == 1 && autoFire == 0 )
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d117      	bne.n	800334c <autoShip+0x78>
 800331c:	4b37      	ldr	r3, [pc, #220]	; (80033fc <autoShip+0x128>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d113      	bne.n	800334c <autoShip+0x78>
	{
		shot_col[shot] = 0;
 8003324:	4b36      	ldr	r3, [pc, #216]	; (8003400 <autoShip+0x12c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a36      	ldr	r2, [pc, #216]	; (8003404 <autoShip+0x130>)
 800332a:	2100      	movs	r1, #0
 800332c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		shot_row[shot] = 1;
 8003330:	4b33      	ldr	r3, [pc, #204]	; (8003400 <autoShip+0x12c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a34      	ldr	r2, [pc, #208]	; (8003408 <autoShip+0x134>)
 8003336:	2101      	movs	r1, #1
 8003338:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		shot++;
 800333c:	4b30      	ldr	r3, [pc, #192]	; (8003400 <autoShip+0x12c>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	3301      	adds	r3, #1
 8003342:	4a2f      	ldr	r2, [pc, #188]	; (8003400 <autoShip+0x12c>)
 8003344:	6013      	str	r3, [r2, #0]
		shot_1();
 8003346:	f001 f8b7 	bl	80044b8 <shot_1>
	{
 800334a:	e053      	b.n	80033f4 <autoShip+0x120>
	} else if ( col == 2 && autoFire == 0 ) {
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b02      	cmp	r3, #2
 8003350:	d117      	bne.n	8003382 <autoShip+0xae>
 8003352:	4b2a      	ldr	r3, [pc, #168]	; (80033fc <autoShip+0x128>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d113      	bne.n	8003382 <autoShip+0xae>
		shot_col[shot] = 1;
 800335a:	4b29      	ldr	r3, [pc, #164]	; (8003400 <autoShip+0x12c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a29      	ldr	r2, [pc, #164]	; (8003404 <autoShip+0x130>)
 8003360:	2101      	movs	r1, #1
 8003362:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		shot_row[shot] = 1;
 8003366:	4b26      	ldr	r3, [pc, #152]	; (8003400 <autoShip+0x12c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a27      	ldr	r2, [pc, #156]	; (8003408 <autoShip+0x134>)
 800336c:	2101      	movs	r1, #1
 800336e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		shot++;
 8003372:	4b23      	ldr	r3, [pc, #140]	; (8003400 <autoShip+0x12c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	3301      	adds	r3, #1
 8003378:	4a21      	ldr	r2, [pc, #132]	; (8003400 <autoShip+0x12c>)
 800337a:	6013      	str	r3, [r2, #0]
		shot_1();
 800337c:	f001 f89c 	bl	80044b8 <shot_1>
	} else if ( col == 2 && autoFire == 0 ) {
 8003380:	e038      	b.n	80033f4 <autoShip+0x120>
	} else if ( col == 3 && autoFire == 0 ) {
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b03      	cmp	r3, #3
 8003386:	d117      	bne.n	80033b8 <autoShip+0xe4>
 8003388:	4b1c      	ldr	r3, [pc, #112]	; (80033fc <autoShip+0x128>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d113      	bne.n	80033b8 <autoShip+0xe4>
		shot_col[shot] = 0;
 8003390:	4b1b      	ldr	r3, [pc, #108]	; (8003400 <autoShip+0x12c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a1b      	ldr	r2, [pc, #108]	; (8003404 <autoShip+0x130>)
 8003396:	2100      	movs	r1, #0
 8003398:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		shot_row[shot] = 21;
 800339c:	4b18      	ldr	r3, [pc, #96]	; (8003400 <autoShip+0x12c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a19      	ldr	r2, [pc, #100]	; (8003408 <autoShip+0x134>)
 80033a2:	2115      	movs	r1, #21
 80033a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		shot++;
 80033a8:	4b15      	ldr	r3, [pc, #84]	; (8003400 <autoShip+0x12c>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	3301      	adds	r3, #1
 80033ae:	4a14      	ldr	r2, [pc, #80]	; (8003400 <autoShip+0x12c>)
 80033b0:	6013      	str	r3, [r2, #0]
		shot_1();
 80033b2:	f001 f881 	bl	80044b8 <shot_1>
	} else if ( col == 3 && autoFire == 0 ) {
 80033b6:	e01d      	b.n	80033f4 <autoShip+0x120>
	} else if ( col == 4 && autoFire == 0 ) {
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	d11a      	bne.n	80033f4 <autoShip+0x120>
 80033be:	4b0f      	ldr	r3, [pc, #60]	; (80033fc <autoShip+0x128>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d116      	bne.n	80033f4 <autoShip+0x120>
		shot_col[shot] = 1;
 80033c6:	4b0e      	ldr	r3, [pc, #56]	; (8003400 <autoShip+0x12c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a0e      	ldr	r2, [pc, #56]	; (8003404 <autoShip+0x130>)
 80033cc:	2101      	movs	r1, #1
 80033ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		shot_row[shot] = 21;
 80033d2:	4b0b      	ldr	r3, [pc, #44]	; (8003400 <autoShip+0x12c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a0c      	ldr	r2, [pc, #48]	; (8003408 <autoShip+0x134>)
 80033d8:	2115      	movs	r1, #21
 80033da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		shot++;
 80033de:	4b08      	ldr	r3, [pc, #32]	; (8003400 <autoShip+0x12c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	3301      	adds	r3, #1
 80033e4:	4a06      	ldr	r2, [pc, #24]	; (8003400 <autoShip+0x12c>)
 80033e6:	6013      	str	r3, [r2, #0]
		shot_1();
 80033e8:	f001 f866 	bl	80044b8 <shot_1>
		autoFire = 1;
 80033ec:	4b03      	ldr	r3, [pc, #12]	; (80033fc <autoShip+0x128>)
 80033ee:	2201      	movs	r2, #1
 80033f0:	601a      	str	r2, [r3, #0]
	}

}
 80033f2:	e7ff      	b.n	80033f4 <autoShip+0x120>
 80033f4:	bf00      	nop
 80033f6:	3708      	adds	r7, #8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	20000310 	.word	0x20000310
 8003400:	200002f0 	.word	0x200002f0
 8003404:	20000ed0 	.word	0x20000ed0
 8003408:	20001950 	.word	0x20001950

0800340c <setTimeAndDate>:

void setTimeAndDate() {
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
	mytime.Hours=16;
 8003410:	4b0e      	ldr	r3, [pc, #56]	; (800344c <setTimeAndDate+0x40>)
 8003412:	2210      	movs	r2, #16
 8003414:	701a      	strb	r2, [r3, #0]
	mytime.Minutes=35;
 8003416:	4b0d      	ldr	r3, [pc, #52]	; (800344c <setTimeAndDate+0x40>)
 8003418:	2223      	movs	r2, #35	; 0x23
 800341a:	705a      	strb	r2, [r3, #1]
	mytime.Seconds=50;
 800341c:	4b0b      	ldr	r3, [pc, #44]	; (800344c <setTimeAndDate+0x40>)
 800341e:	2232      	movs	r2, #50	; 0x32
 8003420:	709a      	strb	r2, [r3, #2]

	HAL_RTC_SetTime(&hrtc, &mytime, RTC_FORMAT_BIN);
 8003422:	2200      	movs	r2, #0
 8003424:	4909      	ldr	r1, [pc, #36]	; (800344c <setTimeAndDate+0x40>)
 8003426:	480a      	ldr	r0, [pc, #40]	; (8003450 <setTimeAndDate+0x44>)
 8003428:	f005 fa9d 	bl	8008966 <HAL_RTC_SetTime>

	mydate.Year=23;
 800342c:	4b09      	ldr	r3, [pc, #36]	; (8003454 <setTimeAndDate+0x48>)
 800342e:	2217      	movs	r2, #23
 8003430:	70da      	strb	r2, [r3, #3]
	mydate.Month=1;
 8003432:	4b08      	ldr	r3, [pc, #32]	; (8003454 <setTimeAndDate+0x48>)
 8003434:	2201      	movs	r2, #1
 8003436:	705a      	strb	r2, [r3, #1]
	mydate.Date=9;
 8003438:	4b06      	ldr	r3, [pc, #24]	; (8003454 <setTimeAndDate+0x48>)
 800343a:	2209      	movs	r2, #9
 800343c:	709a      	strb	r2, [r3, #2]

	HAL_RTC_SetDate(&hrtc, &mydate, RTC_FORMAT_BIN);
 800343e:	2200      	movs	r2, #0
 8003440:	4904      	ldr	r1, [pc, #16]	; (8003454 <setTimeAndDate+0x48>)
 8003442:	4803      	ldr	r0, [pc, #12]	; (8003450 <setTimeAndDate+0x44>)
 8003444:	f005 fbaa 	bl	8008b9c <HAL_RTC_SetDate>
}
 8003448:	bf00      	nop
 800344a:	bd80      	pop	{r7, pc}
 800344c:	2000193c 	.word	0x2000193c
 8003450:	20000e5c 	.word	0x20000e5c
 8003454:	20000e7c 	.word	0x20000e7c

08003458 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800345c:	f001 fdf8 	bl	8005050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003460:	f000 f832 	bl	80034c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003464:	f000 fb86 	bl	8003b74 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003468:	f000 f90a 	bl	8003680 <MX_I2C1_Init>
  MX_SPI1_Init();
 800346c:	f000 f9a2 	bl	80037b4 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8003470:	f000 fb5e 	bl	8003b30 <MX_USB_PCD_Init>
  MX_ADC1_Init();
 8003474:	f000 f894 	bl	80035a0 <MX_ADC1_Init>
  MX_RTC_Init();
 8003478:	f000 f942 	bl	8003700 <MX_RTC_Init>
  MX_TIM2_Init();
 800347c:	f000 f9d8 	bl	8003830 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003480:	f000 fa26 	bl	80038d0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003484:	f000 fa74 	bl	8003970 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8003488:	f000 fb22 	bl	8003ad0 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 800348c:	f000 fae8 	bl	8003a60 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_IT(&hadc1);
 8003490:	4809      	ldr	r0, [pc, #36]	; (80034b8 <main+0x60>)
 8003492:	f002 f865 	bl	8005560 <HAL_ADC_Start_IT>

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, 1);
 8003496:	2201      	movs	r2, #1
 8003498:	21f0      	movs	r1, #240	; 0xf0
 800349a:	4808      	ldr	r0, [pc, #32]	; (80034bc <main+0x64>)
 800349c:	f003 fca4 	bl	8006de8 <HAL_GPIO_WritePin>

  setTimeAndDate();
 80034a0:	f7ff ffb4 	bl	800340c <setTimeAndDate>

  HAL_UART_Receive_IT(&huart2,data,sizeof(data));
 80034a4:	2201      	movs	r2, #1
 80034a6:	4906      	ldr	r1, [pc, #24]	; (80034c0 <main+0x68>)
 80034a8:	4806      	ldr	r0, [pc, #24]	; (80034c4 <main+0x6c>)
 80034aa:	f007 f8a1 	bl	800a5f0 <HAL_UART_Receive_IT>

  start_page();
 80034ae:	f7fd fad9 	bl	8000a64 <start_page>

  menu();
 80034b2:	f7fd fbf9 	bl	8000ca8 <menu>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80034b6:	e7fe      	b.n	80034b6 <main+0x5e>
 80034b8:	20000e0c 	.word	0x20000e0c
 80034bc:	48000c00 	.word	0x48000c00
 80034c0:	20000e80 	.word	0x20000e80
 80034c4:	200012ac 	.word	0x200012ac

080034c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b09e      	sub	sp, #120	; 0x78
 80034cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80034d2:	2228      	movs	r2, #40	; 0x28
 80034d4:	2100      	movs	r1, #0
 80034d6:	4618      	mov	r0, r3
 80034d8:	f008 fa6c 	bl	800b9b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	605a      	str	r2, [r3, #4]
 80034e6:	609a      	str	r2, [r3, #8]
 80034e8:	60da      	str	r2, [r3, #12]
 80034ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80034ec:	463b      	mov	r3, r7
 80034ee:	223c      	movs	r2, #60	; 0x3c
 80034f0:	2100      	movs	r1, #0
 80034f2:	4618      	mov	r0, r3
 80034f4:	f008 fa5e 	bl	800b9b4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80034f8:	230b      	movs	r3, #11
 80034fa:	653b      	str	r3, [r7, #80]	; 0x50
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80034fc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003500:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003502:	2300      	movs	r3, #0
 8003504:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003506:	2301      	movs	r3, #1
 8003508:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800350a:	2310      	movs	r3, #16
 800350c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800350e:	2301      	movs	r3, #1
 8003510:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003512:	2302      	movs	r3, #2
 8003514:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003516:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800351a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800351c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003520:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003522:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003526:	4618      	mov	r0, r3
 8003528:	f003 fe9e 	bl	8007268 <HAL_RCC_OscConfig>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8003532:	f000 fc03 	bl	8003d3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003536:	230f      	movs	r3, #15
 8003538:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800353a:	2302      	movs	r3, #2
 800353c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800353e:	2300      	movs	r3, #0
 8003540:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003542:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003546:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003548:	2300      	movs	r3, #0
 800354a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800354c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003550:	2101      	movs	r1, #1
 8003552:	4618      	mov	r0, r3
 8003554:	f004 fd90 	bl	8008078 <HAL_RCC_ClockConfig>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800355e:	f000 fbed 	bl	8003d3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 8003562:	4b0e      	ldr	r3, [pc, #56]	; (800359c <SystemClock_Config+0xd4>)
 8003564:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003566:	2300      	movs	r3, #0
 8003568:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800356a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800356e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8003570:	2300      	movs	r3, #0
 8003572:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003574:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003578:	607b      	str	r3, [r7, #4]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800357a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800357e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003580:	463b      	mov	r3, r7
 8003582:	4618      	mov	r0, r3
 8003584:	f004 ffae 	bl	80084e4 <HAL_RCCEx_PeriphCLKConfig>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800358e:	f000 fbd5 	bl	8003d3c <Error_Handler>
  }
}
 8003592:	bf00      	nop
 8003594:	3778      	adds	r7, #120	; 0x78
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	000300a2 	.word	0x000300a2

080035a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b08a      	sub	sp, #40	; 0x28
 80035a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80035a6:	f107 031c 	add.w	r3, r7, #28
 80035aa:	2200      	movs	r2, #0
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	605a      	str	r2, [r3, #4]
 80035b0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80035b2:	1d3b      	adds	r3, r7, #4
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	605a      	str	r2, [r3, #4]
 80035ba:	609a      	str	r2, [r3, #8]
 80035bc:	60da      	str	r2, [r3, #12]
 80035be:	611a      	str	r2, [r3, #16]
 80035c0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80035c2:	4b2e      	ldr	r3, [pc, #184]	; (800367c <MX_ADC1_Init+0xdc>)
 80035c4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80035c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80035ca:	4b2c      	ldr	r3, [pc, #176]	; (800367c <MX_ADC1_Init+0xdc>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80035d0:	4b2a      	ldr	r3, [pc, #168]	; (800367c <MX_ADC1_Init+0xdc>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80035d6:	4b29      	ldr	r3, [pc, #164]	; (800367c <MX_ADC1_Init+0xdc>)
 80035d8:	2200      	movs	r2, #0
 80035da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80035dc:	4b27      	ldr	r3, [pc, #156]	; (800367c <MX_ADC1_Init+0xdc>)
 80035de:	2200      	movs	r2, #0
 80035e0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80035e2:	4b26      	ldr	r3, [pc, #152]	; (800367c <MX_ADC1_Init+0xdc>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80035ea:	4b24      	ldr	r3, [pc, #144]	; (800367c <MX_ADC1_Init+0xdc>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80035f0:	4b22      	ldr	r3, [pc, #136]	; (800367c <MX_ADC1_Init+0xdc>)
 80035f2:	2201      	movs	r2, #1
 80035f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80035f6:	4b21      	ldr	r3, [pc, #132]	; (800367c <MX_ADC1_Init+0xdc>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80035fc:	4b1f      	ldr	r3, [pc, #124]	; (800367c <MX_ADC1_Init+0xdc>)
 80035fe:	2201      	movs	r2, #1
 8003600:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003602:	4b1e      	ldr	r3, [pc, #120]	; (800367c <MX_ADC1_Init+0xdc>)
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800360a:	4b1c      	ldr	r3, [pc, #112]	; (800367c <MX_ADC1_Init+0xdc>)
 800360c:	2204      	movs	r2, #4
 800360e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003610:	4b1a      	ldr	r3, [pc, #104]	; (800367c <MX_ADC1_Init+0xdc>)
 8003612:	2200      	movs	r2, #0
 8003614:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003616:	4b19      	ldr	r3, [pc, #100]	; (800367c <MX_ADC1_Init+0xdc>)
 8003618:	2200      	movs	r2, #0
 800361a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800361c:	4817      	ldr	r0, [pc, #92]	; (800367c <MX_ADC1_Init+0xdc>)
 800361e:	f001 fdbf 	bl	80051a0 <HAL_ADC_Init>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8003628:	f000 fb88 	bl	8003d3c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800362c:	2300      	movs	r3, #0
 800362e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003630:	f107 031c 	add.w	r3, r7, #28
 8003634:	4619      	mov	r1, r3
 8003636:	4811      	ldr	r0, [pc, #68]	; (800367c <MX_ADC1_Init+0xdc>)
 8003638:	f002 ff00 	bl	800643c <HAL_ADCEx_MultiModeConfigChannel>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8003642:	f000 fb7b 	bl	8003d3c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003646:	2302      	movs	r3, #2
 8003648:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800364a:	2301      	movs	r3, #1
 800364c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800364e:	2300      	movs	r3, #0
 8003650:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8003652:	2307      	movs	r3, #7
 8003654:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003656:	2300      	movs	r3, #0
 8003658:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800365a:	2300      	movs	r3, #0
 800365c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800365e:	1d3b      	adds	r3, r7, #4
 8003660:	4619      	mov	r1, r3
 8003662:	4806      	ldr	r0, [pc, #24]	; (800367c <MX_ADC1_Init+0xdc>)
 8003664:	f002 fbfe 	bl	8005e64 <HAL_ADC_ConfigChannel>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800366e:	f000 fb65 	bl	8003d3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003672:	bf00      	nop
 8003674:	3728      	adds	r7, #40	; 0x28
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	20000e0c 	.word	0x20000e0c

08003680 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003684:	4b1b      	ldr	r3, [pc, #108]	; (80036f4 <MX_I2C1_Init+0x74>)
 8003686:	4a1c      	ldr	r2, [pc, #112]	; (80036f8 <MX_I2C1_Init+0x78>)
 8003688:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800368a:	4b1a      	ldr	r3, [pc, #104]	; (80036f4 <MX_I2C1_Init+0x74>)
 800368c:	4a1b      	ldr	r2, [pc, #108]	; (80036fc <MX_I2C1_Init+0x7c>)
 800368e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003690:	4b18      	ldr	r3, [pc, #96]	; (80036f4 <MX_I2C1_Init+0x74>)
 8003692:	2200      	movs	r2, #0
 8003694:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003696:	4b17      	ldr	r3, [pc, #92]	; (80036f4 <MX_I2C1_Init+0x74>)
 8003698:	2201      	movs	r2, #1
 800369a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800369c:	4b15      	ldr	r3, [pc, #84]	; (80036f4 <MX_I2C1_Init+0x74>)
 800369e:	2200      	movs	r2, #0
 80036a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80036a2:	4b14      	ldr	r3, [pc, #80]	; (80036f4 <MX_I2C1_Init+0x74>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80036a8:	4b12      	ldr	r3, [pc, #72]	; (80036f4 <MX_I2C1_Init+0x74>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80036ae:	4b11      	ldr	r3, [pc, #68]	; (80036f4 <MX_I2C1_Init+0x74>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80036b4:	4b0f      	ldr	r3, [pc, #60]	; (80036f4 <MX_I2C1_Init+0x74>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80036ba:	480e      	ldr	r0, [pc, #56]	; (80036f4 <MX_I2C1_Init+0x74>)
 80036bc:	f003 fbcf 	bl	8006e5e <HAL_I2C_Init>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80036c6:	f000 fb39 	bl	8003d3c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80036ca:	2100      	movs	r1, #0
 80036cc:	4809      	ldr	r0, [pc, #36]	; (80036f4 <MX_I2C1_Init+0x74>)
 80036ce:	f003 fc55 	bl	8006f7c <HAL_I2CEx_ConfigAnalogFilter>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80036d8:	f000 fb30 	bl	8003d3c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80036dc:	2100      	movs	r1, #0
 80036de:	4805      	ldr	r0, [pc, #20]	; (80036f4 <MX_I2C1_Init+0x74>)
 80036e0:	f003 fc97 	bl	8007012 <HAL_I2CEx_ConfigDigitalFilter>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80036ea:	f000 fb27 	bl	8003d3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80036ee:	bf00      	nop
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	20000728 	.word	0x20000728
 80036f8:	40005400 	.word	0x40005400
 80036fc:	2000090e 	.word	0x2000090e

08003700 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003706:	1d3b      	adds	r3, r7, #4
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]
 800370c:	605a      	str	r2, [r3, #4]
 800370e:	609a      	str	r2, [r3, #8]
 8003710:	60da      	str	r2, [r3, #12]
 8003712:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003714:	2300      	movs	r3, #0
 8003716:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003718:	4b24      	ldr	r3, [pc, #144]	; (80037ac <MX_RTC_Init+0xac>)
 800371a:	4a25      	ldr	r2, [pc, #148]	; (80037b0 <MX_RTC_Init+0xb0>)
 800371c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800371e:	4b23      	ldr	r3, [pc, #140]	; (80037ac <MX_RTC_Init+0xac>)
 8003720:	2200      	movs	r2, #0
 8003722:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 39;
 8003724:	4b21      	ldr	r3, [pc, #132]	; (80037ac <MX_RTC_Init+0xac>)
 8003726:	2227      	movs	r2, #39	; 0x27
 8003728:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 999;
 800372a:	4b20      	ldr	r3, [pc, #128]	; (80037ac <MX_RTC_Init+0xac>)
 800372c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003730:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003732:	4b1e      	ldr	r3, [pc, #120]	; (80037ac <MX_RTC_Init+0xac>)
 8003734:	2200      	movs	r2, #0
 8003736:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003738:	4b1c      	ldr	r3, [pc, #112]	; (80037ac <MX_RTC_Init+0xac>)
 800373a:	2200      	movs	r2, #0
 800373c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800373e:	4b1b      	ldr	r3, [pc, #108]	; (80037ac <MX_RTC_Init+0xac>)
 8003740:	2200      	movs	r2, #0
 8003742:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003744:	4819      	ldr	r0, [pc, #100]	; (80037ac <MX_RTC_Init+0xac>)
 8003746:	f005 f87d 	bl	8008844 <HAL_RTC_Init>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8003750:	f000 faf4 	bl	8003d3c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003754:	2300      	movs	r3, #0
 8003756:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8003758:	2300      	movs	r3, #0
 800375a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800375c:	2300      	movs	r3, #0
 800375e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003760:	2300      	movs	r3, #0
 8003762:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003764:	2300      	movs	r3, #0
 8003766:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003768:	1d3b      	adds	r3, r7, #4
 800376a:	2201      	movs	r2, #1
 800376c:	4619      	mov	r1, r3
 800376e:	480f      	ldr	r0, [pc, #60]	; (80037ac <MX_RTC_Init+0xac>)
 8003770:	f005 f8f9 	bl	8008966 <HAL_RTC_SetTime>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 800377a:	f000 fadf 	bl	8003d3c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800377e:	2301      	movs	r3, #1
 8003780:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003782:	2301      	movs	r3, #1
 8003784:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8003786:	2301      	movs	r3, #1
 8003788:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800378a:	2300      	movs	r3, #0
 800378c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800378e:	463b      	mov	r3, r7
 8003790:	2201      	movs	r2, #1
 8003792:	4619      	mov	r1, r3
 8003794:	4805      	ldr	r0, [pc, #20]	; (80037ac <MX_RTC_Init+0xac>)
 8003796:	f005 fa01 	bl	8008b9c <HAL_RTC_SetDate>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 80037a0:	f000 facc 	bl	8003d3c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80037a4:	bf00      	nop
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20000e5c 	.word	0x20000e5c
 80037b0:	40002800 	.word	0x40002800

080037b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80037b8:	4b1b      	ldr	r3, [pc, #108]	; (8003828 <MX_SPI1_Init+0x74>)
 80037ba:	4a1c      	ldr	r2, [pc, #112]	; (800382c <MX_SPI1_Init+0x78>)
 80037bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80037be:	4b1a      	ldr	r3, [pc, #104]	; (8003828 <MX_SPI1_Init+0x74>)
 80037c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80037c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80037c6:	4b18      	ldr	r3, [pc, #96]	; (8003828 <MX_SPI1_Init+0x74>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80037cc:	4b16      	ldr	r3, [pc, #88]	; (8003828 <MX_SPI1_Init+0x74>)
 80037ce:	f44f 7240 	mov.w	r2, #768	; 0x300
 80037d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80037d4:	4b14      	ldr	r3, [pc, #80]	; (8003828 <MX_SPI1_Init+0x74>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80037da:	4b13      	ldr	r3, [pc, #76]	; (8003828 <MX_SPI1_Init+0x74>)
 80037dc:	2200      	movs	r2, #0
 80037de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80037e0:	4b11      	ldr	r3, [pc, #68]	; (8003828 <MX_SPI1_Init+0x74>)
 80037e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80037e8:	4b0f      	ldr	r3, [pc, #60]	; (8003828 <MX_SPI1_Init+0x74>)
 80037ea:	2208      	movs	r2, #8
 80037ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80037ee:	4b0e      	ldr	r3, [pc, #56]	; (8003828 <MX_SPI1_Init+0x74>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80037f4:	4b0c      	ldr	r3, [pc, #48]	; (8003828 <MX_SPI1_Init+0x74>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037fa:	4b0b      	ldr	r3, [pc, #44]	; (8003828 <MX_SPI1_Init+0x74>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003800:	4b09      	ldr	r3, [pc, #36]	; (8003828 <MX_SPI1_Init+0x74>)
 8003802:	2207      	movs	r2, #7
 8003804:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003806:	4b08      	ldr	r3, [pc, #32]	; (8003828 <MX_SPI1_Init+0x74>)
 8003808:	2200      	movs	r2, #0
 800380a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800380c:	4b06      	ldr	r3, [pc, #24]	; (8003828 <MX_SPI1_Init+0x74>)
 800380e:	2208      	movs	r2, #8
 8003810:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003812:	4805      	ldr	r0, [pc, #20]	; (8003828 <MX_SPI1_Init+0x74>)
 8003814:	f005 fb48 	bl	8008ea8 <HAL_SPI_Init>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800381e:	f000 fa8d 	bl	8003d3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003822:	bf00      	nop
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	200011f4 	.word	0x200011f4
 800382c:	40013000 	.word	0x40013000

08003830 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b088      	sub	sp, #32
 8003834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003836:	f107 0310 	add.w	r3, r7, #16
 800383a:	2200      	movs	r2, #0
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	605a      	str	r2, [r3, #4]
 8003840:	609a      	str	r2, [r3, #8]
 8003842:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003844:	1d3b      	adds	r3, r7, #4
 8003846:	2200      	movs	r2, #0
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	605a      	str	r2, [r3, #4]
 800384c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800384e:	4b1e      	ldr	r3, [pc, #120]	; (80038c8 <MX_TIM2_Init+0x98>)
 8003850:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003854:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2399;
 8003856:	4b1c      	ldr	r3, [pc, #112]	; (80038c8 <MX_TIM2_Init+0x98>)
 8003858:	f640 125f 	movw	r2, #2399	; 0x95f
 800385c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800385e:	4b1a      	ldr	r3, [pc, #104]	; (80038c8 <MX_TIM2_Init+0x98>)
 8003860:	2200      	movs	r2, #0
 8003862:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 8003864:	4b18      	ldr	r3, [pc, #96]	; (80038c8 <MX_TIM2_Init+0x98>)
 8003866:	4a19      	ldr	r2, [pc, #100]	; (80038cc <MX_TIM2_Init+0x9c>)
 8003868:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800386a:	4b17      	ldr	r3, [pc, #92]	; (80038c8 <MX_TIM2_Init+0x98>)
 800386c:	2200      	movs	r2, #0
 800386e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003870:	4b15      	ldr	r3, [pc, #84]	; (80038c8 <MX_TIM2_Init+0x98>)
 8003872:	2200      	movs	r2, #0
 8003874:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003876:	4814      	ldr	r0, [pc, #80]	; (80038c8 <MX_TIM2_Init+0x98>)
 8003878:	f005 fbc1 	bl	8008ffe <HAL_TIM_Base_Init>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003882:	f000 fa5b 	bl	8003d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003886:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800388a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800388c:	f107 0310 	add.w	r3, r7, #16
 8003890:	4619      	mov	r1, r3
 8003892:	480d      	ldr	r0, [pc, #52]	; (80038c8 <MX_TIM2_Init+0x98>)
 8003894:	f006 f80a 	bl	80098ac <HAL_TIM_ConfigClockSource>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800389e:	f000 fa4d 	bl	8003d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038a2:	2300      	movs	r3, #0
 80038a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038a6:	2300      	movs	r3, #0
 80038a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80038aa:	1d3b      	adds	r3, r7, #4
 80038ac:	4619      	mov	r1, r3
 80038ae:	4806      	ldr	r0, [pc, #24]	; (80038c8 <MX_TIM2_Init+0x98>)
 80038b0:	f006 fd1e 	bl	800a2f0 <HAL_TIMEx_MasterConfigSynchronization>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80038ba:	f000 fa3f 	bl	8003d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80038be:	bf00      	nop
 80038c0:	3720      	adds	r7, #32
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	20001258 	.word	0x20001258
 80038cc:	0001869f 	.word	0x0001869f

080038d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b088      	sub	sp, #32
 80038d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038d6:	f107 0310 	add.w	r3, r7, #16
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	605a      	str	r2, [r3, #4]
 80038e0:	609a      	str	r2, [r3, #8]
 80038e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038e4:	1d3b      	adds	r3, r7, #4
 80038e6:	2200      	movs	r2, #0
 80038e8:	601a      	str	r2, [r3, #0]
 80038ea:	605a      	str	r2, [r3, #4]
 80038ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80038ee:	4b1e      	ldr	r3, [pc, #120]	; (8003968 <MX_TIM3_Init+0x98>)
 80038f0:	4a1e      	ldr	r2, [pc, #120]	; (800396c <MX_TIM3_Init+0x9c>)
 80038f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 14399;
 80038f4:	4b1c      	ldr	r3, [pc, #112]	; (8003968 <MX_TIM3_Init+0x98>)
 80038f6:	f643 023f 	movw	r2, #14399	; 0x383f
 80038fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038fc:	4b1a      	ldr	r3, [pc, #104]	; (8003968 <MX_TIM3_Init+0x98>)
 80038fe:	2200      	movs	r2, #0
 8003900:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8003902:	4b19      	ldr	r3, [pc, #100]	; (8003968 <MX_TIM3_Init+0x98>)
 8003904:	f242 720f 	movw	r2, #9999	; 0x270f
 8003908:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800390a:	4b17      	ldr	r3, [pc, #92]	; (8003968 <MX_TIM3_Init+0x98>)
 800390c:	2200      	movs	r2, #0
 800390e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003910:	4b15      	ldr	r3, [pc, #84]	; (8003968 <MX_TIM3_Init+0x98>)
 8003912:	2200      	movs	r2, #0
 8003914:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003916:	4814      	ldr	r0, [pc, #80]	; (8003968 <MX_TIM3_Init+0x98>)
 8003918:	f005 fb71 	bl	8008ffe <HAL_TIM_Base_Init>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8003922:	f000 fa0b 	bl	8003d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003926:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800392a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800392c:	f107 0310 	add.w	r3, r7, #16
 8003930:	4619      	mov	r1, r3
 8003932:	480d      	ldr	r0, [pc, #52]	; (8003968 <MX_TIM3_Init+0x98>)
 8003934:	f005 ffba 	bl	80098ac <HAL_TIM_ConfigClockSource>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800393e:	f000 f9fd 	bl	8003d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003942:	2300      	movs	r3, #0
 8003944:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003946:	2300      	movs	r3, #0
 8003948:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800394a:	1d3b      	adds	r3, r7, #4
 800394c:	4619      	mov	r1, r3
 800394e:	4806      	ldr	r0, [pc, #24]	; (8003968 <MX_TIM3_Init+0x98>)
 8003950:	f006 fcce 	bl	800a2f0 <HAL_TIMEx_MasterConfigSynchronization>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800395a:	f000 f9ef 	bl	8003d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800395e:	bf00      	nop
 8003960:	3720      	adds	r7, #32
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	20000db4 	.word	0x20000db4
 800396c:	40000400 	.word	0x40000400

08003970 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b08e      	sub	sp, #56	; 0x38
 8003974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003976:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800397a:	2200      	movs	r2, #0
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	605a      	str	r2, [r3, #4]
 8003980:	609a      	str	r2, [r3, #8]
 8003982:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003984:	f107 031c 	add.w	r3, r7, #28
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	605a      	str	r2, [r3, #4]
 800398e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003990:	463b      	mov	r3, r7
 8003992:	2200      	movs	r2, #0
 8003994:	601a      	str	r2, [r3, #0]
 8003996:	605a      	str	r2, [r3, #4]
 8003998:	609a      	str	r2, [r3, #8]
 800399a:	60da      	str	r2, [r3, #12]
 800399c:	611a      	str	r2, [r3, #16]
 800399e:	615a      	str	r2, [r3, #20]
 80039a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80039a2:	4b2d      	ldr	r3, [pc, #180]	; (8003a58 <MX_TIM4_Init+0xe8>)
 80039a4:	4a2d      	ldr	r2, [pc, #180]	; (8003a5c <MX_TIM4_Init+0xec>)
 80039a6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80039a8:	4b2b      	ldr	r3, [pc, #172]	; (8003a58 <MX_TIM4_Init+0xe8>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039ae:	4b2a      	ldr	r3, [pc, #168]	; (8003a58 <MX_TIM4_Init+0xe8>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80039b4:	4b28      	ldr	r3, [pc, #160]	; (8003a58 <MX_TIM4_Init+0xe8>)
 80039b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039ba:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039bc:	4b26      	ldr	r3, [pc, #152]	; (8003a58 <MX_TIM4_Init+0xe8>)
 80039be:	2200      	movs	r2, #0
 80039c0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039c2:	4b25      	ldr	r3, [pc, #148]	; (8003a58 <MX_TIM4_Init+0xe8>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80039c8:	4823      	ldr	r0, [pc, #140]	; (8003a58 <MX_TIM4_Init+0xe8>)
 80039ca:	f005 fb18 	bl	8008ffe <HAL_TIM_Base_Init>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80039d4:	f000 f9b2 	bl	8003d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039dc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80039de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039e2:	4619      	mov	r1, r3
 80039e4:	481c      	ldr	r0, [pc, #112]	; (8003a58 <MX_TIM4_Init+0xe8>)
 80039e6:	f005 ff61 	bl	80098ac <HAL_TIM_ConfigClockSource>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80039f0:	f000 f9a4 	bl	8003d3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80039f4:	4818      	ldr	r0, [pc, #96]	; (8003a58 <MX_TIM4_Init+0xe8>)
 80039f6:	f005 fbc3 	bl	8009180 <HAL_TIM_PWM_Init>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8003a00:	f000 f99c 	bl	8003d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a04:	2300      	movs	r3, #0
 8003a06:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003a0c:	f107 031c 	add.w	r3, r7, #28
 8003a10:	4619      	mov	r1, r3
 8003a12:	4811      	ldr	r0, [pc, #68]	; (8003a58 <MX_TIM4_Init+0xe8>)
 8003a14:	f006 fc6c 	bl	800a2f0 <HAL_TIMEx_MasterConfigSynchronization>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8003a1e:	f000 f98d 	bl	8003d3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a22:	2360      	movs	r3, #96	; 0x60
 8003a24:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003a26:	2300      	movs	r3, #0
 8003a28:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003a32:	463b      	mov	r3, r7
 8003a34:	220c      	movs	r2, #12
 8003a36:	4619      	mov	r1, r3
 8003a38:	4807      	ldr	r0, [pc, #28]	; (8003a58 <MX_TIM4_Init+0xe8>)
 8003a3a:	f005 fe23 	bl	8009684 <HAL_TIM_PWM_ConfigChannel>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8003a44:	f000 f97a 	bl	8003d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003a48:	4803      	ldr	r0, [pc, #12]	; (8003a58 <MX_TIM4_Init+0xe8>)
 8003a4a:	f000 fb09 	bl	8004060 <HAL_TIM_MspPostInit>

}
 8003a4e:	bf00      	nop
 8003a50:	3738      	adds	r7, #56	; 0x38
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	200006dc 	.word	0x200006dc
 8003a5c:	40000800 	.word	0x40000800

08003a60 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a66:	1d3b      	adds	r3, r7, #4
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	605a      	str	r2, [r3, #4]
 8003a6e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003a70:	4b15      	ldr	r3, [pc, #84]	; (8003ac8 <MX_TIM6_Init+0x68>)
 8003a72:	4a16      	ldr	r2, [pc, #88]	; (8003acc <MX_TIM6_Init+0x6c>)
 8003a74:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4799;
 8003a76:	4b14      	ldr	r3, [pc, #80]	; (8003ac8 <MX_TIM6_Init+0x68>)
 8003a78:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8003a7c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a7e:	4b12      	ldr	r3, [pc, #72]	; (8003ac8 <MX_TIM6_Init+0x68>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8003a84:	4b10      	ldr	r3, [pc, #64]	; (8003ac8 <MX_TIM6_Init+0x68>)
 8003a86:	f242 720f 	movw	r2, #9999	; 0x270f
 8003a8a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a8c:	4b0e      	ldr	r3, [pc, #56]	; (8003ac8 <MX_TIM6_Init+0x68>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003a92:	480d      	ldr	r0, [pc, #52]	; (8003ac8 <MX_TIM6_Init+0x68>)
 8003a94:	f005 fab3 	bl	8008ffe <HAL_TIM_Base_Init>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8003a9e:	f000 f94d 	bl	8003d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003aaa:	1d3b      	adds	r3, r7, #4
 8003aac:	4619      	mov	r1, r3
 8003aae:	4806      	ldr	r0, [pc, #24]	; (8003ac8 <MX_TIM6_Init+0x68>)
 8003ab0:	f006 fc1e 	bl	800a2f0 <HAL_TIMEx_MasterConfigSynchronization>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8003aba:	f000 f93f 	bl	8003d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003abe:	bf00      	nop
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20000e84 	.word	0x20000e84
 8003acc:	40001000 	.word	0x40001000

08003ad0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003ad4:	4b14      	ldr	r3, [pc, #80]	; (8003b28 <MX_USART2_UART_Init+0x58>)
 8003ad6:	4a15      	ldr	r2, [pc, #84]	; (8003b2c <MX_USART2_UART_Init+0x5c>)
 8003ad8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003ada:	4b13      	ldr	r3, [pc, #76]	; (8003b28 <MX_USART2_UART_Init+0x58>)
 8003adc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003ae0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003ae2:	4b11      	ldr	r3, [pc, #68]	; (8003b28 <MX_USART2_UART_Init+0x58>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003ae8:	4b0f      	ldr	r3, [pc, #60]	; (8003b28 <MX_USART2_UART_Init+0x58>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003aee:	4b0e      	ldr	r3, [pc, #56]	; (8003b28 <MX_USART2_UART_Init+0x58>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003af4:	4b0c      	ldr	r3, [pc, #48]	; (8003b28 <MX_USART2_UART_Init+0x58>)
 8003af6:	220c      	movs	r2, #12
 8003af8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003afa:	4b0b      	ldr	r3, [pc, #44]	; (8003b28 <MX_USART2_UART_Init+0x58>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b00:	4b09      	ldr	r3, [pc, #36]	; (8003b28 <MX_USART2_UART_Init+0x58>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b06:	4b08      	ldr	r3, [pc, #32]	; (8003b28 <MX_USART2_UART_Init+0x58>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b0c:	4b06      	ldr	r3, [pc, #24]	; (8003b28 <MX_USART2_UART_Init+0x58>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b12:	4805      	ldr	r0, [pc, #20]	; (8003b28 <MX_USART2_UART_Init+0x58>)
 8003b14:	f006 fc8a 	bl	800a42c <HAL_UART_Init>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003b1e:	f000 f90d 	bl	8003d3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003b22:	bf00      	nop
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	200012ac 	.word	0x200012ac
 8003b2c:	40004400 	.word	0x40004400

08003b30 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8003b34:	4b0d      	ldr	r3, [pc, #52]	; (8003b6c <MX_USB_PCD_Init+0x3c>)
 8003b36:	4a0e      	ldr	r2, [pc, #56]	; (8003b70 <MX_USB_PCD_Init+0x40>)
 8003b38:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003b3a:	4b0c      	ldr	r3, [pc, #48]	; (8003b6c <MX_USB_PCD_Init+0x3c>)
 8003b3c:	2208      	movs	r2, #8
 8003b3e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003b40:	4b0a      	ldr	r3, [pc, #40]	; (8003b6c <MX_USB_PCD_Init+0x3c>)
 8003b42:	2202      	movs	r2, #2
 8003b44:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003b46:	4b09      	ldr	r3, [pc, #36]	; (8003b6c <MX_USB_PCD_Init+0x3c>)
 8003b48:	2202      	movs	r2, #2
 8003b4a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003b4c:	4b07      	ldr	r3, [pc, #28]	; (8003b6c <MX_USB_PCD_Init+0x3c>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003b52:	4b06      	ldr	r3, [pc, #24]	; (8003b6c <MX_USB_PCD_Init+0x3c>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003b58:	4804      	ldr	r0, [pc, #16]	; (8003b6c <MX_USB_PCD_Init+0x3c>)
 8003b5a:	f003 faa6 	bl	80070aa <HAL_PCD_Init>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8003b64:	f000 f8ea 	bl	8003d3c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8003b68:	bf00      	nop
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	20001650 	.word	0x20001650
 8003b70:	40005c00 	.word	0x40005c00

08003b74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b08c      	sub	sp, #48	; 0x30
 8003b78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b7a:	f107 031c 	add.w	r3, r7, #28
 8003b7e:	2200      	movs	r2, #0
 8003b80:	601a      	str	r2, [r3, #0]
 8003b82:	605a      	str	r2, [r3, #4]
 8003b84:	609a      	str	r2, [r3, #8]
 8003b86:	60da      	str	r2, [r3, #12]
 8003b88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b8a:	4b68      	ldr	r3, [pc, #416]	; (8003d2c <MX_GPIO_Init+0x1b8>)
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	4a67      	ldr	r2, [pc, #412]	; (8003d2c <MX_GPIO_Init+0x1b8>)
 8003b90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b94:	6153      	str	r3, [r2, #20]
 8003b96:	4b65      	ldr	r3, [pc, #404]	; (8003d2c <MX_GPIO_Init+0x1b8>)
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b9e:	61bb      	str	r3, [r7, #24]
 8003ba0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ba2:	4b62      	ldr	r3, [pc, #392]	; (8003d2c <MX_GPIO_Init+0x1b8>)
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	4a61      	ldr	r2, [pc, #388]	; (8003d2c <MX_GPIO_Init+0x1b8>)
 8003ba8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003bac:	6153      	str	r3, [r2, #20]
 8003bae:	4b5f      	ldr	r3, [pc, #380]	; (8003d2c <MX_GPIO_Init+0x1b8>)
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bb6:	617b      	str	r3, [r7, #20]
 8003bb8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003bba:	4b5c      	ldr	r3, [pc, #368]	; (8003d2c <MX_GPIO_Init+0x1b8>)
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	4a5b      	ldr	r2, [pc, #364]	; (8003d2c <MX_GPIO_Init+0x1b8>)
 8003bc0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003bc4:	6153      	str	r3, [r2, #20]
 8003bc6:	4b59      	ldr	r3, [pc, #356]	; (8003d2c <MX_GPIO_Init+0x1b8>)
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bce:	613b      	str	r3, [r7, #16]
 8003bd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bd2:	4b56      	ldr	r3, [pc, #344]	; (8003d2c <MX_GPIO_Init+0x1b8>)
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	4a55      	ldr	r2, [pc, #340]	; (8003d2c <MX_GPIO_Init+0x1b8>)
 8003bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bdc:	6153      	str	r3, [r2, #20]
 8003bde:	4b53      	ldr	r3, [pc, #332]	; (8003d2c <MX_GPIO_Init+0x1b8>)
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be6:	60fb      	str	r3, [r7, #12]
 8003be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bea:	4b50      	ldr	r3, [pc, #320]	; (8003d2c <MX_GPIO_Init+0x1b8>)
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	4a4f      	ldr	r2, [pc, #316]	; (8003d2c <MX_GPIO_Init+0x1b8>)
 8003bf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bf4:	6153      	str	r3, [r2, #20]
 8003bf6:	4b4d      	ldr	r3, [pc, #308]	; (8003d2c <MX_GPIO_Init+0x1b8>)
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bfe:	60bb      	str	r3, [r7, #8]
 8003c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c02:	4b4a      	ldr	r3, [pc, #296]	; (8003d2c <MX_GPIO_Init+0x1b8>)
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	4a49      	ldr	r2, [pc, #292]	; (8003d2c <MX_GPIO_Init+0x1b8>)
 8003c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c0c:	6153      	str	r3, [r2, #20]
 8003c0e:	4b47      	ldr	r3, [pc, #284]	; (8003d2c <MX_GPIO_Init+0x1b8>)
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c16:	607b      	str	r3, [r7, #4]
 8003c18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f64f 7108 	movw	r1, #65288	; 0xff08
 8003c20:	4843      	ldr	r0, [pc, #268]	; (8003d30 <MX_GPIO_Init+0x1bc>)
 8003c22:	f003 f8e1 	bl	8006de8 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8003c26:	2200      	movs	r2, #0
 8003c28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c2c:	4841      	ldr	r0, [pc, #260]	; (8003d34 <MX_GPIO_Init+0x1c0>)
 8003c2e:	f003 f8db 	bl	8006de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8003c32:	2200      	movs	r2, #0
 8003c34:	21f0      	movs	r1, #240	; 0xf0
 8003c36:	4840      	ldr	r0, [pc, #256]	; (8003d38 <MX_GPIO_Init+0x1c4>)
 8003c38:	f003 f8d6 	bl	8006de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8003c3c:	f64f 7308 	movw	r3, #65288	; 0xff08
 8003c40:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c42:	2301      	movs	r3, #1
 8003c44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c46:	2300      	movs	r3, #0
 8003c48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c4e:	f107 031c 	add.w	r3, r7, #28
 8003c52:	4619      	mov	r1, r3
 8003c54:	4836      	ldr	r0, [pc, #216]	; (8003d30 <MX_GPIO_Init+0x1bc>)
 8003c56:	f002 ff35 	bl	8006ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT3_Pin MEMS_INT4_Pin */
  GPIO_InitStruct.Pin = MEMS_INT3_Pin|MEMS_INT4_Pin;
 8003c5a:	2330      	movs	r3, #48	; 0x30
 8003c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003c5e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8003c62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c64:	2300      	movs	r3, #0
 8003c66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c68:	f107 031c 	add.w	r3, r7, #28
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	4830      	ldr	r0, [pc, #192]	; (8003d30 <MX_GPIO_Init+0x1bc>)
 8003c70:	f002 ff28 	bl	8006ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003c74:	2301      	movs	r3, #1
 8003c76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003c80:	f107 031c 	add.w	r3, r7, #28
 8003c84:	4619      	mov	r1, r3
 8003c86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c8a:	f002 ff1b 	bl	8006ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003c8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c94:	2301      	movs	r3, #1
 8003c96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ca0:	f107 031c 	add.w	r3, r7, #28
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	4823      	ldr	r0, [pc, #140]	; (8003d34 <MX_GPIO_Init+0x1c0>)
 8003ca8:	f002 ff0c 	bl	8006ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003cac:	230f      	movs	r3, #15
 8003cae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003cb0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003cb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003cba:	f107 031c 	add.w	r3, r7, #28
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	481d      	ldr	r0, [pc, #116]	; (8003d38 <MX_GPIO_Init+0x1c4>)
 8003cc2:	f002 feff 	bl	8006ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003cc6:	23f0      	movs	r3, #240	; 0xf0
 8003cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003cd6:	f107 031c 	add.w	r3, r7, #28
 8003cda:	4619      	mov	r1, r3
 8003cdc:	4816      	ldr	r0, [pc, #88]	; (8003d38 <MX_GPIO_Init+0x1c4>)
 8003cde:	f002 fef1 	bl	8006ac4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	2006      	movs	r0, #6
 8003ce8:	f002 fe3f 	bl	800696a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003cec:	2006      	movs	r0, #6
 8003cee:	f002 fe58 	bl	80069a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	2007      	movs	r0, #7
 8003cf8:	f002 fe37 	bl	800696a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003cfc:	2007      	movs	r0, #7
 8003cfe:	f002 fe50 	bl	80069a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 8003d02:	2200      	movs	r2, #0
 8003d04:	2100      	movs	r1, #0
 8003d06:	2008      	movs	r0, #8
 8003d08:	f002 fe2f 	bl	800696a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8003d0c:	2008      	movs	r0, #8
 8003d0e:	f002 fe48 	bl	80069a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8003d12:	2200      	movs	r2, #0
 8003d14:	2100      	movs	r1, #0
 8003d16:	2009      	movs	r0, #9
 8003d18:	f002 fe27 	bl	800696a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003d1c:	2009      	movs	r0, #9
 8003d1e:	f002 fe40 	bl	80069a2 <HAL_NVIC_EnableIRQ>

}
 8003d22:	bf00      	nop
 8003d24:	3730      	adds	r7, #48	; 0x30
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	48001000 	.word	0x48001000
 8003d34:	48000800 	.word	0x48000800
 8003d38:	48000c00 	.word	0x48000c00

08003d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003d40:	b672      	cpsid	i
}
 8003d42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d44:	e7fe      	b.n	8003d44 <Error_Handler+0x8>
	...

08003d48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d4e:	4b0f      	ldr	r3, [pc, #60]	; (8003d8c <HAL_MspInit+0x44>)
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	4a0e      	ldr	r2, [pc, #56]	; (8003d8c <HAL_MspInit+0x44>)
 8003d54:	f043 0301 	orr.w	r3, r3, #1
 8003d58:	6193      	str	r3, [r2, #24]
 8003d5a:	4b0c      	ldr	r3, [pc, #48]	; (8003d8c <HAL_MspInit+0x44>)
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	607b      	str	r3, [r7, #4]
 8003d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d66:	4b09      	ldr	r3, [pc, #36]	; (8003d8c <HAL_MspInit+0x44>)
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	4a08      	ldr	r2, [pc, #32]	; (8003d8c <HAL_MspInit+0x44>)
 8003d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d70:	61d3      	str	r3, [r2, #28]
 8003d72:	4b06      	ldr	r3, [pc, #24]	; (8003d8c <HAL_MspInit+0x44>)
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d7a:	603b      	str	r3, [r7, #0]
 8003d7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8003d7e:	2006      	movs	r0, #6
 8003d80:	f002 fde8 	bl	8006954 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d84:	bf00      	nop
 8003d86:	3708      	adds	r7, #8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	40021000 	.word	0x40021000

08003d90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b08a      	sub	sp, #40	; 0x28
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d98:	f107 0314 	add.w	r3, r7, #20
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	601a      	str	r2, [r3, #0]
 8003da0:	605a      	str	r2, [r3, #4]
 8003da2:	609a      	str	r2, [r3, #8]
 8003da4:	60da      	str	r2, [r3, #12]
 8003da6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003db0:	d12c      	bne.n	8003e0c <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003db2:	4b18      	ldr	r3, [pc, #96]	; (8003e14 <HAL_ADC_MspInit+0x84>)
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	4a17      	ldr	r2, [pc, #92]	; (8003e14 <HAL_ADC_MspInit+0x84>)
 8003db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dbc:	6153      	str	r3, [r2, #20]
 8003dbe:	4b15      	ldr	r3, [pc, #84]	; (8003e14 <HAL_ADC_MspInit+0x84>)
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc6:	613b      	str	r3, [r7, #16]
 8003dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dca:	4b12      	ldr	r3, [pc, #72]	; (8003e14 <HAL_ADC_MspInit+0x84>)
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	4a11      	ldr	r2, [pc, #68]	; (8003e14 <HAL_ADC_MspInit+0x84>)
 8003dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dd4:	6153      	str	r3, [r2, #20]
 8003dd6:	4b0f      	ldr	r3, [pc, #60]	; (8003e14 <HAL_ADC_MspInit+0x84>)
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003de2:	2302      	movs	r3, #2
 8003de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003de6:	2303      	movs	r3, #3
 8003de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dea:	2300      	movs	r3, #0
 8003dec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dee:	f107 0314 	add.w	r3, r7, #20
 8003df2:	4619      	mov	r1, r3
 8003df4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003df8:	f002 fe64 	bl	8006ac4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	2100      	movs	r1, #0
 8003e00:	2012      	movs	r0, #18
 8003e02:	f002 fdb2 	bl	800696a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003e06:	2012      	movs	r0, #18
 8003e08:	f002 fdcb 	bl	80069a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003e0c:	bf00      	nop
 8003e0e:	3728      	adds	r7, #40	; 0x28
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40021000 	.word	0x40021000

08003e18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b08a      	sub	sp, #40	; 0x28
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e20:	f107 0314 	add.w	r3, r7, #20
 8003e24:	2200      	movs	r2, #0
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	605a      	str	r2, [r3, #4]
 8003e2a:	609a      	str	r2, [r3, #8]
 8003e2c:	60da      	str	r2, [r3, #12]
 8003e2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a17      	ldr	r2, [pc, #92]	; (8003e94 <HAL_I2C_MspInit+0x7c>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d127      	bne.n	8003e8a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e3a:	4b17      	ldr	r3, [pc, #92]	; (8003e98 <HAL_I2C_MspInit+0x80>)
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	4a16      	ldr	r2, [pc, #88]	; (8003e98 <HAL_I2C_MspInit+0x80>)
 8003e40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e44:	6153      	str	r3, [r2, #20]
 8003e46:	4b14      	ldr	r3, [pc, #80]	; (8003e98 <HAL_I2C_MspInit+0x80>)
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e4e:	613b      	str	r3, [r7, #16]
 8003e50:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8003e52:	23c0      	movs	r3, #192	; 0xc0
 8003e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e56:	2312      	movs	r3, #18
 8003e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003e62:	2304      	movs	r3, #4
 8003e64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e66:	f107 0314 	add.w	r3, r7, #20
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	480b      	ldr	r0, [pc, #44]	; (8003e9c <HAL_I2C_MspInit+0x84>)
 8003e6e:	f002 fe29 	bl	8006ac4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e72:	4b09      	ldr	r3, [pc, #36]	; (8003e98 <HAL_I2C_MspInit+0x80>)
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	4a08      	ldr	r2, [pc, #32]	; (8003e98 <HAL_I2C_MspInit+0x80>)
 8003e78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e7c:	61d3      	str	r3, [r2, #28]
 8003e7e:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <HAL_I2C_MspInit+0x80>)
 8003e80:	69db      	ldr	r3, [r3, #28]
 8003e82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e86:	60fb      	str	r3, [r7, #12]
 8003e88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003e8a:	bf00      	nop
 8003e8c:	3728      	adds	r7, #40	; 0x28
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	40005400 	.word	0x40005400
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	48000400 	.word	0x48000400

08003ea0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a0d      	ldr	r2, [pc, #52]	; (8003ee4 <HAL_RTC_MspInit+0x44>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d111      	bne.n	8003ed6 <HAL_RTC_MspInit+0x36>
 8003eb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eb6:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	fa93 f3a3 	rbit	r3, r3
 8003ebe:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ec0:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003ec2:	fab3 f383 	clz	r3, r3
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	461a      	mov	r2, r3
 8003eca:	4b07      	ldr	r3, [pc, #28]	; (8003ee8 <HAL_RTC_MspInit+0x48>)
 8003ecc:	4413      	add	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003ed6:	bf00      	nop
 8003ed8:	3714      	adds	r7, #20
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	40002800 	.word	0x40002800
 8003ee8:	10908100 	.word	0x10908100

08003eec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b08a      	sub	sp, #40	; 0x28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ef4:	f107 0314 	add.w	r3, r7, #20
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	605a      	str	r2, [r3, #4]
 8003efe:	609a      	str	r2, [r3, #8]
 8003f00:	60da      	str	r2, [r3, #12]
 8003f02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a17      	ldr	r2, [pc, #92]	; (8003f68 <HAL_SPI_MspInit+0x7c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d128      	bne.n	8003f60 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003f0e:	4b17      	ldr	r3, [pc, #92]	; (8003f6c <HAL_SPI_MspInit+0x80>)
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	4a16      	ldr	r2, [pc, #88]	; (8003f6c <HAL_SPI_MspInit+0x80>)
 8003f14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f18:	6193      	str	r3, [r2, #24]
 8003f1a:	4b14      	ldr	r3, [pc, #80]	; (8003f6c <HAL_SPI_MspInit+0x80>)
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f22:	613b      	str	r3, [r7, #16]
 8003f24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f26:	4b11      	ldr	r3, [pc, #68]	; (8003f6c <HAL_SPI_MspInit+0x80>)
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	4a10      	ldr	r2, [pc, #64]	; (8003f6c <HAL_SPI_MspInit+0x80>)
 8003f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f30:	6153      	str	r3, [r2, #20]
 8003f32:	4b0e      	ldr	r3, [pc, #56]	; (8003f6c <HAL_SPI_MspInit+0x80>)
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3a:	60fb      	str	r3, [r7, #12]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8003f3e:	23e0      	movs	r3, #224	; 0xe0
 8003f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f42:	2302      	movs	r3, #2
 8003f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f46:	2300      	movs	r3, #0
 8003f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003f4e:	2305      	movs	r3, #5
 8003f50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f52:	f107 0314 	add.w	r3, r7, #20
 8003f56:	4619      	mov	r1, r3
 8003f58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f5c:	f002 fdb2 	bl	8006ac4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003f60:	bf00      	nop
 8003f62:	3728      	adds	r7, #40	; 0x28
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	40013000 	.word	0x40013000
 8003f6c:	40021000 	.word	0x40021000

08003f70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f80:	d114      	bne.n	8003fac <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f82:	4b33      	ldr	r3, [pc, #204]	; (8004050 <HAL_TIM_Base_MspInit+0xe0>)
 8003f84:	69db      	ldr	r3, [r3, #28]
 8003f86:	4a32      	ldr	r2, [pc, #200]	; (8004050 <HAL_TIM_Base_MspInit+0xe0>)
 8003f88:	f043 0301 	orr.w	r3, r3, #1
 8003f8c:	61d3      	str	r3, [r2, #28]
 8003f8e:	4b30      	ldr	r3, [pc, #192]	; (8004050 <HAL_TIM_Base_MspInit+0xe0>)
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	201c      	movs	r0, #28
 8003fa0:	f002 fce3 	bl	800696a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003fa4:	201c      	movs	r0, #28
 8003fa6:	f002 fcfc 	bl	80069a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003faa:	e04c      	b.n	8004046 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a28      	ldr	r2, [pc, #160]	; (8004054 <HAL_TIM_Base_MspInit+0xe4>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d114      	bne.n	8003fe0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003fb6:	4b26      	ldr	r3, [pc, #152]	; (8004050 <HAL_TIM_Base_MspInit+0xe0>)
 8003fb8:	69db      	ldr	r3, [r3, #28]
 8003fba:	4a25      	ldr	r2, [pc, #148]	; (8004050 <HAL_TIM_Base_MspInit+0xe0>)
 8003fbc:	f043 0302 	orr.w	r3, r3, #2
 8003fc0:	61d3      	str	r3, [r2, #28]
 8003fc2:	4b23      	ldr	r3, [pc, #140]	; (8004050 <HAL_TIM_Base_MspInit+0xe0>)
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	613b      	str	r3, [r7, #16]
 8003fcc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003fce:	2200      	movs	r2, #0
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	201d      	movs	r0, #29
 8003fd4:	f002 fcc9 	bl	800696a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003fd8:	201d      	movs	r0, #29
 8003fda:	f002 fce2 	bl	80069a2 <HAL_NVIC_EnableIRQ>
}
 8003fde:	e032      	b.n	8004046 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM4)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a1c      	ldr	r2, [pc, #112]	; (8004058 <HAL_TIM_Base_MspInit+0xe8>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d114      	bne.n	8004014 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003fea:	4b19      	ldr	r3, [pc, #100]	; (8004050 <HAL_TIM_Base_MspInit+0xe0>)
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	4a18      	ldr	r2, [pc, #96]	; (8004050 <HAL_TIM_Base_MspInit+0xe0>)
 8003ff0:	f043 0304 	orr.w	r3, r3, #4
 8003ff4:	61d3      	str	r3, [r2, #28]
 8003ff6:	4b16      	ldr	r3, [pc, #88]	; (8004050 <HAL_TIM_Base_MspInit+0xe0>)
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	f003 0304 	and.w	r3, r3, #4
 8003ffe:	60fb      	str	r3, [r7, #12]
 8004000:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004002:	2200      	movs	r2, #0
 8004004:	2100      	movs	r1, #0
 8004006:	201e      	movs	r0, #30
 8004008:	f002 fcaf 	bl	800696a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800400c:	201e      	movs	r0, #30
 800400e:	f002 fcc8 	bl	80069a2 <HAL_NVIC_EnableIRQ>
}
 8004012:	e018      	b.n	8004046 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM6)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a10      	ldr	r2, [pc, #64]	; (800405c <HAL_TIM_Base_MspInit+0xec>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d113      	bne.n	8004046 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800401e:	4b0c      	ldr	r3, [pc, #48]	; (8004050 <HAL_TIM_Base_MspInit+0xe0>)
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	4a0b      	ldr	r2, [pc, #44]	; (8004050 <HAL_TIM_Base_MspInit+0xe0>)
 8004024:	f043 0310 	orr.w	r3, r3, #16
 8004028:	61d3      	str	r3, [r2, #28]
 800402a:	4b09      	ldr	r3, [pc, #36]	; (8004050 <HAL_TIM_Base_MspInit+0xe0>)
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	f003 0310 	and.w	r3, r3, #16
 8004032:	60bb      	str	r3, [r7, #8]
 8004034:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8004036:	2200      	movs	r2, #0
 8004038:	2101      	movs	r1, #1
 800403a:	2036      	movs	r0, #54	; 0x36
 800403c:	f002 fc95 	bl	800696a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004040:	2036      	movs	r0, #54	; 0x36
 8004042:	f002 fcae 	bl	80069a2 <HAL_NVIC_EnableIRQ>
}
 8004046:	bf00      	nop
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	40021000 	.word	0x40021000
 8004054:	40000400 	.word	0x40000400
 8004058:	40000800 	.word	0x40000800
 800405c:	40001000 	.word	0x40001000

08004060 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b088      	sub	sp, #32
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004068:	f107 030c 	add.w	r3, r7, #12
 800406c:	2200      	movs	r2, #0
 800406e:	601a      	str	r2, [r3, #0]
 8004070:	605a      	str	r2, [r3, #4]
 8004072:	609a      	str	r2, [r3, #8]
 8004074:	60da      	str	r2, [r3, #12]
 8004076:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a11      	ldr	r2, [pc, #68]	; (80040c4 <HAL_TIM_MspPostInit+0x64>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d11c      	bne.n	80040bc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004082:	4b11      	ldr	r3, [pc, #68]	; (80040c8 <HAL_TIM_MspPostInit+0x68>)
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	4a10      	ldr	r2, [pc, #64]	; (80040c8 <HAL_TIM_MspPostInit+0x68>)
 8004088:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800408c:	6153      	str	r3, [r2, #20]
 800408e:	4b0e      	ldr	r3, [pc, #56]	; (80040c8 <HAL_TIM_MspPostInit+0x68>)
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004096:	60bb      	str	r3, [r7, #8]
 8004098:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800409a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800409e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040a0:	2302      	movs	r3, #2
 80040a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a4:	2300      	movs	r3, #0
 80040a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040a8:	2300      	movs	r3, #0
 80040aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80040ac:	2302      	movs	r3, #2
 80040ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040b0:	f107 030c 	add.w	r3, r7, #12
 80040b4:	4619      	mov	r1, r3
 80040b6:	4805      	ldr	r0, [pc, #20]	; (80040cc <HAL_TIM_MspPostInit+0x6c>)
 80040b8:	f002 fd04 	bl	8006ac4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80040bc:	bf00      	nop
 80040be:	3720      	adds	r7, #32
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	40000800 	.word	0x40000800
 80040c8:	40021000 	.word	0x40021000
 80040cc:	48000c00 	.word	0x48000c00

080040d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b08a      	sub	sp, #40	; 0x28
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040d8:	f107 0314 	add.w	r3, r7, #20
 80040dc:	2200      	movs	r2, #0
 80040de:	601a      	str	r2, [r3, #0]
 80040e0:	605a      	str	r2, [r3, #4]
 80040e2:	609a      	str	r2, [r3, #8]
 80040e4:	60da      	str	r2, [r3, #12]
 80040e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a1b      	ldr	r2, [pc, #108]	; (800415c <HAL_UART_MspInit+0x8c>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d130      	bne.n	8004154 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80040f2:	4b1b      	ldr	r3, [pc, #108]	; (8004160 <HAL_UART_MspInit+0x90>)
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	4a1a      	ldr	r2, [pc, #104]	; (8004160 <HAL_UART_MspInit+0x90>)
 80040f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040fc:	61d3      	str	r3, [r2, #28]
 80040fe:	4b18      	ldr	r3, [pc, #96]	; (8004160 <HAL_UART_MspInit+0x90>)
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004106:	613b      	str	r3, [r7, #16]
 8004108:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800410a:	4b15      	ldr	r3, [pc, #84]	; (8004160 <HAL_UART_MspInit+0x90>)
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	4a14      	ldr	r2, [pc, #80]	; (8004160 <HAL_UART_MspInit+0x90>)
 8004110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004114:	6153      	str	r3, [r2, #20]
 8004116:	4b12      	ldr	r3, [pc, #72]	; (8004160 <HAL_UART_MspInit+0x90>)
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411e:	60fb      	str	r3, [r7, #12]
 8004120:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004122:	230c      	movs	r3, #12
 8004124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004126:	2302      	movs	r3, #2
 8004128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800412a:	2300      	movs	r3, #0
 800412c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800412e:	2303      	movs	r3, #3
 8004130:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004132:	2307      	movs	r3, #7
 8004134:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004136:	f107 0314 	add.w	r3, r7, #20
 800413a:	4619      	mov	r1, r3
 800413c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004140:	f002 fcc0 	bl	8006ac4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004144:	2200      	movs	r2, #0
 8004146:	2100      	movs	r1, #0
 8004148:	2026      	movs	r0, #38	; 0x26
 800414a:	f002 fc0e 	bl	800696a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800414e:	2026      	movs	r0, #38	; 0x26
 8004150:	f002 fc27 	bl	80069a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004154:	bf00      	nop
 8004156:	3728      	adds	r7, #40	; 0x28
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	40004400 	.word	0x40004400
 8004160:	40021000 	.word	0x40021000

08004164 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b08a      	sub	sp, #40	; 0x28
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800416c:	f107 0314 	add.w	r3, r7, #20
 8004170:	2200      	movs	r2, #0
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	605a      	str	r2, [r3, #4]
 8004176:	609a      	str	r2, [r3, #8]
 8004178:	60da      	str	r2, [r3, #12]
 800417a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a18      	ldr	r2, [pc, #96]	; (80041e4 <HAL_PCD_MspInit+0x80>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d129      	bne.n	80041da <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004186:	4b18      	ldr	r3, [pc, #96]	; (80041e8 <HAL_PCD_MspInit+0x84>)
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	4a17      	ldr	r2, [pc, #92]	; (80041e8 <HAL_PCD_MspInit+0x84>)
 800418c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004190:	6153      	str	r3, [r2, #20]
 8004192:	4b15      	ldr	r3, [pc, #84]	; (80041e8 <HAL_PCD_MspInit+0x84>)
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419a:	613b      	str	r3, [r7, #16]
 800419c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800419e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80041a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041a4:	2302      	movs	r3, #2
 80041a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a8:	2300      	movs	r3, #0
 80041aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041ac:	2303      	movs	r3, #3
 80041ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80041b0:	230e      	movs	r3, #14
 80041b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041b4:	f107 0314 	add.w	r3, r7, #20
 80041b8:	4619      	mov	r1, r3
 80041ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041be:	f002 fc81 	bl	8006ac4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80041c2:	4b09      	ldr	r3, [pc, #36]	; (80041e8 <HAL_PCD_MspInit+0x84>)
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	4a08      	ldr	r2, [pc, #32]	; (80041e8 <HAL_PCD_MspInit+0x84>)
 80041c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80041cc:	61d3      	str	r3, [r2, #28]
 80041ce:	4b06      	ldr	r3, [pc, #24]	; (80041e8 <HAL_PCD_MspInit+0x84>)
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041d6:	60fb      	str	r3, [r7, #12]
 80041d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80041da:	bf00      	nop
 80041dc:	3728      	adds	r7, #40	; 0x28
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	40005c00 	.word	0x40005c00
 80041e8:	40021000 	.word	0x40021000

080041ec <PWM_Start>:

uint8_t name[16] ;


void PWM_Start()
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(pwm_timer, pwm_channel);
 80041f0:	4b04      	ldr	r3, [pc, #16]	; (8004204 <PWM_Start+0x18>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a04      	ldr	r2, [pc, #16]	; (8004208 <PWM_Start+0x1c>)
 80041f6:	6812      	ldr	r2, [r2, #0]
 80041f8:	4611      	mov	r1, r2
 80041fa:	4618      	mov	r0, r3
 80041fc:	f005 f822 	bl	8009244 <HAL_TIM_PWM_Start>
}
 8004200:	bf00      	nop
 8004202:	bd80      	pop	{r7, pc}
 8004204:	20000238 	.word	0x20000238
 8004208:	2000023c 	.word	0x2000023c

0800420c <PWM_Change_Tone>:
{
	HAL_TIM_PWM_Stop(pwm_timer, pwm_channel);
}

void PWM_Change_Tone(uint16_t pwm_freq, uint16_t volume) // pwm_freq (1 - 20000), volume (0 - 1000)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b088      	sub	sp, #32
 8004210:	af00      	add	r7, sp, #0
 8004212:	4603      	mov	r3, r0
 8004214:	460a      	mov	r2, r1
 8004216:	80fb      	strh	r3, [r7, #6]
 8004218:	4613      	mov	r3, r2
 800421a:	80bb      	strh	r3, [r7, #4]
    if (pwm_freq == 0 || pwm_freq > 20000)
 800421c:	88fb      	ldrh	r3, [r7, #6]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d004      	beq.n	800422c <PWM_Change_Tone+0x20>
 8004222:	88fb      	ldrh	r3, [r7, #6]
 8004224:	f644 6220 	movw	r2, #20000	; 0x4e20
 8004228:	4293      	cmp	r3, r2
 800422a:	d937      	bls.n	800429c <PWM_Change_Tone+0x90>
    {
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, 0);
 800422c:	4b52      	ldr	r3, [pc, #328]	; (8004378 <PWM_Change_Tone+0x16c>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d105      	bne.n	8004240 <PWM_Change_Tone+0x34>
 8004234:	4b51      	ldr	r3, [pc, #324]	; (800437c <PWM_Change_Tone+0x170>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2200      	movs	r2, #0
 800423c:	635a      	str	r2, [r3, #52]	; 0x34
 800423e:	e097      	b.n	8004370 <PWM_Change_Tone+0x164>
 8004240:	4b4d      	ldr	r3, [pc, #308]	; (8004378 <PWM_Change_Tone+0x16c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2b04      	cmp	r3, #4
 8004246:	d105      	bne.n	8004254 <PWM_Change_Tone+0x48>
 8004248:	4b4c      	ldr	r3, [pc, #304]	; (800437c <PWM_Change_Tone+0x170>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	2300      	movs	r3, #0
 8004250:	6393      	str	r3, [r2, #56]	; 0x38
 8004252:	e08d      	b.n	8004370 <PWM_Change_Tone+0x164>
 8004254:	4b48      	ldr	r3, [pc, #288]	; (8004378 <PWM_Change_Tone+0x16c>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b08      	cmp	r3, #8
 800425a:	d105      	bne.n	8004268 <PWM_Change_Tone+0x5c>
 800425c:	4b47      	ldr	r3, [pc, #284]	; (800437c <PWM_Change_Tone+0x170>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	2300      	movs	r3, #0
 8004264:	63d3      	str	r3, [r2, #60]	; 0x3c
 8004266:	e083      	b.n	8004370 <PWM_Change_Tone+0x164>
 8004268:	4b43      	ldr	r3, [pc, #268]	; (8004378 <PWM_Change_Tone+0x16c>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2b0c      	cmp	r3, #12
 800426e:	d105      	bne.n	800427c <PWM_Change_Tone+0x70>
 8004270:	4b42      	ldr	r3, [pc, #264]	; (800437c <PWM_Change_Tone+0x170>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	2300      	movs	r3, #0
 8004278:	6413      	str	r3, [r2, #64]	; 0x40
 800427a:	e079      	b.n	8004370 <PWM_Change_Tone+0x164>
 800427c:	4b3e      	ldr	r3, [pc, #248]	; (8004378 <PWM_Change_Tone+0x16c>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2b10      	cmp	r3, #16
 8004282:	d105      	bne.n	8004290 <PWM_Change_Tone+0x84>
 8004284:	4b3d      	ldr	r3, [pc, #244]	; (800437c <PWM_Change_Tone+0x170>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	2300      	movs	r3, #0
 800428c:	6593      	str	r3, [r2, #88]	; 0x58
 800428e:	e06f      	b.n	8004370 <PWM_Change_Tone+0x164>
 8004290:	4b3a      	ldr	r3, [pc, #232]	; (800437c <PWM_Change_Tone+0x170>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	2300      	movs	r3, #0
 8004298:	65d3      	str	r3, [r2, #92]	; 0x5c
 800429a:	e069      	b.n	8004370 <PWM_Change_Tone+0x164>
    }
    else
    {
        const uint32_t internal_clock_freq = HAL_RCC_GetSysClockFreq();
 800429c:	f004 f868 	bl	8008370 <HAL_RCC_GetSysClockFreq>
 80042a0:	61f8      	str	r0, [r7, #28]
        const uint16_t prescaler = 1 + internal_clock_freq / pwm_freq / 60000;
 80042a2:	88fb      	ldrh	r3, [r7, #6]
 80042a4:	69fa      	ldr	r2, [r7, #28]
 80042a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042aa:	4a35      	ldr	r2, [pc, #212]	; (8004380 <PWM_Change_Tone+0x174>)
 80042ac:	fba2 2303 	umull	r2, r3, r2, r3
 80042b0:	0b9b      	lsrs	r3, r3, #14
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	3301      	adds	r3, #1
 80042b6:	837b      	strh	r3, [r7, #26]
        const uint32_t timer_clock = internal_clock_freq / prescaler;
 80042b8:	8b7b      	ldrh	r3, [r7, #26]
 80042ba:	69fa      	ldr	r2, [r7, #28]
 80042bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c0:	617b      	str	r3, [r7, #20]
        const uint32_t period_cycles = timer_clock / pwm_freq;
 80042c2:	88fb      	ldrh	r3, [r7, #6]
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ca:	613b      	str	r3, [r7, #16]
        const uint32_t pulse_width = volume * period_cycles / 1000 / 2;
 80042cc:	88bb      	ldrh	r3, [r7, #4]
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	fb02 f303 	mul.w	r3, r2, r3
 80042d4:	4a2b      	ldr	r2, [pc, #172]	; (8004384 <PWM_Change_Tone+0x178>)
 80042d6:	fba2 2303 	umull	r2, r3, r2, r3
 80042da:	09db      	lsrs	r3, r3, #7
 80042dc:	60fb      	str	r3, [r7, #12]

        pwm_timer->Instance->PSC = prescaler - 1;
 80042de:	8b7b      	ldrh	r3, [r7, #26]
 80042e0:	1e5a      	subs	r2, r3, #1
 80042e2:	4b26      	ldr	r3, [pc, #152]	; (800437c <PWM_Change_Tone+0x170>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	629a      	str	r2, [r3, #40]	; 0x28
        pwm_timer->Instance->ARR = period_cycles - 1;
 80042ea:	4b24      	ldr	r3, [pc, #144]	; (800437c <PWM_Change_Tone+0x170>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	3a01      	subs	r2, #1
 80042f4:	62da      	str	r2, [r3, #44]	; 0x2c
        pwm_timer->Instance->EGR = TIM_EGR_UG;
 80042f6:	4b21      	ldr	r3, [pc, #132]	; (800437c <PWM_Change_Tone+0x170>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2201      	movs	r2, #1
 80042fe:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8004300:	4b1d      	ldr	r3, [pc, #116]	; (8004378 <PWM_Change_Tone+0x16c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d105      	bne.n	8004314 <PWM_Change_Tone+0x108>
 8004308:	4b1c      	ldr	r3, [pc, #112]	; (800437c <PWM_Change_Tone+0x170>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	635a      	str	r2, [r3, #52]	; 0x34
    }
}
 8004312:	e02d      	b.n	8004370 <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8004314:	4b18      	ldr	r3, [pc, #96]	; (8004378 <PWM_Change_Tone+0x16c>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2b04      	cmp	r3, #4
 800431a:	d105      	bne.n	8004328 <PWM_Change_Tone+0x11c>
 800431c:	4b17      	ldr	r3, [pc, #92]	; (800437c <PWM_Change_Tone+0x170>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004326:	e023      	b.n	8004370 <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8004328:	4b13      	ldr	r3, [pc, #76]	; (8004378 <PWM_Change_Tone+0x16c>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b08      	cmp	r3, #8
 800432e:	d105      	bne.n	800433c <PWM_Change_Tone+0x130>
 8004330:	4b12      	ldr	r3, [pc, #72]	; (800437c <PWM_Change_Tone+0x170>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800433a:	e019      	b.n	8004370 <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 800433c:	4b0e      	ldr	r3, [pc, #56]	; (8004378 <PWM_Change_Tone+0x16c>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2b0c      	cmp	r3, #12
 8004342:	d105      	bne.n	8004350 <PWM_Change_Tone+0x144>
 8004344:	4b0d      	ldr	r3, [pc, #52]	; (800437c <PWM_Change_Tone+0x170>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800434e:	e00f      	b.n	8004370 <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8004350:	4b09      	ldr	r3, [pc, #36]	; (8004378 <PWM_Change_Tone+0x16c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2b10      	cmp	r3, #16
 8004356:	d105      	bne.n	8004364 <PWM_Change_Tone+0x158>
 8004358:	4b08      	ldr	r3, [pc, #32]	; (800437c <PWM_Change_Tone+0x170>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6593      	str	r3, [r2, #88]	; 0x58
}
 8004362:	e005      	b.n	8004370 <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8004364:	4b05      	ldr	r3, [pc, #20]	; (800437c <PWM_Change_Tone+0x170>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 800436e:	e7ff      	b.n	8004370 <PWM_Change_Tone+0x164>
 8004370:	bf00      	nop
 8004372:	3720      	adds	r7, #32
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	2000023c 	.word	0x2000023c
 800437c:	20000238 	.word	0x20000238
 8004380:	45e7b273 	.word	0x45e7b273
 8004384:	10624dd3 	.word	0x10624dd3

08004388 <Change_Melody>:

void Change_Melody(const Tone *melody, uint16_t tone_count)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	460b      	mov	r3, r1
 8004392:	807b      	strh	r3, [r7, #2]
    melody_ptr = melody;
 8004394:	4a07      	ldr	r2, [pc, #28]	; (80043b4 <Change_Melody+0x2c>)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6013      	str	r3, [r2, #0]
    melody_tone_count = tone_count;
 800439a:	4a07      	ldr	r2, [pc, #28]	; (80043b8 <Change_Melody+0x30>)
 800439c:	887b      	ldrh	r3, [r7, #2]
 800439e:	8013      	strh	r3, [r2, #0]
    current_tone_number = 0;
 80043a0:	4b06      	ldr	r3, [pc, #24]	; (80043bc <Change_Melody+0x34>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	801a      	strh	r2, [r3, #0]
}
 80043a6:	bf00      	nop
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	20001c78 	.word	0x20001c78
 80043b8:	20001c7c 	.word	0x20001c7c
 80043bc:	20001c74 	.word	0x20001c74

080043c0 <Update_Melody>:

void Update_Melody()
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
    if( pause == 0 )
 80043c6:	4b1b      	ldr	r3, [pc, #108]	; (8004434 <Update_Melody+0x74>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d12e      	bne.n	800442c <Update_Melody+0x6c>
    {
    	if ((HAL_GetTick() > current_tone_end) && (current_tone_number < melody_tone_count))
 80043ce:	f000 fe99 	bl	8005104 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	4b18      	ldr	r3, [pc, #96]	; (8004438 <Update_Melody+0x78>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d927      	bls.n	800442c <Update_Melody+0x6c>
 80043dc:	4b17      	ldr	r3, [pc, #92]	; (800443c <Update_Melody+0x7c>)
 80043de:	881b      	ldrh	r3, [r3, #0]
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	4b17      	ldr	r3, [pc, #92]	; (8004440 <Update_Melody+0x80>)
 80043e4:	881b      	ldrh	r3, [r3, #0]
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d21f      	bcs.n	800442c <Update_Melody+0x6c>
    	    {
    	        const Tone active_tone = *(melody_ptr + current_tone_number);
 80043ec:	4b15      	ldr	r3, [pc, #84]	; (8004444 <Update_Melody+0x84>)
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	4b12      	ldr	r3, [pc, #72]	; (800443c <Update_Melody+0x7c>)
 80043f2:	881b      	ldrh	r3, [r3, #0]
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	441a      	add	r2, r3
 80043fa:	1d3b      	adds	r3, r7, #4
 80043fc:	6810      	ldr	r0, [r2, #0]
 80043fe:	6018      	str	r0, [r3, #0]
    	        PWM_Change_Tone(active_tone.frequency, volume);
 8004400:	88bb      	ldrh	r3, [r7, #4]
 8004402:	4a11      	ldr	r2, [pc, #68]	; (8004448 <Update_Melody+0x88>)
 8004404:	8812      	ldrh	r2, [r2, #0]
 8004406:	b292      	uxth	r2, r2
 8004408:	4611      	mov	r1, r2
 800440a:	4618      	mov	r0, r3
 800440c:	f7ff fefe 	bl	800420c <PWM_Change_Tone>
    	        current_tone_end = HAL_GetTick() + active_tone.duration;
 8004410:	f000 fe78 	bl	8005104 <HAL_GetTick>
 8004414:	4603      	mov	r3, r0
 8004416:	88fa      	ldrh	r2, [r7, #6]
 8004418:	4413      	add	r3, r2
 800441a:	4a07      	ldr	r2, [pc, #28]	; (8004438 <Update_Melody+0x78>)
 800441c:	6013      	str	r3, [r2, #0]
    	        current_tone_number++;
 800441e:	4b07      	ldr	r3, [pc, #28]	; (800443c <Update_Melody+0x7c>)
 8004420:	881b      	ldrh	r3, [r3, #0]
 8004422:	b29b      	uxth	r3, r3
 8004424:	3301      	adds	r3, #1
 8004426:	b29a      	uxth	r2, r3
 8004428:	4b04      	ldr	r3, [pc, #16]	; (800443c <Update_Melody+0x7c>)
 800442a:	801a      	strh	r2, [r3, #0]
    	    }
    }
}
 800442c:	bf00      	nop
 800442e:	3708      	adds	r7, #8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	20000314 	.word	0x20000314
 8004438:	20001c70 	.word	0x20001c70
 800443c:	20001c74 	.word	0x20001c74
 8004440:	20001c7c 	.word	0x20001c7c
 8004444:	20001c78 	.word	0x20001c78
 8004448:	20000240 	.word	0x20000240

0800444c <musicOn>:

void musicOn() {
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
	PWM_Start();
 8004450:	f7ff fecc 	bl	80041ec <PWM_Start>
	Change_Melody(menuT, ARRAY_LENGTH(menuT));
 8004454:	f240 21a6 	movw	r1, #678	; 0x2a6
 8004458:	4802      	ldr	r0, [pc, #8]	; (8004464 <musicOn+0x18>)
 800445a:	f7ff ff95 	bl	8004388 <Change_Melody>
}
 800445e:	bf00      	nop
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	0800cf6c 	.word	0x0800cf6c

08004468 <bump_1>:

void bump_1() {
 8004468:	b580      	push	{r7, lr}
 800446a:	af00      	add	r7, sp, #0
	Change_Melody(bump1, ARRAY_LENGTH(bump1));
 800446c:	2105      	movs	r1, #5
 800446e:	4802      	ldr	r0, [pc, #8]	; (8004478 <bump_1+0x10>)
 8004470:	f7ff ff8a 	bl	8004388 <Change_Melody>
}
 8004474:	bf00      	nop
 8004476:	bd80      	pop	{r7, pc}
 8004478:	0800e4a8 	.word	0x0800e4a8

0800447c <bump_2>:

void bump_2() {
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
	Change_Melody(bump2, ARRAY_LENGTH(bump2));
 8004480:	2104      	movs	r1, #4
 8004482:	4802      	ldr	r0, [pc, #8]	; (800448c <bump_2+0x10>)
 8004484:	f7ff ff80 	bl	8004388 <Change_Melody>
}
 8004488:	bf00      	nop
 800448a:	bd80      	pop	{r7, pc}
 800448c:	0800e4bc 	.word	0x0800e4bc

08004490 <bump_3>:

void bump_3() {
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
	Change_Melody(bump3, ARRAY_LENGTH(bump3));
 8004494:	2104      	movs	r1, #4
 8004496:	4802      	ldr	r0, [pc, #8]	; (80044a0 <bump_3+0x10>)
 8004498:	f7ff ff76 	bl	8004388 <Change_Melody>
}
 800449c:	bf00      	nop
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	0800e4cc 	.word	0x0800e4cc

080044a4 <silent_>:

void silent_() {
 80044a4:	b580      	push	{r7, lr}
 80044a6:	af00      	add	r7, sp, #0
	Change_Melody(silent, ARRAY_LENGTH(silent));
 80044a8:	2101      	movs	r1, #1
 80044aa:	4802      	ldr	r0, [pc, #8]	; (80044b4 <silent_+0x10>)
 80044ac:	f7ff ff6c 	bl	8004388 <Change_Melody>
}
 80044b0:	bf00      	nop
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	0800e4ec 	.word	0x0800e4ec

080044b8 <shot_1>:

void shot_1() {
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
	Change_Melody(shot1, ARRAY_LENGTH(shot1));
 80044bc:	2104      	movs	r1, #4
 80044be:	4802      	ldr	r0, [pc, #8]	; (80044c8 <shot_1+0x10>)
 80044c0:	f7ff ff62 	bl	8004388 <Change_Melody>
}
 80044c4:	bf00      	nop
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	0800e4dc 	.word	0x0800e4dc

080044cc <bossfightmelody>:

void bossfightmelody() {
 80044cc:	b580      	push	{r7, lr}
 80044ce:	af00      	add	r7, sp, #0
	Change_Melody(doom, ARRAY_LENGTH(doom));
 80044d0:	f240 21a9 	movw	r1, #681	; 0x2a9
 80044d4:	4802      	ldr	r0, [pc, #8]	; (80044e0 <bossfightmelody+0x14>)
 80044d6:	f7ff ff57 	bl	8004388 <Change_Melody>
}
 80044da:	bf00      	nop
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	0800da04 	.word	0x0800da04

080044e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80044e8:	e7fe      	b.n	80044e8 <NMI_Handler+0x4>

080044ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044ea:	b480      	push	{r7}
 80044ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044ee:	e7fe      	b.n	80044ee <HardFault_Handler+0x4>

080044f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80044f4:	e7fe      	b.n	80044f4 <MemManage_Handler+0x4>

080044f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044f6:	b480      	push	{r7}
 80044f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80044fa:	e7fe      	b.n	80044fa <BusFault_Handler+0x4>

080044fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004500:	e7fe      	b.n	8004500 <UsageFault_Handler+0x4>

08004502 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004502:	b480      	push	{r7}
 8004504:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004506:	bf00      	nop
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004514:	bf00      	nop
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800451e:	b480      	push	{r7}
 8004520:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004522:	bf00      	nop
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004530:	f000 fdd4 	bl	80050dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  Update_Melody();
 8004534:	f7ff ff44 	bl	80043c0 <Update_Melody>
  /* USER CODE END SysTick_IRQn 1 */
}
 8004538:	bf00      	nop
 800453a:	bd80      	pop	{r7, pc}

0800453c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004542:	2001      	movs	r0, #1
 8004544:	f002 fc68 	bl	8006e18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  for( int i = 0; i < 4; i++ ) {
 8004548:	2300      	movs	r3, #0
 800454a:	607b      	str	r3, [r7, #4]
 800454c:	e052      	b.n	80045f4 <EXTI0_IRQHandler+0xb8>

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, 0);
 800454e:	2200      	movs	r2, #0
 8004550:	21f0      	movs	r1, #240	; 0xf0
 8004552:	482e      	ldr	r0, [pc, #184]	; (800460c <EXTI0_IRQHandler+0xd0>)
 8004554:	f002 fc48 	bl	8006de8 <HAL_GPIO_WritePin>

	  if(i == 0)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10f      	bne.n	800457e <EXTI0_IRQHandler+0x42>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 1);
 800455e:	2201      	movs	r2, #1
 8004560:	2110      	movs	r1, #16
 8004562:	482a      	ldr	r0, [pc, #168]	; (800460c <EXTI0_IRQHandler+0xd0>)
 8004564:	f002 fc40 	bl	8006de8 <HAL_GPIO_WritePin>
		  if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0))
 8004568:	2101      	movs	r1, #1
 800456a:	4828      	ldr	r0, [pc, #160]	; (800460c <EXTI0_IRQHandler+0xd0>)
 800456c:	f002 fc24 	bl	8006db8 <HAL_GPIO_ReadPin>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d03b      	beq.n	80045ee <EXTI0_IRQHandler+0xb2>
		  {
			  kpad = 1;
 8004576:	4b26      	ldr	r3, [pc, #152]	; (8004610 <EXTI0_IRQHandler+0xd4>)
 8004578:	2201      	movs	r2, #1
 800457a:	601a      	str	r2, [r3, #0]
 800457c:	e037      	b.n	80045ee <EXTI0_IRQHandler+0xb2>
		  }
	  }
	  else if(i == 1)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d10f      	bne.n	80045a4 <EXTI0_IRQHandler+0x68>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 1);
 8004584:	2201      	movs	r2, #1
 8004586:	2120      	movs	r1, #32
 8004588:	4820      	ldr	r0, [pc, #128]	; (800460c <EXTI0_IRQHandler+0xd0>)
 800458a:	f002 fc2d 	bl	8006de8 <HAL_GPIO_WritePin>
		  if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0))
 800458e:	2101      	movs	r1, #1
 8004590:	481e      	ldr	r0, [pc, #120]	; (800460c <EXTI0_IRQHandler+0xd0>)
 8004592:	f002 fc11 	bl	8006db8 <HAL_GPIO_ReadPin>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d028      	beq.n	80045ee <EXTI0_IRQHandler+0xb2>
		  {
			  kpad = 4;
 800459c:	4b1c      	ldr	r3, [pc, #112]	; (8004610 <EXTI0_IRQHandler+0xd4>)
 800459e:	2204      	movs	r2, #4
 80045a0:	601a      	str	r2, [r3, #0]
 80045a2:	e024      	b.n	80045ee <EXTI0_IRQHandler+0xb2>
		  }
	  }
	  else if(i == 2)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d10f      	bne.n	80045ca <EXTI0_IRQHandler+0x8e>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);
 80045aa:	2201      	movs	r2, #1
 80045ac:	2140      	movs	r1, #64	; 0x40
 80045ae:	4817      	ldr	r0, [pc, #92]	; (800460c <EXTI0_IRQHandler+0xd0>)
 80045b0:	f002 fc1a 	bl	8006de8 <HAL_GPIO_WritePin>
		  if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0))
 80045b4:	2101      	movs	r1, #1
 80045b6:	4815      	ldr	r0, [pc, #84]	; (800460c <EXTI0_IRQHandler+0xd0>)
 80045b8:	f002 fbfe 	bl	8006db8 <HAL_GPIO_ReadPin>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d015      	beq.n	80045ee <EXTI0_IRQHandler+0xb2>
		  {
			  kpad = 7;
 80045c2:	4b13      	ldr	r3, [pc, #76]	; (8004610 <EXTI0_IRQHandler+0xd4>)
 80045c4:	2207      	movs	r2, #7
 80045c6:	601a      	str	r2, [r3, #0]
 80045c8:	e011      	b.n	80045ee <EXTI0_IRQHandler+0xb2>
		  }
	  }
	  else if(i == 3)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b03      	cmp	r3, #3
 80045ce:	d10e      	bne.n	80045ee <EXTI0_IRQHandler+0xb2>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 1);
 80045d0:	2201      	movs	r2, #1
 80045d2:	2180      	movs	r1, #128	; 0x80
 80045d4:	480d      	ldr	r0, [pc, #52]	; (800460c <EXTI0_IRQHandler+0xd0>)
 80045d6:	f002 fc07 	bl	8006de8 <HAL_GPIO_WritePin>
		  if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0))
 80045da:	2101      	movs	r1, #1
 80045dc:	480b      	ldr	r0, [pc, #44]	; (800460c <EXTI0_IRQHandler+0xd0>)
 80045de:	f002 fbeb 	bl	8006db8 <HAL_GPIO_ReadPin>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d002      	beq.n	80045ee <EXTI0_IRQHandler+0xb2>
		  {
			  kpad = '*';
 80045e8:	4b09      	ldr	r3, [pc, #36]	; (8004610 <EXTI0_IRQHandler+0xd4>)
 80045ea:	222a      	movs	r2, #42	; 0x2a
 80045ec:	601a      	str	r2, [r3, #0]
  for( int i = 0; i < 4; i++ ) {
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	3301      	adds	r3, #1
 80045f2:	607b      	str	r3, [r7, #4]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b03      	cmp	r3, #3
 80045f8:	dda9      	ble.n	800454e <EXTI0_IRQHandler+0x12>
		  }
	  }

  }

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, 1);
 80045fa:	2201      	movs	r2, #1
 80045fc:	21f0      	movs	r1, #240	; 0xf0
 80045fe:	4803      	ldr	r0, [pc, #12]	; (800460c <EXTI0_IRQHandler+0xd0>)
 8004600:	f002 fbf2 	bl	8006de8 <HAL_GPIO_WritePin>

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004604:	bf00      	nop
 8004606:	3708      	adds	r7, #8
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	48000c00 	.word	0x48000c00
 8004610:	20000244 	.word	0x20000244

08004614 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800461a:	2002      	movs	r0, #2
 800461c:	f002 fbfc 	bl	8006e18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  for( int i = 0; i < 4; i++ ) {
 8004620:	2300      	movs	r3, #0
 8004622:	607b      	str	r3, [r7, #4]
 8004624:	e052      	b.n	80046cc <EXTI1_IRQHandler+0xb8>

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, 0);
 8004626:	2200      	movs	r2, #0
 8004628:	21f0      	movs	r1, #240	; 0xf0
 800462a:	482e      	ldr	r0, [pc, #184]	; (80046e4 <EXTI1_IRQHandler+0xd0>)
 800462c:	f002 fbdc 	bl	8006de8 <HAL_GPIO_WritePin>

	  if(i == 0)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10f      	bne.n	8004656 <EXTI1_IRQHandler+0x42>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 1);
 8004636:	2201      	movs	r2, #1
 8004638:	2110      	movs	r1, #16
 800463a:	482a      	ldr	r0, [pc, #168]	; (80046e4 <EXTI1_IRQHandler+0xd0>)
 800463c:	f002 fbd4 	bl	8006de8 <HAL_GPIO_WritePin>
		  if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1))
 8004640:	2102      	movs	r1, #2
 8004642:	4828      	ldr	r0, [pc, #160]	; (80046e4 <EXTI1_IRQHandler+0xd0>)
 8004644:	f002 fbb8 	bl	8006db8 <HAL_GPIO_ReadPin>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d03b      	beq.n	80046c6 <EXTI1_IRQHandler+0xb2>
		  {
			  kpad = 2;
 800464e:	4b26      	ldr	r3, [pc, #152]	; (80046e8 <EXTI1_IRQHandler+0xd4>)
 8004650:	2202      	movs	r2, #2
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	e037      	b.n	80046c6 <EXTI1_IRQHandler+0xb2>
		  }
	  }
	  else if(i == 1)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d10f      	bne.n	800467c <EXTI1_IRQHandler+0x68>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 1);
 800465c:	2201      	movs	r2, #1
 800465e:	2120      	movs	r1, #32
 8004660:	4820      	ldr	r0, [pc, #128]	; (80046e4 <EXTI1_IRQHandler+0xd0>)
 8004662:	f002 fbc1 	bl	8006de8 <HAL_GPIO_WritePin>
		  if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1))
 8004666:	2102      	movs	r1, #2
 8004668:	481e      	ldr	r0, [pc, #120]	; (80046e4 <EXTI1_IRQHandler+0xd0>)
 800466a:	f002 fba5 	bl	8006db8 <HAL_GPIO_ReadPin>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d028      	beq.n	80046c6 <EXTI1_IRQHandler+0xb2>
		  {
			  kpad = 5;
 8004674:	4b1c      	ldr	r3, [pc, #112]	; (80046e8 <EXTI1_IRQHandler+0xd4>)
 8004676:	2205      	movs	r2, #5
 8004678:	601a      	str	r2, [r3, #0]
 800467a:	e024      	b.n	80046c6 <EXTI1_IRQHandler+0xb2>
		  }
	  }
	  else if(i == 2)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b02      	cmp	r3, #2
 8004680:	d10f      	bne.n	80046a2 <EXTI1_IRQHandler+0x8e>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);
 8004682:	2201      	movs	r2, #1
 8004684:	2140      	movs	r1, #64	; 0x40
 8004686:	4817      	ldr	r0, [pc, #92]	; (80046e4 <EXTI1_IRQHandler+0xd0>)
 8004688:	f002 fbae 	bl	8006de8 <HAL_GPIO_WritePin>
		  if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1))
 800468c:	2102      	movs	r1, #2
 800468e:	4815      	ldr	r0, [pc, #84]	; (80046e4 <EXTI1_IRQHandler+0xd0>)
 8004690:	f002 fb92 	bl	8006db8 <HAL_GPIO_ReadPin>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d015      	beq.n	80046c6 <EXTI1_IRQHandler+0xb2>
		  {
			  kpad = 8;
 800469a:	4b13      	ldr	r3, [pc, #76]	; (80046e8 <EXTI1_IRQHandler+0xd4>)
 800469c:	2208      	movs	r2, #8
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	e011      	b.n	80046c6 <EXTI1_IRQHandler+0xb2>
		  }
	  }
	  else if(i == 3)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2b03      	cmp	r3, #3
 80046a6:	d10e      	bne.n	80046c6 <EXTI1_IRQHandler+0xb2>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 1);
 80046a8:	2201      	movs	r2, #1
 80046aa:	2180      	movs	r1, #128	; 0x80
 80046ac:	480d      	ldr	r0, [pc, #52]	; (80046e4 <EXTI1_IRQHandler+0xd0>)
 80046ae:	f002 fb9b 	bl	8006de8 <HAL_GPIO_WritePin>
		  if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1))
 80046b2:	2102      	movs	r1, #2
 80046b4:	480b      	ldr	r0, [pc, #44]	; (80046e4 <EXTI1_IRQHandler+0xd0>)
 80046b6:	f002 fb7f 	bl	8006db8 <HAL_GPIO_ReadPin>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d002      	beq.n	80046c6 <EXTI1_IRQHandler+0xb2>
		  {
			  kpad = 0;
 80046c0:	4b09      	ldr	r3, [pc, #36]	; (80046e8 <EXTI1_IRQHandler+0xd4>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	601a      	str	r2, [r3, #0]
  for( int i = 0; i < 4; i++ ) {
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	3301      	adds	r3, #1
 80046ca:	607b      	str	r3, [r7, #4]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b03      	cmp	r3, #3
 80046d0:	dda9      	ble.n	8004626 <EXTI1_IRQHandler+0x12>
		  }
	  }

  }

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, 1);
 80046d2:	2201      	movs	r2, #1
 80046d4:	21f0      	movs	r1, #240	; 0xf0
 80046d6:	4803      	ldr	r0, [pc, #12]	; (80046e4 <EXTI1_IRQHandler+0xd0>)
 80046d8:	f002 fb86 	bl	8006de8 <HAL_GPIO_WritePin>

  /* USER CODE END EXTI1_IRQn 1 */
}
 80046dc:	bf00      	nop
 80046de:	3708      	adds	r7, #8
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	48000c00 	.word	0x48000c00
 80046e8:	20000244 	.word	0x20000244

080046ec <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80046f2:	2004      	movs	r0, #4
 80046f4:	f002 fb90 	bl	8006e18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  for( int i = 0; i < 4; i++ ) {
 80046f8:	2300      	movs	r3, #0
 80046fa:	607b      	str	r3, [r7, #4]
 80046fc:	e052      	b.n	80047a4 <EXTI2_TSC_IRQHandler+0xb8>

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, 0);
 80046fe:	2200      	movs	r2, #0
 8004700:	21f0      	movs	r1, #240	; 0xf0
 8004702:	482e      	ldr	r0, [pc, #184]	; (80047bc <EXTI2_TSC_IRQHandler+0xd0>)
 8004704:	f002 fb70 	bl	8006de8 <HAL_GPIO_WritePin>

	  if(i == 0)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10f      	bne.n	800472e <EXTI2_TSC_IRQHandler+0x42>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 1);
 800470e:	2201      	movs	r2, #1
 8004710:	2110      	movs	r1, #16
 8004712:	482a      	ldr	r0, [pc, #168]	; (80047bc <EXTI2_TSC_IRQHandler+0xd0>)
 8004714:	f002 fb68 	bl	8006de8 <HAL_GPIO_WritePin>
		  if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2))
 8004718:	2104      	movs	r1, #4
 800471a:	4828      	ldr	r0, [pc, #160]	; (80047bc <EXTI2_TSC_IRQHandler+0xd0>)
 800471c:	f002 fb4c 	bl	8006db8 <HAL_GPIO_ReadPin>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d03b      	beq.n	800479e <EXTI2_TSC_IRQHandler+0xb2>
		  {
			  kpad = 3;
 8004726:	4b26      	ldr	r3, [pc, #152]	; (80047c0 <EXTI2_TSC_IRQHandler+0xd4>)
 8004728:	2203      	movs	r2, #3
 800472a:	601a      	str	r2, [r3, #0]
 800472c:	e037      	b.n	800479e <EXTI2_TSC_IRQHandler+0xb2>
		  }
	  }
	  else if(i == 1)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d10f      	bne.n	8004754 <EXTI2_TSC_IRQHandler+0x68>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 1);
 8004734:	2201      	movs	r2, #1
 8004736:	2120      	movs	r1, #32
 8004738:	4820      	ldr	r0, [pc, #128]	; (80047bc <EXTI2_TSC_IRQHandler+0xd0>)
 800473a:	f002 fb55 	bl	8006de8 <HAL_GPIO_WritePin>
		  if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2))
 800473e:	2104      	movs	r1, #4
 8004740:	481e      	ldr	r0, [pc, #120]	; (80047bc <EXTI2_TSC_IRQHandler+0xd0>)
 8004742:	f002 fb39 	bl	8006db8 <HAL_GPIO_ReadPin>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d028      	beq.n	800479e <EXTI2_TSC_IRQHandler+0xb2>
		  {
			  kpad = 6;
 800474c:	4b1c      	ldr	r3, [pc, #112]	; (80047c0 <EXTI2_TSC_IRQHandler+0xd4>)
 800474e:	2206      	movs	r2, #6
 8004750:	601a      	str	r2, [r3, #0]
 8004752:	e024      	b.n	800479e <EXTI2_TSC_IRQHandler+0xb2>
		  }
	  }
	  else if(i == 2)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b02      	cmp	r3, #2
 8004758:	d10f      	bne.n	800477a <EXTI2_TSC_IRQHandler+0x8e>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);
 800475a:	2201      	movs	r2, #1
 800475c:	2140      	movs	r1, #64	; 0x40
 800475e:	4817      	ldr	r0, [pc, #92]	; (80047bc <EXTI2_TSC_IRQHandler+0xd0>)
 8004760:	f002 fb42 	bl	8006de8 <HAL_GPIO_WritePin>
		  if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2))
 8004764:	2104      	movs	r1, #4
 8004766:	4815      	ldr	r0, [pc, #84]	; (80047bc <EXTI2_TSC_IRQHandler+0xd0>)
 8004768:	f002 fb26 	bl	8006db8 <HAL_GPIO_ReadPin>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d015      	beq.n	800479e <EXTI2_TSC_IRQHandler+0xb2>
		  {
			  kpad = 9;
 8004772:	4b13      	ldr	r3, [pc, #76]	; (80047c0 <EXTI2_TSC_IRQHandler+0xd4>)
 8004774:	2209      	movs	r2, #9
 8004776:	601a      	str	r2, [r3, #0]
 8004778:	e011      	b.n	800479e <EXTI2_TSC_IRQHandler+0xb2>
		  }
	  }
	  else if(i == 3)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b03      	cmp	r3, #3
 800477e:	d10e      	bne.n	800479e <EXTI2_TSC_IRQHandler+0xb2>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 1);
 8004780:	2201      	movs	r2, #1
 8004782:	2180      	movs	r1, #128	; 0x80
 8004784:	480d      	ldr	r0, [pc, #52]	; (80047bc <EXTI2_TSC_IRQHandler+0xd0>)
 8004786:	f002 fb2f 	bl	8006de8 <HAL_GPIO_WritePin>
		  if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2))
 800478a:	2104      	movs	r1, #4
 800478c:	480b      	ldr	r0, [pc, #44]	; (80047bc <EXTI2_TSC_IRQHandler+0xd0>)
 800478e:	f002 fb13 	bl	8006db8 <HAL_GPIO_ReadPin>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d002      	beq.n	800479e <EXTI2_TSC_IRQHandler+0xb2>
		  {
			  kpad = '#';
 8004798:	4b09      	ldr	r3, [pc, #36]	; (80047c0 <EXTI2_TSC_IRQHandler+0xd4>)
 800479a:	2223      	movs	r2, #35	; 0x23
 800479c:	601a      	str	r2, [r3, #0]
  for( int i = 0; i < 4; i++ ) {
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	3301      	adds	r3, #1
 80047a2:	607b      	str	r3, [r7, #4]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b03      	cmp	r3, #3
 80047a8:	dda9      	ble.n	80046fe <EXTI2_TSC_IRQHandler+0x12>
		  }
	  }

  }

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, 1);
 80047aa:	2201      	movs	r2, #1
 80047ac:	21f0      	movs	r1, #240	; 0xf0
 80047ae:	4803      	ldr	r0, [pc, #12]	; (80047bc <EXTI2_TSC_IRQHandler+0xd0>)
 80047b0:	f002 fb1a 	bl	8006de8 <HAL_GPIO_WritePin>

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 80047b4:	bf00      	nop
 80047b6:	3708      	adds	r7, #8
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	48000c00 	.word	0x48000c00
 80047c0:	20000244 	.word	0x20000244

080047c4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80047ca:	2008      	movs	r0, #8
 80047cc:	f002 fb24 	bl	8006e18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  for( int i = 0; i < 4; i++ ) {
 80047d0:	2300      	movs	r3, #0
 80047d2:	607b      	str	r3, [r7, #4]
 80047d4:	e055      	b.n	8004882 <EXTI3_IRQHandler+0xbe>

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, 0);
 80047d6:	2200      	movs	r2, #0
 80047d8:	21f0      	movs	r1, #240	; 0xf0
 80047da:	4830      	ldr	r0, [pc, #192]	; (800489c <EXTI3_IRQHandler+0xd8>)
 80047dc:	f002 fb04 	bl	8006de8 <HAL_GPIO_WritePin>

	  if(i == 0)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d112      	bne.n	800480c <EXTI3_IRQHandler+0x48>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 1);
 80047e6:	2201      	movs	r2, #1
 80047e8:	2110      	movs	r1, #16
 80047ea:	482c      	ldr	r0, [pc, #176]	; (800489c <EXTI3_IRQHandler+0xd8>)
 80047ec:	f002 fafc 	bl	8006de8 <HAL_GPIO_WritePin>
		  if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3))
 80047f0:	2108      	movs	r1, #8
 80047f2:	482a      	ldr	r0, [pc, #168]	; (800489c <EXTI3_IRQHandler+0xd8>)
 80047f4:	f002 fae0 	bl	8006db8 <HAL_GPIO_ReadPin>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d03e      	beq.n	800487c <EXTI3_IRQHandler+0xb8>
		  {
			  kpad = 'A';
 80047fe:	4b28      	ldr	r3, [pc, #160]	; (80048a0 <EXTI3_IRQHandler+0xdc>)
 8004800:	2241      	movs	r2, #65	; 0x41
 8004802:	601a      	str	r2, [r3, #0]
			  onMenu = 1;
 8004804:	4b27      	ldr	r3, [pc, #156]	; (80048a4 <EXTI3_IRQHandler+0xe0>)
 8004806:	2201      	movs	r2, #1
 8004808:	601a      	str	r2, [r3, #0]
 800480a:	e037      	b.n	800487c <EXTI3_IRQHandler+0xb8>
		  }
	  }
	  else if(i == 1)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d10f      	bne.n	8004832 <EXTI3_IRQHandler+0x6e>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 1);
 8004812:	2201      	movs	r2, #1
 8004814:	2120      	movs	r1, #32
 8004816:	4821      	ldr	r0, [pc, #132]	; (800489c <EXTI3_IRQHandler+0xd8>)
 8004818:	f002 fae6 	bl	8006de8 <HAL_GPIO_WritePin>
		  if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3))
 800481c:	2108      	movs	r1, #8
 800481e:	481f      	ldr	r0, [pc, #124]	; (800489c <EXTI3_IRQHandler+0xd8>)
 8004820:	f002 faca 	bl	8006db8 <HAL_GPIO_ReadPin>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d028      	beq.n	800487c <EXTI3_IRQHandler+0xb8>
		  {
			  kpad = 'B';
 800482a:	4b1d      	ldr	r3, [pc, #116]	; (80048a0 <EXTI3_IRQHandler+0xdc>)
 800482c:	2242      	movs	r2, #66	; 0x42
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	e024      	b.n	800487c <EXTI3_IRQHandler+0xb8>
		  }
	  }
	  else if(i == 2)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b02      	cmp	r3, #2
 8004836:	d10f      	bne.n	8004858 <EXTI3_IRQHandler+0x94>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);
 8004838:	2201      	movs	r2, #1
 800483a:	2140      	movs	r1, #64	; 0x40
 800483c:	4817      	ldr	r0, [pc, #92]	; (800489c <EXTI3_IRQHandler+0xd8>)
 800483e:	f002 fad3 	bl	8006de8 <HAL_GPIO_WritePin>
		  if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3))
 8004842:	2108      	movs	r1, #8
 8004844:	4815      	ldr	r0, [pc, #84]	; (800489c <EXTI3_IRQHandler+0xd8>)
 8004846:	f002 fab7 	bl	8006db8 <HAL_GPIO_ReadPin>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d015      	beq.n	800487c <EXTI3_IRQHandler+0xb8>
		  {
			  kpad = 'C';
 8004850:	4b13      	ldr	r3, [pc, #76]	; (80048a0 <EXTI3_IRQHandler+0xdc>)
 8004852:	2243      	movs	r2, #67	; 0x43
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	e011      	b.n	800487c <EXTI3_IRQHandler+0xb8>
		  }
	  }
	  else if(i == 3)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b03      	cmp	r3, #3
 800485c:	d10e      	bne.n	800487c <EXTI3_IRQHandler+0xb8>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 1);
 800485e:	2201      	movs	r2, #1
 8004860:	2180      	movs	r1, #128	; 0x80
 8004862:	480e      	ldr	r0, [pc, #56]	; (800489c <EXTI3_IRQHandler+0xd8>)
 8004864:	f002 fac0 	bl	8006de8 <HAL_GPIO_WritePin>
		  if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3))
 8004868:	2108      	movs	r1, #8
 800486a:	480c      	ldr	r0, [pc, #48]	; (800489c <EXTI3_IRQHandler+0xd8>)
 800486c:	f002 faa4 	bl	8006db8 <HAL_GPIO_ReadPin>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d002      	beq.n	800487c <EXTI3_IRQHandler+0xb8>
		  {
			  kpad = 'D';
 8004876:	4b0a      	ldr	r3, [pc, #40]	; (80048a0 <EXTI3_IRQHandler+0xdc>)
 8004878:	2244      	movs	r2, #68	; 0x44
 800487a:	601a      	str	r2, [r3, #0]
  for( int i = 0; i < 4; i++ ) {
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	3301      	adds	r3, #1
 8004880:	607b      	str	r3, [r7, #4]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b03      	cmp	r3, #3
 8004886:	dda6      	ble.n	80047d6 <EXTI3_IRQHandler+0x12>
		  }
	  }

  }

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, 1);
 8004888:	2201      	movs	r2, #1
 800488a:	21f0      	movs	r1, #240	; 0xf0
 800488c:	4803      	ldr	r0, [pc, #12]	; (800489c <EXTI3_IRQHandler+0xd8>)
 800488e:	f002 faab 	bl	8006de8 <HAL_GPIO_WritePin>

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004892:	bf00      	nop
 8004894:	3708      	adds	r7, #8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	48000c00 	.word	0x48000c00
 80048a0:	20000244 	.word	0x20000244
 80048a4:	200002dc 	.word	0x200002dc

080048a8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

	int vol = HAL_ADC_GetValue(&hadc1);
 80048ae:	4850      	ldr	r0, [pc, #320]	; (80049f0 <ADC1_2_IRQHandler+0x148>)
 80048b0:	f000 ff96 	bl	80057e0 <HAL_ADC_GetValue>
 80048b4:	4603      	mov	r3, r0
 80048b6:	607b      	str	r3, [r7, #4]

	if ( vol < 300 )
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80048be:	da03      	bge.n	80048c8 <ADC1_2_IRQHandler+0x20>
	{
		volume = 0;
 80048c0:	4b4c      	ldr	r3, [pc, #304]	; (80049f4 <ADC1_2_IRQHandler+0x14c>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	801a      	strh	r2, [r3, #0]
 80048c6:	e08c      	b.n	80049e2 <ADC1_2_IRQHandler+0x13a>
	} else if ( vol >= 300 && vol < 700 ) {
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80048ce:	db07      	blt.n	80048e0 <ADC1_2_IRQHandler+0x38>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80048d6:	da03      	bge.n	80048e0 <ADC1_2_IRQHandler+0x38>
		volume = 5;
 80048d8:	4b46      	ldr	r3, [pc, #280]	; (80049f4 <ADC1_2_IRQHandler+0x14c>)
 80048da:	2205      	movs	r2, #5
 80048dc:	801a      	strh	r2, [r3, #0]
 80048de:	e080      	b.n	80049e2 <ADC1_2_IRQHandler+0x13a>
	} else if ( vol >= 700 && vol < 1300 ) {
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80048e6:	db08      	blt.n	80048fa <ADC1_2_IRQHandler+0x52>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f240 5213 	movw	r2, #1299	; 0x513
 80048ee:	4293      	cmp	r3, r2
 80048f0:	dc03      	bgt.n	80048fa <ADC1_2_IRQHandler+0x52>
		volume = 10;
 80048f2:	4b40      	ldr	r3, [pc, #256]	; (80049f4 <ADC1_2_IRQHandler+0x14c>)
 80048f4:	220a      	movs	r2, #10
 80048f6:	801a      	strh	r2, [r3, #0]
 80048f8:	e073      	b.n	80049e2 <ADC1_2_IRQHandler+0x13a>
	} else if ( vol >= 1300 && vol < 1600 ) {
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f240 5213 	movw	r2, #1299	; 0x513
 8004900:	4293      	cmp	r3, r2
 8004902:	dd07      	ble.n	8004914 <ADC1_2_IRQHandler+0x6c>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800490a:	da03      	bge.n	8004914 <ADC1_2_IRQHandler+0x6c>
		volume = 15;
 800490c:	4b39      	ldr	r3, [pc, #228]	; (80049f4 <ADC1_2_IRQHandler+0x14c>)
 800490e:	220f      	movs	r2, #15
 8004910:	801a      	strh	r2, [r3, #0]
 8004912:	e066      	b.n	80049e2 <ADC1_2_IRQHandler+0x13a>
	} else if ( vol >= 1600 && vol < 1900 ) {
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800491a:	db08      	blt.n	800492e <ADC1_2_IRQHandler+0x86>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f240 726b 	movw	r2, #1899	; 0x76b
 8004922:	4293      	cmp	r3, r2
 8004924:	dc03      	bgt.n	800492e <ADC1_2_IRQHandler+0x86>
		volume = 20;
 8004926:	4b33      	ldr	r3, [pc, #204]	; (80049f4 <ADC1_2_IRQHandler+0x14c>)
 8004928:	2214      	movs	r2, #20
 800492a:	801a      	strh	r2, [r3, #0]
 800492c:	e059      	b.n	80049e2 <ADC1_2_IRQHandler+0x13a>
	} else if ( vol >= 1900 && vol < 2200 ) {
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f240 726b 	movw	r2, #1899	; 0x76b
 8004934:	4293      	cmp	r3, r2
 8004936:	dd08      	ble.n	800494a <ADC1_2_IRQHandler+0xa2>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f640 0297 	movw	r2, #2199	; 0x897
 800493e:	4293      	cmp	r3, r2
 8004940:	dc03      	bgt.n	800494a <ADC1_2_IRQHandler+0xa2>
		volume = 25;
 8004942:	4b2c      	ldr	r3, [pc, #176]	; (80049f4 <ADC1_2_IRQHandler+0x14c>)
 8004944:	2219      	movs	r2, #25
 8004946:	801a      	strh	r2, [r3, #0]
 8004948:	e04b      	b.n	80049e2 <ADC1_2_IRQHandler+0x13a>
	} else if ( vol >= 2200 && vol < 2500 ) {
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f640 0297 	movw	r2, #2199	; 0x897
 8004950:	4293      	cmp	r3, r2
 8004952:	dd08      	ble.n	8004966 <ADC1_2_IRQHandler+0xbe>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800495a:	4293      	cmp	r3, r2
 800495c:	dc03      	bgt.n	8004966 <ADC1_2_IRQHandler+0xbe>
		volume = 30;
 800495e:	4b25      	ldr	r3, [pc, #148]	; (80049f4 <ADC1_2_IRQHandler+0x14c>)
 8004960:	221e      	movs	r2, #30
 8004962:	801a      	strh	r2, [r3, #0]
 8004964:	e03d      	b.n	80049e2 <ADC1_2_IRQHandler+0x13a>
	} else if ( vol >= 2500 && vol < 2800 ) {
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800496c:	4293      	cmp	r3, r2
 800496e:	dd07      	ble.n	8004980 <ADC1_2_IRQHandler+0xd8>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8004976:	da03      	bge.n	8004980 <ADC1_2_IRQHandler+0xd8>
		volume = 35;
 8004978:	4b1e      	ldr	r3, [pc, #120]	; (80049f4 <ADC1_2_IRQHandler+0x14c>)
 800497a:	2223      	movs	r2, #35	; 0x23
 800497c:	801a      	strh	r2, [r3, #0]
 800497e:	e030      	b.n	80049e2 <ADC1_2_IRQHandler+0x13a>
	} else if ( vol >= 2800 && vol < 3100 ) {
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8004986:	db08      	blt.n	800499a <ADC1_2_IRQHandler+0xf2>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f640 421b 	movw	r2, #3099	; 0xc1b
 800498e:	4293      	cmp	r3, r2
 8004990:	dc03      	bgt.n	800499a <ADC1_2_IRQHandler+0xf2>
		volume = 40;
 8004992:	4b18      	ldr	r3, [pc, #96]	; (80049f4 <ADC1_2_IRQHandler+0x14c>)
 8004994:	2228      	movs	r2, #40	; 0x28
 8004996:	801a      	strh	r2, [r3, #0]
 8004998:	e023      	b.n	80049e2 <ADC1_2_IRQHandler+0x13a>
	} else if ( vol >= 3100 && vol < 3400 ) {
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f640 421b 	movw	r2, #3099	; 0xc1b
 80049a0:	4293      	cmp	r3, r2
 80049a2:	dd08      	ble.n	80049b6 <ADC1_2_IRQHandler+0x10e>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f640 5247 	movw	r2, #3399	; 0xd47
 80049aa:	4293      	cmp	r3, r2
 80049ac:	dc03      	bgt.n	80049b6 <ADC1_2_IRQHandler+0x10e>
		volume = 45;
 80049ae:	4b11      	ldr	r3, [pc, #68]	; (80049f4 <ADC1_2_IRQHandler+0x14c>)
 80049b0:	222d      	movs	r2, #45	; 0x2d
 80049b2:	801a      	strh	r2, [r3, #0]
 80049b4:	e015      	b.n	80049e2 <ADC1_2_IRQHandler+0x13a>
	} else if ( vol >= 3400 && vol < 3700 ) {
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f640 5247 	movw	r2, #3399	; 0xd47
 80049bc:	4293      	cmp	r3, r2
 80049be:	dd08      	ble.n	80049d2 <ADC1_2_IRQHandler+0x12a>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f640 6273 	movw	r2, #3699	; 0xe73
 80049c6:	4293      	cmp	r3, r2
 80049c8:	dc03      	bgt.n	80049d2 <ADC1_2_IRQHandler+0x12a>
		volume = 50;
 80049ca:	4b0a      	ldr	r3, [pc, #40]	; (80049f4 <ADC1_2_IRQHandler+0x14c>)
 80049cc:	2232      	movs	r2, #50	; 0x32
 80049ce:	801a      	strh	r2, [r3, #0]
 80049d0:	e007      	b.n	80049e2 <ADC1_2_IRQHandler+0x13a>
	} else if ( vol >= 3700 ) {
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f640 6273 	movw	r2, #3699	; 0xe73
 80049d8:	4293      	cmp	r3, r2
 80049da:	dd02      	ble.n	80049e2 <ADC1_2_IRQHandler+0x13a>
		volume = 100;
 80049dc:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <ADC1_2_IRQHandler+0x14c>)
 80049de:	2264      	movs	r2, #100	; 0x64
 80049e0:	801a      	strh	r2, [r3, #0]
	}

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80049e2:	4803      	ldr	r0, [pc, #12]	; (80049f0 <ADC1_2_IRQHandler+0x148>)
 80049e4:	f000 ff0a 	bl	80057fc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80049e8:	bf00      	nop
 80049ea:	3708      	adds	r7, #8
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	20000e0c 	.word	0x20000e0c
 80049f4:	20000240 	.word	0x20000240

080049f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	if ( gameOn == 1 )
 80049fe:	4b41      	ldr	r3, [pc, #260]	; (8004b04 <TIM2_IRQHandler+0x10c>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d176      	bne.n	8004af4 <TIM2_IRQHandler+0xfc>
	{
		for ( int i = 0; i < n; i = i + 2 )
 8004a06:	2300      	movs	r3, #0
 8004a08:	607b      	str	r3, [r7, #4]
 8004a0a:	e014      	b.n	8004a36 <TIM2_IRQHandler+0x3e>
		{
			enemy_row[i]--;
 8004a0c:	4a3e      	ldr	r2, [pc, #248]	; (8004b08 <TIM2_IRQHandler+0x110>)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a14:	1e5a      	subs	r2, r3, #1
 8004a16:	493c      	ldr	r1, [pc, #240]	; (8004b08 <TIM2_IRQHandler+0x110>)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			enemy_row[i+1]--;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	3301      	adds	r3, #1
 8004a22:	4a39      	ldr	r2, [pc, #228]	; (8004b08 <TIM2_IRQHandler+0x110>)
 8004a24:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004a28:	3a01      	subs	r2, #1
 8004a2a:	4937      	ldr	r1, [pc, #220]	; (8004b08 <TIM2_IRQHandler+0x110>)
 8004a2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for ( int i = 0; i < n; i = i + 2 )
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3302      	adds	r3, #2
 8004a34:	607b      	str	r3, [r7, #4]
 8004a36:	4b35      	ldr	r3, [pc, #212]	; (8004b0c <TIM2_IRQHandler+0x114>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	dbe5      	blt.n	8004a0c <TIM2_IRQHandler+0x14>
		}

		n++;
 8004a40:	4b32      	ldr	r3, [pc, #200]	; (8004b0c <TIM2_IRQHandler+0x114>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	3301      	adds	r3, #1
 8004a46:	4a31      	ldr	r2, [pc, #196]	; (8004b0c <TIM2_IRQHandler+0x114>)
 8004a48:	6013      	str	r3, [r2, #0]
		if ( n%2 == 0 && t == 0 ) {
 8004a4a:	4b30      	ldr	r3, [pc, #192]	; (8004b0c <TIM2_IRQHandler+0x114>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d110      	bne.n	8004a78 <TIM2_IRQHandler+0x80>
 8004a56:	4b2e      	ldr	r3, [pc, #184]	; (8004b10 <TIM2_IRQHandler+0x118>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10c      	bne.n	8004a78 <TIM2_IRQHandler+0x80>
			enemy_col[n] = 1;
 8004a5e:	4b2b      	ldr	r3, [pc, #172]	; (8004b0c <TIM2_IRQHandler+0x114>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a2c      	ldr	r2, [pc, #176]	; (8004b14 <TIM2_IRQHandler+0x11c>)
 8004a64:	2101      	movs	r1, #1
 8004a66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			enemy_row[n] = 19;
 8004a6a:	4b28      	ldr	r3, [pc, #160]	; (8004b0c <TIM2_IRQHandler+0x114>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a26      	ldr	r2, [pc, #152]	; (8004b08 <TIM2_IRQHandler+0x110>)
 8004a70:	2113      	movs	r1, #19
 8004a72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8004a76:	e03d      	b.n	8004af4 <TIM2_IRQHandler+0xfc>
		} else if ( t == 0 ) {
 8004a78:	4b25      	ldr	r3, [pc, #148]	; (8004b10 <TIM2_IRQHandler+0x118>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10f      	bne.n	8004aa0 <TIM2_IRQHandler+0xa8>
			enemy_col[n] = 1;
 8004a80:	4b22      	ldr	r3, [pc, #136]	; (8004b0c <TIM2_IRQHandler+0x114>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a23      	ldr	r2, [pc, #140]	; (8004b14 <TIM2_IRQHandler+0x11c>)
 8004a86:	2101      	movs	r1, #1
 8004a88:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			enemy_row[n] = 39;
 8004a8c:	4b1f      	ldr	r3, [pc, #124]	; (8004b0c <TIM2_IRQHandler+0x114>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a1d      	ldr	r2, [pc, #116]	; (8004b08 <TIM2_IRQHandler+0x110>)
 8004a92:	2127      	movs	r1, #39	; 0x27
 8004a94:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			t = 1;
 8004a98:	4b1d      	ldr	r3, [pc, #116]	; (8004b10 <TIM2_IRQHandler+0x118>)
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	601a      	str	r2, [r3, #0]
 8004a9e:	e029      	b.n	8004af4 <TIM2_IRQHandler+0xfc>
		} else if ( n%2 == 0 && t == 1 ) {
 8004aa0:	4b1a      	ldr	r3, [pc, #104]	; (8004b0c <TIM2_IRQHandler+0x114>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d110      	bne.n	8004ace <TIM2_IRQHandler+0xd6>
 8004aac:	4b18      	ldr	r3, [pc, #96]	; (8004b10 <TIM2_IRQHandler+0x118>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d10c      	bne.n	8004ace <TIM2_IRQHandler+0xd6>
			enemy_col[n] = 0;
 8004ab4:	4b15      	ldr	r3, [pc, #84]	; (8004b0c <TIM2_IRQHandler+0x114>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a16      	ldr	r2, [pc, #88]	; (8004b14 <TIM2_IRQHandler+0x11c>)
 8004aba:	2100      	movs	r1, #0
 8004abc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			enemy_row[n] = 19;
 8004ac0:	4b12      	ldr	r3, [pc, #72]	; (8004b0c <TIM2_IRQHandler+0x114>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a10      	ldr	r2, [pc, #64]	; (8004b08 <TIM2_IRQHandler+0x110>)
 8004ac6:	2113      	movs	r1, #19
 8004ac8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8004acc:	e012      	b.n	8004af4 <TIM2_IRQHandler+0xfc>
		} else if ( t == 1 ) {
 8004ace:	4b10      	ldr	r3, [pc, #64]	; (8004b10 <TIM2_IRQHandler+0x118>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d10e      	bne.n	8004af4 <TIM2_IRQHandler+0xfc>
			enemy_col[n] = 0;
 8004ad6:	4b0d      	ldr	r3, [pc, #52]	; (8004b0c <TIM2_IRQHandler+0x114>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a0e      	ldr	r2, [pc, #56]	; (8004b14 <TIM2_IRQHandler+0x11c>)
 8004adc:	2100      	movs	r1, #0
 8004ade:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			enemy_row[n] = 39;
 8004ae2:	4b0a      	ldr	r3, [pc, #40]	; (8004b0c <TIM2_IRQHandler+0x114>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a08      	ldr	r2, [pc, #32]	; (8004b08 <TIM2_IRQHandler+0x110>)
 8004ae8:	2127      	movs	r1, #39	; 0x27
 8004aea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			t = 0;
 8004aee:	4b08      	ldr	r3, [pc, #32]	; (8004b10 <TIM2_IRQHandler+0x118>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	601a      	str	r2, [r3, #0]
		}
	}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004af4:	4808      	ldr	r0, [pc, #32]	; (8004b18 <TIM2_IRQHandler+0x120>)
 8004af6:	f004 fca5 	bl	8009444 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004afa:	bf00      	nop
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	200002ec 	.word	0x200002ec
 8004b08:	20001330 	.word	0x20001330
 8004b0c:	20000248 	.word	0x20000248
 8004b10:	20000380 	.word	0x20000380
 8004b14:	20000774 	.word	0x20000774
 8004b18:	20001258 	.word	0x20001258

08004b1c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

	if ( gameOn == 1 )
 8004b22:	4b41      	ldr	r3, [pc, #260]	; (8004c28 <TIM3_IRQHandler+0x10c>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d176      	bne.n	8004c18 <TIM3_IRQHandler+0xfc>
	{
		for ( int i = 0; i < n; i = i + 2 )
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	607b      	str	r3, [r7, #4]
 8004b2e:	e014      	b.n	8004b5a <TIM3_IRQHandler+0x3e>
		{
			enemy_row[i]--;
 8004b30:	4a3e      	ldr	r2, [pc, #248]	; (8004c2c <TIM3_IRQHandler+0x110>)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b38:	1e5a      	subs	r2, r3, #1
 8004b3a:	493c      	ldr	r1, [pc, #240]	; (8004c2c <TIM3_IRQHandler+0x110>)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			enemy_row[i+1]--;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	3301      	adds	r3, #1
 8004b46:	4a39      	ldr	r2, [pc, #228]	; (8004c2c <TIM3_IRQHandler+0x110>)
 8004b48:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004b4c:	3a01      	subs	r2, #1
 8004b4e:	4937      	ldr	r1, [pc, #220]	; (8004c2c <TIM3_IRQHandler+0x110>)
 8004b50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for ( int i = 0; i < n; i = i + 2 )
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	3302      	adds	r3, #2
 8004b58:	607b      	str	r3, [r7, #4]
 8004b5a:	4b35      	ldr	r3, [pc, #212]	; (8004c30 <TIM3_IRQHandler+0x114>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	dbe5      	blt.n	8004b30 <TIM3_IRQHandler+0x14>
		}

		n++;
 8004b64:	4b32      	ldr	r3, [pc, #200]	; (8004c30 <TIM3_IRQHandler+0x114>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	4a31      	ldr	r2, [pc, #196]	; (8004c30 <TIM3_IRQHandler+0x114>)
 8004b6c:	6013      	str	r3, [r2, #0]
		if ( n%2 == 0 && t == 0 ) {
 8004b6e:	4b30      	ldr	r3, [pc, #192]	; (8004c30 <TIM3_IRQHandler+0x114>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d110      	bne.n	8004b9c <TIM3_IRQHandler+0x80>
 8004b7a:	4b2e      	ldr	r3, [pc, #184]	; (8004c34 <TIM3_IRQHandler+0x118>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10c      	bne.n	8004b9c <TIM3_IRQHandler+0x80>
			enemy_col[n] = 1;
 8004b82:	4b2b      	ldr	r3, [pc, #172]	; (8004c30 <TIM3_IRQHandler+0x114>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a2c      	ldr	r2, [pc, #176]	; (8004c38 <TIM3_IRQHandler+0x11c>)
 8004b88:	2101      	movs	r1, #1
 8004b8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			enemy_row[n] = 19;
 8004b8e:	4b28      	ldr	r3, [pc, #160]	; (8004c30 <TIM3_IRQHandler+0x114>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a26      	ldr	r2, [pc, #152]	; (8004c2c <TIM3_IRQHandler+0x110>)
 8004b94:	2113      	movs	r1, #19
 8004b96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8004b9a:	e03d      	b.n	8004c18 <TIM3_IRQHandler+0xfc>
		} else if ( t == 0 ) {
 8004b9c:	4b25      	ldr	r3, [pc, #148]	; (8004c34 <TIM3_IRQHandler+0x118>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10f      	bne.n	8004bc4 <TIM3_IRQHandler+0xa8>
			enemy_col[n] = 1;
 8004ba4:	4b22      	ldr	r3, [pc, #136]	; (8004c30 <TIM3_IRQHandler+0x114>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a23      	ldr	r2, [pc, #140]	; (8004c38 <TIM3_IRQHandler+0x11c>)
 8004baa:	2101      	movs	r1, #1
 8004bac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			enemy_row[n] = 39;
 8004bb0:	4b1f      	ldr	r3, [pc, #124]	; (8004c30 <TIM3_IRQHandler+0x114>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a1d      	ldr	r2, [pc, #116]	; (8004c2c <TIM3_IRQHandler+0x110>)
 8004bb6:	2127      	movs	r1, #39	; 0x27
 8004bb8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			t = 1;
 8004bbc:	4b1d      	ldr	r3, [pc, #116]	; (8004c34 <TIM3_IRQHandler+0x118>)
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	601a      	str	r2, [r3, #0]
 8004bc2:	e029      	b.n	8004c18 <TIM3_IRQHandler+0xfc>
		} else if ( n%2 == 0 && t == 1 ) {
 8004bc4:	4b1a      	ldr	r3, [pc, #104]	; (8004c30 <TIM3_IRQHandler+0x114>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0301 	and.w	r3, r3, #1
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d110      	bne.n	8004bf2 <TIM3_IRQHandler+0xd6>
 8004bd0:	4b18      	ldr	r3, [pc, #96]	; (8004c34 <TIM3_IRQHandler+0x118>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d10c      	bne.n	8004bf2 <TIM3_IRQHandler+0xd6>
			enemy_col[n] = 0;
 8004bd8:	4b15      	ldr	r3, [pc, #84]	; (8004c30 <TIM3_IRQHandler+0x114>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a16      	ldr	r2, [pc, #88]	; (8004c38 <TIM3_IRQHandler+0x11c>)
 8004bde:	2100      	movs	r1, #0
 8004be0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			enemy_row[n] = 19;
 8004be4:	4b12      	ldr	r3, [pc, #72]	; (8004c30 <TIM3_IRQHandler+0x114>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a10      	ldr	r2, [pc, #64]	; (8004c2c <TIM3_IRQHandler+0x110>)
 8004bea:	2113      	movs	r1, #19
 8004bec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8004bf0:	e012      	b.n	8004c18 <TIM3_IRQHandler+0xfc>
		} else if ( t == 1 ) {
 8004bf2:	4b10      	ldr	r3, [pc, #64]	; (8004c34 <TIM3_IRQHandler+0x118>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d10e      	bne.n	8004c18 <TIM3_IRQHandler+0xfc>
			enemy_col[n] = 0;
 8004bfa:	4b0d      	ldr	r3, [pc, #52]	; (8004c30 <TIM3_IRQHandler+0x114>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a0e      	ldr	r2, [pc, #56]	; (8004c38 <TIM3_IRQHandler+0x11c>)
 8004c00:	2100      	movs	r1, #0
 8004c02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			enemy_row[n] = 39;
 8004c06:	4b0a      	ldr	r3, [pc, #40]	; (8004c30 <TIM3_IRQHandler+0x114>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a08      	ldr	r2, [pc, #32]	; (8004c2c <TIM3_IRQHandler+0x110>)
 8004c0c:	2127      	movs	r1, #39	; 0x27
 8004c0e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			t = 0;
 8004c12:	4b08      	ldr	r3, [pc, #32]	; (8004c34 <TIM3_IRQHandler+0x118>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	601a      	str	r2, [r3, #0]
		}
	}

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004c18:	4808      	ldr	r0, [pc, #32]	; (8004c3c <TIM3_IRQHandler+0x120>)
 8004c1a:	f004 fc13 	bl	8009444 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004c1e:	bf00      	nop
 8004c20:	3708      	adds	r7, #8
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	200002ec 	.word	0x200002ec
 8004c2c:	20001330 	.word	0x20001330
 8004c30:	20000248 	.word	0x20000248
 8004c34:	20000380 	.word	0x20000380
 8004c38:	20000774 	.word	0x20000774
 8004c3c:	20000db4 	.word	0x20000db4

08004c40 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004c44:	4802      	ldr	r0, [pc, #8]	; (8004c50 <TIM4_IRQHandler+0x10>)
 8004c46:	f004 fbfd 	bl	8009444 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004c4a:	bf00      	nop
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	200006dc 	.word	0x200006dc

08004c54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004c5a:	4822      	ldr	r0, [pc, #136]	; (8004ce4 <USART2_IRQHandler+0x90>)
 8004c5c:	f005 fd16 	bl	800a68c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  extern unsigned char data[1];

  switch(data[0]){
 8004c60:	4b21      	ldr	r3, [pc, #132]	; (8004ce8 <USART2_IRQHandler+0x94>)
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	2b0a      	cmp	r3, #10
 8004c66:	d11d      	bne.n	8004ca4 <USART2_IRQHandler+0x50>

	case '\n':

		if ( kpad == 'B' && start_game == 1 )
 8004c68:	4b20      	ldr	r3, [pc, #128]	; (8004cec <USART2_IRQHandler+0x98>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2b42      	cmp	r3, #66	; 0x42
 8004c6e:	d115      	bne.n	8004c9c <USART2_IRQHandler+0x48>
 8004c70:	4b1f      	ldr	r3, [pc, #124]	; (8004cf0 <USART2_IRQHandler+0x9c>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d111      	bne.n	8004c9c <USART2_IRQHandler+0x48>
		{
			for ( int i = 0; i < 16; i++ ) {
 8004c78:	2300      	movs	r3, #0
 8004c7a:	607b      	str	r3, [r7, #4]
 8004c7c:	e00b      	b.n	8004c96 <USART2_IRQHandler+0x42>
				name[i] = buffer[i];
 8004c7e:	4a1d      	ldr	r2, [pc, #116]	; (8004cf4 <USART2_IRQHandler+0xa0>)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4413      	add	r3, r2
 8004c84:	7819      	ldrb	r1, [r3, #0]
 8004c86:	4a1c      	ldr	r2, [pc, #112]	; (8004cf8 <USART2_IRQHandler+0xa4>)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	460a      	mov	r2, r1
 8004c8e:	701a      	strb	r2, [r3, #0]
			for ( int i = 0; i < 16; i++ ) {
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	3301      	adds	r3, #1
 8004c94:	607b      	str	r3, [r7, #4]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2b0f      	cmp	r3, #15
 8004c9a:	ddf0      	ble.n	8004c7e <USART2_IRQHandler+0x2a>
			}
		}
		position = 0;
 8004c9c:	4b17      	ldr	r3, [pc, #92]	; (8004cfc <USART2_IRQHandler+0xa8>)
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	601a      	str	r2, [r3, #0]
		break;
 8004ca2:	e015      	b.n	8004cd0 <USART2_IRQHandler+0x7c>

	default:
		if ( position < 100 )
 8004ca4:	4b15      	ldr	r3, [pc, #84]	; (8004cfc <USART2_IRQHandler+0xa8>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b63      	cmp	r3, #99	; 0x63
 8004caa:	dc10      	bgt.n	8004cce <USART2_IRQHandler+0x7a>
		{
			buffer[position] = data[0];
 8004cac:	4b13      	ldr	r3, [pc, #76]	; (8004cfc <USART2_IRQHandler+0xa8>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a0d      	ldr	r2, [pc, #52]	; (8004ce8 <USART2_IRQHandler+0x94>)
 8004cb2:	7811      	ldrb	r1, [r2, #0]
 8004cb4:	4a0f      	ldr	r2, [pc, #60]	; (8004cf4 <USART2_IRQHandler+0xa0>)
 8004cb6:	54d1      	strb	r1, [r2, r3]
			buffer[position+1] = '\0';
 8004cb8:	4b10      	ldr	r3, [pc, #64]	; (8004cfc <USART2_IRQHandler+0xa8>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	4a0d      	ldr	r2, [pc, #52]	; (8004cf4 <USART2_IRQHandler+0xa0>)
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	54d1      	strb	r1, [r2, r3]
			position++;
 8004cc4:	4b0d      	ldr	r3, [pc, #52]	; (8004cfc <USART2_IRQHandler+0xa8>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	3301      	adds	r3, #1
 8004cca:	4a0c      	ldr	r2, [pc, #48]	; (8004cfc <USART2_IRQHandler+0xa8>)
 8004ccc:	6013      	str	r3, [r2, #0]
		}
		break;
 8004cce:	bf00      	nop
  }

  HAL_UART_Receive_IT(&huart2,data,sizeof(data));
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	4905      	ldr	r1, [pc, #20]	; (8004ce8 <USART2_IRQHandler+0x94>)
 8004cd4:	4803      	ldr	r0, [pc, #12]	; (8004ce4 <USART2_IRQHandler+0x90>)
 8004cd6:	f005 fc8b 	bl	800a5f0 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_IRQn 1 */
}
 8004cda:	bf00      	nop
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	200012ac 	.word	0x200012ac
 8004ce8:	20000e80 	.word	0x20000e80
 8004cec:	20000244 	.word	0x20000244
 8004cf0:	200002e4 	.word	0x200002e4
 8004cf4:	20000318 	.word	0x20000318
 8004cf8:	20001c84 	.word	0x20001c84
 8004cfc:	2000037c 	.word	0x2000037c

08004d00 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	if ( gameOn == 1 )
 8004d06:	4b4b      	ldr	r3, [pc, #300]	; (8004e34 <TIM6_DAC_IRQHandler+0x134>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	f040 808b 	bne.w	8004e26 <TIM6_DAC_IRQHandler+0x126>
	{

		for ( int i = 0; i < n; i = i + 2 )
 8004d10:	2300      	movs	r3, #0
 8004d12:	607b      	str	r3, [r7, #4]
 8004d14:	e021      	b.n	8004d5a <TIM6_DAC_IRQHandler+0x5a>
		{
			if ( enemy_row[i] >= 0 ) {
 8004d16:	4a48      	ldr	r2, [pc, #288]	; (8004e38 <TIM6_DAC_IRQHandler+0x138>)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	db08      	blt.n	8004d34 <TIM6_DAC_IRQHandler+0x34>
				enemy_row[i]--;
 8004d22:	4a45      	ldr	r2, [pc, #276]	; (8004e38 <TIM6_DAC_IRQHandler+0x138>)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d2a:	1e5a      	subs	r2, r3, #1
 8004d2c:	4942      	ldr	r1, [pc, #264]	; (8004e38 <TIM6_DAC_IRQHandler+0x138>)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			}
			if ( enemy_row[i+1] >= 0 ) {
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	3301      	adds	r3, #1
 8004d38:	4a3f      	ldr	r2, [pc, #252]	; (8004e38 <TIM6_DAC_IRQHandler+0x138>)
 8004d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	db08      	blt.n	8004d54 <TIM6_DAC_IRQHandler+0x54>
				enemy_row[i+1]--;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	3301      	adds	r3, #1
 8004d46:	4a3c      	ldr	r2, [pc, #240]	; (8004e38 <TIM6_DAC_IRQHandler+0x138>)
 8004d48:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004d4c:	3a01      	subs	r2, #1
 8004d4e:	493a      	ldr	r1, [pc, #232]	; (8004e38 <TIM6_DAC_IRQHandler+0x138>)
 8004d50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for ( int i = 0; i < n; i = i + 2 )
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	3302      	adds	r3, #2
 8004d58:	607b      	str	r3, [r7, #4]
 8004d5a:	4b38      	ldr	r3, [pc, #224]	; (8004e3c <TIM6_DAC_IRQHandler+0x13c>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	dbd8      	blt.n	8004d16 <TIM6_DAC_IRQHandler+0x16>
			}
		}

		n++;
 8004d64:	4b35      	ldr	r3, [pc, #212]	; (8004e3c <TIM6_DAC_IRQHandler+0x13c>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	4a34      	ldr	r2, [pc, #208]	; (8004e3c <TIM6_DAC_IRQHandler+0x13c>)
 8004d6c:	6013      	str	r3, [r2, #0]
		if ( n%2 == 0 && t == 0 ) {
 8004d6e:	4b33      	ldr	r3, [pc, #204]	; (8004e3c <TIM6_DAC_IRQHandler+0x13c>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d110      	bne.n	8004d9c <TIM6_DAC_IRQHandler+0x9c>
 8004d7a:	4b31      	ldr	r3, [pc, #196]	; (8004e40 <TIM6_DAC_IRQHandler+0x140>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10c      	bne.n	8004d9c <TIM6_DAC_IRQHandler+0x9c>
			enemy_col[n] = 1;
 8004d82:	4b2e      	ldr	r3, [pc, #184]	; (8004e3c <TIM6_DAC_IRQHandler+0x13c>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a2f      	ldr	r2, [pc, #188]	; (8004e44 <TIM6_DAC_IRQHandler+0x144>)
 8004d88:	2101      	movs	r1, #1
 8004d8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			enemy_row[n] = 19;
 8004d8e:	4b2b      	ldr	r3, [pc, #172]	; (8004e3c <TIM6_DAC_IRQHandler+0x13c>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a29      	ldr	r2, [pc, #164]	; (8004e38 <TIM6_DAC_IRQHandler+0x138>)
 8004d94:	2113      	movs	r1, #19
 8004d96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8004d9a:	e03d      	b.n	8004e18 <TIM6_DAC_IRQHandler+0x118>
		} else if ( t == 0 ) {
 8004d9c:	4b28      	ldr	r3, [pc, #160]	; (8004e40 <TIM6_DAC_IRQHandler+0x140>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10f      	bne.n	8004dc4 <TIM6_DAC_IRQHandler+0xc4>
			enemy_col[n] = 1;
 8004da4:	4b25      	ldr	r3, [pc, #148]	; (8004e3c <TIM6_DAC_IRQHandler+0x13c>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a26      	ldr	r2, [pc, #152]	; (8004e44 <TIM6_DAC_IRQHandler+0x144>)
 8004daa:	2101      	movs	r1, #1
 8004dac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			enemy_row[n] = 39;
 8004db0:	4b22      	ldr	r3, [pc, #136]	; (8004e3c <TIM6_DAC_IRQHandler+0x13c>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a20      	ldr	r2, [pc, #128]	; (8004e38 <TIM6_DAC_IRQHandler+0x138>)
 8004db6:	2127      	movs	r1, #39	; 0x27
 8004db8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			t = 1;
 8004dbc:	4b20      	ldr	r3, [pc, #128]	; (8004e40 <TIM6_DAC_IRQHandler+0x140>)
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	601a      	str	r2, [r3, #0]
 8004dc2:	e029      	b.n	8004e18 <TIM6_DAC_IRQHandler+0x118>
		} else if ( n%2 == 0 && t == 1 ) {
 8004dc4:	4b1d      	ldr	r3, [pc, #116]	; (8004e3c <TIM6_DAC_IRQHandler+0x13c>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d110      	bne.n	8004df2 <TIM6_DAC_IRQHandler+0xf2>
 8004dd0:	4b1b      	ldr	r3, [pc, #108]	; (8004e40 <TIM6_DAC_IRQHandler+0x140>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d10c      	bne.n	8004df2 <TIM6_DAC_IRQHandler+0xf2>
			enemy_col[n] = 0;
 8004dd8:	4b18      	ldr	r3, [pc, #96]	; (8004e3c <TIM6_DAC_IRQHandler+0x13c>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a19      	ldr	r2, [pc, #100]	; (8004e44 <TIM6_DAC_IRQHandler+0x144>)
 8004dde:	2100      	movs	r1, #0
 8004de0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			enemy_row[n] = 19;
 8004de4:	4b15      	ldr	r3, [pc, #84]	; (8004e3c <TIM6_DAC_IRQHandler+0x13c>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a13      	ldr	r2, [pc, #76]	; (8004e38 <TIM6_DAC_IRQHandler+0x138>)
 8004dea:	2113      	movs	r1, #19
 8004dec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8004df0:	e012      	b.n	8004e18 <TIM6_DAC_IRQHandler+0x118>
		} else if ( t == 1 ) {
 8004df2:	4b13      	ldr	r3, [pc, #76]	; (8004e40 <TIM6_DAC_IRQHandler+0x140>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d10e      	bne.n	8004e18 <TIM6_DAC_IRQHandler+0x118>
			enemy_col[n] = 0;
 8004dfa:	4b10      	ldr	r3, [pc, #64]	; (8004e3c <TIM6_DAC_IRQHandler+0x13c>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a11      	ldr	r2, [pc, #68]	; (8004e44 <TIM6_DAC_IRQHandler+0x144>)
 8004e00:	2100      	movs	r1, #0
 8004e02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			enemy_row[n] = 39;
 8004e06:	4b0d      	ldr	r3, [pc, #52]	; (8004e3c <TIM6_DAC_IRQHandler+0x13c>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a0b      	ldr	r2, [pc, #44]	; (8004e38 <TIM6_DAC_IRQHandler+0x138>)
 8004e0c:	2127      	movs	r1, #39	; 0x27
 8004e0e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			t = 0;
 8004e12:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <TIM6_DAC_IRQHandler+0x140>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	601a      	str	r2, [r3, #0]
		}

		if ( n == 40 ) n = 1;
 8004e18:	4b08      	ldr	r3, [pc, #32]	; (8004e3c <TIM6_DAC_IRQHandler+0x13c>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2b28      	cmp	r3, #40	; 0x28
 8004e1e:	d102      	bne.n	8004e26 <TIM6_DAC_IRQHandler+0x126>
 8004e20:	4b06      	ldr	r3, [pc, #24]	; (8004e3c <TIM6_DAC_IRQHandler+0x13c>)
 8004e22:	2201      	movs	r2, #1
 8004e24:	601a      	str	r2, [r3, #0]

	}

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004e26:	4808      	ldr	r0, [pc, #32]	; (8004e48 <TIM6_DAC_IRQHandler+0x148>)
 8004e28:	f004 fb0c 	bl	8009444 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004e2c:	bf00      	nop
 8004e2e:	3708      	adds	r7, #8
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	200002ec 	.word	0x200002ec
 8004e38:	20001330 	.word	0x20001330
 8004e3c:	20000248 	.word	0x20000248
 8004e40:	20000380 	.word	0x20000380
 8004e44:	20000774 	.word	0x20000774
 8004e48:	20000e84 	.word	0x20000e84

08004e4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	af00      	add	r7, sp, #0
	return 1;
 8004e50:	2301      	movs	r3, #1
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <_kill>:

int _kill(int pid, int sig)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004e66:	f006 fd7b 	bl	800b960 <__errno>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2216      	movs	r2, #22
 8004e6e:	601a      	str	r2, [r3, #0]
	return -1;
 8004e70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3708      	adds	r7, #8
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <_exit>:

void _exit (int status)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004e84:	f04f 31ff 	mov.w	r1, #4294967295
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f7ff ffe7 	bl	8004e5c <_kill>
	while (1) {}		/* Make sure we hang here */
 8004e8e:	e7fe      	b.n	8004e8e <_exit+0x12>

08004e90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	617b      	str	r3, [r7, #20]
 8004ea0:	e00a      	b.n	8004eb8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004ea2:	f3af 8000 	nop.w
 8004ea6:	4601      	mov	r1, r0
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	1c5a      	adds	r2, r3, #1
 8004eac:	60ba      	str	r2, [r7, #8]
 8004eae:	b2ca      	uxtb	r2, r1
 8004eb0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	617b      	str	r3, [r7, #20]
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	dbf0      	blt.n	8004ea2 <_read+0x12>
	}

return len;
 8004ec0:	687b      	ldr	r3, [r7, #4]
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3718      	adds	r7, #24
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b086      	sub	sp, #24
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	60f8      	str	r0, [r7, #12]
 8004ed2:	60b9      	str	r1, [r7, #8]
 8004ed4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	617b      	str	r3, [r7, #20]
 8004eda:	e009      	b.n	8004ef0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	1c5a      	adds	r2, r3, #1
 8004ee0:	60ba      	str	r2, [r7, #8]
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	3301      	adds	r3, #1
 8004eee:	617b      	str	r3, [r7, #20]
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	dbf1      	blt.n	8004edc <_write+0x12>
	}
	return len;
 8004ef8:	687b      	ldr	r3, [r7, #4]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3718      	adds	r7, #24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <_close>:

int _close(int file)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b083      	sub	sp, #12
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
	return -1;
 8004f0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	370c      	adds	r7, #12
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b083      	sub	sp, #12
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
 8004f22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004f2a:	605a      	str	r2, [r3, #4]
	return 0;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <_isatty>:

int _isatty(int file)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b083      	sub	sp, #12
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
	return 1;
 8004f42:	2301      	movs	r3, #1
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
	return 0;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3714      	adds	r7, #20
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
	...

08004f6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004f74:	4a14      	ldr	r2, [pc, #80]	; (8004fc8 <_sbrk+0x5c>)
 8004f76:	4b15      	ldr	r3, [pc, #84]	; (8004fcc <_sbrk+0x60>)
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004f80:	4b13      	ldr	r3, [pc, #76]	; (8004fd0 <_sbrk+0x64>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d102      	bne.n	8004f8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004f88:	4b11      	ldr	r3, [pc, #68]	; (8004fd0 <_sbrk+0x64>)
 8004f8a:	4a12      	ldr	r2, [pc, #72]	; (8004fd4 <_sbrk+0x68>)
 8004f8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004f8e:	4b10      	ldr	r3, [pc, #64]	; (8004fd0 <_sbrk+0x64>)
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4413      	add	r3, r2
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d207      	bcs.n	8004fac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004f9c:	f006 fce0 	bl	800b960 <__errno>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	220c      	movs	r2, #12
 8004fa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8004faa:	e009      	b.n	8004fc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004fac:	4b08      	ldr	r3, [pc, #32]	; (8004fd0 <_sbrk+0x64>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004fb2:	4b07      	ldr	r3, [pc, #28]	; (8004fd0 <_sbrk+0x64>)
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4413      	add	r3, r2
 8004fba:	4a05      	ldr	r2, [pc, #20]	; (8004fd0 <_sbrk+0x64>)
 8004fbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3718      	adds	r7, #24
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	2000a000 	.word	0x2000a000
 8004fcc:	00000400 	.word	0x00000400
 8004fd0:	20000384 	.word	0x20000384
 8004fd4:	20001ca8 	.word	0x20001ca8

08004fd8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004fdc:	4b06      	ldr	r3, [pc, #24]	; (8004ff8 <SystemInit+0x20>)
 8004fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe2:	4a05      	ldr	r2, [pc, #20]	; (8004ff8 <SystemInit+0x20>)
 8004fe4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004fe8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004fec:	bf00      	nop
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	e000ed00 	.word	0xe000ed00

08004ffc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004ffc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005034 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005000:	480d      	ldr	r0, [pc, #52]	; (8005038 <LoopForever+0x6>)
  ldr r1, =_edata
 8005002:	490e      	ldr	r1, [pc, #56]	; (800503c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005004:	4a0e      	ldr	r2, [pc, #56]	; (8005040 <LoopForever+0xe>)
  movs r3, #0
 8005006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005008:	e002      	b.n	8005010 <LoopCopyDataInit>

0800500a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800500a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800500c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800500e:	3304      	adds	r3, #4

08005010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005014:	d3f9      	bcc.n	800500a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005016:	4a0b      	ldr	r2, [pc, #44]	; (8005044 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005018:	4c0b      	ldr	r4, [pc, #44]	; (8005048 <LoopForever+0x16>)
  movs r3, #0
 800501a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800501c:	e001      	b.n	8005022 <LoopFillZerobss>

0800501e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800501e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005020:	3204      	adds	r2, #4

08005022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005024:	d3fb      	bcc.n	800501e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005026:	f7ff ffd7 	bl	8004fd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800502a:	f006 fc9f 	bl	800b96c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800502e:	f7fe fa13 	bl	8003458 <main>

08005032 <LoopForever>:

LoopForever:
    b LoopForever
 8005032:	e7fe      	b.n	8005032 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005034:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8005038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800503c:	200002bc 	.word	0x200002bc
  ldr r2, =_sidata
 8005040:	0800e67c 	.word	0x0800e67c
  ldr r2, =_sbss
 8005044:	200002bc 	.word	0x200002bc
  ldr r4, =_ebss
 8005048:	20001ca8 	.word	0x20001ca8

0800504c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800504c:	e7fe      	b.n	800504c <ADC3_IRQHandler>
	...

08005050 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005054:	4b08      	ldr	r3, [pc, #32]	; (8005078 <HAL_Init+0x28>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a07      	ldr	r2, [pc, #28]	; (8005078 <HAL_Init+0x28>)
 800505a:	f043 0310 	orr.w	r3, r3, #16
 800505e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005060:	2003      	movs	r0, #3
 8005062:	f001 fc77 	bl	8006954 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005066:	2000      	movs	r0, #0
 8005068:	f000 f808 	bl	800507c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800506c:	f7fe fe6c 	bl	8003d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	40022000 	.word	0x40022000

0800507c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005084:	4b12      	ldr	r3, [pc, #72]	; (80050d0 <HAL_InitTick+0x54>)
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	4b12      	ldr	r3, [pc, #72]	; (80050d4 <HAL_InitTick+0x58>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	4619      	mov	r1, r3
 800508e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005092:	fbb3 f3f1 	udiv	r3, r3, r1
 8005096:	fbb2 f3f3 	udiv	r3, r2, r3
 800509a:	4618      	mov	r0, r3
 800509c:	f001 fc8f 	bl	80069be <HAL_SYSTICK_Config>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e00e      	b.n	80050c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b0f      	cmp	r3, #15
 80050ae:	d80a      	bhi.n	80050c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80050b0:	2200      	movs	r2, #0
 80050b2:	6879      	ldr	r1, [r7, #4]
 80050b4:	f04f 30ff 	mov.w	r0, #4294967295
 80050b8:	f001 fc57 	bl	800696a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80050bc:	4a06      	ldr	r2, [pc, #24]	; (80050d8 <HAL_InitTick+0x5c>)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
 80050c4:	e000      	b.n	80050c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3708      	adds	r7, #8
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	2000024c 	.word	0x2000024c
 80050d4:	20000254 	.word	0x20000254
 80050d8:	20000250 	.word	0x20000250

080050dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80050dc:	b480      	push	{r7}
 80050de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80050e0:	4b06      	ldr	r3, [pc, #24]	; (80050fc <HAL_IncTick+0x20>)
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	461a      	mov	r2, r3
 80050e6:	4b06      	ldr	r3, [pc, #24]	; (8005100 <HAL_IncTick+0x24>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4413      	add	r3, r2
 80050ec:	4a04      	ldr	r2, [pc, #16]	; (8005100 <HAL_IncTick+0x24>)
 80050ee:	6013      	str	r3, [r2, #0]
}
 80050f0:	bf00      	nop
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	20000254 	.word	0x20000254
 8005100:	20001c94 	.word	0x20001c94

08005104 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005104:	b480      	push	{r7}
 8005106:	af00      	add	r7, sp, #0
  return uwTick;  
 8005108:	4b03      	ldr	r3, [pc, #12]	; (8005118 <HAL_GetTick+0x14>)
 800510a:	681b      	ldr	r3, [r3, #0]
}
 800510c:	4618      	mov	r0, r3
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	20001c94 	.word	0x20001c94

0800511c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005124:	f7ff ffee 	bl	8005104 <HAL_GetTick>
 8005128:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005134:	d005      	beq.n	8005142 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005136:	4b0a      	ldr	r3, [pc, #40]	; (8005160 <HAL_Delay+0x44>)
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	461a      	mov	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4413      	add	r3, r2
 8005140:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8005142:	bf00      	nop
 8005144:	f7ff ffde 	bl	8005104 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	429a      	cmp	r2, r3
 8005152:	d8f7      	bhi.n	8005144 <HAL_Delay+0x28>
  {
  }
}
 8005154:	bf00      	nop
 8005156:	bf00      	nop
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	20000254 	.word	0x20000254

08005164 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b09a      	sub	sp, #104	; 0x68
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051a8:	2300      	movs	r3, #0
 80051aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80051ae:	2300      	movs	r3, #0
 80051b0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80051b2:	2300      	movs	r3, #0
 80051b4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d101      	bne.n	80051c0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e1c9      	b.n	8005554 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ca:	f003 0310 	and.w	r3, r3, #16
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d176      	bne.n	80052c0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d152      	bne.n	8005280 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f7fe fdcb 	bl	8003d90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d13b      	bne.n	8005280 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f001 fa6d 	bl	80066e8 <ADC_Disable>
 800520e:	4603      	mov	r3, r0
 8005210:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005218:	f003 0310 	and.w	r3, r3, #16
 800521c:	2b00      	cmp	r3, #0
 800521e:	d12f      	bne.n	8005280 <HAL_ADC_Init+0xe0>
 8005220:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005224:	2b00      	cmp	r3, #0
 8005226:	d12b      	bne.n	8005280 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005230:	f023 0302 	bic.w	r3, r3, #2
 8005234:	f043 0202 	orr.w	r2, r3, #2
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	689a      	ldr	r2, [r3, #8]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800524a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689a      	ldr	r2, [r3, #8]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800525a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800525c:	4b86      	ldr	r3, [pc, #536]	; (8005478 <HAL_ADC_Init+0x2d8>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a86      	ldr	r2, [pc, #536]	; (800547c <HAL_ADC_Init+0x2dc>)
 8005262:	fba2 2303 	umull	r2, r3, r2, r3
 8005266:	0c9a      	lsrs	r2, r3, #18
 8005268:	4613      	mov	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	4413      	add	r3, r2
 800526e:	005b      	lsls	r3, r3, #1
 8005270:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005272:	e002      	b.n	800527a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	3b01      	subs	r3, #1
 8005278:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1f9      	bne.n	8005274 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d007      	beq.n	800529e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8005298:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800529c:	d110      	bne.n	80052c0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a2:	f023 0312 	bic.w	r3, r3, #18
 80052a6:	f043 0210 	orr.w	r2, r3, #16
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b2:	f043 0201 	orr.w	r2, r3, #1
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c4:	f003 0310 	and.w	r3, r3, #16
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f040 8136 	bne.w	800553a <HAL_ADC_Init+0x39a>
 80052ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f040 8131 	bne.w	800553a <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f040 8129 	bne.w	800553a <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80052f0:	f043 0202 	orr.w	r2, r3, #2
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005300:	d004      	beq.n	800530c <HAL_ADC_Init+0x16c>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a5e      	ldr	r2, [pc, #376]	; (8005480 <HAL_ADC_Init+0x2e0>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d101      	bne.n	8005310 <HAL_ADC_Init+0x170>
 800530c:	4b5d      	ldr	r3, [pc, #372]	; (8005484 <HAL_ADC_Init+0x2e4>)
 800530e:	e000      	b.n	8005312 <HAL_ADC_Init+0x172>
 8005310:	4b5d      	ldr	r3, [pc, #372]	; (8005488 <HAL_ADC_Init+0x2e8>)
 8005312:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800531c:	d102      	bne.n	8005324 <HAL_ADC_Init+0x184>
 800531e:	4b58      	ldr	r3, [pc, #352]	; (8005480 <HAL_ADC_Init+0x2e0>)
 8005320:	60fb      	str	r3, [r7, #12]
 8005322:	e01a      	b.n	800535a <HAL_ADC_Init+0x1ba>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a55      	ldr	r2, [pc, #340]	; (8005480 <HAL_ADC_Init+0x2e0>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d103      	bne.n	8005336 <HAL_ADC_Init+0x196>
 800532e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005332:	60fb      	str	r3, [r7, #12]
 8005334:	e011      	b.n	800535a <HAL_ADC_Init+0x1ba>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a54      	ldr	r2, [pc, #336]	; (800548c <HAL_ADC_Init+0x2ec>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d102      	bne.n	8005346 <HAL_ADC_Init+0x1a6>
 8005340:	4b53      	ldr	r3, [pc, #332]	; (8005490 <HAL_ADC_Init+0x2f0>)
 8005342:	60fb      	str	r3, [r7, #12]
 8005344:	e009      	b.n	800535a <HAL_ADC_Init+0x1ba>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a51      	ldr	r2, [pc, #324]	; (8005490 <HAL_ADC_Init+0x2f0>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d102      	bne.n	8005356 <HAL_ADC_Init+0x1b6>
 8005350:	4b4e      	ldr	r3, [pc, #312]	; (800548c <HAL_ADC_Init+0x2ec>)
 8005352:	60fb      	str	r3, [r7, #12]
 8005354:	e001      	b.n	800535a <HAL_ADC_Init+0x1ba>
 8005356:	2300      	movs	r3, #0
 8005358:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f003 0303 	and.w	r3, r3, #3
 8005364:	2b01      	cmp	r3, #1
 8005366:	d108      	bne.n	800537a <HAL_ADC_Init+0x1da>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b01      	cmp	r3, #1
 8005374:	d101      	bne.n	800537a <HAL_ADC_Init+0x1da>
 8005376:	2301      	movs	r3, #1
 8005378:	e000      	b.n	800537c <HAL_ADC_Init+0x1dc>
 800537a:	2300      	movs	r3, #0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d11c      	bne.n	80053ba <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8005380:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8005382:	2b00      	cmp	r3, #0
 8005384:	d010      	beq.n	80053a8 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f003 0303 	and.w	r3, r3, #3
 800538e:	2b01      	cmp	r3, #1
 8005390:	d107      	bne.n	80053a2 <HAL_ADC_Init+0x202>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b01      	cmp	r3, #1
 800539c:	d101      	bne.n	80053a2 <HAL_ADC_Init+0x202>
 800539e:	2301      	movs	r3, #1
 80053a0:	e000      	b.n	80053a4 <HAL_ADC_Init+0x204>
 80053a2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d108      	bne.n	80053ba <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80053a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	431a      	orrs	r2, r3
 80053b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053b8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	7e5b      	ldrb	r3, [r3, #25]
 80053be:	035b      	lsls	r3, r3, #13
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80053c4:	2a01      	cmp	r2, #1
 80053c6:	d002      	beq.n	80053ce <HAL_ADC_Init+0x22e>
 80053c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80053cc:	e000      	b.n	80053d0 <HAL_ADC_Init+0x230>
 80053ce:	2200      	movs	r2, #0
 80053d0:	431a      	orrs	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	431a      	orrs	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	4313      	orrs	r3, r2
 80053de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80053e0:	4313      	orrs	r3, r2
 80053e2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d11b      	bne.n	8005426 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	7e5b      	ldrb	r3, [r3, #25]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d109      	bne.n	800540a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fa:	3b01      	subs	r3, #1
 80053fc:	045a      	lsls	r2, r3, #17
 80053fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005400:	4313      	orrs	r3, r2
 8005402:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005406:	663b      	str	r3, [r7, #96]	; 0x60
 8005408:	e00d      	b.n	8005426 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005412:	f043 0220 	orr.w	r2, r3, #32
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800541e:	f043 0201 	orr.w	r2, r3, #1
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542a:	2b01      	cmp	r3, #1
 800542c:	d03a      	beq.n	80054a4 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a16      	ldr	r2, [pc, #88]	; (800548c <HAL_ADC_Init+0x2ec>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d004      	beq.n	8005442 <HAL_ADC_Init+0x2a2>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a14      	ldr	r2, [pc, #80]	; (8005490 <HAL_ADC_Init+0x2f0>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d128      	bne.n	8005494 <HAL_ADC_Init+0x2f4>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005446:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800544a:	d012      	beq.n	8005472 <HAL_ADC_Init+0x2d2>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005450:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005454:	d00a      	beq.n	800546c <HAL_ADC_Init+0x2cc>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800545e:	d002      	beq.n	8005466 <HAL_ADC_Init+0x2c6>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005464:	e018      	b.n	8005498 <HAL_ADC_Init+0x2f8>
 8005466:	f44f 7380 	mov.w	r3, #256	; 0x100
 800546a:	e015      	b.n	8005498 <HAL_ADC_Init+0x2f8>
 800546c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8005470:	e012      	b.n	8005498 <HAL_ADC_Init+0x2f8>
 8005472:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8005476:	e00f      	b.n	8005498 <HAL_ADC_Init+0x2f8>
 8005478:	2000024c 	.word	0x2000024c
 800547c:	431bde83 	.word	0x431bde83
 8005480:	50000100 	.word	0x50000100
 8005484:	50000300 	.word	0x50000300
 8005488:	50000700 	.word	0x50000700
 800548c:	50000400 	.word	0x50000400
 8005490:	50000500 	.word	0x50000500
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800549c:	4313      	orrs	r3, r2
 800549e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80054a0:	4313      	orrs	r3, r2
 80054a2:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f003 030c 	and.w	r3, r3, #12
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d114      	bne.n	80054dc <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	6812      	ldr	r2, [r2, #0]
 80054bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054c0:	f023 0302 	bic.w	r3, r3, #2
 80054c4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	7e1b      	ldrb	r3, [r3, #24]
 80054ca:	039a      	lsls	r2, r3, #14
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80054d2:	005b      	lsls	r3, r3, #1
 80054d4:	4313      	orrs	r3, r2
 80054d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80054d8:	4313      	orrs	r3, r2
 80054da:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68da      	ldr	r2, [r3, #12]
 80054e2:	4b1e      	ldr	r3, [pc, #120]	; (800555c <HAL_ADC_Init+0x3bc>)
 80054e4:	4013      	ands	r3, r2
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	6812      	ldr	r2, [r2, #0]
 80054ea:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80054ec:	430b      	orrs	r3, r1
 80054ee:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d10c      	bne.n	8005512 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fe:	f023 010f 	bic.w	r1, r3, #15
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	1e5a      	subs	r2, r3, #1
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	631a      	str	r2, [r3, #48]	; 0x30
 8005510:	e007      	b.n	8005522 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f022 020f 	bic.w	r2, r2, #15
 8005520:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552c:	f023 0303 	bic.w	r3, r3, #3
 8005530:	f043 0201 	orr.w	r2, r3, #1
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	641a      	str	r2, [r3, #64]	; 0x40
 8005538:	e00a      	b.n	8005550 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553e:	f023 0312 	bic.w	r3, r3, #18
 8005542:	f043 0210 	orr.w	r2, r3, #16
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800554a:	2301      	movs	r3, #1
 800554c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8005550:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005554:	4618      	mov	r0, r3
 8005556:	3768      	adds	r7, #104	; 0x68
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	fff0c007 	.word	0xfff0c007

08005560 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005568:	2300      	movs	r3, #0
 800556a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f003 0304 	and.w	r3, r3, #4
 8005576:	2b00      	cmp	r3, #0
 8005578:	f040 8123 	bne.w	80057c2 <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005582:	2b01      	cmp	r3, #1
 8005584:	d101      	bne.n	800558a <HAL_ADC_Start_IT+0x2a>
 8005586:	2302      	movs	r3, #2
 8005588:	e11e      	b.n	80057c8 <HAL_ADC_Start_IT+0x268>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f001 f844 	bl	8006620 <ADC_Enable>
 8005598:	4603      	mov	r3, r0
 800559a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800559c:	7bfb      	ldrb	r3, [r7, #15]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f040 810a 	bne.w	80057b8 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80055ac:	f023 0301 	bic.w	r3, r3, #1
 80055b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055c0:	d004      	beq.n	80055cc <HAL_ADC_Start_IT+0x6c>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a82      	ldr	r2, [pc, #520]	; (80057d0 <HAL_ADC_Start_IT+0x270>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d106      	bne.n	80055da <HAL_ADC_Start_IT+0x7a>
 80055cc:	4b81      	ldr	r3, [pc, #516]	; (80057d4 <HAL_ADC_Start_IT+0x274>)
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f003 031f 	and.w	r3, r3, #31
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d010      	beq.n	80055fa <HAL_ADC_Start_IT+0x9a>
 80055d8:	e005      	b.n	80055e6 <HAL_ADC_Start_IT+0x86>
 80055da:	4b7f      	ldr	r3, [pc, #508]	; (80057d8 <HAL_ADC_Start_IT+0x278>)
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f003 031f 	and.w	r3, r3, #31
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d009      	beq.n	80055fa <HAL_ADC_Start_IT+0x9a>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055ee:	d004      	beq.n	80055fa <HAL_ADC_Start_IT+0x9a>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a79      	ldr	r2, [pc, #484]	; (80057dc <HAL_ADC_Start_IT+0x27c>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d115      	bne.n	8005626 <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d036      	beq.n	8005682 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005618:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800561c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8005624:	e02d      	b.n	8005682 <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800563a:	d004      	beq.n	8005646 <HAL_ADC_Start_IT+0xe6>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a63      	ldr	r2, [pc, #396]	; (80057d0 <HAL_ADC_Start_IT+0x270>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d10a      	bne.n	800565c <HAL_ADC_Start_IT+0xfc>
 8005646:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005650:	2b00      	cmp	r3, #0
 8005652:	bf14      	ite	ne
 8005654:	2301      	movne	r3, #1
 8005656:	2300      	moveq	r3, #0
 8005658:	b2db      	uxtb	r3, r3
 800565a:	e008      	b.n	800566e <HAL_ADC_Start_IT+0x10e>
 800565c:	4b5f      	ldr	r3, [pc, #380]	; (80057dc <HAL_ADC_Start_IT+0x27c>)
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005664:	2b00      	cmp	r3, #0
 8005666:	bf14      	ite	ne
 8005668:	2301      	movne	r3, #1
 800566a:	2300      	moveq	r3, #0
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d007      	beq.n	8005682 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005676:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800567a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005686:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800568a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800568e:	d106      	bne.n	800569e <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005694:	f023 0206 	bic.w	r2, r3, #6
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	645a      	str	r2, [r3, #68]	; 0x44
 800569c:	e002      	b.n	80056a4 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	221c      	movs	r2, #28
 80056b2:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	695b      	ldr	r3, [r3, #20]
 80056b8:	2b08      	cmp	r3, #8
 80056ba:	d110      	bne.n	80056de <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	685a      	ldr	r2, [r3, #4]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f022 0204 	bic.w	r2, r2, #4
 80056ca:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	685a      	ldr	r2, [r3, #4]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f042 0208 	orr.w	r2, r2, #8
 80056da:	605a      	str	r2, [r3, #4]
          break;
 80056dc:	e008      	b.n	80056f0 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	685a      	ldr	r2, [r3, #4]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f042 020c 	orr.w	r2, r2, #12
 80056ec:	605a      	str	r2, [r3, #4]
          break;
 80056ee:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d107      	bne.n	8005708 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f022 0210 	bic.w	r2, r2, #16
 8005706:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005710:	d004      	beq.n	800571c <HAL_ADC_Start_IT+0x1bc>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a2e      	ldr	r2, [pc, #184]	; (80057d0 <HAL_ADC_Start_IT+0x270>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d106      	bne.n	800572a <HAL_ADC_Start_IT+0x1ca>
 800571c:	4b2d      	ldr	r3, [pc, #180]	; (80057d4 <HAL_ADC_Start_IT+0x274>)
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f003 031f 	and.w	r3, r3, #31
 8005724:	2b00      	cmp	r3, #0
 8005726:	d03e      	beq.n	80057a6 <HAL_ADC_Start_IT+0x246>
 8005728:	e005      	b.n	8005736 <HAL_ADC_Start_IT+0x1d6>
 800572a:	4b2b      	ldr	r3, [pc, #172]	; (80057d8 <HAL_ADC_Start_IT+0x278>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f003 031f 	and.w	r3, r3, #31
 8005732:	2b00      	cmp	r3, #0
 8005734:	d037      	beq.n	80057a6 <HAL_ADC_Start_IT+0x246>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800573e:	d004      	beq.n	800574a <HAL_ADC_Start_IT+0x1ea>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a22      	ldr	r2, [pc, #136]	; (80057d0 <HAL_ADC_Start_IT+0x270>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d106      	bne.n	8005758 <HAL_ADC_Start_IT+0x1f8>
 800574a:	4b22      	ldr	r3, [pc, #136]	; (80057d4 <HAL_ADC_Start_IT+0x274>)
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f003 031f 	and.w	r3, r3, #31
 8005752:	2b05      	cmp	r3, #5
 8005754:	d027      	beq.n	80057a6 <HAL_ADC_Start_IT+0x246>
 8005756:	e005      	b.n	8005764 <HAL_ADC_Start_IT+0x204>
 8005758:	4b1f      	ldr	r3, [pc, #124]	; (80057d8 <HAL_ADC_Start_IT+0x278>)
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f003 031f 	and.w	r3, r3, #31
 8005760:	2b05      	cmp	r3, #5
 8005762:	d020      	beq.n	80057a6 <HAL_ADC_Start_IT+0x246>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800576c:	d004      	beq.n	8005778 <HAL_ADC_Start_IT+0x218>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a17      	ldr	r2, [pc, #92]	; (80057d0 <HAL_ADC_Start_IT+0x270>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d106      	bne.n	8005786 <HAL_ADC_Start_IT+0x226>
 8005778:	4b16      	ldr	r3, [pc, #88]	; (80057d4 <HAL_ADC_Start_IT+0x274>)
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f003 031f 	and.w	r3, r3, #31
 8005780:	2b09      	cmp	r3, #9
 8005782:	d010      	beq.n	80057a6 <HAL_ADC_Start_IT+0x246>
 8005784:	e005      	b.n	8005792 <HAL_ADC_Start_IT+0x232>
 8005786:	4b14      	ldr	r3, [pc, #80]	; (80057d8 <HAL_ADC_Start_IT+0x278>)
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f003 031f 	and.w	r3, r3, #31
 800578e:	2b09      	cmp	r3, #9
 8005790:	d009      	beq.n	80057a6 <HAL_ADC_Start_IT+0x246>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800579a:	d004      	beq.n	80057a6 <HAL_ADC_Start_IT+0x246>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a0e      	ldr	r2, [pc, #56]	; (80057dc <HAL_ADC_Start_IT+0x27c>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d10f      	bne.n	80057c6 <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	689a      	ldr	r2, [r3, #8]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f042 0204 	orr.w	r2, r2, #4
 80057b4:	609a      	str	r2, [r3, #8]
 80057b6:	e006      	b.n	80057c6 <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80057c0:	e001      	b.n	80057c6 <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80057c2:	2302      	movs	r3, #2
 80057c4:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80057c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	50000100 	.word	0x50000100
 80057d4:	50000300 	.word	0x50000300
 80057d8:	50000700 	.word	0x50000700
 80057dc:	50000400 	.word	0x50000400

080057e0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
	...

080057fc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8005804:	2300      	movs	r3, #0
 8005806:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8005808:	2300      	movs	r3, #0
 800580a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 800580c:	2300      	movs	r3, #0
 800580e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0304 	and.w	r3, r3, #4
 800581a:	2b04      	cmp	r3, #4
 800581c:	d106      	bne.n	800582c <HAL_ADC_IRQHandler+0x30>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f003 0304 	and.w	r3, r3, #4
 8005828:	2b04      	cmp	r3, #4
 800582a:	d00f      	beq.n	800584c <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8005836:	2b08      	cmp	r3, #8
 8005838:	f040 80c0 	bne.w	80059bc <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f003 0308 	and.w	r3, r3, #8
 8005846:	2b08      	cmp	r3, #8
 8005848:	f040 80b8 	bne.w	80059bc <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005850:	f003 0310 	and.w	r3, r3, #16
 8005854:	2b00      	cmp	r3, #0
 8005856:	d105      	bne.n	8005864 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800586c:	d004      	beq.n	8005878 <HAL_ADC_IRQHandler+0x7c>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a95      	ldr	r2, [pc, #596]	; (8005ac8 <HAL_ADC_IRQHandler+0x2cc>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d106      	bne.n	8005886 <HAL_ADC_IRQHandler+0x8a>
 8005878:	4b94      	ldr	r3, [pc, #592]	; (8005acc <HAL_ADC_IRQHandler+0x2d0>)
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f003 031f 	and.w	r3, r3, #31
 8005880:	2b00      	cmp	r3, #0
 8005882:	d03e      	beq.n	8005902 <HAL_ADC_IRQHandler+0x106>
 8005884:	e005      	b.n	8005892 <HAL_ADC_IRQHandler+0x96>
 8005886:	4b92      	ldr	r3, [pc, #584]	; (8005ad0 <HAL_ADC_IRQHandler+0x2d4>)
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f003 031f 	and.w	r3, r3, #31
 800588e:	2b00      	cmp	r3, #0
 8005890:	d037      	beq.n	8005902 <HAL_ADC_IRQHandler+0x106>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800589a:	d004      	beq.n	80058a6 <HAL_ADC_IRQHandler+0xaa>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a89      	ldr	r2, [pc, #548]	; (8005ac8 <HAL_ADC_IRQHandler+0x2cc>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d106      	bne.n	80058b4 <HAL_ADC_IRQHandler+0xb8>
 80058a6:	4b89      	ldr	r3, [pc, #548]	; (8005acc <HAL_ADC_IRQHandler+0x2d0>)
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f003 031f 	and.w	r3, r3, #31
 80058ae:	2b05      	cmp	r3, #5
 80058b0:	d027      	beq.n	8005902 <HAL_ADC_IRQHandler+0x106>
 80058b2:	e005      	b.n	80058c0 <HAL_ADC_IRQHandler+0xc4>
 80058b4:	4b86      	ldr	r3, [pc, #536]	; (8005ad0 <HAL_ADC_IRQHandler+0x2d4>)
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f003 031f 	and.w	r3, r3, #31
 80058bc:	2b05      	cmp	r3, #5
 80058be:	d020      	beq.n	8005902 <HAL_ADC_IRQHandler+0x106>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058c8:	d004      	beq.n	80058d4 <HAL_ADC_IRQHandler+0xd8>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a7e      	ldr	r2, [pc, #504]	; (8005ac8 <HAL_ADC_IRQHandler+0x2cc>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d106      	bne.n	80058e2 <HAL_ADC_IRQHandler+0xe6>
 80058d4:	4b7d      	ldr	r3, [pc, #500]	; (8005acc <HAL_ADC_IRQHandler+0x2d0>)
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f003 031f 	and.w	r3, r3, #31
 80058dc:	2b09      	cmp	r3, #9
 80058de:	d010      	beq.n	8005902 <HAL_ADC_IRQHandler+0x106>
 80058e0:	e005      	b.n	80058ee <HAL_ADC_IRQHandler+0xf2>
 80058e2:	4b7b      	ldr	r3, [pc, #492]	; (8005ad0 <HAL_ADC_IRQHandler+0x2d4>)
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f003 031f 	and.w	r3, r3, #31
 80058ea:	2b09      	cmp	r3, #9
 80058ec:	d009      	beq.n	8005902 <HAL_ADC_IRQHandler+0x106>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058f6:	d004      	beq.n	8005902 <HAL_ADC_IRQHandler+0x106>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a75      	ldr	r2, [pc, #468]	; (8005ad4 <HAL_ADC_IRQHandler+0x2d8>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d104      	bne.n	800590c <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	613b      	str	r3, [r7, #16]
 800590a:	e00f      	b.n	800592c <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005914:	d004      	beq.n	8005920 <HAL_ADC_IRQHandler+0x124>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a6b      	ldr	r2, [pc, #428]	; (8005ac8 <HAL_ADC_IRQHandler+0x2cc>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d102      	bne.n	8005926 <HAL_ADC_IRQHandler+0x12a>
 8005920:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005924:	e000      	b.n	8005928 <HAL_ADC_IRQHandler+0x12c>
 8005926:	4b6b      	ldr	r3, [pc, #428]	; (8005ad4 <HAL_ADC_IRQHandler+0x2d8>)
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005936:	2b00      	cmp	r3, #0
 8005938:	d139      	bne.n	80059ae <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8005940:	2b00      	cmp	r3, #0
 8005942:	d134      	bne.n	80059ae <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0308 	and.w	r3, r3, #8
 800594e:	2b08      	cmp	r3, #8
 8005950:	d12d      	bne.n	80059ae <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f003 0304 	and.w	r3, r3, #4
 800595c:	2b00      	cmp	r3, #0
 800595e:	d11a      	bne.n	8005996 <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	685a      	ldr	r2, [r3, #4]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f022 020c 	bic.w	r2, r2, #12
 800596e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005974:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005980:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d112      	bne.n	80059ae <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598c:	f043 0201 	orr.w	r2, r3, #1
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	641a      	str	r2, [r3, #64]	; 0x40
 8005994:	e00b      	b.n	80059ae <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599a:	f043 0210 	orr.w	r2, r3, #16
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a6:	f043 0201 	orr.w	r2, r3, #1
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7ff fbd8 	bl	8005164 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	220c      	movs	r2, #12
 80059ba:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0320 	and.w	r3, r3, #32
 80059c6:	2b20      	cmp	r3, #32
 80059c8:	d106      	bne.n	80059d8 <HAL_ADC_IRQHandler+0x1dc>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f003 0320 	and.w	r3, r3, #32
 80059d4:	2b20      	cmp	r3, #32
 80059d6:	d00f      	beq.n	80059f8 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 80059e2:	2b40      	cmp	r3, #64	; 0x40
 80059e4:	f040 813c 	bne.w	8005c60 <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f2:	2b40      	cmp	r3, #64	; 0x40
 80059f4:	f040 8134 	bne.w	8005c60 <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a0c:	d004      	beq.n	8005a18 <HAL_ADC_IRQHandler+0x21c>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a2d      	ldr	r2, [pc, #180]	; (8005ac8 <HAL_ADC_IRQHandler+0x2cc>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d106      	bne.n	8005a26 <HAL_ADC_IRQHandler+0x22a>
 8005a18:	4b2c      	ldr	r3, [pc, #176]	; (8005acc <HAL_ADC_IRQHandler+0x2d0>)
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f003 031f 	and.w	r3, r3, #31
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d03e      	beq.n	8005aa2 <HAL_ADC_IRQHandler+0x2a6>
 8005a24:	e005      	b.n	8005a32 <HAL_ADC_IRQHandler+0x236>
 8005a26:	4b2a      	ldr	r3, [pc, #168]	; (8005ad0 <HAL_ADC_IRQHandler+0x2d4>)
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f003 031f 	and.w	r3, r3, #31
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d037      	beq.n	8005aa2 <HAL_ADC_IRQHandler+0x2a6>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a3a:	d004      	beq.n	8005a46 <HAL_ADC_IRQHandler+0x24a>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a21      	ldr	r2, [pc, #132]	; (8005ac8 <HAL_ADC_IRQHandler+0x2cc>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d106      	bne.n	8005a54 <HAL_ADC_IRQHandler+0x258>
 8005a46:	4b21      	ldr	r3, [pc, #132]	; (8005acc <HAL_ADC_IRQHandler+0x2d0>)
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f003 031f 	and.w	r3, r3, #31
 8005a4e:	2b05      	cmp	r3, #5
 8005a50:	d027      	beq.n	8005aa2 <HAL_ADC_IRQHandler+0x2a6>
 8005a52:	e005      	b.n	8005a60 <HAL_ADC_IRQHandler+0x264>
 8005a54:	4b1e      	ldr	r3, [pc, #120]	; (8005ad0 <HAL_ADC_IRQHandler+0x2d4>)
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f003 031f 	and.w	r3, r3, #31
 8005a5c:	2b05      	cmp	r3, #5
 8005a5e:	d020      	beq.n	8005aa2 <HAL_ADC_IRQHandler+0x2a6>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a68:	d004      	beq.n	8005a74 <HAL_ADC_IRQHandler+0x278>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a16      	ldr	r2, [pc, #88]	; (8005ac8 <HAL_ADC_IRQHandler+0x2cc>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d106      	bne.n	8005a82 <HAL_ADC_IRQHandler+0x286>
 8005a74:	4b15      	ldr	r3, [pc, #84]	; (8005acc <HAL_ADC_IRQHandler+0x2d0>)
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f003 031f 	and.w	r3, r3, #31
 8005a7c:	2b09      	cmp	r3, #9
 8005a7e:	d010      	beq.n	8005aa2 <HAL_ADC_IRQHandler+0x2a6>
 8005a80:	e005      	b.n	8005a8e <HAL_ADC_IRQHandler+0x292>
 8005a82:	4b13      	ldr	r3, [pc, #76]	; (8005ad0 <HAL_ADC_IRQHandler+0x2d4>)
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f003 031f 	and.w	r3, r3, #31
 8005a8a:	2b09      	cmp	r3, #9
 8005a8c:	d009      	beq.n	8005aa2 <HAL_ADC_IRQHandler+0x2a6>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a96:	d004      	beq.n	8005aa2 <HAL_ADC_IRQHandler+0x2a6>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a0d      	ldr	r2, [pc, #52]	; (8005ad4 <HAL_ADC_IRQHandler+0x2d8>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d104      	bne.n	8005aac <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	613b      	str	r3, [r7, #16]
 8005aaa:	e018      	b.n	8005ade <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ab4:	d004      	beq.n	8005ac0 <HAL_ADC_IRQHandler+0x2c4>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a03      	ldr	r2, [pc, #12]	; (8005ac8 <HAL_ADC_IRQHandler+0x2cc>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d10b      	bne.n	8005ad8 <HAL_ADC_IRQHandler+0x2dc>
 8005ac0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005ac4:	e009      	b.n	8005ada <HAL_ADC_IRQHandler+0x2de>
 8005ac6:	bf00      	nop
 8005ac8:	50000100 	.word	0x50000100
 8005acc:	50000300 	.word	0x50000300
 8005ad0:	50000700 	.word	0x50000700
 8005ad4:	50000400 	.word	0x50000400
 8005ad8:	4b9d      	ldr	r3, [pc, #628]	; (8005d50 <HAL_ADC_IRQHandler+0x554>)
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ae4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	f040 80b2 	bne.w	8005c52 <HAL_ADC_IRQHandler+0x456>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00d      	beq.n	8005b14 <HAL_ADC_IRQHandler+0x318>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	f040 80a5 	bne.w	8005c52 <HAL_ADC_IRQHandler+0x456>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f040 809f 	bne.w	8005c52 <HAL_ADC_IRQHandler+0x456>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b1e:	2b40      	cmp	r3, #64	; 0x40
 8005b20:	f040 8097 	bne.w	8005c52 <HAL_ADC_IRQHandler+0x456>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b2c:	d004      	beq.n	8005b38 <HAL_ADC_IRQHandler+0x33c>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a88      	ldr	r2, [pc, #544]	; (8005d54 <HAL_ADC_IRQHandler+0x558>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d106      	bne.n	8005b46 <HAL_ADC_IRQHandler+0x34a>
 8005b38:	4b87      	ldr	r3, [pc, #540]	; (8005d58 <HAL_ADC_IRQHandler+0x55c>)
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f003 031f 	and.w	r3, r3, #31
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d03e      	beq.n	8005bc2 <HAL_ADC_IRQHandler+0x3c6>
 8005b44:	e005      	b.n	8005b52 <HAL_ADC_IRQHandler+0x356>
 8005b46:	4b85      	ldr	r3, [pc, #532]	; (8005d5c <HAL_ADC_IRQHandler+0x560>)
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f003 031f 	and.w	r3, r3, #31
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d037      	beq.n	8005bc2 <HAL_ADC_IRQHandler+0x3c6>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b5a:	d004      	beq.n	8005b66 <HAL_ADC_IRQHandler+0x36a>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a7c      	ldr	r2, [pc, #496]	; (8005d54 <HAL_ADC_IRQHandler+0x558>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d106      	bne.n	8005b74 <HAL_ADC_IRQHandler+0x378>
 8005b66:	4b7c      	ldr	r3, [pc, #496]	; (8005d58 <HAL_ADC_IRQHandler+0x55c>)
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f003 031f 	and.w	r3, r3, #31
 8005b6e:	2b06      	cmp	r3, #6
 8005b70:	d027      	beq.n	8005bc2 <HAL_ADC_IRQHandler+0x3c6>
 8005b72:	e005      	b.n	8005b80 <HAL_ADC_IRQHandler+0x384>
 8005b74:	4b79      	ldr	r3, [pc, #484]	; (8005d5c <HAL_ADC_IRQHandler+0x560>)
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f003 031f 	and.w	r3, r3, #31
 8005b7c:	2b06      	cmp	r3, #6
 8005b7e:	d020      	beq.n	8005bc2 <HAL_ADC_IRQHandler+0x3c6>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b88:	d004      	beq.n	8005b94 <HAL_ADC_IRQHandler+0x398>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a71      	ldr	r2, [pc, #452]	; (8005d54 <HAL_ADC_IRQHandler+0x558>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d106      	bne.n	8005ba2 <HAL_ADC_IRQHandler+0x3a6>
 8005b94:	4b70      	ldr	r3, [pc, #448]	; (8005d58 <HAL_ADC_IRQHandler+0x55c>)
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f003 031f 	and.w	r3, r3, #31
 8005b9c:	2b07      	cmp	r3, #7
 8005b9e:	d010      	beq.n	8005bc2 <HAL_ADC_IRQHandler+0x3c6>
 8005ba0:	e005      	b.n	8005bae <HAL_ADC_IRQHandler+0x3b2>
 8005ba2:	4b6e      	ldr	r3, [pc, #440]	; (8005d5c <HAL_ADC_IRQHandler+0x560>)
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f003 031f 	and.w	r3, r3, #31
 8005baa:	2b07      	cmp	r3, #7
 8005bac:	d009      	beq.n	8005bc2 <HAL_ADC_IRQHandler+0x3c6>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005bb6:	d004      	beq.n	8005bc2 <HAL_ADC_IRQHandler+0x3c6>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a64      	ldr	r2, [pc, #400]	; (8005d50 <HAL_ADC_IRQHandler+0x554>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d104      	bne.n	8005bcc <HAL_ADC_IRQHandler+0x3d0>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	60fb      	str	r3, [r7, #12]
 8005bca:	e00f      	b.n	8005bec <HAL_ADC_IRQHandler+0x3f0>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005bd4:	d004      	beq.n	8005be0 <HAL_ADC_IRQHandler+0x3e4>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a5e      	ldr	r2, [pc, #376]	; (8005d54 <HAL_ADC_IRQHandler+0x558>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d102      	bne.n	8005be6 <HAL_ADC_IRQHandler+0x3ea>
 8005be0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005be4:	e000      	b.n	8005be8 <HAL_ADC_IRQHandler+0x3ec>
 8005be6:	4b5a      	ldr	r3, [pc, #360]	; (8005d50 <HAL_ADC_IRQHandler+0x554>)
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d12d      	bne.n	8005c52 <HAL_ADC_IRQHandler+0x456>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f003 0308 	and.w	r3, r3, #8
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d11a      	bne.n	8005c3a <HAL_ADC_IRQHandler+0x43e>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	685a      	ldr	r2, [r3, #4]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c12:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c18:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d112      	bne.n	8005c52 <HAL_ADC_IRQHandler+0x456>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c30:	f043 0201 	orr.w	r2, r3, #1
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	641a      	str	r2, [r3, #64]	; 0x40
 8005c38:	e00b      	b.n	8005c52 <HAL_ADC_IRQHandler+0x456>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3e:	f043 0210 	orr.w	r2, r3, #16
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4a:	f043 0201 	orr.w	r2, r3, #1
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f8de 	bl	8005e14 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2260      	movs	r2, #96	; 0x60
 8005c5e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c6a:	2b80      	cmp	r3, #128	; 0x80
 8005c6c:	d113      	bne.n	8005c96 <HAL_ADC_IRQHandler+0x49a>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c78:	2b80      	cmp	r3, #128	; 0x80
 8005c7a:	d10c      	bne.n	8005c96 <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c80:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f7ff fa75 	bl	8005178 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2280      	movs	r2, #128	; 0x80
 8005c94:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ca4:	d115      	bne.n	8005cd2 <HAL_ADC_IRQHandler+0x4d6>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cb4:	d10d      	bne.n	8005cd2 <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 f8ba 	bl	8005e3c <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cd0:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ce0:	d115      	bne.n	8005d0e <HAL_ADC_IRQHandler+0x512>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cf0:	d10d      	bne.n	8005d0e <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f8a6 	bl	8005e50 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d0c:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0310 	and.w	r3, r3, #16
 8005d18:	2b10      	cmp	r3, #16
 8005d1a:	d151      	bne.n	8005dc0 <HAL_ADC_IRQHandler+0x5c4>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	f003 0310 	and.w	r3, r3, #16
 8005d26:	2b10      	cmp	r3, #16
 8005d28:	d14a      	bne.n	8005dc0 <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d102      	bne.n	8005d38 <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 8005d32:	2301      	movs	r3, #1
 8005d34:	617b      	str	r3, [r7, #20]
 8005d36:	e02d      	b.n	8005d94 <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d40:	d004      	beq.n	8005d4c <HAL_ADC_IRQHandler+0x550>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a03      	ldr	r2, [pc, #12]	; (8005d54 <HAL_ADC_IRQHandler+0x558>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d109      	bne.n	8005d60 <HAL_ADC_IRQHandler+0x564>
 8005d4c:	4b02      	ldr	r3, [pc, #8]	; (8005d58 <HAL_ADC_IRQHandler+0x55c>)
 8005d4e:	e008      	b.n	8005d62 <HAL_ADC_IRQHandler+0x566>
 8005d50:	50000400 	.word	0x50000400
 8005d54:	50000100 	.word	0x50000100
 8005d58:	50000300 	.word	0x50000300
 8005d5c:	50000700 	.word	0x50000700
 8005d60:	4b2b      	ldr	r3, [pc, #172]	; (8005e10 <HAL_ADC_IRQHandler+0x614>)
 8005d62:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	f003 031f 	and.w	r3, r3, #31
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d109      	bne.n	8005d84 <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	f003 0301 	and.w	r3, r3, #1
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d10a      	bne.n	8005d94 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8005d7e:	2301      	movs	r3, #1
 8005d80:	617b      	str	r3, [r7, #20]
 8005d82:	e007      	b.n	8005d94 <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d001      	beq.n	8005d94 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8005d90:	2301      	movs	r3, #1
 8005d92:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d10e      	bne.n	8005db8 <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005daa:	f043 0202 	orr.w	r2, r3, #2
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f7ff f9ea 	bl	800518c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2210      	movs	r2, #16
 8005dbe:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dce:	d11b      	bne.n	8005e08 <HAL_ADC_IRQHandler+0x60c>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dde:	d113      	bne.n	8005e08 <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df0:	f043 0208 	orr.w	r2, r3, #8
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e00:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f810 	bl	8005e28 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8005e08:	bf00      	nop
 8005e0a:	3718      	adds	r7, #24
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	50000700 	.word	0x50000700

08005e14 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8005e1c:	bf00      	nop
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b09b      	sub	sp, #108	; 0x6c
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8005e74:	2300      	movs	r3, #0
 8005e76:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d101      	bne.n	8005e86 <HAL_ADC_ConfigChannel+0x22>
 8005e82:	2302      	movs	r3, #2
 8005e84:	e2cb      	b.n	800641e <HAL_ADC_ConfigChannel+0x5ba>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	f003 0304 	and.w	r3, r3, #4
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f040 82af 	bne.w	80063fc <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	2b04      	cmp	r3, #4
 8005ea4:	d81c      	bhi.n	8005ee0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	005b      	lsls	r3, r3, #1
 8005eb4:	4413      	add	r3, r2
 8005eb6:	005b      	lsls	r3, r3, #1
 8005eb8:	461a      	mov	r2, r3
 8005eba:	231f      	movs	r3, #31
 8005ebc:	4093      	lsls	r3, r2
 8005ebe:	43db      	mvns	r3, r3
 8005ec0:	4019      	ands	r1, r3
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	6818      	ldr	r0, [r3, #0]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	685a      	ldr	r2, [r3, #4]
 8005eca:	4613      	mov	r3, r2
 8005ecc:	005b      	lsls	r3, r3, #1
 8005ece:	4413      	add	r3, r2
 8005ed0:	005b      	lsls	r3, r3, #1
 8005ed2:	fa00 f203 	lsl.w	r2, r0, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	631a      	str	r2, [r3, #48]	; 0x30
 8005ede:	e063      	b.n	8005fa8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	2b09      	cmp	r3, #9
 8005ee6:	d81e      	bhi.n	8005f26 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	685a      	ldr	r2, [r3, #4]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	005b      	lsls	r3, r3, #1
 8005ef6:	4413      	add	r3, r2
 8005ef8:	005b      	lsls	r3, r3, #1
 8005efa:	3b1e      	subs	r3, #30
 8005efc:	221f      	movs	r2, #31
 8005efe:	fa02 f303 	lsl.w	r3, r2, r3
 8005f02:	43db      	mvns	r3, r3
 8005f04:	4019      	ands	r1, r3
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	6818      	ldr	r0, [r3, #0]
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	685a      	ldr	r2, [r3, #4]
 8005f0e:	4613      	mov	r3, r2
 8005f10:	005b      	lsls	r3, r3, #1
 8005f12:	4413      	add	r3, r2
 8005f14:	005b      	lsls	r3, r3, #1
 8005f16:	3b1e      	subs	r3, #30
 8005f18:	fa00 f203 	lsl.w	r2, r0, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	430a      	orrs	r2, r1
 8005f22:	635a      	str	r2, [r3, #52]	; 0x34
 8005f24:	e040      	b.n	8005fa8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	2b0e      	cmp	r3, #14
 8005f2c:	d81e      	bhi.n	8005f6c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	4613      	mov	r3, r2
 8005f3a:	005b      	lsls	r3, r3, #1
 8005f3c:	4413      	add	r3, r2
 8005f3e:	005b      	lsls	r3, r3, #1
 8005f40:	3b3c      	subs	r3, #60	; 0x3c
 8005f42:	221f      	movs	r2, #31
 8005f44:	fa02 f303 	lsl.w	r3, r2, r3
 8005f48:	43db      	mvns	r3, r3
 8005f4a:	4019      	ands	r1, r3
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	6818      	ldr	r0, [r3, #0]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	685a      	ldr	r2, [r3, #4]
 8005f54:	4613      	mov	r3, r2
 8005f56:	005b      	lsls	r3, r3, #1
 8005f58:	4413      	add	r3, r2
 8005f5a:	005b      	lsls	r3, r3, #1
 8005f5c:	3b3c      	subs	r3, #60	; 0x3c
 8005f5e:	fa00 f203 	lsl.w	r2, r0, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	430a      	orrs	r2, r1
 8005f68:	639a      	str	r2, [r3, #56]	; 0x38
 8005f6a:	e01d      	b.n	8005fa8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	685a      	ldr	r2, [r3, #4]
 8005f76:	4613      	mov	r3, r2
 8005f78:	005b      	lsls	r3, r3, #1
 8005f7a:	4413      	add	r3, r2
 8005f7c:	005b      	lsls	r3, r3, #1
 8005f7e:	3b5a      	subs	r3, #90	; 0x5a
 8005f80:	221f      	movs	r2, #31
 8005f82:	fa02 f303 	lsl.w	r3, r2, r3
 8005f86:	43db      	mvns	r3, r3
 8005f88:	4019      	ands	r1, r3
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	6818      	ldr	r0, [r3, #0]
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	685a      	ldr	r2, [r3, #4]
 8005f92:	4613      	mov	r3, r2
 8005f94:	005b      	lsls	r3, r3, #1
 8005f96:	4413      	add	r3, r2
 8005f98:	005b      	lsls	r3, r3, #1
 8005f9a:	3b5a      	subs	r3, #90	; 0x5a
 8005f9c:	fa00 f203 	lsl.w	r2, r0, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	430a      	orrs	r2, r1
 8005fa6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f003 030c 	and.w	r3, r3, #12
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f040 80e5 	bne.w	8006182 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2b09      	cmp	r3, #9
 8005fbe:	d91c      	bls.n	8005ffa <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	6999      	ldr	r1, [r3, #24]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	005b      	lsls	r3, r3, #1
 8005fce:	4413      	add	r3, r2
 8005fd0:	3b1e      	subs	r3, #30
 8005fd2:	2207      	movs	r2, #7
 8005fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd8:	43db      	mvns	r3, r3
 8005fda:	4019      	ands	r1, r3
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	6898      	ldr	r0, [r3, #8]
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	005b      	lsls	r3, r3, #1
 8005fe8:	4413      	add	r3, r2
 8005fea:	3b1e      	subs	r3, #30
 8005fec:	fa00 f203 	lsl.w	r2, r0, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	430a      	orrs	r2, r1
 8005ff6:	619a      	str	r2, [r3, #24]
 8005ff8:	e019      	b.n	800602e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	6959      	ldr	r1, [r3, #20]
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	4613      	mov	r3, r2
 8006006:	005b      	lsls	r3, r3, #1
 8006008:	4413      	add	r3, r2
 800600a:	2207      	movs	r2, #7
 800600c:	fa02 f303 	lsl.w	r3, r2, r3
 8006010:	43db      	mvns	r3, r3
 8006012:	4019      	ands	r1, r3
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	6898      	ldr	r0, [r3, #8]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	4613      	mov	r3, r2
 800601e:	005b      	lsls	r3, r3, #1
 8006020:	4413      	add	r3, r2
 8006022:	fa00 f203 	lsl.w	r2, r0, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	430a      	orrs	r2, r1
 800602c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	695a      	ldr	r2, [r3, #20]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	08db      	lsrs	r3, r3, #3
 800603a:	f003 0303 	and.w	r3, r3, #3
 800603e:	005b      	lsls	r3, r3, #1
 8006040:	fa02 f303 	lsl.w	r3, r2, r3
 8006044:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	3b01      	subs	r3, #1
 800604c:	2b03      	cmp	r3, #3
 800604e:	d84f      	bhi.n	80060f0 <HAL_ADC_ConfigChannel+0x28c>
 8006050:	a201      	add	r2, pc, #4	; (adr r2, 8006058 <HAL_ADC_ConfigChannel+0x1f4>)
 8006052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006056:	bf00      	nop
 8006058:	08006069 	.word	0x08006069
 800605c:	0800608b 	.word	0x0800608b
 8006060:	080060ad 	.word	0x080060ad
 8006064:	080060cf 	.word	0x080060cf
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800606e:	4b9f      	ldr	r3, [pc, #636]	; (80062ec <HAL_ADC_ConfigChannel+0x488>)
 8006070:	4013      	ands	r3, r2
 8006072:	683a      	ldr	r2, [r7, #0]
 8006074:	6812      	ldr	r2, [r2, #0]
 8006076:	0691      	lsls	r1, r2, #26
 8006078:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800607a:	430a      	orrs	r2, r1
 800607c:	431a      	orrs	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006086:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8006088:	e07e      	b.n	8006188 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006090:	4b96      	ldr	r3, [pc, #600]	; (80062ec <HAL_ADC_ConfigChannel+0x488>)
 8006092:	4013      	ands	r3, r2
 8006094:	683a      	ldr	r2, [r7, #0]
 8006096:	6812      	ldr	r2, [r2, #0]
 8006098:	0691      	lsls	r1, r2, #26
 800609a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800609c:	430a      	orrs	r2, r1
 800609e:	431a      	orrs	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80060a8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80060aa:	e06d      	b.n	8006188 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80060b2:	4b8e      	ldr	r3, [pc, #568]	; (80062ec <HAL_ADC_ConfigChannel+0x488>)
 80060b4:	4013      	ands	r3, r2
 80060b6:	683a      	ldr	r2, [r7, #0]
 80060b8:	6812      	ldr	r2, [r2, #0]
 80060ba:	0691      	lsls	r1, r2, #26
 80060bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80060be:	430a      	orrs	r2, r1
 80060c0:	431a      	orrs	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80060ca:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80060cc:	e05c      	b.n	8006188 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80060d4:	4b85      	ldr	r3, [pc, #532]	; (80062ec <HAL_ADC_ConfigChannel+0x488>)
 80060d6:	4013      	ands	r3, r2
 80060d8:	683a      	ldr	r2, [r7, #0]
 80060da:	6812      	ldr	r2, [r2, #0]
 80060dc:	0691      	lsls	r1, r2, #26
 80060de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80060e0:	430a      	orrs	r2, r1
 80060e2:	431a      	orrs	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80060ec:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80060ee:	e04b      	b.n	8006188 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	069b      	lsls	r3, r3, #26
 8006100:	429a      	cmp	r2, r3
 8006102:	d107      	bne.n	8006114 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006112:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800611a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	069b      	lsls	r3, r3, #26
 8006124:	429a      	cmp	r2, r3
 8006126:	d107      	bne.n	8006138 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006136:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800613e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	069b      	lsls	r3, r3, #26
 8006148:	429a      	cmp	r2, r3
 800614a:	d107      	bne.n	800615c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800615a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006162:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	069b      	lsls	r3, r3, #26
 800616c:	429a      	cmp	r2, r3
 800616e:	d10a      	bne.n	8006186 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800617e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8006180:	e001      	b.n	8006186 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8006182:	bf00      	nop
 8006184:	e000      	b.n	8006188 <HAL_ADC_ConfigChannel+0x324>
      break;
 8006186:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	f003 0303 	and.w	r3, r3, #3
 8006192:	2b01      	cmp	r3, #1
 8006194:	d108      	bne.n	80061a8 <HAL_ADC_ConfigChannel+0x344>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0301 	and.w	r3, r3, #1
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d101      	bne.n	80061a8 <HAL_ADC_ConfigChannel+0x344>
 80061a4:	2301      	movs	r3, #1
 80061a6:	e000      	b.n	80061aa <HAL_ADC_ConfigChannel+0x346>
 80061a8:	2300      	movs	r3, #0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	f040 8131 	bne.w	8006412 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d00f      	beq.n	80061d8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2201      	movs	r2, #1
 80061c6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ca:	43da      	mvns	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	400a      	ands	r2, r1
 80061d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80061d6:	e049      	b.n	800626c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2201      	movs	r2, #1
 80061e6:	409a      	lsls	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	430a      	orrs	r2, r1
 80061ee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2b09      	cmp	r3, #9
 80061f8:	d91c      	bls.n	8006234 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	6999      	ldr	r1, [r3, #24]
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	4613      	mov	r3, r2
 8006206:	005b      	lsls	r3, r3, #1
 8006208:	4413      	add	r3, r2
 800620a:	3b1b      	subs	r3, #27
 800620c:	2207      	movs	r2, #7
 800620e:	fa02 f303 	lsl.w	r3, r2, r3
 8006212:	43db      	mvns	r3, r3
 8006214:	4019      	ands	r1, r3
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	6898      	ldr	r0, [r3, #8]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	4613      	mov	r3, r2
 8006220:	005b      	lsls	r3, r3, #1
 8006222:	4413      	add	r3, r2
 8006224:	3b1b      	subs	r3, #27
 8006226:	fa00 f203 	lsl.w	r2, r0, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	430a      	orrs	r2, r1
 8006230:	619a      	str	r2, [r3, #24]
 8006232:	e01b      	b.n	800626c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6959      	ldr	r1, [r3, #20]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	1c5a      	adds	r2, r3, #1
 8006240:	4613      	mov	r3, r2
 8006242:	005b      	lsls	r3, r3, #1
 8006244:	4413      	add	r3, r2
 8006246:	2207      	movs	r2, #7
 8006248:	fa02 f303 	lsl.w	r3, r2, r3
 800624c:	43db      	mvns	r3, r3
 800624e:	4019      	ands	r1, r3
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	6898      	ldr	r0, [r3, #8]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	1c5a      	adds	r2, r3, #1
 800625a:	4613      	mov	r3, r2
 800625c:	005b      	lsls	r3, r3, #1
 800625e:	4413      	add	r3, r2
 8006260:	fa00 f203 	lsl.w	r2, r0, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	430a      	orrs	r2, r1
 800626a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006274:	d004      	beq.n	8006280 <HAL_ADC_ConfigChannel+0x41c>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a1d      	ldr	r2, [pc, #116]	; (80062f0 <HAL_ADC_ConfigChannel+0x48c>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d101      	bne.n	8006284 <HAL_ADC_ConfigChannel+0x420>
 8006280:	4b1c      	ldr	r3, [pc, #112]	; (80062f4 <HAL_ADC_ConfigChannel+0x490>)
 8006282:	e000      	b.n	8006286 <HAL_ADC_ConfigChannel+0x422>
 8006284:	4b1c      	ldr	r3, [pc, #112]	; (80062f8 <HAL_ADC_ConfigChannel+0x494>)
 8006286:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2b10      	cmp	r3, #16
 800628e:	d105      	bne.n	800629c <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8006290:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006298:	2b00      	cmp	r3, #0
 800629a:	d015      	beq.n	80062c8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80062a0:	2b11      	cmp	r3, #17
 80062a2:	d105      	bne.n	80062b0 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80062a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00b      	beq.n	80062c8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80062b4:	2b12      	cmp	r3, #18
 80062b6:	f040 80ac 	bne.w	8006412 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80062ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f040 80a5 	bne.w	8006412 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062d0:	d102      	bne.n	80062d8 <HAL_ADC_ConfigChannel+0x474>
 80062d2:	4b07      	ldr	r3, [pc, #28]	; (80062f0 <HAL_ADC_ConfigChannel+0x48c>)
 80062d4:	60fb      	str	r3, [r7, #12]
 80062d6:	e023      	b.n	8006320 <HAL_ADC_ConfigChannel+0x4bc>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a04      	ldr	r2, [pc, #16]	; (80062f0 <HAL_ADC_ConfigChannel+0x48c>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d10c      	bne.n	80062fc <HAL_ADC_ConfigChannel+0x498>
 80062e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80062e6:	60fb      	str	r3, [r7, #12]
 80062e8:	e01a      	b.n	8006320 <HAL_ADC_ConfigChannel+0x4bc>
 80062ea:	bf00      	nop
 80062ec:	83fff000 	.word	0x83fff000
 80062f0:	50000100 	.word	0x50000100
 80062f4:	50000300 	.word	0x50000300
 80062f8:	50000700 	.word	0x50000700
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a4a      	ldr	r2, [pc, #296]	; (800642c <HAL_ADC_ConfigChannel+0x5c8>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d102      	bne.n	800630c <HAL_ADC_ConfigChannel+0x4a8>
 8006306:	4b4a      	ldr	r3, [pc, #296]	; (8006430 <HAL_ADC_ConfigChannel+0x5cc>)
 8006308:	60fb      	str	r3, [r7, #12]
 800630a:	e009      	b.n	8006320 <HAL_ADC_ConfigChannel+0x4bc>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a47      	ldr	r2, [pc, #284]	; (8006430 <HAL_ADC_ConfigChannel+0x5cc>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d102      	bne.n	800631c <HAL_ADC_ConfigChannel+0x4b8>
 8006316:	4b45      	ldr	r3, [pc, #276]	; (800642c <HAL_ADC_ConfigChannel+0x5c8>)
 8006318:	60fb      	str	r3, [r7, #12]
 800631a:	e001      	b.n	8006320 <HAL_ADC_ConfigChannel+0x4bc>
 800631c:	2300      	movs	r3, #0
 800631e:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f003 0303 	and.w	r3, r3, #3
 800632a:	2b01      	cmp	r3, #1
 800632c:	d108      	bne.n	8006340 <HAL_ADC_ConfigChannel+0x4dc>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0301 	and.w	r3, r3, #1
 8006338:	2b01      	cmp	r3, #1
 800633a:	d101      	bne.n	8006340 <HAL_ADC_ConfigChannel+0x4dc>
 800633c:	2301      	movs	r3, #1
 800633e:	e000      	b.n	8006342 <HAL_ADC_ConfigChannel+0x4de>
 8006340:	2300      	movs	r3, #0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d150      	bne.n	80063e8 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8006346:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8006348:	2b00      	cmp	r3, #0
 800634a:	d010      	beq.n	800636e <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f003 0303 	and.w	r3, r3, #3
 8006354:	2b01      	cmp	r3, #1
 8006356:	d107      	bne.n	8006368 <HAL_ADC_ConfigChannel+0x504>
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0301 	and.w	r3, r3, #1
 8006360:	2b01      	cmp	r3, #1
 8006362:	d101      	bne.n	8006368 <HAL_ADC_ConfigChannel+0x504>
 8006364:	2301      	movs	r3, #1
 8006366:	e000      	b.n	800636a <HAL_ADC_ConfigChannel+0x506>
 8006368:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800636a:	2b00      	cmp	r3, #0
 800636c:	d13c      	bne.n	80063e8 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2b10      	cmp	r3, #16
 8006374:	d11d      	bne.n	80063b2 <HAL_ADC_ConfigChannel+0x54e>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800637e:	d118      	bne.n	80063b2 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8006380:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006388:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800638a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800638c:	4b29      	ldr	r3, [pc, #164]	; (8006434 <HAL_ADC_ConfigChannel+0x5d0>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a29      	ldr	r2, [pc, #164]	; (8006438 <HAL_ADC_ConfigChannel+0x5d4>)
 8006392:	fba2 2303 	umull	r2, r3, r2, r3
 8006396:	0c9a      	lsrs	r2, r3, #18
 8006398:	4613      	mov	r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	4413      	add	r3, r2
 800639e:	005b      	lsls	r3, r3, #1
 80063a0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80063a2:	e002      	b.n	80063aa <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	3b01      	subs	r3, #1
 80063a8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1f9      	bne.n	80063a4 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80063b0:	e02e      	b.n	8006410 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2b11      	cmp	r3, #17
 80063b8:	d10b      	bne.n	80063d2 <HAL_ADC_ConfigChannel+0x56e>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063c2:	d106      	bne.n	80063d2 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80063c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80063cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063ce:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80063d0:	e01e      	b.n	8006410 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b12      	cmp	r3, #18
 80063d8:	d11a      	bne.n	8006410 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80063da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80063e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063e4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80063e6:	e013      	b.n	8006410 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ec:	f043 0220 	orr.w	r2, r3, #32
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80063fa:	e00a      	b.n	8006412 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006400:	f043 0220 	orr.w	r2, r3, #32
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800640e:	e000      	b.n	8006412 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8006410:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800641a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800641e:	4618      	mov	r0, r3
 8006420:	376c      	adds	r7, #108	; 0x6c
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	50000400 	.word	0x50000400
 8006430:	50000500 	.word	0x50000500
 8006434:	2000024c 	.word	0x2000024c
 8006438:	431bde83 	.word	0x431bde83

0800643c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800643c:	b480      	push	{r7}
 800643e:	b099      	sub	sp, #100	; 0x64
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006446:	2300      	movs	r3, #0
 8006448:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006454:	d102      	bne.n	800645c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8006456:	4b6d      	ldr	r3, [pc, #436]	; (800660c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8006458:	60bb      	str	r3, [r7, #8]
 800645a:	e01a      	b.n	8006492 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a6a      	ldr	r2, [pc, #424]	; (800660c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d103      	bne.n	800646e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8006466:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800646a:	60bb      	str	r3, [r7, #8]
 800646c:	e011      	b.n	8006492 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a67      	ldr	r2, [pc, #412]	; (8006610 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d102      	bne.n	800647e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006478:	4b66      	ldr	r3, [pc, #408]	; (8006614 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800647a:	60bb      	str	r3, [r7, #8]
 800647c:	e009      	b.n	8006492 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a64      	ldr	r2, [pc, #400]	; (8006614 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d102      	bne.n	800648e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006488:	4b61      	ldr	r3, [pc, #388]	; (8006610 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800648a:	60bb      	str	r3, [r7, #8]
 800648c:	e001      	b.n	8006492 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800648e:	2300      	movs	r3, #0
 8006490:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d101      	bne.n	800649c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e0b0      	b.n	80065fe <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d101      	bne.n	80064aa <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80064a6:	2302      	movs	r3, #2
 80064a8:	e0a9      	b.n	80065fe <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f003 0304 	and.w	r3, r3, #4
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f040 808d 	bne.w	80065dc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f003 0304 	and.w	r3, r3, #4
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f040 8086 	bne.w	80065dc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064d8:	d004      	beq.n	80064e4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a4b      	ldr	r2, [pc, #300]	; (800660c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d101      	bne.n	80064e8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80064e4:	4b4c      	ldr	r3, [pc, #304]	; (8006618 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80064e6:	e000      	b.n	80064ea <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80064e8:	4b4c      	ldr	r3, [pc, #304]	; (800661c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80064ea:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d040      	beq.n	8006576 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80064f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	6859      	ldr	r1, [r3, #4]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006506:	035b      	lsls	r3, r3, #13
 8006508:	430b      	orrs	r3, r1
 800650a:	431a      	orrs	r2, r3
 800650c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800650e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f003 0303 	and.w	r3, r3, #3
 800651a:	2b01      	cmp	r3, #1
 800651c:	d108      	bne.n	8006530 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0301 	and.w	r3, r3, #1
 8006528:	2b01      	cmp	r3, #1
 800652a:	d101      	bne.n	8006530 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800652c:	2301      	movs	r3, #1
 800652e:	e000      	b.n	8006532 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8006530:	2300      	movs	r3, #0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d15c      	bne.n	80065f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f003 0303 	and.w	r3, r3, #3
 800653e:	2b01      	cmp	r3, #1
 8006540:	d107      	bne.n	8006552 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 0301 	and.w	r3, r3, #1
 800654a:	2b01      	cmp	r3, #1
 800654c:	d101      	bne.n	8006552 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800654e:	2301      	movs	r3, #1
 8006550:	e000      	b.n	8006554 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8006552:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8006554:	2b00      	cmp	r3, #0
 8006556:	d14b      	bne.n	80065f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8006558:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006560:	f023 030f 	bic.w	r3, r3, #15
 8006564:	683a      	ldr	r2, [r7, #0]
 8006566:	6811      	ldr	r1, [r2, #0]
 8006568:	683a      	ldr	r2, [r7, #0]
 800656a:	6892      	ldr	r2, [r2, #8]
 800656c:	430a      	orrs	r2, r1
 800656e:	431a      	orrs	r2, r3
 8006570:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006572:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8006574:	e03c      	b.n	80065f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006576:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800657e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006580:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f003 0303 	and.w	r3, r3, #3
 800658c:	2b01      	cmp	r3, #1
 800658e:	d108      	bne.n	80065a2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 0301 	and.w	r3, r3, #1
 800659a:	2b01      	cmp	r3, #1
 800659c:	d101      	bne.n	80065a2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800659e:	2301      	movs	r3, #1
 80065a0:	e000      	b.n	80065a4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80065a2:	2300      	movs	r3, #0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d123      	bne.n	80065f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	f003 0303 	and.w	r3, r3, #3
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d107      	bne.n	80065c4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0301 	and.w	r3, r3, #1
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d101      	bne.n	80065c4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80065c0:	2301      	movs	r3, #1
 80065c2:	e000      	b.n	80065c6 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80065c4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d112      	bne.n	80065f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80065ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80065d2:	f023 030f 	bic.w	r3, r3, #15
 80065d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065d8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80065da:	e009      	b.n	80065f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e0:	f043 0220 	orr.w	r2, r3, #32
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80065ee:	e000      	b.n	80065f2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80065f0:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80065fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80065fe:	4618      	mov	r0, r3
 8006600:	3764      	adds	r7, #100	; 0x64
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	50000100 	.word	0x50000100
 8006610:	50000400 	.word	0x50000400
 8006614:	50000500 	.word	0x50000500
 8006618:	50000300 	.word	0x50000300
 800661c:	50000700 	.word	0x50000700

08006620 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006628:	2300      	movs	r3, #0
 800662a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f003 0303 	and.w	r3, r3, #3
 8006636:	2b01      	cmp	r3, #1
 8006638:	d108      	bne.n	800664c <ADC_Enable+0x2c>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 0301 	and.w	r3, r3, #1
 8006644:	2b01      	cmp	r3, #1
 8006646:	d101      	bne.n	800664c <ADC_Enable+0x2c>
 8006648:	2301      	movs	r3, #1
 800664a:	e000      	b.n	800664e <ADC_Enable+0x2e>
 800664c:	2300      	movs	r3, #0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d143      	bne.n	80066da <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	689a      	ldr	r2, [r3, #8]
 8006658:	4b22      	ldr	r3, [pc, #136]	; (80066e4 <ADC_Enable+0xc4>)
 800665a:	4013      	ands	r3, r2
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00d      	beq.n	800667c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006664:	f043 0210 	orr.w	r2, r3, #16
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006670:	f043 0201 	orr.w	r2, r3, #1
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e02f      	b.n	80066dc <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	689a      	ldr	r2, [r3, #8]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f042 0201 	orr.w	r2, r2, #1
 800668a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800668c:	f7fe fd3a 	bl	8005104 <HAL_GetTick>
 8006690:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006692:	e01b      	b.n	80066cc <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006694:	f7fe fd36 	bl	8005104 <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	2b02      	cmp	r3, #2
 80066a0:	d914      	bls.n	80066cc <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 0301 	and.w	r3, r3, #1
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d00d      	beq.n	80066cc <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b4:	f043 0210 	orr.w	r2, r3, #16
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066c0:	f043 0201 	orr.w	r2, r3, #1
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e007      	b.n	80066dc <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 0301 	and.w	r3, r3, #1
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d1dc      	bne.n	8006694 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3710      	adds	r7, #16
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	8000003f 	.word	0x8000003f

080066e8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80066f0:	2300      	movs	r3, #0
 80066f2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	f003 0303 	and.w	r3, r3, #3
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d108      	bne.n	8006714 <ADC_Disable+0x2c>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0301 	and.w	r3, r3, #1
 800670c:	2b01      	cmp	r3, #1
 800670e:	d101      	bne.n	8006714 <ADC_Disable+0x2c>
 8006710:	2301      	movs	r3, #1
 8006712:	e000      	b.n	8006716 <ADC_Disable+0x2e>
 8006714:	2300      	movs	r3, #0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d047      	beq.n	80067aa <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	f003 030d 	and.w	r3, r3, #13
 8006724:	2b01      	cmp	r3, #1
 8006726:	d10f      	bne.n	8006748 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	689a      	ldr	r2, [r3, #8]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f042 0202 	orr.w	r2, r2, #2
 8006736:	609a      	str	r2, [r3, #8]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2203      	movs	r2, #3
 800673e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8006740:	f7fe fce0 	bl	8005104 <HAL_GetTick>
 8006744:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006746:	e029      	b.n	800679c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674c:	f043 0210 	orr.w	r2, r3, #16
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006758:	f043 0201 	orr.w	r2, r3, #1
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e023      	b.n	80067ac <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006764:	f7fe fcce 	bl	8005104 <HAL_GetTick>
 8006768:	4602      	mov	r2, r0
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	2b02      	cmp	r3, #2
 8006770:	d914      	bls.n	800679c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	f003 0301 	and.w	r3, r3, #1
 800677c:	2b01      	cmp	r3, #1
 800677e:	d10d      	bne.n	800679c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006784:	f043 0210 	orr.w	r2, r3, #16
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006790:	f043 0201 	orr.w	r2, r3, #1
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	e007      	b.n	80067ac <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	f003 0301 	and.w	r3, r3, #1
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d0dc      	beq.n	8006764 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3710      	adds	r7, #16
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <__NVIC_SetPriorityGrouping>:
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f003 0307 	and.w	r3, r3, #7
 80067c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80067c4:	4b0c      	ldr	r3, [pc, #48]	; (80067f8 <__NVIC_SetPriorityGrouping+0x44>)
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80067ca:	68ba      	ldr	r2, [r7, #8]
 80067cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80067d0:	4013      	ands	r3, r2
 80067d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80067dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80067e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80067e6:	4a04      	ldr	r2, [pc, #16]	; (80067f8 <__NVIC_SetPriorityGrouping+0x44>)
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	60d3      	str	r3, [r2, #12]
}
 80067ec:	bf00      	nop
 80067ee:	3714      	adds	r7, #20
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr
 80067f8:	e000ed00 	.word	0xe000ed00

080067fc <__NVIC_GetPriorityGrouping>:
{
 80067fc:	b480      	push	{r7}
 80067fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006800:	4b04      	ldr	r3, [pc, #16]	; (8006814 <__NVIC_GetPriorityGrouping+0x18>)
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	0a1b      	lsrs	r3, r3, #8
 8006806:	f003 0307 	and.w	r3, r3, #7
}
 800680a:	4618      	mov	r0, r3
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr
 8006814:	e000ed00 	.word	0xe000ed00

08006818 <__NVIC_EnableIRQ>:
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	4603      	mov	r3, r0
 8006820:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006826:	2b00      	cmp	r3, #0
 8006828:	db0b      	blt.n	8006842 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800682a:	79fb      	ldrb	r3, [r7, #7]
 800682c:	f003 021f 	and.w	r2, r3, #31
 8006830:	4907      	ldr	r1, [pc, #28]	; (8006850 <__NVIC_EnableIRQ+0x38>)
 8006832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006836:	095b      	lsrs	r3, r3, #5
 8006838:	2001      	movs	r0, #1
 800683a:	fa00 f202 	lsl.w	r2, r0, r2
 800683e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006842:	bf00      	nop
 8006844:	370c      	adds	r7, #12
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	e000e100 	.word	0xe000e100

08006854 <__NVIC_SetPriority>:
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	4603      	mov	r3, r0
 800685c:	6039      	str	r1, [r7, #0]
 800685e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006864:	2b00      	cmp	r3, #0
 8006866:	db0a      	blt.n	800687e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	b2da      	uxtb	r2, r3
 800686c:	490c      	ldr	r1, [pc, #48]	; (80068a0 <__NVIC_SetPriority+0x4c>)
 800686e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006872:	0112      	lsls	r2, r2, #4
 8006874:	b2d2      	uxtb	r2, r2
 8006876:	440b      	add	r3, r1
 8006878:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800687c:	e00a      	b.n	8006894 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	b2da      	uxtb	r2, r3
 8006882:	4908      	ldr	r1, [pc, #32]	; (80068a4 <__NVIC_SetPriority+0x50>)
 8006884:	79fb      	ldrb	r3, [r7, #7]
 8006886:	f003 030f 	and.w	r3, r3, #15
 800688a:	3b04      	subs	r3, #4
 800688c:	0112      	lsls	r2, r2, #4
 800688e:	b2d2      	uxtb	r2, r2
 8006890:	440b      	add	r3, r1
 8006892:	761a      	strb	r2, [r3, #24]
}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr
 80068a0:	e000e100 	.word	0xe000e100
 80068a4:	e000ed00 	.word	0xe000ed00

080068a8 <NVIC_EncodePriority>:
{
 80068a8:	b480      	push	{r7}
 80068aa:	b089      	sub	sp, #36	; 0x24
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f003 0307 	and.w	r3, r3, #7
 80068ba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	f1c3 0307 	rsb	r3, r3, #7
 80068c2:	2b04      	cmp	r3, #4
 80068c4:	bf28      	it	cs
 80068c6:	2304      	movcs	r3, #4
 80068c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	3304      	adds	r3, #4
 80068ce:	2b06      	cmp	r3, #6
 80068d0:	d902      	bls.n	80068d8 <NVIC_EncodePriority+0x30>
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	3b03      	subs	r3, #3
 80068d6:	e000      	b.n	80068da <NVIC_EncodePriority+0x32>
 80068d8:	2300      	movs	r3, #0
 80068da:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80068dc:	f04f 32ff 	mov.w	r2, #4294967295
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	fa02 f303 	lsl.w	r3, r2, r3
 80068e6:	43da      	mvns	r2, r3
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	401a      	ands	r2, r3
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80068f0:	f04f 31ff 	mov.w	r1, #4294967295
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	fa01 f303 	lsl.w	r3, r1, r3
 80068fa:	43d9      	mvns	r1, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006900:	4313      	orrs	r3, r2
}
 8006902:	4618      	mov	r0, r3
 8006904:	3724      	adds	r7, #36	; 0x24
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
	...

08006910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	3b01      	subs	r3, #1
 800691c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006920:	d301      	bcc.n	8006926 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006922:	2301      	movs	r3, #1
 8006924:	e00f      	b.n	8006946 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006926:	4a0a      	ldr	r2, [pc, #40]	; (8006950 <SysTick_Config+0x40>)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	3b01      	subs	r3, #1
 800692c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800692e:	210f      	movs	r1, #15
 8006930:	f04f 30ff 	mov.w	r0, #4294967295
 8006934:	f7ff ff8e 	bl	8006854 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006938:	4b05      	ldr	r3, [pc, #20]	; (8006950 <SysTick_Config+0x40>)
 800693a:	2200      	movs	r2, #0
 800693c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800693e:	4b04      	ldr	r3, [pc, #16]	; (8006950 <SysTick_Config+0x40>)
 8006940:	2207      	movs	r2, #7
 8006942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3708      	adds	r7, #8
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	e000e010 	.word	0xe000e010

08006954 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f7ff ff29 	bl	80067b4 <__NVIC_SetPriorityGrouping>
}
 8006962:	bf00      	nop
 8006964:	3708      	adds	r7, #8
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800696a:	b580      	push	{r7, lr}
 800696c:	b086      	sub	sp, #24
 800696e:	af00      	add	r7, sp, #0
 8006970:	4603      	mov	r3, r0
 8006972:	60b9      	str	r1, [r7, #8]
 8006974:	607a      	str	r2, [r7, #4]
 8006976:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006978:	2300      	movs	r3, #0
 800697a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800697c:	f7ff ff3e 	bl	80067fc <__NVIC_GetPriorityGrouping>
 8006980:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	68b9      	ldr	r1, [r7, #8]
 8006986:	6978      	ldr	r0, [r7, #20]
 8006988:	f7ff ff8e 	bl	80068a8 <NVIC_EncodePriority>
 800698c:	4602      	mov	r2, r0
 800698e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006992:	4611      	mov	r1, r2
 8006994:	4618      	mov	r0, r3
 8006996:	f7ff ff5d 	bl	8006854 <__NVIC_SetPriority>
}
 800699a:	bf00      	nop
 800699c:	3718      	adds	r7, #24
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b082      	sub	sp, #8
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	4603      	mov	r3, r0
 80069aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80069ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069b0:	4618      	mov	r0, r3
 80069b2:	f7ff ff31 	bl	8006818 <__NVIC_EnableIRQ>
}
 80069b6:	bf00      	nop
 80069b8:	3708      	adds	r7, #8
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b082      	sub	sp, #8
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f7ff ffa2 	bl	8006910 <SysTick_Config>
 80069cc:	4603      	mov	r3, r0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3708      	adds	r7, #8
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80069d6:	b480      	push	{r7}
 80069d8:	b083      	sub	sp, #12
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80069e4:	2b02      	cmp	r3, #2
 80069e6:	d008      	beq.n	80069fa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2204      	movs	r2, #4
 80069ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e020      	b.n	8006a3c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f022 020e 	bic.w	r2, r2, #14
 8006a08:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f022 0201 	bic.w	r2, r2, #1
 8006a18:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a22:	2101      	movs	r1, #1
 8006a24:	fa01 f202 	lsl.w	r2, r1, r2
 8006a28:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a50:	2300      	movs	r3, #0
 8006a52:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d005      	beq.n	8006a6a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2204      	movs	r2, #4
 8006a62:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	73fb      	strb	r3, [r7, #15]
 8006a68:	e027      	b.n	8006aba <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f022 020e 	bic.w	r2, r2, #14
 8006a78:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f022 0201 	bic.w	r2, r2, #1
 8006a88:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a92:	2101      	movs	r1, #1
 8006a94:	fa01 f202 	lsl.w	r2, r1, r2
 8006a98:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d003      	beq.n	8006aba <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	4798      	blx	r3
    } 
  }
  return status;
 8006aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3710      	adds	r7, #16
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b087      	sub	sp, #28
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006ad2:	e154      	b.n	8006d7e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	2101      	movs	r1, #1
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	fa01 f303 	lsl.w	r3, r1, r3
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f000 8146 	beq.w	8006d78 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	f003 0303 	and.w	r3, r3, #3
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d005      	beq.n	8006b04 <HAL_GPIO_Init+0x40>
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	f003 0303 	and.w	r3, r3, #3
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d130      	bne.n	8006b66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	005b      	lsls	r3, r3, #1
 8006b0e:	2203      	movs	r2, #3
 8006b10:	fa02 f303 	lsl.w	r3, r2, r3
 8006b14:	43db      	mvns	r3, r3
 8006b16:	693a      	ldr	r2, [r7, #16]
 8006b18:	4013      	ands	r3, r2
 8006b1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	68da      	ldr	r2, [r3, #12]
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	005b      	lsls	r3, r3, #1
 8006b24:	fa02 f303 	lsl.w	r3, r2, r3
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	693a      	ldr	r2, [r7, #16]
 8006b32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b42:	43db      	mvns	r3, r3
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	4013      	ands	r3, r2
 8006b48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	091b      	lsrs	r3, r3, #4
 8006b50:	f003 0201 	and.w	r2, r3, #1
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	fa02 f303 	lsl.w	r3, r2, r3
 8006b5a:	693a      	ldr	r2, [r7, #16]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	693a      	ldr	r2, [r7, #16]
 8006b64:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	f003 0303 	and.w	r3, r3, #3
 8006b6e:	2b03      	cmp	r3, #3
 8006b70:	d017      	beq.n	8006ba2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	005b      	lsls	r3, r3, #1
 8006b7c:	2203      	movs	r2, #3
 8006b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b82:	43db      	mvns	r3, r3
 8006b84:	693a      	ldr	r2, [r7, #16]
 8006b86:	4013      	ands	r3, r2
 8006b88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	689a      	ldr	r2, [r3, #8]
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	005b      	lsls	r3, r3, #1
 8006b92:	fa02 f303 	lsl.w	r3, r2, r3
 8006b96:	693a      	ldr	r2, [r7, #16]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	693a      	ldr	r2, [r7, #16]
 8006ba0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	f003 0303 	and.w	r3, r3, #3
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d123      	bne.n	8006bf6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	08da      	lsrs	r2, r3, #3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	3208      	adds	r2, #8
 8006bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	f003 0307 	and.w	r3, r3, #7
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	220f      	movs	r2, #15
 8006bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bca:	43db      	mvns	r3, r3
 8006bcc:	693a      	ldr	r2, [r7, #16]
 8006bce:	4013      	ands	r3, r2
 8006bd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	691a      	ldr	r2, [r3, #16]
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	f003 0307 	and.w	r3, r3, #7
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	fa02 f303 	lsl.w	r3, r2, r3
 8006be2:	693a      	ldr	r2, [r7, #16]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	08da      	lsrs	r2, r3, #3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	3208      	adds	r2, #8
 8006bf0:	6939      	ldr	r1, [r7, #16]
 8006bf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	005b      	lsls	r3, r3, #1
 8006c00:	2203      	movs	r2, #3
 8006c02:	fa02 f303 	lsl.w	r3, r2, r3
 8006c06:	43db      	mvns	r3, r3
 8006c08:	693a      	ldr	r2, [r7, #16]
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	f003 0203 	and.w	r2, r3, #3
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	005b      	lsls	r3, r3, #1
 8006c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c1e:	693a      	ldr	r2, [r7, #16]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	693a      	ldr	r2, [r7, #16]
 8006c28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f000 80a0 	beq.w	8006d78 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c38:	4b58      	ldr	r3, [pc, #352]	; (8006d9c <HAL_GPIO_Init+0x2d8>)
 8006c3a:	699b      	ldr	r3, [r3, #24]
 8006c3c:	4a57      	ldr	r2, [pc, #348]	; (8006d9c <HAL_GPIO_Init+0x2d8>)
 8006c3e:	f043 0301 	orr.w	r3, r3, #1
 8006c42:	6193      	str	r3, [r2, #24]
 8006c44:	4b55      	ldr	r3, [pc, #340]	; (8006d9c <HAL_GPIO_Init+0x2d8>)
 8006c46:	699b      	ldr	r3, [r3, #24]
 8006c48:	f003 0301 	and.w	r3, r3, #1
 8006c4c:	60bb      	str	r3, [r7, #8]
 8006c4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006c50:	4a53      	ldr	r2, [pc, #332]	; (8006da0 <HAL_GPIO_Init+0x2dc>)
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	089b      	lsrs	r3, r3, #2
 8006c56:	3302      	adds	r3, #2
 8006c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	f003 0303 	and.w	r3, r3, #3
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	220f      	movs	r2, #15
 8006c68:	fa02 f303 	lsl.w	r3, r2, r3
 8006c6c:	43db      	mvns	r3, r3
 8006c6e:	693a      	ldr	r2, [r7, #16]
 8006c70:	4013      	ands	r3, r2
 8006c72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006c7a:	d019      	beq.n	8006cb0 <HAL_GPIO_Init+0x1ec>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a49      	ldr	r2, [pc, #292]	; (8006da4 <HAL_GPIO_Init+0x2e0>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d013      	beq.n	8006cac <HAL_GPIO_Init+0x1e8>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a48      	ldr	r2, [pc, #288]	; (8006da8 <HAL_GPIO_Init+0x2e4>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d00d      	beq.n	8006ca8 <HAL_GPIO_Init+0x1e4>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a47      	ldr	r2, [pc, #284]	; (8006dac <HAL_GPIO_Init+0x2e8>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d007      	beq.n	8006ca4 <HAL_GPIO_Init+0x1e0>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a46      	ldr	r2, [pc, #280]	; (8006db0 <HAL_GPIO_Init+0x2ec>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d101      	bne.n	8006ca0 <HAL_GPIO_Init+0x1dc>
 8006c9c:	2304      	movs	r3, #4
 8006c9e:	e008      	b.n	8006cb2 <HAL_GPIO_Init+0x1ee>
 8006ca0:	2305      	movs	r3, #5
 8006ca2:	e006      	b.n	8006cb2 <HAL_GPIO_Init+0x1ee>
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	e004      	b.n	8006cb2 <HAL_GPIO_Init+0x1ee>
 8006ca8:	2302      	movs	r3, #2
 8006caa:	e002      	b.n	8006cb2 <HAL_GPIO_Init+0x1ee>
 8006cac:	2301      	movs	r3, #1
 8006cae:	e000      	b.n	8006cb2 <HAL_GPIO_Init+0x1ee>
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	f002 0203 	and.w	r2, r2, #3
 8006cb8:	0092      	lsls	r2, r2, #2
 8006cba:	4093      	lsls	r3, r2
 8006cbc:	693a      	ldr	r2, [r7, #16]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006cc2:	4937      	ldr	r1, [pc, #220]	; (8006da0 <HAL_GPIO_Init+0x2dc>)
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	089b      	lsrs	r3, r3, #2
 8006cc8:	3302      	adds	r3, #2
 8006cca:	693a      	ldr	r2, [r7, #16]
 8006ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006cd0:	4b38      	ldr	r3, [pc, #224]	; (8006db4 <HAL_GPIO_Init+0x2f0>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	43db      	mvns	r3, r3
 8006cda:	693a      	ldr	r2, [r7, #16]
 8006cdc:	4013      	ands	r3, r2
 8006cde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d003      	beq.n	8006cf4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8006cec:	693a      	ldr	r2, [r7, #16]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006cf4:	4a2f      	ldr	r2, [pc, #188]	; (8006db4 <HAL_GPIO_Init+0x2f0>)
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006cfa:	4b2e      	ldr	r3, [pc, #184]	; (8006db4 <HAL_GPIO_Init+0x2f0>)
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	43db      	mvns	r3, r3
 8006d04:	693a      	ldr	r2, [r7, #16]
 8006d06:	4013      	ands	r3, r2
 8006d08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d003      	beq.n	8006d1e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8006d16:	693a      	ldr	r2, [r7, #16]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006d1e:	4a25      	ldr	r2, [pc, #148]	; (8006db4 <HAL_GPIO_Init+0x2f0>)
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006d24:	4b23      	ldr	r3, [pc, #140]	; (8006db4 <HAL_GPIO_Init+0x2f0>)
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	43db      	mvns	r3, r3
 8006d2e:	693a      	ldr	r2, [r7, #16]
 8006d30:	4013      	ands	r3, r2
 8006d32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d003      	beq.n	8006d48 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006d48:	4a1a      	ldr	r2, [pc, #104]	; (8006db4 <HAL_GPIO_Init+0x2f0>)
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006d4e:	4b19      	ldr	r3, [pc, #100]	; (8006db4 <HAL_GPIO_Init+0x2f0>)
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	43db      	mvns	r3, r3
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d003      	beq.n	8006d72 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006d6a:	693a      	ldr	r2, [r7, #16]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006d72:	4a10      	ldr	r2, [pc, #64]	; (8006db4 <HAL_GPIO_Init+0x2f0>)
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	fa22 f303 	lsr.w	r3, r2, r3
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f47f aea3 	bne.w	8006ad4 <HAL_GPIO_Init+0x10>
  }
}
 8006d8e:	bf00      	nop
 8006d90:	bf00      	nop
 8006d92:	371c      	adds	r7, #28
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr
 8006d9c:	40021000 	.word	0x40021000
 8006da0:	40010000 	.word	0x40010000
 8006da4:	48000400 	.word	0x48000400
 8006da8:	48000800 	.word	0x48000800
 8006dac:	48000c00 	.word	0x48000c00
 8006db0:	48001000 	.word	0x48001000
 8006db4:	40010400 	.word	0x40010400

08006db8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	691a      	ldr	r2, [r3, #16]
 8006dc8:	887b      	ldrh	r3, [r7, #2]
 8006dca:	4013      	ands	r3, r2
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d002      	beq.n	8006dd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	73fb      	strb	r3, [r7, #15]
 8006dd4:	e001      	b.n	8006dda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3714      	adds	r7, #20
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	460b      	mov	r3, r1
 8006df2:	807b      	strh	r3, [r7, #2]
 8006df4:	4613      	mov	r3, r2
 8006df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006df8:	787b      	ldrb	r3, [r7, #1]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d003      	beq.n	8006e06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006dfe:	887a      	ldrh	r2, [r7, #2]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006e04:	e002      	b.n	8006e0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006e06:	887a      	ldrh	r2, [r7, #2]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006e0c:	bf00      	nop
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	4603      	mov	r3, r0
 8006e20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006e22:	4b08      	ldr	r3, [pc, #32]	; (8006e44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006e24:	695a      	ldr	r2, [r3, #20]
 8006e26:	88fb      	ldrh	r3, [r7, #6]
 8006e28:	4013      	ands	r3, r2
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d006      	beq.n	8006e3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006e2e:	4a05      	ldr	r2, [pc, #20]	; (8006e44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006e30:	88fb      	ldrh	r3, [r7, #6]
 8006e32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006e34:	88fb      	ldrh	r3, [r7, #6]
 8006e36:	4618      	mov	r0, r3
 8006e38:	f000 f806 	bl	8006e48 <HAL_GPIO_EXTI_Callback>
  }
}
 8006e3c:	bf00      	nop
 8006e3e:	3708      	adds	r7, #8
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	40010400 	.word	0x40010400

08006e48 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	4603      	mov	r3, r0
 8006e50:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006e52:	bf00      	nop
 8006e54:	370c      	adds	r7, #12
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr

08006e5e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b082      	sub	sp, #8
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d101      	bne.n	8006e70 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e081      	b.n	8006f74 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d106      	bne.n	8006e8a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f7fc ffc7 	bl	8003e18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2224      	movs	r2, #36	; 0x24
 8006e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f022 0201 	bic.w	r2, r2, #1
 8006ea0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	685a      	ldr	r2, [r3, #4]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006eae:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	689a      	ldr	r2, [r3, #8]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ebe:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d107      	bne.n	8006ed8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	689a      	ldr	r2, [r3, #8]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ed4:	609a      	str	r2, [r3, #8]
 8006ed6:	e006      	b.n	8006ee6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	689a      	ldr	r2, [r3, #8]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006ee4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d104      	bne.n	8006ef8 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ef6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	6812      	ldr	r2, [r2, #0]
 8006f02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006f06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f0a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68da      	ldr	r2, [r3, #12]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f1a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	691a      	ldr	r2, [r3, #16]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	695b      	ldr	r3, [r3, #20]
 8006f24:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	699b      	ldr	r3, [r3, #24]
 8006f2c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	430a      	orrs	r2, r1
 8006f34:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	69d9      	ldr	r1, [r3, #28]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a1a      	ldr	r2, [r3, #32]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	430a      	orrs	r2, r1
 8006f44:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f042 0201 	orr.w	r2, r2, #1
 8006f54:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2220      	movs	r2, #32
 8006f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3708      	adds	r7, #8
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b20      	cmp	r3, #32
 8006f90:	d138      	bne.n	8007004 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d101      	bne.n	8006fa0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006f9c:	2302      	movs	r3, #2
 8006f9e:	e032      	b.n	8007006 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2224      	movs	r2, #36	; 0x24
 8006fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f022 0201 	bic.w	r2, r2, #1
 8006fbe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006fce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	6819      	ldr	r1, [r3, #0]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	683a      	ldr	r2, [r7, #0]
 8006fdc:	430a      	orrs	r2, r1
 8006fde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f042 0201 	orr.w	r2, r2, #1
 8006fee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2220      	movs	r2, #32
 8006ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007000:	2300      	movs	r3, #0
 8007002:	e000      	b.n	8007006 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007004:	2302      	movs	r3, #2
  }
}
 8007006:	4618      	mov	r0, r3
 8007008:	370c      	adds	r7, #12
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr

08007012 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007012:	b480      	push	{r7}
 8007014:	b085      	sub	sp, #20
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
 800701a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007022:	b2db      	uxtb	r3, r3
 8007024:	2b20      	cmp	r3, #32
 8007026:	d139      	bne.n	800709c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800702e:	2b01      	cmp	r3, #1
 8007030:	d101      	bne.n	8007036 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007032:	2302      	movs	r3, #2
 8007034:	e033      	b.n	800709e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2201      	movs	r2, #1
 800703a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2224      	movs	r2, #36	; 0x24
 8007042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f022 0201 	bic.w	r2, r2, #1
 8007054:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007064:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	021b      	lsls	r3, r3, #8
 800706a:	68fa      	ldr	r2, [r7, #12]
 800706c:	4313      	orrs	r3, r2
 800706e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f042 0201 	orr.w	r2, r2, #1
 8007086:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2220      	movs	r2, #32
 800708c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007098:	2300      	movs	r3, #0
 800709a:	e000      	b.n	800709e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800709c:	2302      	movs	r3, #2
  }
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3714      	adds	r7, #20
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr

080070aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80070aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070ac:	b08b      	sub	sp, #44	; 0x2c
 80070ae:	af06      	add	r7, sp, #24
 80070b0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d101      	bne.n	80070bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	e0d0      	b.n	800725e <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d106      	bne.n	80070d6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f7fd f847 	bl	8004164 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2203      	movs	r2, #3
 80070da:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4618      	mov	r0, r3
 80070e4:	f004 fbff 	bl	800b8e6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80070e8:	2300      	movs	r3, #0
 80070ea:	73fb      	strb	r3, [r7, #15]
 80070ec:	e04c      	b.n	8007188 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80070ee:	7bfb      	ldrb	r3, [r7, #15]
 80070f0:	6879      	ldr	r1, [r7, #4]
 80070f2:	1c5a      	adds	r2, r3, #1
 80070f4:	4613      	mov	r3, r2
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	4413      	add	r3, r2
 80070fa:	00db      	lsls	r3, r3, #3
 80070fc:	440b      	add	r3, r1
 80070fe:	3301      	adds	r3, #1
 8007100:	2201      	movs	r2, #1
 8007102:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007104:	7bfb      	ldrb	r3, [r7, #15]
 8007106:	6879      	ldr	r1, [r7, #4]
 8007108:	1c5a      	adds	r2, r3, #1
 800710a:	4613      	mov	r3, r2
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	4413      	add	r3, r2
 8007110:	00db      	lsls	r3, r3, #3
 8007112:	440b      	add	r3, r1
 8007114:	7bfa      	ldrb	r2, [r7, #15]
 8007116:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007118:	7bfa      	ldrb	r2, [r7, #15]
 800711a:	7bfb      	ldrb	r3, [r7, #15]
 800711c:	b298      	uxth	r0, r3
 800711e:	6879      	ldr	r1, [r7, #4]
 8007120:	4613      	mov	r3, r2
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	4413      	add	r3, r2
 8007126:	00db      	lsls	r3, r3, #3
 8007128:	440b      	add	r3, r1
 800712a:	3336      	adds	r3, #54	; 0x36
 800712c:	4602      	mov	r2, r0
 800712e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007130:	7bfb      	ldrb	r3, [r7, #15]
 8007132:	6879      	ldr	r1, [r7, #4]
 8007134:	1c5a      	adds	r2, r3, #1
 8007136:	4613      	mov	r3, r2
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4413      	add	r3, r2
 800713c:	00db      	lsls	r3, r3, #3
 800713e:	440b      	add	r3, r1
 8007140:	3303      	adds	r3, #3
 8007142:	2200      	movs	r2, #0
 8007144:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007146:	7bfa      	ldrb	r2, [r7, #15]
 8007148:	6879      	ldr	r1, [r7, #4]
 800714a:	4613      	mov	r3, r2
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	4413      	add	r3, r2
 8007150:	00db      	lsls	r3, r3, #3
 8007152:	440b      	add	r3, r1
 8007154:	3338      	adds	r3, #56	; 0x38
 8007156:	2200      	movs	r2, #0
 8007158:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800715a:	7bfa      	ldrb	r2, [r7, #15]
 800715c:	6879      	ldr	r1, [r7, #4]
 800715e:	4613      	mov	r3, r2
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	4413      	add	r3, r2
 8007164:	00db      	lsls	r3, r3, #3
 8007166:	440b      	add	r3, r1
 8007168:	333c      	adds	r3, #60	; 0x3c
 800716a:	2200      	movs	r2, #0
 800716c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800716e:	7bfa      	ldrb	r2, [r7, #15]
 8007170:	6879      	ldr	r1, [r7, #4]
 8007172:	4613      	mov	r3, r2
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4413      	add	r3, r2
 8007178:	00db      	lsls	r3, r3, #3
 800717a:	440b      	add	r3, r1
 800717c:	3340      	adds	r3, #64	; 0x40
 800717e:	2200      	movs	r2, #0
 8007180:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007182:	7bfb      	ldrb	r3, [r7, #15]
 8007184:	3301      	adds	r3, #1
 8007186:	73fb      	strb	r3, [r7, #15]
 8007188:	7bfa      	ldrb	r2, [r7, #15]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	429a      	cmp	r2, r3
 8007190:	d3ad      	bcc.n	80070ee <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007192:	2300      	movs	r3, #0
 8007194:	73fb      	strb	r3, [r7, #15]
 8007196:	e044      	b.n	8007222 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007198:	7bfa      	ldrb	r2, [r7, #15]
 800719a:	6879      	ldr	r1, [r7, #4]
 800719c:	4613      	mov	r3, r2
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	4413      	add	r3, r2
 80071a2:	00db      	lsls	r3, r3, #3
 80071a4:	440b      	add	r3, r1
 80071a6:	f203 1369 	addw	r3, r3, #361	; 0x169
 80071aa:	2200      	movs	r2, #0
 80071ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80071ae:	7bfa      	ldrb	r2, [r7, #15]
 80071b0:	6879      	ldr	r1, [r7, #4]
 80071b2:	4613      	mov	r3, r2
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	4413      	add	r3, r2
 80071b8:	00db      	lsls	r3, r3, #3
 80071ba:	440b      	add	r3, r1
 80071bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80071c0:	7bfa      	ldrb	r2, [r7, #15]
 80071c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80071c4:	7bfa      	ldrb	r2, [r7, #15]
 80071c6:	6879      	ldr	r1, [r7, #4]
 80071c8:	4613      	mov	r3, r2
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	4413      	add	r3, r2
 80071ce:	00db      	lsls	r3, r3, #3
 80071d0:	440b      	add	r3, r1
 80071d2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80071d6:	2200      	movs	r2, #0
 80071d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80071da:	7bfa      	ldrb	r2, [r7, #15]
 80071dc:	6879      	ldr	r1, [r7, #4]
 80071de:	4613      	mov	r3, r2
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4413      	add	r3, r2
 80071e4:	00db      	lsls	r3, r3, #3
 80071e6:	440b      	add	r3, r1
 80071e8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80071ec:	2200      	movs	r2, #0
 80071ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80071f0:	7bfa      	ldrb	r2, [r7, #15]
 80071f2:	6879      	ldr	r1, [r7, #4]
 80071f4:	4613      	mov	r3, r2
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	4413      	add	r3, r2
 80071fa:	00db      	lsls	r3, r3, #3
 80071fc:	440b      	add	r3, r1
 80071fe:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007202:	2200      	movs	r2, #0
 8007204:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007206:	7bfa      	ldrb	r2, [r7, #15]
 8007208:	6879      	ldr	r1, [r7, #4]
 800720a:	4613      	mov	r3, r2
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	4413      	add	r3, r2
 8007210:	00db      	lsls	r3, r3, #3
 8007212:	440b      	add	r3, r1
 8007214:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8007218:	2200      	movs	r2, #0
 800721a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800721c:	7bfb      	ldrb	r3, [r7, #15]
 800721e:	3301      	adds	r3, #1
 8007220:	73fb      	strb	r3, [r7, #15]
 8007222:	7bfa      	ldrb	r2, [r7, #15]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	429a      	cmp	r2, r3
 800722a:	d3b5      	bcc.n	8007198 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	603b      	str	r3, [r7, #0]
 8007232:	687e      	ldr	r6, [r7, #4]
 8007234:	466d      	mov	r5, sp
 8007236:	f106 0410 	add.w	r4, r6, #16
 800723a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800723c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800723e:	6823      	ldr	r3, [r4, #0]
 8007240:	602b      	str	r3, [r5, #0]
 8007242:	1d33      	adds	r3, r6, #4
 8007244:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007246:	6838      	ldr	r0, [r7, #0]
 8007248:	f004 fb68 	bl	800b91c <USB_DevInit>

  hpcd->USB_Address = 0U;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	3714      	adds	r7, #20
 8007262:	46bd      	mov	sp, r7
 8007264:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007268 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800726e:	af00      	add	r7, sp, #0
 8007270:	1d3b      	adds	r3, r7, #4
 8007272:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007274:	1d3b      	adds	r3, r7, #4
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d102      	bne.n	8007282 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	f000 bef4 	b.w	800806a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007282:	1d3b      	adds	r3, r7, #4
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f003 0301 	and.w	r3, r3, #1
 800728c:	2b00      	cmp	r3, #0
 800728e:	f000 816a 	beq.w	8007566 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8007292:	4bb3      	ldr	r3, [pc, #716]	; (8007560 <HAL_RCC_OscConfig+0x2f8>)
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	f003 030c 	and.w	r3, r3, #12
 800729a:	2b04      	cmp	r3, #4
 800729c:	d00c      	beq.n	80072b8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800729e:	4bb0      	ldr	r3, [pc, #704]	; (8007560 <HAL_RCC_OscConfig+0x2f8>)
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	f003 030c 	and.w	r3, r3, #12
 80072a6:	2b08      	cmp	r3, #8
 80072a8:	d159      	bne.n	800735e <HAL_RCC_OscConfig+0xf6>
 80072aa:	4bad      	ldr	r3, [pc, #692]	; (8007560 <HAL_RCC_OscConfig+0x2f8>)
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072b6:	d152      	bne.n	800735e <HAL_RCC_OscConfig+0xf6>
 80072b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80072bc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072c0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80072c4:	fa93 f3a3 	rbit	r3, r3
 80072c8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 80072cc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072d0:	fab3 f383 	clz	r3, r3
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	095b      	lsrs	r3, r3, #5
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	f043 0301 	orr.w	r3, r3, #1
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d102      	bne.n	80072ea <HAL_RCC_OscConfig+0x82>
 80072e4:	4b9e      	ldr	r3, [pc, #632]	; (8007560 <HAL_RCC_OscConfig+0x2f8>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	e015      	b.n	8007316 <HAL_RCC_OscConfig+0xae>
 80072ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80072ee:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072f2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80072f6:	fa93 f3a3 	rbit	r3, r3
 80072fa:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80072fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007302:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8007306:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800730a:	fa93 f3a3 	rbit	r3, r3
 800730e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8007312:	4b93      	ldr	r3, [pc, #588]	; (8007560 <HAL_RCC_OscConfig+0x2f8>)
 8007314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007316:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800731a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800731e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8007322:	fa92 f2a2 	rbit	r2, r2
 8007326:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800732a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800732e:	fab2 f282 	clz	r2, r2
 8007332:	b2d2      	uxtb	r2, r2
 8007334:	f042 0220 	orr.w	r2, r2, #32
 8007338:	b2d2      	uxtb	r2, r2
 800733a:	f002 021f 	and.w	r2, r2, #31
 800733e:	2101      	movs	r1, #1
 8007340:	fa01 f202 	lsl.w	r2, r1, r2
 8007344:	4013      	ands	r3, r2
 8007346:	2b00      	cmp	r3, #0
 8007348:	f000 810c 	beq.w	8007564 <HAL_RCC_OscConfig+0x2fc>
 800734c:	1d3b      	adds	r3, r7, #4
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	2b00      	cmp	r3, #0
 8007354:	f040 8106 	bne.w	8007564 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	f000 be86 	b.w	800806a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800735e:	1d3b      	adds	r3, r7, #4
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007368:	d106      	bne.n	8007378 <HAL_RCC_OscConfig+0x110>
 800736a:	4b7d      	ldr	r3, [pc, #500]	; (8007560 <HAL_RCC_OscConfig+0x2f8>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a7c      	ldr	r2, [pc, #496]	; (8007560 <HAL_RCC_OscConfig+0x2f8>)
 8007370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007374:	6013      	str	r3, [r2, #0]
 8007376:	e030      	b.n	80073da <HAL_RCC_OscConfig+0x172>
 8007378:	1d3b      	adds	r3, r7, #4
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d10c      	bne.n	800739c <HAL_RCC_OscConfig+0x134>
 8007382:	4b77      	ldr	r3, [pc, #476]	; (8007560 <HAL_RCC_OscConfig+0x2f8>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a76      	ldr	r2, [pc, #472]	; (8007560 <HAL_RCC_OscConfig+0x2f8>)
 8007388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800738c:	6013      	str	r3, [r2, #0]
 800738e:	4b74      	ldr	r3, [pc, #464]	; (8007560 <HAL_RCC_OscConfig+0x2f8>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a73      	ldr	r2, [pc, #460]	; (8007560 <HAL_RCC_OscConfig+0x2f8>)
 8007394:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007398:	6013      	str	r3, [r2, #0]
 800739a:	e01e      	b.n	80073da <HAL_RCC_OscConfig+0x172>
 800739c:	1d3b      	adds	r3, r7, #4
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80073a6:	d10c      	bne.n	80073c2 <HAL_RCC_OscConfig+0x15a>
 80073a8:	4b6d      	ldr	r3, [pc, #436]	; (8007560 <HAL_RCC_OscConfig+0x2f8>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a6c      	ldr	r2, [pc, #432]	; (8007560 <HAL_RCC_OscConfig+0x2f8>)
 80073ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80073b2:	6013      	str	r3, [r2, #0]
 80073b4:	4b6a      	ldr	r3, [pc, #424]	; (8007560 <HAL_RCC_OscConfig+0x2f8>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a69      	ldr	r2, [pc, #420]	; (8007560 <HAL_RCC_OscConfig+0x2f8>)
 80073ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073be:	6013      	str	r3, [r2, #0]
 80073c0:	e00b      	b.n	80073da <HAL_RCC_OscConfig+0x172>
 80073c2:	4b67      	ldr	r3, [pc, #412]	; (8007560 <HAL_RCC_OscConfig+0x2f8>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a66      	ldr	r2, [pc, #408]	; (8007560 <HAL_RCC_OscConfig+0x2f8>)
 80073c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073cc:	6013      	str	r3, [r2, #0]
 80073ce:	4b64      	ldr	r3, [pc, #400]	; (8007560 <HAL_RCC_OscConfig+0x2f8>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a63      	ldr	r2, [pc, #396]	; (8007560 <HAL_RCC_OscConfig+0x2f8>)
 80073d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80073d8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80073da:	4b61      	ldr	r3, [pc, #388]	; (8007560 <HAL_RCC_OscConfig+0x2f8>)
 80073dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073de:	f023 020f 	bic.w	r2, r3, #15
 80073e2:	1d3b      	adds	r3, r7, #4
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	495d      	ldr	r1, [pc, #372]	; (8007560 <HAL_RCC_OscConfig+0x2f8>)
 80073ea:	4313      	orrs	r3, r2
 80073ec:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80073ee:	1d3b      	adds	r3, r7, #4
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d059      	beq.n	80074ac <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073f8:	f7fd fe84 	bl	8005104 <HAL_GetTick>
 80073fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007400:	e00a      	b.n	8007418 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007402:	f7fd fe7f 	bl	8005104 <HAL_GetTick>
 8007406:	4602      	mov	r2, r0
 8007408:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	2b64      	cmp	r3, #100	; 0x64
 8007410:	d902      	bls.n	8007418 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8007412:	2303      	movs	r3, #3
 8007414:	f000 be29 	b.w	800806a <HAL_RCC_OscConfig+0xe02>
 8007418:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800741c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007420:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8007424:	fa93 f3a3 	rbit	r3, r3
 8007428:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800742c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007430:	fab3 f383 	clz	r3, r3
 8007434:	b2db      	uxtb	r3, r3
 8007436:	095b      	lsrs	r3, r3, #5
 8007438:	b2db      	uxtb	r3, r3
 800743a:	f043 0301 	orr.w	r3, r3, #1
 800743e:	b2db      	uxtb	r3, r3
 8007440:	2b01      	cmp	r3, #1
 8007442:	d102      	bne.n	800744a <HAL_RCC_OscConfig+0x1e2>
 8007444:	4b46      	ldr	r3, [pc, #280]	; (8007560 <HAL_RCC_OscConfig+0x2f8>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	e015      	b.n	8007476 <HAL_RCC_OscConfig+0x20e>
 800744a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800744e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007452:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007456:	fa93 f3a3 	rbit	r3, r3
 800745a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800745e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007462:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8007466:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800746a:	fa93 f3a3 	rbit	r3, r3
 800746e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8007472:	4b3b      	ldr	r3, [pc, #236]	; (8007560 <HAL_RCC_OscConfig+0x2f8>)
 8007474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007476:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800747a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800747e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8007482:	fa92 f2a2 	rbit	r2, r2
 8007486:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800748a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800748e:	fab2 f282 	clz	r2, r2
 8007492:	b2d2      	uxtb	r2, r2
 8007494:	f042 0220 	orr.w	r2, r2, #32
 8007498:	b2d2      	uxtb	r2, r2
 800749a:	f002 021f 	and.w	r2, r2, #31
 800749e:	2101      	movs	r1, #1
 80074a0:	fa01 f202 	lsl.w	r2, r1, r2
 80074a4:	4013      	ands	r3, r2
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d0ab      	beq.n	8007402 <HAL_RCC_OscConfig+0x19a>
 80074aa:	e05c      	b.n	8007566 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074ac:	f7fd fe2a 	bl	8005104 <HAL_GetTick>
 80074b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80074b4:	e00a      	b.n	80074cc <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80074b6:	f7fd fe25 	bl	8005104 <HAL_GetTick>
 80074ba:	4602      	mov	r2, r0
 80074bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80074c0:	1ad3      	subs	r3, r2, r3
 80074c2:	2b64      	cmp	r3, #100	; 0x64
 80074c4:	d902      	bls.n	80074cc <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80074c6:	2303      	movs	r3, #3
 80074c8:	f000 bdcf 	b.w	800806a <HAL_RCC_OscConfig+0xe02>
 80074cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80074d0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074d4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80074d8:	fa93 f3a3 	rbit	r3, r3
 80074dc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80074e0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80074e4:	fab3 f383 	clz	r3, r3
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	095b      	lsrs	r3, r3, #5
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	f043 0301 	orr.w	r3, r3, #1
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d102      	bne.n	80074fe <HAL_RCC_OscConfig+0x296>
 80074f8:	4b19      	ldr	r3, [pc, #100]	; (8007560 <HAL_RCC_OscConfig+0x2f8>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	e015      	b.n	800752a <HAL_RCC_OscConfig+0x2c2>
 80074fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007502:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007506:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800750a:	fa93 f3a3 	rbit	r3, r3
 800750e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8007512:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007516:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800751a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800751e:	fa93 f3a3 	rbit	r3, r3
 8007522:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8007526:	4b0e      	ldr	r3, [pc, #56]	; (8007560 <HAL_RCC_OscConfig+0x2f8>)
 8007528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800752e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8007532:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8007536:	fa92 f2a2 	rbit	r2, r2
 800753a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800753e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8007542:	fab2 f282 	clz	r2, r2
 8007546:	b2d2      	uxtb	r2, r2
 8007548:	f042 0220 	orr.w	r2, r2, #32
 800754c:	b2d2      	uxtb	r2, r2
 800754e:	f002 021f 	and.w	r2, r2, #31
 8007552:	2101      	movs	r1, #1
 8007554:	fa01 f202 	lsl.w	r2, r1, r2
 8007558:	4013      	ands	r3, r2
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1ab      	bne.n	80074b6 <HAL_RCC_OscConfig+0x24e>
 800755e:	e002      	b.n	8007566 <HAL_RCC_OscConfig+0x2fe>
 8007560:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007566:	1d3b      	adds	r3, r7, #4
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 0302 	and.w	r3, r3, #2
 8007570:	2b00      	cmp	r3, #0
 8007572:	f000 816f 	beq.w	8007854 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8007576:	4bd0      	ldr	r3, [pc, #832]	; (80078b8 <HAL_RCC_OscConfig+0x650>)
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	f003 030c 	and.w	r3, r3, #12
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00b      	beq.n	800759a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007582:	4bcd      	ldr	r3, [pc, #820]	; (80078b8 <HAL_RCC_OscConfig+0x650>)
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	f003 030c 	and.w	r3, r3, #12
 800758a:	2b08      	cmp	r3, #8
 800758c:	d16c      	bne.n	8007668 <HAL_RCC_OscConfig+0x400>
 800758e:	4bca      	ldr	r3, [pc, #808]	; (80078b8 <HAL_RCC_OscConfig+0x650>)
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007596:	2b00      	cmp	r3, #0
 8007598:	d166      	bne.n	8007668 <HAL_RCC_OscConfig+0x400>
 800759a:	2302      	movs	r3, #2
 800759c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075a0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80075a4:	fa93 f3a3 	rbit	r3, r3
 80075a8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80075ac:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075b0:	fab3 f383 	clz	r3, r3
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	095b      	lsrs	r3, r3, #5
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	f043 0301 	orr.w	r3, r3, #1
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d102      	bne.n	80075ca <HAL_RCC_OscConfig+0x362>
 80075c4:	4bbc      	ldr	r3, [pc, #752]	; (80078b8 <HAL_RCC_OscConfig+0x650>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	e013      	b.n	80075f2 <HAL_RCC_OscConfig+0x38a>
 80075ca:	2302      	movs	r3, #2
 80075cc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075d0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80075d4:	fa93 f3a3 	rbit	r3, r3
 80075d8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80075dc:	2302      	movs	r3, #2
 80075de:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80075e2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80075e6:	fa93 f3a3 	rbit	r3, r3
 80075ea:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80075ee:	4bb2      	ldr	r3, [pc, #712]	; (80078b8 <HAL_RCC_OscConfig+0x650>)
 80075f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f2:	2202      	movs	r2, #2
 80075f4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80075f8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80075fc:	fa92 f2a2 	rbit	r2, r2
 8007600:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8007604:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8007608:	fab2 f282 	clz	r2, r2
 800760c:	b2d2      	uxtb	r2, r2
 800760e:	f042 0220 	orr.w	r2, r2, #32
 8007612:	b2d2      	uxtb	r2, r2
 8007614:	f002 021f 	and.w	r2, r2, #31
 8007618:	2101      	movs	r1, #1
 800761a:	fa01 f202 	lsl.w	r2, r1, r2
 800761e:	4013      	ands	r3, r2
 8007620:	2b00      	cmp	r3, #0
 8007622:	d007      	beq.n	8007634 <HAL_RCC_OscConfig+0x3cc>
 8007624:	1d3b      	adds	r3, r7, #4
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	2b01      	cmp	r3, #1
 800762c:	d002      	beq.n	8007634 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	f000 bd1b 	b.w	800806a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007634:	4ba0      	ldr	r3, [pc, #640]	; (80078b8 <HAL_RCC_OscConfig+0x650>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800763c:	1d3b      	adds	r3, r7, #4
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	695b      	ldr	r3, [r3, #20]
 8007642:	21f8      	movs	r1, #248	; 0xf8
 8007644:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007648:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800764c:	fa91 f1a1 	rbit	r1, r1
 8007650:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8007654:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8007658:	fab1 f181 	clz	r1, r1
 800765c:	b2c9      	uxtb	r1, r1
 800765e:	408b      	lsls	r3, r1
 8007660:	4995      	ldr	r1, [pc, #596]	; (80078b8 <HAL_RCC_OscConfig+0x650>)
 8007662:	4313      	orrs	r3, r2
 8007664:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007666:	e0f5      	b.n	8007854 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007668:	1d3b      	adds	r3, r7, #4
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	2b00      	cmp	r3, #0
 8007670:	f000 8085 	beq.w	800777e <HAL_RCC_OscConfig+0x516>
 8007674:	2301      	movs	r3, #1
 8007676:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800767a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800767e:	fa93 f3a3 	rbit	r3, r3
 8007682:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8007686:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800768a:	fab3 f383 	clz	r3, r3
 800768e:	b2db      	uxtb	r3, r3
 8007690:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007694:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	461a      	mov	r2, r3
 800769c:	2301      	movs	r3, #1
 800769e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076a0:	f7fd fd30 	bl	8005104 <HAL_GetTick>
 80076a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076a8:	e00a      	b.n	80076c0 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076aa:	f7fd fd2b 	bl	8005104 <HAL_GetTick>
 80076ae:	4602      	mov	r2, r0
 80076b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80076b4:	1ad3      	subs	r3, r2, r3
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	d902      	bls.n	80076c0 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80076ba:	2303      	movs	r3, #3
 80076bc:	f000 bcd5 	b.w	800806a <HAL_RCC_OscConfig+0xe02>
 80076c0:	2302      	movs	r3, #2
 80076c2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076c6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80076ca:	fa93 f3a3 	rbit	r3, r3
 80076ce:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80076d2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076d6:	fab3 f383 	clz	r3, r3
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	095b      	lsrs	r3, r3, #5
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	f043 0301 	orr.w	r3, r3, #1
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d102      	bne.n	80076f0 <HAL_RCC_OscConfig+0x488>
 80076ea:	4b73      	ldr	r3, [pc, #460]	; (80078b8 <HAL_RCC_OscConfig+0x650>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	e013      	b.n	8007718 <HAL_RCC_OscConfig+0x4b0>
 80076f0:	2302      	movs	r3, #2
 80076f2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076f6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80076fa:	fa93 f3a3 	rbit	r3, r3
 80076fe:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8007702:	2302      	movs	r3, #2
 8007704:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8007708:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800770c:	fa93 f3a3 	rbit	r3, r3
 8007710:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8007714:	4b68      	ldr	r3, [pc, #416]	; (80078b8 <HAL_RCC_OscConfig+0x650>)
 8007716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007718:	2202      	movs	r2, #2
 800771a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800771e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8007722:	fa92 f2a2 	rbit	r2, r2
 8007726:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800772a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800772e:	fab2 f282 	clz	r2, r2
 8007732:	b2d2      	uxtb	r2, r2
 8007734:	f042 0220 	orr.w	r2, r2, #32
 8007738:	b2d2      	uxtb	r2, r2
 800773a:	f002 021f 	and.w	r2, r2, #31
 800773e:	2101      	movs	r1, #1
 8007740:	fa01 f202 	lsl.w	r2, r1, r2
 8007744:	4013      	ands	r3, r2
 8007746:	2b00      	cmp	r3, #0
 8007748:	d0af      	beq.n	80076aa <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800774a:	4b5b      	ldr	r3, [pc, #364]	; (80078b8 <HAL_RCC_OscConfig+0x650>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007752:	1d3b      	adds	r3, r7, #4
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	695b      	ldr	r3, [r3, #20]
 8007758:	21f8      	movs	r1, #248	; 0xf8
 800775a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800775e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007762:	fa91 f1a1 	rbit	r1, r1
 8007766:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800776a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800776e:	fab1 f181 	clz	r1, r1
 8007772:	b2c9      	uxtb	r1, r1
 8007774:	408b      	lsls	r3, r1
 8007776:	4950      	ldr	r1, [pc, #320]	; (80078b8 <HAL_RCC_OscConfig+0x650>)
 8007778:	4313      	orrs	r3, r2
 800777a:	600b      	str	r3, [r1, #0]
 800777c:	e06a      	b.n	8007854 <HAL_RCC_OscConfig+0x5ec>
 800777e:	2301      	movs	r3, #1
 8007780:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007784:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007788:	fa93 f3a3 	rbit	r3, r3
 800778c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8007790:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007794:	fab3 f383 	clz	r3, r3
 8007798:	b2db      	uxtb	r3, r3
 800779a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800779e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	461a      	mov	r2, r3
 80077a6:	2300      	movs	r3, #0
 80077a8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077aa:	f7fd fcab 	bl	8005104 <HAL_GetTick>
 80077ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077b2:	e00a      	b.n	80077ca <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80077b4:	f7fd fca6 	bl	8005104 <HAL_GetTick>
 80077b8:	4602      	mov	r2, r0
 80077ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80077be:	1ad3      	subs	r3, r2, r3
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d902      	bls.n	80077ca <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80077c4:	2303      	movs	r3, #3
 80077c6:	f000 bc50 	b.w	800806a <HAL_RCC_OscConfig+0xe02>
 80077ca:	2302      	movs	r3, #2
 80077cc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80077d4:	fa93 f3a3 	rbit	r3, r3
 80077d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80077dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077e0:	fab3 f383 	clz	r3, r3
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	095b      	lsrs	r3, r3, #5
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	f043 0301 	orr.w	r3, r3, #1
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d102      	bne.n	80077fa <HAL_RCC_OscConfig+0x592>
 80077f4:	4b30      	ldr	r3, [pc, #192]	; (80078b8 <HAL_RCC_OscConfig+0x650>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	e013      	b.n	8007822 <HAL_RCC_OscConfig+0x5ba>
 80077fa:	2302      	movs	r3, #2
 80077fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007800:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007804:	fa93 f3a3 	rbit	r3, r3
 8007808:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800780c:	2302      	movs	r3, #2
 800780e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007812:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007816:	fa93 f3a3 	rbit	r3, r3
 800781a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800781e:	4b26      	ldr	r3, [pc, #152]	; (80078b8 <HAL_RCC_OscConfig+0x650>)
 8007820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007822:	2202      	movs	r2, #2
 8007824:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8007828:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800782c:	fa92 f2a2 	rbit	r2, r2
 8007830:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8007834:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8007838:	fab2 f282 	clz	r2, r2
 800783c:	b2d2      	uxtb	r2, r2
 800783e:	f042 0220 	orr.w	r2, r2, #32
 8007842:	b2d2      	uxtb	r2, r2
 8007844:	f002 021f 	and.w	r2, r2, #31
 8007848:	2101      	movs	r1, #1
 800784a:	fa01 f202 	lsl.w	r2, r1, r2
 800784e:	4013      	ands	r3, r2
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1af      	bne.n	80077b4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007854:	1d3b      	adds	r3, r7, #4
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f003 0308 	and.w	r3, r3, #8
 800785e:	2b00      	cmp	r3, #0
 8007860:	f000 80da 	beq.w	8007a18 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007864:	1d3b      	adds	r3, r7, #4
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	699b      	ldr	r3, [r3, #24]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d069      	beq.n	8007942 <HAL_RCC_OscConfig+0x6da>
 800786e:	2301      	movs	r3, #1
 8007870:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007874:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007878:	fa93 f3a3 	rbit	r3, r3
 800787c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8007880:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007884:	fab3 f383 	clz	r3, r3
 8007888:	b2db      	uxtb	r3, r3
 800788a:	461a      	mov	r2, r3
 800788c:	4b0b      	ldr	r3, [pc, #44]	; (80078bc <HAL_RCC_OscConfig+0x654>)
 800788e:	4413      	add	r3, r2
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	461a      	mov	r2, r3
 8007894:	2301      	movs	r3, #1
 8007896:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007898:	f7fd fc34 	bl	8005104 <HAL_GetTick>
 800789c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078a0:	e00e      	b.n	80078c0 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80078a2:	f7fd fc2f 	bl	8005104 <HAL_GetTick>
 80078a6:	4602      	mov	r2, r0
 80078a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80078ac:	1ad3      	subs	r3, r2, r3
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	d906      	bls.n	80078c0 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80078b2:	2303      	movs	r3, #3
 80078b4:	e3d9      	b.n	800806a <HAL_RCC_OscConfig+0xe02>
 80078b6:	bf00      	nop
 80078b8:	40021000 	.word	0x40021000
 80078bc:	10908120 	.word	0x10908120
 80078c0:	2302      	movs	r3, #2
 80078c2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80078ca:	fa93 f3a3 	rbit	r3, r3
 80078ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80078d2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80078d6:	2202      	movs	r2, #2
 80078d8:	601a      	str	r2, [r3, #0]
 80078da:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	fa93 f2a3 	rbit	r2, r3
 80078e4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80078e8:	601a      	str	r2, [r3, #0]
 80078ea:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80078ee:	2202      	movs	r2, #2
 80078f0:	601a      	str	r2, [r3, #0]
 80078f2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	fa93 f2a3 	rbit	r2, r3
 80078fc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8007900:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007902:	4ba5      	ldr	r3, [pc, #660]	; (8007b98 <HAL_RCC_OscConfig+0x930>)
 8007904:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007906:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800790a:	2102      	movs	r1, #2
 800790c:	6019      	str	r1, [r3, #0]
 800790e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	fa93 f1a3 	rbit	r1, r3
 8007918:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800791c:	6019      	str	r1, [r3, #0]
  return result;
 800791e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	fab3 f383 	clz	r3, r3
 8007928:	b2db      	uxtb	r3, r3
 800792a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800792e:	b2db      	uxtb	r3, r3
 8007930:	f003 031f 	and.w	r3, r3, #31
 8007934:	2101      	movs	r1, #1
 8007936:	fa01 f303 	lsl.w	r3, r1, r3
 800793a:	4013      	ands	r3, r2
 800793c:	2b00      	cmp	r3, #0
 800793e:	d0b0      	beq.n	80078a2 <HAL_RCC_OscConfig+0x63a>
 8007940:	e06a      	b.n	8007a18 <HAL_RCC_OscConfig+0x7b0>
 8007942:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8007946:	2201      	movs	r2, #1
 8007948:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800794a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	fa93 f2a3 	rbit	r2, r3
 8007954:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8007958:	601a      	str	r2, [r3, #0]
  return result;
 800795a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800795e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007960:	fab3 f383 	clz	r3, r3
 8007964:	b2db      	uxtb	r3, r3
 8007966:	461a      	mov	r2, r3
 8007968:	4b8c      	ldr	r3, [pc, #560]	; (8007b9c <HAL_RCC_OscConfig+0x934>)
 800796a:	4413      	add	r3, r2
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	461a      	mov	r2, r3
 8007970:	2300      	movs	r3, #0
 8007972:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007974:	f7fd fbc6 	bl	8005104 <HAL_GetTick>
 8007978:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800797c:	e009      	b.n	8007992 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800797e:	f7fd fbc1 	bl	8005104 <HAL_GetTick>
 8007982:	4602      	mov	r2, r0
 8007984:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	2b02      	cmp	r3, #2
 800798c:	d901      	bls.n	8007992 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800798e:	2303      	movs	r3, #3
 8007990:	e36b      	b.n	800806a <HAL_RCC_OscConfig+0xe02>
 8007992:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8007996:	2202      	movs	r2, #2
 8007998:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800799a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	fa93 f2a3 	rbit	r2, r3
 80079a4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80079a8:	601a      	str	r2, [r3, #0]
 80079aa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80079ae:	2202      	movs	r2, #2
 80079b0:	601a      	str	r2, [r3, #0]
 80079b2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	fa93 f2a3 	rbit	r2, r3
 80079bc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80079c0:	601a      	str	r2, [r3, #0]
 80079c2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80079c6:	2202      	movs	r2, #2
 80079c8:	601a      	str	r2, [r3, #0]
 80079ca:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	fa93 f2a3 	rbit	r2, r3
 80079d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80079d8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079da:	4b6f      	ldr	r3, [pc, #444]	; (8007b98 <HAL_RCC_OscConfig+0x930>)
 80079dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079de:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80079e2:	2102      	movs	r1, #2
 80079e4:	6019      	str	r1, [r3, #0]
 80079e6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	fa93 f1a3 	rbit	r1, r3
 80079f0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80079f4:	6019      	str	r1, [r3, #0]
  return result;
 80079f6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	fab3 f383 	clz	r3, r3
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	f003 031f 	and.w	r3, r3, #31
 8007a0c:	2101      	movs	r1, #1
 8007a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8007a12:	4013      	ands	r3, r2
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1b2      	bne.n	800797e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a18:	1d3b      	adds	r3, r7, #4
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 0304 	and.w	r3, r3, #4
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	f000 8158 	beq.w	8007cd8 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a2e:	4b5a      	ldr	r3, [pc, #360]	; (8007b98 <HAL_RCC_OscConfig+0x930>)
 8007a30:	69db      	ldr	r3, [r3, #28]
 8007a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d112      	bne.n	8007a60 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a3a:	4b57      	ldr	r3, [pc, #348]	; (8007b98 <HAL_RCC_OscConfig+0x930>)
 8007a3c:	69db      	ldr	r3, [r3, #28]
 8007a3e:	4a56      	ldr	r2, [pc, #344]	; (8007b98 <HAL_RCC_OscConfig+0x930>)
 8007a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a44:	61d3      	str	r3, [r2, #28]
 8007a46:	4b54      	ldr	r3, [pc, #336]	; (8007b98 <HAL_RCC_OscConfig+0x930>)
 8007a48:	69db      	ldr	r3, [r3, #28]
 8007a4a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8007a4e:	f107 0308 	add.w	r3, r7, #8
 8007a52:	601a      	str	r2, [r3, #0]
 8007a54:	f107 0308 	add.w	r3, r7, #8
 8007a58:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a60:	4b4f      	ldr	r3, [pc, #316]	; (8007ba0 <HAL_RCC_OscConfig+0x938>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d11a      	bne.n	8007aa2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a6c:	4b4c      	ldr	r3, [pc, #304]	; (8007ba0 <HAL_RCC_OscConfig+0x938>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a4b      	ldr	r2, [pc, #300]	; (8007ba0 <HAL_RCC_OscConfig+0x938>)
 8007a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a76:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a78:	f7fd fb44 	bl	8005104 <HAL_GetTick>
 8007a7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a80:	e009      	b.n	8007a96 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a82:	f7fd fb3f 	bl	8005104 <HAL_GetTick>
 8007a86:	4602      	mov	r2, r0
 8007a88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007a8c:	1ad3      	subs	r3, r2, r3
 8007a8e:	2b64      	cmp	r3, #100	; 0x64
 8007a90:	d901      	bls.n	8007a96 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8007a92:	2303      	movs	r3, #3
 8007a94:	e2e9      	b.n	800806a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a96:	4b42      	ldr	r3, [pc, #264]	; (8007ba0 <HAL_RCC_OscConfig+0x938>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d0ef      	beq.n	8007a82 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007aa2:	1d3b      	adds	r3, r7, #4
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d106      	bne.n	8007aba <HAL_RCC_OscConfig+0x852>
 8007aac:	4b3a      	ldr	r3, [pc, #232]	; (8007b98 <HAL_RCC_OscConfig+0x930>)
 8007aae:	6a1b      	ldr	r3, [r3, #32]
 8007ab0:	4a39      	ldr	r2, [pc, #228]	; (8007b98 <HAL_RCC_OscConfig+0x930>)
 8007ab2:	f043 0301 	orr.w	r3, r3, #1
 8007ab6:	6213      	str	r3, [r2, #32]
 8007ab8:	e02f      	b.n	8007b1a <HAL_RCC_OscConfig+0x8b2>
 8007aba:	1d3b      	adds	r3, r7, #4
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d10c      	bne.n	8007ade <HAL_RCC_OscConfig+0x876>
 8007ac4:	4b34      	ldr	r3, [pc, #208]	; (8007b98 <HAL_RCC_OscConfig+0x930>)
 8007ac6:	6a1b      	ldr	r3, [r3, #32]
 8007ac8:	4a33      	ldr	r2, [pc, #204]	; (8007b98 <HAL_RCC_OscConfig+0x930>)
 8007aca:	f023 0301 	bic.w	r3, r3, #1
 8007ace:	6213      	str	r3, [r2, #32]
 8007ad0:	4b31      	ldr	r3, [pc, #196]	; (8007b98 <HAL_RCC_OscConfig+0x930>)
 8007ad2:	6a1b      	ldr	r3, [r3, #32]
 8007ad4:	4a30      	ldr	r2, [pc, #192]	; (8007b98 <HAL_RCC_OscConfig+0x930>)
 8007ad6:	f023 0304 	bic.w	r3, r3, #4
 8007ada:	6213      	str	r3, [r2, #32]
 8007adc:	e01d      	b.n	8007b1a <HAL_RCC_OscConfig+0x8b2>
 8007ade:	1d3b      	adds	r3, r7, #4
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	2b05      	cmp	r3, #5
 8007ae6:	d10c      	bne.n	8007b02 <HAL_RCC_OscConfig+0x89a>
 8007ae8:	4b2b      	ldr	r3, [pc, #172]	; (8007b98 <HAL_RCC_OscConfig+0x930>)
 8007aea:	6a1b      	ldr	r3, [r3, #32]
 8007aec:	4a2a      	ldr	r2, [pc, #168]	; (8007b98 <HAL_RCC_OscConfig+0x930>)
 8007aee:	f043 0304 	orr.w	r3, r3, #4
 8007af2:	6213      	str	r3, [r2, #32]
 8007af4:	4b28      	ldr	r3, [pc, #160]	; (8007b98 <HAL_RCC_OscConfig+0x930>)
 8007af6:	6a1b      	ldr	r3, [r3, #32]
 8007af8:	4a27      	ldr	r2, [pc, #156]	; (8007b98 <HAL_RCC_OscConfig+0x930>)
 8007afa:	f043 0301 	orr.w	r3, r3, #1
 8007afe:	6213      	str	r3, [r2, #32]
 8007b00:	e00b      	b.n	8007b1a <HAL_RCC_OscConfig+0x8b2>
 8007b02:	4b25      	ldr	r3, [pc, #148]	; (8007b98 <HAL_RCC_OscConfig+0x930>)
 8007b04:	6a1b      	ldr	r3, [r3, #32]
 8007b06:	4a24      	ldr	r2, [pc, #144]	; (8007b98 <HAL_RCC_OscConfig+0x930>)
 8007b08:	f023 0301 	bic.w	r3, r3, #1
 8007b0c:	6213      	str	r3, [r2, #32]
 8007b0e:	4b22      	ldr	r3, [pc, #136]	; (8007b98 <HAL_RCC_OscConfig+0x930>)
 8007b10:	6a1b      	ldr	r3, [r3, #32]
 8007b12:	4a21      	ldr	r2, [pc, #132]	; (8007b98 <HAL_RCC_OscConfig+0x930>)
 8007b14:	f023 0304 	bic.w	r3, r3, #4
 8007b18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007b1a:	1d3b      	adds	r3, r7, #4
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d06b      	beq.n	8007bfc <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b24:	f7fd faee 	bl	8005104 <HAL_GetTick>
 8007b28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b2c:	e00b      	b.n	8007b46 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b2e:	f7fd fae9 	bl	8005104 <HAL_GetTick>
 8007b32:	4602      	mov	r2, r0
 8007b34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d901      	bls.n	8007b46 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8007b42:	2303      	movs	r3, #3
 8007b44:	e291      	b.n	800806a <HAL_RCC_OscConfig+0xe02>
 8007b46:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007b4a:	2202      	movs	r2, #2
 8007b4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b4e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	fa93 f2a3 	rbit	r2, r3
 8007b58:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8007b5c:	601a      	str	r2, [r3, #0]
 8007b5e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8007b62:	2202      	movs	r2, #2
 8007b64:	601a      	str	r2, [r3, #0]
 8007b66:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	fa93 f2a3 	rbit	r2, r3
 8007b70:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8007b74:	601a      	str	r2, [r3, #0]
  return result;
 8007b76:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8007b7a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b7c:	fab3 f383 	clz	r3, r3
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	095b      	lsrs	r3, r3, #5
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	f043 0302 	orr.w	r3, r3, #2
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	2b02      	cmp	r3, #2
 8007b8e:	d109      	bne.n	8007ba4 <HAL_RCC_OscConfig+0x93c>
 8007b90:	4b01      	ldr	r3, [pc, #4]	; (8007b98 <HAL_RCC_OscConfig+0x930>)
 8007b92:	6a1b      	ldr	r3, [r3, #32]
 8007b94:	e014      	b.n	8007bc0 <HAL_RCC_OscConfig+0x958>
 8007b96:	bf00      	nop
 8007b98:	40021000 	.word	0x40021000
 8007b9c:	10908120 	.word	0x10908120
 8007ba0:	40007000 	.word	0x40007000
 8007ba4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8007ba8:	2202      	movs	r2, #2
 8007baa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bac:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	fa93 f2a3 	rbit	r2, r3
 8007bb6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8007bba:	601a      	str	r2, [r3, #0]
 8007bbc:	4bbb      	ldr	r3, [pc, #748]	; (8007eac <HAL_RCC_OscConfig+0xc44>)
 8007bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8007bc4:	2102      	movs	r1, #2
 8007bc6:	6011      	str	r1, [r2, #0]
 8007bc8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8007bcc:	6812      	ldr	r2, [r2, #0]
 8007bce:	fa92 f1a2 	rbit	r1, r2
 8007bd2:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8007bd6:	6011      	str	r1, [r2, #0]
  return result;
 8007bd8:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8007bdc:	6812      	ldr	r2, [r2, #0]
 8007bde:	fab2 f282 	clz	r2, r2
 8007be2:	b2d2      	uxtb	r2, r2
 8007be4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007be8:	b2d2      	uxtb	r2, r2
 8007bea:	f002 021f 	and.w	r2, r2, #31
 8007bee:	2101      	movs	r1, #1
 8007bf0:	fa01 f202 	lsl.w	r2, r1, r2
 8007bf4:	4013      	ands	r3, r2
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d099      	beq.n	8007b2e <HAL_RCC_OscConfig+0x8c6>
 8007bfa:	e063      	b.n	8007cc4 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007bfc:	f7fd fa82 	bl	8005104 <HAL_GetTick>
 8007c00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c04:	e00b      	b.n	8007c1e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c06:	f7fd fa7d 	bl	8005104 <HAL_GetTick>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007c10:	1ad3      	subs	r3, r2, r3
 8007c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d901      	bls.n	8007c1e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	e225      	b.n	800806a <HAL_RCC_OscConfig+0xe02>
 8007c1e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007c22:	2202      	movs	r2, #2
 8007c24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c26:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	fa93 f2a3 	rbit	r2, r3
 8007c30:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007c34:	601a      	str	r2, [r3, #0]
 8007c36:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007c3a:	2202      	movs	r2, #2
 8007c3c:	601a      	str	r2, [r3, #0]
 8007c3e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	fa93 f2a3 	rbit	r2, r3
 8007c48:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8007c4c:	601a      	str	r2, [r3, #0]
  return result;
 8007c4e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8007c52:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c54:	fab3 f383 	clz	r3, r3
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	095b      	lsrs	r3, r3, #5
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	f043 0302 	orr.w	r3, r3, #2
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	d102      	bne.n	8007c6e <HAL_RCC_OscConfig+0xa06>
 8007c68:	4b90      	ldr	r3, [pc, #576]	; (8007eac <HAL_RCC_OscConfig+0xc44>)
 8007c6a:	6a1b      	ldr	r3, [r3, #32]
 8007c6c:	e00d      	b.n	8007c8a <HAL_RCC_OscConfig+0xa22>
 8007c6e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8007c72:	2202      	movs	r2, #2
 8007c74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c76:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	fa93 f2a3 	rbit	r2, r3
 8007c80:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8007c84:	601a      	str	r2, [r3, #0]
 8007c86:	4b89      	ldr	r3, [pc, #548]	; (8007eac <HAL_RCC_OscConfig+0xc44>)
 8007c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8007c8e:	2102      	movs	r1, #2
 8007c90:	6011      	str	r1, [r2, #0]
 8007c92:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8007c96:	6812      	ldr	r2, [r2, #0]
 8007c98:	fa92 f1a2 	rbit	r1, r2
 8007c9c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8007ca0:	6011      	str	r1, [r2, #0]
  return result;
 8007ca2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8007ca6:	6812      	ldr	r2, [r2, #0]
 8007ca8:	fab2 f282 	clz	r2, r2
 8007cac:	b2d2      	uxtb	r2, r2
 8007cae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cb2:	b2d2      	uxtb	r2, r2
 8007cb4:	f002 021f 	and.w	r2, r2, #31
 8007cb8:	2101      	movs	r1, #1
 8007cba:	fa01 f202 	lsl.w	r2, r1, r2
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1a0      	bne.n	8007c06 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007cc4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d105      	bne.n	8007cd8 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ccc:	4b77      	ldr	r3, [pc, #476]	; (8007eac <HAL_RCC_OscConfig+0xc44>)
 8007cce:	69db      	ldr	r3, [r3, #28]
 8007cd0:	4a76      	ldr	r2, [pc, #472]	; (8007eac <HAL_RCC_OscConfig+0xc44>)
 8007cd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cd6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007cd8:	1d3b      	adds	r3, r7, #4
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	69db      	ldr	r3, [r3, #28]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	f000 81c2 	beq.w	8008068 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007ce4:	4b71      	ldr	r3, [pc, #452]	; (8007eac <HAL_RCC_OscConfig+0xc44>)
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	f003 030c 	and.w	r3, r3, #12
 8007cec:	2b08      	cmp	r3, #8
 8007cee:	f000 819c 	beq.w	800802a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007cf2:	1d3b      	adds	r3, r7, #4
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	69db      	ldr	r3, [r3, #28]
 8007cf8:	2b02      	cmp	r3, #2
 8007cfa:	f040 8114 	bne.w	8007f26 <HAL_RCC_OscConfig+0xcbe>
 8007cfe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007d02:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007d06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d08:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	fa93 f2a3 	rbit	r2, r3
 8007d12:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007d16:	601a      	str	r2, [r3, #0]
  return result;
 8007d18:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8007d1c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d1e:	fab3 f383 	clz	r3, r3
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007d28:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	461a      	mov	r2, r3
 8007d30:	2300      	movs	r3, #0
 8007d32:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d34:	f7fd f9e6 	bl	8005104 <HAL_GetTick>
 8007d38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007d3c:	e009      	b.n	8007d52 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d3e:	f7fd f9e1 	bl	8005104 <HAL_GetTick>
 8007d42:	4602      	mov	r2, r0
 8007d44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007d48:	1ad3      	subs	r3, r2, r3
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	d901      	bls.n	8007d52 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8007d4e:	2303      	movs	r3, #3
 8007d50:	e18b      	b.n	800806a <HAL_RCC_OscConfig+0xe02>
 8007d52:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007d56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007d5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d5c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	fa93 f2a3 	rbit	r2, r3
 8007d66:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007d6a:	601a      	str	r2, [r3, #0]
  return result;
 8007d6c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007d70:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007d72:	fab3 f383 	clz	r3, r3
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	095b      	lsrs	r3, r3, #5
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	f043 0301 	orr.w	r3, r3, #1
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d102      	bne.n	8007d8c <HAL_RCC_OscConfig+0xb24>
 8007d86:	4b49      	ldr	r3, [pc, #292]	; (8007eac <HAL_RCC_OscConfig+0xc44>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	e01b      	b.n	8007dc4 <HAL_RCC_OscConfig+0xb5c>
 8007d8c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007d90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007d94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d96:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	fa93 f2a3 	rbit	r2, r3
 8007da0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007da4:	601a      	str	r2, [r3, #0]
 8007da6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007daa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007dae:	601a      	str	r2, [r3, #0]
 8007db0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	fa93 f2a3 	rbit	r2, r3
 8007dba:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007dbe:	601a      	str	r2, [r3, #0]
 8007dc0:	4b3a      	ldr	r3, [pc, #232]	; (8007eac <HAL_RCC_OscConfig+0xc44>)
 8007dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007dc8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007dcc:	6011      	str	r1, [r2, #0]
 8007dce:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007dd2:	6812      	ldr	r2, [r2, #0]
 8007dd4:	fa92 f1a2 	rbit	r1, r2
 8007dd8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8007ddc:	6011      	str	r1, [r2, #0]
  return result;
 8007dde:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8007de2:	6812      	ldr	r2, [r2, #0]
 8007de4:	fab2 f282 	clz	r2, r2
 8007de8:	b2d2      	uxtb	r2, r2
 8007dea:	f042 0220 	orr.w	r2, r2, #32
 8007dee:	b2d2      	uxtb	r2, r2
 8007df0:	f002 021f 	and.w	r2, r2, #31
 8007df4:	2101      	movs	r1, #1
 8007df6:	fa01 f202 	lsl.w	r2, r1, r2
 8007dfa:	4013      	ands	r3, r2
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d19e      	bne.n	8007d3e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e00:	4b2a      	ldr	r3, [pc, #168]	; (8007eac <HAL_RCC_OscConfig+0xc44>)
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007e08:	1d3b      	adds	r3, r7, #4
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007e0e:	1d3b      	adds	r3, r7, #4
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	6a1b      	ldr	r3, [r3, #32]
 8007e14:	430b      	orrs	r3, r1
 8007e16:	4925      	ldr	r1, [pc, #148]	; (8007eac <HAL_RCC_OscConfig+0xc44>)
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	604b      	str	r3, [r1, #4]
 8007e1c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007e20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007e24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e26:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	fa93 f2a3 	rbit	r2, r3
 8007e30:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007e34:	601a      	str	r2, [r3, #0]
  return result;
 8007e36:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007e3a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e3c:	fab3 f383 	clz	r3, r3
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007e46:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	2301      	movs	r3, #1
 8007e50:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e52:	f7fd f957 	bl	8005104 <HAL_GetTick>
 8007e56:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007e5a:	e009      	b.n	8007e70 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e5c:	f7fd f952 	bl	8005104 <HAL_GetTick>
 8007e60:	4602      	mov	r2, r0
 8007e62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007e66:	1ad3      	subs	r3, r2, r3
 8007e68:	2b02      	cmp	r3, #2
 8007e6a:	d901      	bls.n	8007e70 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8007e6c:	2303      	movs	r3, #3
 8007e6e:	e0fc      	b.n	800806a <HAL_RCC_OscConfig+0xe02>
 8007e70:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007e74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007e78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e7a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	fa93 f2a3 	rbit	r2, r3
 8007e84:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007e88:	601a      	str	r2, [r3, #0]
  return result;
 8007e8a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8007e8e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007e90:	fab3 f383 	clz	r3, r3
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	095b      	lsrs	r3, r3, #5
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	f043 0301 	orr.w	r3, r3, #1
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d105      	bne.n	8007eb0 <HAL_RCC_OscConfig+0xc48>
 8007ea4:	4b01      	ldr	r3, [pc, #4]	; (8007eac <HAL_RCC_OscConfig+0xc44>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	e01e      	b.n	8007ee8 <HAL_RCC_OscConfig+0xc80>
 8007eaa:	bf00      	nop
 8007eac:	40021000 	.word	0x40021000
 8007eb0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007eb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007eb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007eba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	fa93 f2a3 	rbit	r2, r3
 8007ec4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007ec8:	601a      	str	r2, [r3, #0]
 8007eca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007ece:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007ed2:	601a      	str	r2, [r3, #0]
 8007ed4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	fa93 f2a3 	rbit	r2, r3
 8007ede:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007ee2:	601a      	str	r2, [r3, #0]
 8007ee4:	4b63      	ldr	r3, [pc, #396]	; (8008074 <HAL_RCC_OscConfig+0xe0c>)
 8007ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8007eec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007ef0:	6011      	str	r1, [r2, #0]
 8007ef2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8007ef6:	6812      	ldr	r2, [r2, #0]
 8007ef8:	fa92 f1a2 	rbit	r1, r2
 8007efc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8007f00:	6011      	str	r1, [r2, #0]
  return result;
 8007f02:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8007f06:	6812      	ldr	r2, [r2, #0]
 8007f08:	fab2 f282 	clz	r2, r2
 8007f0c:	b2d2      	uxtb	r2, r2
 8007f0e:	f042 0220 	orr.w	r2, r2, #32
 8007f12:	b2d2      	uxtb	r2, r2
 8007f14:	f002 021f 	and.w	r2, r2, #31
 8007f18:	2101      	movs	r1, #1
 8007f1a:	fa01 f202 	lsl.w	r2, r1, r2
 8007f1e:	4013      	ands	r3, r2
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d09b      	beq.n	8007e5c <HAL_RCC_OscConfig+0xbf4>
 8007f24:	e0a0      	b.n	8008068 <HAL_RCC_OscConfig+0xe00>
 8007f26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007f2a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007f2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	fa93 f2a3 	rbit	r2, r3
 8007f3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007f3e:	601a      	str	r2, [r3, #0]
  return result;
 8007f40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007f44:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f46:	fab3 f383 	clz	r3, r3
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007f50:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	461a      	mov	r2, r3
 8007f58:	2300      	movs	r3, #0
 8007f5a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f5c:	f7fd f8d2 	bl	8005104 <HAL_GetTick>
 8007f60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007f64:	e009      	b.n	8007f7a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f66:	f7fd f8cd 	bl	8005104 <HAL_GetTick>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007f70:	1ad3      	subs	r3, r2, r3
 8007f72:	2b02      	cmp	r3, #2
 8007f74:	d901      	bls.n	8007f7a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8007f76:	2303      	movs	r3, #3
 8007f78:	e077      	b.n	800806a <HAL_RCC_OscConfig+0xe02>
 8007f7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007f7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007f82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	fa93 f2a3 	rbit	r2, r3
 8007f8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f92:	601a      	str	r2, [r3, #0]
  return result;
 8007f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f98:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007f9a:	fab3 f383 	clz	r3, r3
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	095b      	lsrs	r3, r3, #5
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	f043 0301 	orr.w	r3, r3, #1
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d102      	bne.n	8007fb4 <HAL_RCC_OscConfig+0xd4c>
 8007fae:	4b31      	ldr	r3, [pc, #196]	; (8008074 <HAL_RCC_OscConfig+0xe0c>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	e01b      	b.n	8007fec <HAL_RCC_OscConfig+0xd84>
 8007fb4:	f107 0320 	add.w	r3, r7, #32
 8007fb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007fbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fbe:	f107 0320 	add.w	r3, r7, #32
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	fa93 f2a3 	rbit	r2, r3
 8007fc8:	f107 031c 	add.w	r3, r7, #28
 8007fcc:	601a      	str	r2, [r3, #0]
 8007fce:	f107 0318 	add.w	r3, r7, #24
 8007fd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007fd6:	601a      	str	r2, [r3, #0]
 8007fd8:	f107 0318 	add.w	r3, r7, #24
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	fa93 f2a3 	rbit	r2, r3
 8007fe2:	f107 0314 	add.w	r3, r7, #20
 8007fe6:	601a      	str	r2, [r3, #0]
 8007fe8:	4b22      	ldr	r3, [pc, #136]	; (8008074 <HAL_RCC_OscConfig+0xe0c>)
 8007fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fec:	f107 0210 	add.w	r2, r7, #16
 8007ff0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007ff4:	6011      	str	r1, [r2, #0]
 8007ff6:	f107 0210 	add.w	r2, r7, #16
 8007ffa:	6812      	ldr	r2, [r2, #0]
 8007ffc:	fa92 f1a2 	rbit	r1, r2
 8008000:	f107 020c 	add.w	r2, r7, #12
 8008004:	6011      	str	r1, [r2, #0]
  return result;
 8008006:	f107 020c 	add.w	r2, r7, #12
 800800a:	6812      	ldr	r2, [r2, #0]
 800800c:	fab2 f282 	clz	r2, r2
 8008010:	b2d2      	uxtb	r2, r2
 8008012:	f042 0220 	orr.w	r2, r2, #32
 8008016:	b2d2      	uxtb	r2, r2
 8008018:	f002 021f 	and.w	r2, r2, #31
 800801c:	2101      	movs	r1, #1
 800801e:	fa01 f202 	lsl.w	r2, r1, r2
 8008022:	4013      	ands	r3, r2
 8008024:	2b00      	cmp	r3, #0
 8008026:	d19e      	bne.n	8007f66 <HAL_RCC_OscConfig+0xcfe>
 8008028:	e01e      	b.n	8008068 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800802a:	1d3b      	adds	r3, r7, #4
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	69db      	ldr	r3, [r3, #28]
 8008030:	2b01      	cmp	r3, #1
 8008032:	d101      	bne.n	8008038 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	e018      	b.n	800806a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008038:	4b0e      	ldr	r3, [pc, #56]	; (8008074 <HAL_RCC_OscConfig+0xe0c>)
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8008040:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8008044:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008048:	1d3b      	adds	r3, r7, #4
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	6a1b      	ldr	r3, [r3, #32]
 800804e:	429a      	cmp	r2, r3
 8008050:	d108      	bne.n	8008064 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8008052:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8008056:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800805a:	1d3b      	adds	r3, r7, #4
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8008060:	429a      	cmp	r2, r3
 8008062:	d001      	beq.n	8008068 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8008064:	2301      	movs	r3, #1
 8008066:	e000      	b.n	800806a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8008068:	2300      	movs	r3, #0
}
 800806a:	4618      	mov	r0, r3
 800806c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	40021000 	.word	0x40021000

08008078 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b09e      	sub	sp, #120	; 0x78
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8008082:	2300      	movs	r3, #0
 8008084:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d101      	bne.n	8008090 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	e162      	b.n	8008356 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008090:	4b90      	ldr	r3, [pc, #576]	; (80082d4 <HAL_RCC_ClockConfig+0x25c>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f003 0307 	and.w	r3, r3, #7
 8008098:	683a      	ldr	r2, [r7, #0]
 800809a:	429a      	cmp	r2, r3
 800809c:	d910      	bls.n	80080c0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800809e:	4b8d      	ldr	r3, [pc, #564]	; (80082d4 <HAL_RCC_ClockConfig+0x25c>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f023 0207 	bic.w	r2, r3, #7
 80080a6:	498b      	ldr	r1, [pc, #556]	; (80082d4 <HAL_RCC_ClockConfig+0x25c>)
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	4313      	orrs	r3, r2
 80080ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80080ae:	4b89      	ldr	r3, [pc, #548]	; (80082d4 <HAL_RCC_ClockConfig+0x25c>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f003 0307 	and.w	r3, r3, #7
 80080b6:	683a      	ldr	r2, [r7, #0]
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d001      	beq.n	80080c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	e14a      	b.n	8008356 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f003 0302 	and.w	r3, r3, #2
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d008      	beq.n	80080de <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080cc:	4b82      	ldr	r3, [pc, #520]	; (80082d8 <HAL_RCC_ClockConfig+0x260>)
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	497f      	ldr	r1, [pc, #508]	; (80082d8 <HAL_RCC_ClockConfig+0x260>)
 80080da:	4313      	orrs	r3, r2
 80080dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f003 0301 	and.w	r3, r3, #1
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	f000 80dc 	beq.w	80082a4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d13c      	bne.n	800816e <HAL_RCC_ClockConfig+0xf6>
 80080f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80080f8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080fc:	fa93 f3a3 	rbit	r3, r3
 8008100:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8008102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008104:	fab3 f383 	clz	r3, r3
 8008108:	b2db      	uxtb	r3, r3
 800810a:	095b      	lsrs	r3, r3, #5
 800810c:	b2db      	uxtb	r3, r3
 800810e:	f043 0301 	orr.w	r3, r3, #1
 8008112:	b2db      	uxtb	r3, r3
 8008114:	2b01      	cmp	r3, #1
 8008116:	d102      	bne.n	800811e <HAL_RCC_ClockConfig+0xa6>
 8008118:	4b6f      	ldr	r3, [pc, #444]	; (80082d8 <HAL_RCC_ClockConfig+0x260>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	e00f      	b.n	800813e <HAL_RCC_ClockConfig+0xc6>
 800811e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008122:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008124:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008126:	fa93 f3a3 	rbit	r3, r3
 800812a:	667b      	str	r3, [r7, #100]	; 0x64
 800812c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008130:	663b      	str	r3, [r7, #96]	; 0x60
 8008132:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008134:	fa93 f3a3 	rbit	r3, r3
 8008138:	65fb      	str	r3, [r7, #92]	; 0x5c
 800813a:	4b67      	ldr	r3, [pc, #412]	; (80082d8 <HAL_RCC_ClockConfig+0x260>)
 800813c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008142:	65ba      	str	r2, [r7, #88]	; 0x58
 8008144:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008146:	fa92 f2a2 	rbit	r2, r2
 800814a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800814c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800814e:	fab2 f282 	clz	r2, r2
 8008152:	b2d2      	uxtb	r2, r2
 8008154:	f042 0220 	orr.w	r2, r2, #32
 8008158:	b2d2      	uxtb	r2, r2
 800815a:	f002 021f 	and.w	r2, r2, #31
 800815e:	2101      	movs	r1, #1
 8008160:	fa01 f202 	lsl.w	r2, r1, r2
 8008164:	4013      	ands	r3, r2
 8008166:	2b00      	cmp	r3, #0
 8008168:	d17b      	bne.n	8008262 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	e0f3      	b.n	8008356 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	2b02      	cmp	r3, #2
 8008174:	d13c      	bne.n	80081f0 <HAL_RCC_ClockConfig+0x178>
 8008176:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800817a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800817c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800817e:	fa93 f3a3 	rbit	r3, r3
 8008182:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008186:	fab3 f383 	clz	r3, r3
 800818a:	b2db      	uxtb	r3, r3
 800818c:	095b      	lsrs	r3, r3, #5
 800818e:	b2db      	uxtb	r3, r3
 8008190:	f043 0301 	orr.w	r3, r3, #1
 8008194:	b2db      	uxtb	r3, r3
 8008196:	2b01      	cmp	r3, #1
 8008198:	d102      	bne.n	80081a0 <HAL_RCC_ClockConfig+0x128>
 800819a:	4b4f      	ldr	r3, [pc, #316]	; (80082d8 <HAL_RCC_ClockConfig+0x260>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	e00f      	b.n	80081c0 <HAL_RCC_ClockConfig+0x148>
 80081a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80081a4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081a8:	fa93 f3a3 	rbit	r3, r3
 80081ac:	647b      	str	r3, [r7, #68]	; 0x44
 80081ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80081b2:	643b      	str	r3, [r7, #64]	; 0x40
 80081b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081b6:	fa93 f3a3 	rbit	r3, r3
 80081ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081bc:	4b46      	ldr	r3, [pc, #280]	; (80082d8 <HAL_RCC_ClockConfig+0x260>)
 80081be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80081c4:	63ba      	str	r2, [r7, #56]	; 0x38
 80081c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081c8:	fa92 f2a2 	rbit	r2, r2
 80081cc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80081ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081d0:	fab2 f282 	clz	r2, r2
 80081d4:	b2d2      	uxtb	r2, r2
 80081d6:	f042 0220 	orr.w	r2, r2, #32
 80081da:	b2d2      	uxtb	r2, r2
 80081dc:	f002 021f 	and.w	r2, r2, #31
 80081e0:	2101      	movs	r1, #1
 80081e2:	fa01 f202 	lsl.w	r2, r1, r2
 80081e6:	4013      	ands	r3, r2
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d13a      	bne.n	8008262 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	e0b2      	b.n	8008356 <HAL_RCC_ClockConfig+0x2de>
 80081f0:	2302      	movs	r3, #2
 80081f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f6:	fa93 f3a3 	rbit	r3, r3
 80081fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80081fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081fe:	fab3 f383 	clz	r3, r3
 8008202:	b2db      	uxtb	r3, r3
 8008204:	095b      	lsrs	r3, r3, #5
 8008206:	b2db      	uxtb	r3, r3
 8008208:	f043 0301 	orr.w	r3, r3, #1
 800820c:	b2db      	uxtb	r3, r3
 800820e:	2b01      	cmp	r3, #1
 8008210:	d102      	bne.n	8008218 <HAL_RCC_ClockConfig+0x1a0>
 8008212:	4b31      	ldr	r3, [pc, #196]	; (80082d8 <HAL_RCC_ClockConfig+0x260>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	e00d      	b.n	8008234 <HAL_RCC_ClockConfig+0x1bc>
 8008218:	2302      	movs	r3, #2
 800821a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800821c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800821e:	fa93 f3a3 	rbit	r3, r3
 8008222:	627b      	str	r3, [r7, #36]	; 0x24
 8008224:	2302      	movs	r3, #2
 8008226:	623b      	str	r3, [r7, #32]
 8008228:	6a3b      	ldr	r3, [r7, #32]
 800822a:	fa93 f3a3 	rbit	r3, r3
 800822e:	61fb      	str	r3, [r7, #28]
 8008230:	4b29      	ldr	r3, [pc, #164]	; (80082d8 <HAL_RCC_ClockConfig+0x260>)
 8008232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008234:	2202      	movs	r2, #2
 8008236:	61ba      	str	r2, [r7, #24]
 8008238:	69ba      	ldr	r2, [r7, #24]
 800823a:	fa92 f2a2 	rbit	r2, r2
 800823e:	617a      	str	r2, [r7, #20]
  return result;
 8008240:	697a      	ldr	r2, [r7, #20]
 8008242:	fab2 f282 	clz	r2, r2
 8008246:	b2d2      	uxtb	r2, r2
 8008248:	f042 0220 	orr.w	r2, r2, #32
 800824c:	b2d2      	uxtb	r2, r2
 800824e:	f002 021f 	and.w	r2, r2, #31
 8008252:	2101      	movs	r1, #1
 8008254:	fa01 f202 	lsl.w	r2, r1, r2
 8008258:	4013      	ands	r3, r2
 800825a:	2b00      	cmp	r3, #0
 800825c:	d101      	bne.n	8008262 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	e079      	b.n	8008356 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008262:	4b1d      	ldr	r3, [pc, #116]	; (80082d8 <HAL_RCC_ClockConfig+0x260>)
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	f023 0203 	bic.w	r2, r3, #3
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	491a      	ldr	r1, [pc, #104]	; (80082d8 <HAL_RCC_ClockConfig+0x260>)
 8008270:	4313      	orrs	r3, r2
 8008272:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008274:	f7fc ff46 	bl	8005104 <HAL_GetTick>
 8008278:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800827a:	e00a      	b.n	8008292 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800827c:	f7fc ff42 	bl	8005104 <HAL_GetTick>
 8008280:	4602      	mov	r2, r0
 8008282:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008284:	1ad3      	subs	r3, r2, r3
 8008286:	f241 3288 	movw	r2, #5000	; 0x1388
 800828a:	4293      	cmp	r3, r2
 800828c:	d901      	bls.n	8008292 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800828e:	2303      	movs	r3, #3
 8008290:	e061      	b.n	8008356 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008292:	4b11      	ldr	r3, [pc, #68]	; (80082d8 <HAL_RCC_ClockConfig+0x260>)
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	f003 020c 	and.w	r2, r3, #12
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d1eb      	bne.n	800827c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80082a4:	4b0b      	ldr	r3, [pc, #44]	; (80082d4 <HAL_RCC_ClockConfig+0x25c>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f003 0307 	and.w	r3, r3, #7
 80082ac:	683a      	ldr	r2, [r7, #0]
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d214      	bcs.n	80082dc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082b2:	4b08      	ldr	r3, [pc, #32]	; (80082d4 <HAL_RCC_ClockConfig+0x25c>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f023 0207 	bic.w	r2, r3, #7
 80082ba:	4906      	ldr	r1, [pc, #24]	; (80082d4 <HAL_RCC_ClockConfig+0x25c>)
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	4313      	orrs	r3, r2
 80082c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082c2:	4b04      	ldr	r3, [pc, #16]	; (80082d4 <HAL_RCC_ClockConfig+0x25c>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f003 0307 	and.w	r3, r3, #7
 80082ca:	683a      	ldr	r2, [r7, #0]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d005      	beq.n	80082dc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80082d0:	2301      	movs	r3, #1
 80082d2:	e040      	b.n	8008356 <HAL_RCC_ClockConfig+0x2de>
 80082d4:	40022000 	.word	0x40022000
 80082d8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 0304 	and.w	r3, r3, #4
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d008      	beq.n	80082fa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80082e8:	4b1d      	ldr	r3, [pc, #116]	; (8008360 <HAL_RCC_ClockConfig+0x2e8>)
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	491a      	ldr	r1, [pc, #104]	; (8008360 <HAL_RCC_ClockConfig+0x2e8>)
 80082f6:	4313      	orrs	r3, r2
 80082f8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f003 0308 	and.w	r3, r3, #8
 8008302:	2b00      	cmp	r3, #0
 8008304:	d009      	beq.n	800831a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008306:	4b16      	ldr	r3, [pc, #88]	; (8008360 <HAL_RCC_ClockConfig+0x2e8>)
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	691b      	ldr	r3, [r3, #16]
 8008312:	00db      	lsls	r3, r3, #3
 8008314:	4912      	ldr	r1, [pc, #72]	; (8008360 <HAL_RCC_ClockConfig+0x2e8>)
 8008316:	4313      	orrs	r3, r2
 8008318:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800831a:	f000 f829 	bl	8008370 <HAL_RCC_GetSysClockFreq>
 800831e:	4601      	mov	r1, r0
 8008320:	4b0f      	ldr	r3, [pc, #60]	; (8008360 <HAL_RCC_ClockConfig+0x2e8>)
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008328:	22f0      	movs	r2, #240	; 0xf0
 800832a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800832c:	693a      	ldr	r2, [r7, #16]
 800832e:	fa92 f2a2 	rbit	r2, r2
 8008332:	60fa      	str	r2, [r7, #12]
  return result;
 8008334:	68fa      	ldr	r2, [r7, #12]
 8008336:	fab2 f282 	clz	r2, r2
 800833a:	b2d2      	uxtb	r2, r2
 800833c:	40d3      	lsrs	r3, r2
 800833e:	4a09      	ldr	r2, [pc, #36]	; (8008364 <HAL_RCC_ClockConfig+0x2ec>)
 8008340:	5cd3      	ldrb	r3, [r2, r3]
 8008342:	fa21 f303 	lsr.w	r3, r1, r3
 8008346:	4a08      	ldr	r2, [pc, #32]	; (8008368 <HAL_RCC_ClockConfig+0x2f0>)
 8008348:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800834a:	4b08      	ldr	r3, [pc, #32]	; (800836c <HAL_RCC_ClockConfig+0x2f4>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4618      	mov	r0, r3
 8008350:	f7fc fe94 	bl	800507c <HAL_InitTick>
  
  return HAL_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3778      	adds	r7, #120	; 0x78
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	40021000 	.word	0x40021000
 8008364:	0800e4f0 	.word	0x0800e4f0
 8008368:	2000024c 	.word	0x2000024c
 800836c:	20000250 	.word	0x20000250

08008370 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008370:	b480      	push	{r7}
 8008372:	b08b      	sub	sp, #44	; 0x2c
 8008374:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008376:	2300      	movs	r3, #0
 8008378:	61fb      	str	r3, [r7, #28]
 800837a:	2300      	movs	r3, #0
 800837c:	61bb      	str	r3, [r7, #24]
 800837e:	2300      	movs	r3, #0
 8008380:	627b      	str	r3, [r7, #36]	; 0x24
 8008382:	2300      	movs	r3, #0
 8008384:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008386:	2300      	movs	r3, #0
 8008388:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800838a:	4b29      	ldr	r3, [pc, #164]	; (8008430 <HAL_RCC_GetSysClockFreq+0xc0>)
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008390:	69fb      	ldr	r3, [r7, #28]
 8008392:	f003 030c 	and.w	r3, r3, #12
 8008396:	2b04      	cmp	r3, #4
 8008398:	d002      	beq.n	80083a0 <HAL_RCC_GetSysClockFreq+0x30>
 800839a:	2b08      	cmp	r3, #8
 800839c:	d003      	beq.n	80083a6 <HAL_RCC_GetSysClockFreq+0x36>
 800839e:	e03c      	b.n	800841a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80083a0:	4b24      	ldr	r3, [pc, #144]	; (8008434 <HAL_RCC_GetSysClockFreq+0xc4>)
 80083a2:	623b      	str	r3, [r7, #32]
      break;
 80083a4:	e03c      	b.n	8008420 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80083ac:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80083b0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083b2:	68ba      	ldr	r2, [r7, #8]
 80083b4:	fa92 f2a2 	rbit	r2, r2
 80083b8:	607a      	str	r2, [r7, #4]
  return result;
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	fab2 f282 	clz	r2, r2
 80083c0:	b2d2      	uxtb	r2, r2
 80083c2:	40d3      	lsrs	r3, r2
 80083c4:	4a1c      	ldr	r2, [pc, #112]	; (8008438 <HAL_RCC_GetSysClockFreq+0xc8>)
 80083c6:	5cd3      	ldrb	r3, [r2, r3]
 80083c8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80083ca:	4b19      	ldr	r3, [pc, #100]	; (8008430 <HAL_RCC_GetSysClockFreq+0xc0>)
 80083cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ce:	f003 030f 	and.w	r3, r3, #15
 80083d2:	220f      	movs	r2, #15
 80083d4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083d6:	693a      	ldr	r2, [r7, #16]
 80083d8:	fa92 f2a2 	rbit	r2, r2
 80083dc:	60fa      	str	r2, [r7, #12]
  return result;
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	fab2 f282 	clz	r2, r2
 80083e4:	b2d2      	uxtb	r2, r2
 80083e6:	40d3      	lsrs	r3, r2
 80083e8:	4a14      	ldr	r2, [pc, #80]	; (800843c <HAL_RCC_GetSysClockFreq+0xcc>)
 80083ea:	5cd3      	ldrb	r3, [r2, r3]
 80083ec:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d008      	beq.n	800840a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80083f8:	4a0e      	ldr	r2, [pc, #56]	; (8008434 <HAL_RCC_GetSysClockFreq+0xc4>)
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	fb02 f303 	mul.w	r3, r2, r3
 8008406:	627b      	str	r3, [r7, #36]	; 0x24
 8008408:	e004      	b.n	8008414 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	4a0c      	ldr	r2, [pc, #48]	; (8008440 <HAL_RCC_GetSysClockFreq+0xd0>)
 800840e:	fb02 f303 	mul.w	r3, r2, r3
 8008412:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8008414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008416:	623b      	str	r3, [r7, #32]
      break;
 8008418:	e002      	b.n	8008420 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800841a:	4b06      	ldr	r3, [pc, #24]	; (8008434 <HAL_RCC_GetSysClockFreq+0xc4>)
 800841c:	623b      	str	r3, [r7, #32]
      break;
 800841e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008420:	6a3b      	ldr	r3, [r7, #32]
}
 8008422:	4618      	mov	r0, r3
 8008424:	372c      	adds	r7, #44	; 0x2c
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr
 800842e:	bf00      	nop
 8008430:	40021000 	.word	0x40021000
 8008434:	007a1200 	.word	0x007a1200
 8008438:	0800e508 	.word	0x0800e508
 800843c:	0800e518 	.word	0x0800e518
 8008440:	003d0900 	.word	0x003d0900

08008444 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008444:	b480      	push	{r7}
 8008446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008448:	4b03      	ldr	r3, [pc, #12]	; (8008458 <HAL_RCC_GetHCLKFreq+0x14>)
 800844a:	681b      	ldr	r3, [r3, #0]
}
 800844c:	4618      	mov	r0, r3
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr
 8008456:	bf00      	nop
 8008458:	2000024c 	.word	0x2000024c

0800845c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8008462:	f7ff ffef 	bl	8008444 <HAL_RCC_GetHCLKFreq>
 8008466:	4601      	mov	r1, r0
 8008468:	4b0b      	ldr	r3, [pc, #44]	; (8008498 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008470:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008474:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	fa92 f2a2 	rbit	r2, r2
 800847c:	603a      	str	r2, [r7, #0]
  return result;
 800847e:	683a      	ldr	r2, [r7, #0]
 8008480:	fab2 f282 	clz	r2, r2
 8008484:	b2d2      	uxtb	r2, r2
 8008486:	40d3      	lsrs	r3, r2
 8008488:	4a04      	ldr	r2, [pc, #16]	; (800849c <HAL_RCC_GetPCLK1Freq+0x40>)
 800848a:	5cd3      	ldrb	r3, [r2, r3]
 800848c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8008490:	4618      	mov	r0, r3
 8008492:	3708      	adds	r7, #8
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}
 8008498:	40021000 	.word	0x40021000
 800849c:	0800e500 	.word	0x0800e500

080084a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80084a6:	f7ff ffcd 	bl	8008444 <HAL_RCC_GetHCLKFreq>
 80084aa:	4601      	mov	r1, r0
 80084ac:	4b0b      	ldr	r3, [pc, #44]	; (80084dc <HAL_RCC_GetPCLK2Freq+0x3c>)
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80084b4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80084b8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	fa92 f2a2 	rbit	r2, r2
 80084c0:	603a      	str	r2, [r7, #0]
  return result;
 80084c2:	683a      	ldr	r2, [r7, #0]
 80084c4:	fab2 f282 	clz	r2, r2
 80084c8:	b2d2      	uxtb	r2, r2
 80084ca:	40d3      	lsrs	r3, r2
 80084cc:	4a04      	ldr	r2, [pc, #16]	; (80084e0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80084ce:	5cd3      	ldrb	r3, [r2, r3]
 80084d0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80084d4:	4618      	mov	r0, r3
 80084d6:	3708      	adds	r7, #8
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}
 80084dc:	40021000 	.word	0x40021000
 80084e0:	0800e500 	.word	0x0800e500

080084e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b092      	sub	sp, #72	; 0x48
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80084ec:	2300      	movs	r3, #0
 80084ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80084f0:	2300      	movs	r3, #0
 80084f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80084f4:	2300      	movs	r3, #0
 80084f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008502:	2b00      	cmp	r3, #0
 8008504:	f000 80d4 	beq.w	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008508:	4b4e      	ldr	r3, [pc, #312]	; (8008644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800850a:	69db      	ldr	r3, [r3, #28]
 800850c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008510:	2b00      	cmp	r3, #0
 8008512:	d10e      	bne.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008514:	4b4b      	ldr	r3, [pc, #300]	; (8008644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008516:	69db      	ldr	r3, [r3, #28]
 8008518:	4a4a      	ldr	r2, [pc, #296]	; (8008644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800851a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800851e:	61d3      	str	r3, [r2, #28]
 8008520:	4b48      	ldr	r3, [pc, #288]	; (8008644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008522:	69db      	ldr	r3, [r3, #28]
 8008524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008528:	60bb      	str	r3, [r7, #8]
 800852a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800852c:	2301      	movs	r3, #1
 800852e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008532:	4b45      	ldr	r3, [pc, #276]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800853a:	2b00      	cmp	r3, #0
 800853c:	d118      	bne.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800853e:	4b42      	ldr	r3, [pc, #264]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a41      	ldr	r2, [pc, #260]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008548:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800854a:	f7fc fddb 	bl	8005104 <HAL_GetTick>
 800854e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008550:	e008      	b.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008552:	f7fc fdd7 	bl	8005104 <HAL_GetTick>
 8008556:	4602      	mov	r2, r0
 8008558:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800855a:	1ad3      	subs	r3, r2, r3
 800855c:	2b64      	cmp	r3, #100	; 0x64
 800855e:	d901      	bls.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8008560:	2303      	movs	r3, #3
 8008562:	e169      	b.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008564:	4b38      	ldr	r3, [pc, #224]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800856c:	2b00      	cmp	r3, #0
 800856e:	d0f0      	beq.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008570:	4b34      	ldr	r3, [pc, #208]	; (8008644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008572:	6a1b      	ldr	r3, [r3, #32]
 8008574:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008578:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800857a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800857c:	2b00      	cmp	r3, #0
 800857e:	f000 8084 	beq.w	800868a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800858a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800858c:	429a      	cmp	r2, r3
 800858e:	d07c      	beq.n	800868a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008590:	4b2c      	ldr	r3, [pc, #176]	; (8008644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008592:	6a1b      	ldr	r3, [r3, #32]
 8008594:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008598:	63fb      	str	r3, [r7, #60]	; 0x3c
 800859a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800859e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a2:	fa93 f3a3 	rbit	r3, r3
 80085a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80085a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80085aa:	fab3 f383 	clz	r3, r3
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	461a      	mov	r2, r3
 80085b2:	4b26      	ldr	r3, [pc, #152]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80085b4:	4413      	add	r3, r2
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	461a      	mov	r2, r3
 80085ba:	2301      	movs	r3, #1
 80085bc:	6013      	str	r3, [r2, #0]
 80085be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80085c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c6:	fa93 f3a3 	rbit	r3, r3
 80085ca:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80085cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80085ce:	fab3 f383 	clz	r3, r3
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	461a      	mov	r2, r3
 80085d6:	4b1d      	ldr	r3, [pc, #116]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80085d8:	4413      	add	r3, r2
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	461a      	mov	r2, r3
 80085de:	2300      	movs	r3, #0
 80085e0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80085e2:	4a18      	ldr	r2, [pc, #96]	; (8008644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80085e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085e6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80085e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085ea:	f003 0301 	and.w	r3, r3, #1
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d04b      	beq.n	800868a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085f2:	f7fc fd87 	bl	8005104 <HAL_GetTick>
 80085f6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085f8:	e00a      	b.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085fa:	f7fc fd83 	bl	8005104 <HAL_GetTick>
 80085fe:	4602      	mov	r2, r0
 8008600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008602:	1ad3      	subs	r3, r2, r3
 8008604:	f241 3288 	movw	r2, #5000	; 0x1388
 8008608:	4293      	cmp	r3, r2
 800860a:	d901      	bls.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800860c:	2303      	movs	r3, #3
 800860e:	e113      	b.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8008610:	2302      	movs	r3, #2
 8008612:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008616:	fa93 f3a3 	rbit	r3, r3
 800861a:	627b      	str	r3, [r7, #36]	; 0x24
 800861c:	2302      	movs	r3, #2
 800861e:	623b      	str	r3, [r7, #32]
 8008620:	6a3b      	ldr	r3, [r7, #32]
 8008622:	fa93 f3a3 	rbit	r3, r3
 8008626:	61fb      	str	r3, [r7, #28]
  return result;
 8008628:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800862a:	fab3 f383 	clz	r3, r3
 800862e:	b2db      	uxtb	r3, r3
 8008630:	095b      	lsrs	r3, r3, #5
 8008632:	b2db      	uxtb	r3, r3
 8008634:	f043 0302 	orr.w	r3, r3, #2
 8008638:	b2db      	uxtb	r3, r3
 800863a:	2b02      	cmp	r3, #2
 800863c:	d108      	bne.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800863e:	4b01      	ldr	r3, [pc, #4]	; (8008644 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008640:	6a1b      	ldr	r3, [r3, #32]
 8008642:	e00d      	b.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8008644:	40021000 	.word	0x40021000
 8008648:	40007000 	.word	0x40007000
 800864c:	10908100 	.word	0x10908100
 8008650:	2302      	movs	r3, #2
 8008652:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	fa93 f3a3 	rbit	r3, r3
 800865a:	617b      	str	r3, [r7, #20]
 800865c:	4b78      	ldr	r3, [pc, #480]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800865e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008660:	2202      	movs	r2, #2
 8008662:	613a      	str	r2, [r7, #16]
 8008664:	693a      	ldr	r2, [r7, #16]
 8008666:	fa92 f2a2 	rbit	r2, r2
 800866a:	60fa      	str	r2, [r7, #12]
  return result;
 800866c:	68fa      	ldr	r2, [r7, #12]
 800866e:	fab2 f282 	clz	r2, r2
 8008672:	b2d2      	uxtb	r2, r2
 8008674:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008678:	b2d2      	uxtb	r2, r2
 800867a:	f002 021f 	and.w	r2, r2, #31
 800867e:	2101      	movs	r1, #1
 8008680:	fa01 f202 	lsl.w	r2, r1, r2
 8008684:	4013      	ands	r3, r2
 8008686:	2b00      	cmp	r3, #0
 8008688:	d0b7      	beq.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800868a:	4b6d      	ldr	r3, [pc, #436]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800868c:	6a1b      	ldr	r3, [r3, #32]
 800868e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	496a      	ldr	r1, [pc, #424]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008698:	4313      	orrs	r3, r2
 800869a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800869c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d105      	bne.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80086a4:	4b66      	ldr	r3, [pc, #408]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80086a6:	69db      	ldr	r3, [r3, #28]
 80086a8:	4a65      	ldr	r2, [pc, #404]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80086aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086ae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f003 0301 	and.w	r3, r3, #1
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d008      	beq.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80086bc:	4b60      	ldr	r3, [pc, #384]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80086be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086c0:	f023 0203 	bic.w	r2, r3, #3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	495d      	ldr	r1, [pc, #372]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80086ca:	4313      	orrs	r3, r2
 80086cc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f003 0302 	and.w	r3, r3, #2
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d008      	beq.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80086da:	4b59      	ldr	r3, [pc, #356]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80086dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	68db      	ldr	r3, [r3, #12]
 80086e6:	4956      	ldr	r1, [pc, #344]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80086e8:	4313      	orrs	r3, r2
 80086ea:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f003 0304 	and.w	r3, r3, #4
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d008      	beq.n	800870a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80086f8:	4b51      	ldr	r3, [pc, #324]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80086fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	691b      	ldr	r3, [r3, #16]
 8008704:	494e      	ldr	r1, [pc, #312]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008706:	4313      	orrs	r3, r2
 8008708:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f003 0320 	and.w	r3, r3, #32
 8008712:	2b00      	cmp	r3, #0
 8008714:	d008      	beq.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008716:	4b4a      	ldr	r3, [pc, #296]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800871a:	f023 0210 	bic.w	r2, r3, #16
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	69db      	ldr	r3, [r3, #28]
 8008722:	4947      	ldr	r1, [pc, #284]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008724:	4313      	orrs	r3, r2
 8008726:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008730:	2b00      	cmp	r3, #0
 8008732:	d008      	beq.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8008734:	4b42      	ldr	r3, [pc, #264]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008740:	493f      	ldr	r1, [pc, #252]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008742:	4313      	orrs	r3, r2
 8008744:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800874e:	2b00      	cmp	r3, #0
 8008750:	d008      	beq.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008752:	4b3b      	ldr	r3, [pc, #236]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008756:	f023 0220 	bic.w	r2, r3, #32
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6a1b      	ldr	r3, [r3, #32]
 800875e:	4938      	ldr	r1, [pc, #224]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008760:	4313      	orrs	r3, r2
 8008762:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f003 0308 	and.w	r3, r3, #8
 800876c:	2b00      	cmp	r3, #0
 800876e:	d008      	beq.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008770:	4b33      	ldr	r3, [pc, #204]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008774:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	695b      	ldr	r3, [r3, #20]
 800877c:	4930      	ldr	r1, [pc, #192]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800877e:	4313      	orrs	r3, r2
 8008780:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 0310 	and.w	r3, r3, #16
 800878a:	2b00      	cmp	r3, #0
 800878c:	d008      	beq.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800878e:	4b2c      	ldr	r3, [pc, #176]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008792:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	699b      	ldr	r3, [r3, #24]
 800879a:	4929      	ldr	r1, [pc, #164]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800879c:	4313      	orrs	r3, r2
 800879e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d008      	beq.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80087ac:	4b24      	ldr	r3, [pc, #144]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b8:	4921      	ldr	r1, [pc, #132]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80087ba:	4313      	orrs	r3, r2
 80087bc:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d008      	beq.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80087ca:	4b1d      	ldr	r3, [pc, #116]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80087cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ce:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d6:	491a      	ldr	r1, [pc, #104]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80087d8:	4313      	orrs	r3, r2
 80087da:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d008      	beq.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80087e8:	4b15      	ldr	r3, [pc, #84]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80087ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ec:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087f4:	4912      	ldr	r1, [pc, #72]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80087f6:	4313      	orrs	r3, r2
 80087f8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008802:	2b00      	cmp	r3, #0
 8008804:	d008      	beq.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008806:	4b0e      	ldr	r3, [pc, #56]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800880a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008812:	490b      	ldr	r1, [pc, #44]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008814:	4313      	orrs	r3, r2
 8008816:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008820:	2b00      	cmp	r3, #0
 8008822:	d008      	beq.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8008824:	4b06      	ldr	r3, [pc, #24]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008828:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008830:	4903      	ldr	r1, [pc, #12]	; (8008840 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008832:	4313      	orrs	r3, r2
 8008834:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8008836:	2300      	movs	r3, #0
}
 8008838:	4618      	mov	r0, r3
 800883a:	3748      	adds	r7, #72	; 0x48
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}
 8008840:	40021000 	.word	0x40021000

08008844 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b082      	sub	sp, #8
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d101      	bne.n	8008856 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8008852:	2301      	movs	r3, #1
 8008854:	e083      	b.n	800895e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	7f5b      	ldrb	r3, [r3, #29]
 800885a:	b2db      	uxtb	r3, r3
 800885c:	2b00      	cmp	r3, #0
 800885e:	d105      	bne.n	800886c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f7fb fb1a 	bl	8003ea0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2202      	movs	r2, #2
 8008870:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	22ca      	movs	r2, #202	; 0xca
 8008878:	625a      	str	r2, [r3, #36]	; 0x24
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	2253      	movs	r2, #83	; 0x53
 8008880:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 faa8 	bl	8008dd8 <RTC_EnterInitMode>
 8008888:	4603      	mov	r3, r0
 800888a:	2b00      	cmp	r3, #0
 800888c:	d008      	beq.n	80088a0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	22ff      	movs	r2, #255	; 0xff
 8008894:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2204      	movs	r2, #4
 800889a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800889c:	2301      	movs	r3, #1
 800889e:	e05e      	b.n	800895e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	6812      	ldr	r2, [r2, #0]
 80088aa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80088ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088b2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	6899      	ldr	r1, [r3, #8]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	685a      	ldr	r2, [r3, #4]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	691b      	ldr	r3, [r3, #16]
 80088c2:	431a      	orrs	r2, r3
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	695b      	ldr	r3, [r3, #20]
 80088c8:	431a      	orrs	r2, r3
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	430a      	orrs	r2, r1
 80088d0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	68d2      	ldr	r2, [r2, #12]
 80088da:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	6919      	ldr	r1, [r3, #16]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	041a      	lsls	r2, r3, #16
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	430a      	orrs	r2, r1
 80088ee:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	68da      	ldr	r2, [r3, #12]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088fe:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	f003 0320 	and.w	r3, r3, #32
 800890a:	2b00      	cmp	r3, #0
 800890c:	d10e      	bne.n	800892c <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 fa3a 	bl	8008d88 <HAL_RTC_WaitForSynchro>
 8008914:	4603      	mov	r3, r0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d008      	beq.n	800892c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	22ff      	movs	r2, #255	; 0xff
 8008920:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2204      	movs	r2, #4
 8008926:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	e018      	b.n	800895e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800893a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	699a      	ldr	r2, [r3, #24]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	430a      	orrs	r2, r1
 800894c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	22ff      	movs	r2, #255	; 0xff
 8008954:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2201      	movs	r2, #1
 800895a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800895c:	2300      	movs	r3, #0
  }
}
 800895e:	4618      	mov	r0, r3
 8008960:	3708      	adds	r7, #8
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}

08008966 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008966:	b590      	push	{r4, r7, lr}
 8008968:	b087      	sub	sp, #28
 800896a:	af00      	add	r7, sp, #0
 800896c:	60f8      	str	r0, [r7, #12]
 800896e:	60b9      	str	r1, [r7, #8]
 8008970:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008972:	2300      	movs	r3, #0
 8008974:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	7f1b      	ldrb	r3, [r3, #28]
 800897a:	2b01      	cmp	r3, #1
 800897c:	d101      	bne.n	8008982 <HAL_RTC_SetTime+0x1c>
 800897e:	2302      	movs	r3, #2
 8008980:	e0aa      	b.n	8008ad8 <HAL_RTC_SetTime+0x172>
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2201      	movs	r2, #1
 8008986:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2202      	movs	r2, #2
 800898c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d126      	bne.n	80089e2 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d102      	bne.n	80089a8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	2200      	movs	r2, #0
 80089a6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	4618      	mov	r0, r3
 80089ae:	f000 fa3f 	bl	8008e30 <RTC_ByteToBcd2>
 80089b2:	4603      	mov	r3, r0
 80089b4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	785b      	ldrb	r3, [r3, #1]
 80089ba:	4618      	mov	r0, r3
 80089bc:	f000 fa38 	bl	8008e30 <RTC_ByteToBcd2>
 80089c0:	4603      	mov	r3, r0
 80089c2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80089c4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	789b      	ldrb	r3, [r3, #2]
 80089ca:	4618      	mov	r0, r3
 80089cc:	f000 fa30 	bl	8008e30 <RTC_ByteToBcd2>
 80089d0:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80089d2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	78db      	ldrb	r3, [r3, #3]
 80089da:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80089dc:	4313      	orrs	r3, r2
 80089de:	617b      	str	r3, [r7, #20]
 80089e0:	e018      	b.n	8008a14 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d102      	bne.n	80089f6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	2200      	movs	r2, #0
 80089f4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	785b      	ldrb	r3, [r3, #1]
 8008a00:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008a02:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008a04:	68ba      	ldr	r2, [r7, #8]
 8008a06:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008a08:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	78db      	ldrb	r3, [r3, #3]
 8008a0e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008a10:	4313      	orrs	r3, r2
 8008a12:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	22ca      	movs	r2, #202	; 0xca
 8008a1a:	625a      	str	r2, [r3, #36]	; 0x24
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	2253      	movs	r2, #83	; 0x53
 8008a22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008a24:	68f8      	ldr	r0, [r7, #12]
 8008a26:	f000 f9d7 	bl	8008dd8 <RTC_EnterInitMode>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d00b      	beq.n	8008a48 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	22ff      	movs	r2, #255	; 0xff
 8008a36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2204      	movs	r2, #4
 8008a3c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2200      	movs	r2, #0
 8008a42:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	e047      	b.n	8008ad8 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681a      	ldr	r2, [r3, #0]
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008a52:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008a56:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	689a      	ldr	r2, [r3, #8]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008a66:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	6899      	ldr	r1, [r3, #8]
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	68da      	ldr	r2, [r3, #12]
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	691b      	ldr	r3, [r3, #16]
 8008a76:	431a      	orrs	r2, r3
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	430a      	orrs	r2, r1
 8008a7e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	68da      	ldr	r2, [r3, #12]
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a8e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	f003 0320 	and.w	r3, r3, #32
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d111      	bne.n	8008ac2 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008a9e:	68f8      	ldr	r0, [r7, #12]
 8008aa0:	f000 f972 	bl	8008d88 <HAL_RTC_WaitForSynchro>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d00b      	beq.n	8008ac2 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	22ff      	movs	r2, #255	; 0xff
 8008ab0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2204      	movs	r2, #4
 8008ab6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2200      	movs	r2, #0
 8008abc:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e00a      	b.n	8008ad8 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	22ff      	movs	r2, #255	; 0xff
 8008ac8:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2201      	movs	r2, #1
 8008ace:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008ad6:	2300      	movs	r3, #0
  }
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	371c      	adds	r7, #28
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd90      	pop	{r4, r7, pc}

08008ae0 <HAL_RTC_GetTime>:
  * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
  *         in the higher-order calendar shadow registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b086      	sub	sp, #24
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008aec:	2300      	movs	r3, #0
 8008aee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	691b      	ldr	r3, [r3, #16]
 8008b00:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008b12:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008b16:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	0c1b      	lsrs	r3, r3, #16
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b22:	b2da      	uxtb	r2, r3
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	0a1b      	lsrs	r3, r3, #8
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b32:	b2da      	uxtb	r2, r3
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b40:	b2da      	uxtb	r2, r3
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	0c1b      	lsrs	r3, r3, #16
 8008b4a:	b2db      	uxtb	r3, r3
 8008b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b50:	b2da      	uxtb	r2, r3
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d11a      	bne.n	8008b92 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	4618      	mov	r0, r3
 8008b62:	f000 f983 	bl	8008e6c <RTC_Bcd2ToByte>
 8008b66:	4603      	mov	r3, r0
 8008b68:	461a      	mov	r2, r3
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	785b      	ldrb	r3, [r3, #1]
 8008b72:	4618      	mov	r0, r3
 8008b74:	f000 f97a 	bl	8008e6c <RTC_Bcd2ToByte>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	789b      	ldrb	r3, [r3, #2]
 8008b84:	4618      	mov	r0, r3
 8008b86:	f000 f971 	bl	8008e6c <RTC_Bcd2ToByte>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008b92:	2300      	movs	r3, #0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3718      	adds	r7, #24
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008b9c:	b590      	push	{r4, r7, lr}
 8008b9e:	b087      	sub	sp, #28
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	7f1b      	ldrb	r3, [r3, #28]
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d101      	bne.n	8008bb8 <HAL_RTC_SetDate+0x1c>
 8008bb4:	2302      	movs	r3, #2
 8008bb6:	e094      	b.n	8008ce2 <HAL_RTC_SetDate+0x146>
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2202      	movs	r2, #2
 8008bc2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d10e      	bne.n	8008be8 <HAL_RTC_SetDate+0x4c>
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	785b      	ldrb	r3, [r3, #1]
 8008bce:	f003 0310 	and.w	r3, r3, #16
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d008      	beq.n	8008be8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	785b      	ldrb	r3, [r3, #1]
 8008bda:	f023 0310 	bic.w	r3, r3, #16
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	330a      	adds	r3, #10
 8008be2:	b2da      	uxtb	r2, r3
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d11c      	bne.n	8008c28 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	78db      	ldrb	r3, [r3, #3]
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f000 f91c 	bl	8008e30 <RTC_ByteToBcd2>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	785b      	ldrb	r3, [r3, #1]
 8008c00:	4618      	mov	r0, r3
 8008c02:	f000 f915 	bl	8008e30 <RTC_ByteToBcd2>
 8008c06:	4603      	mov	r3, r0
 8008c08:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008c0a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	789b      	ldrb	r3, [r3, #2]
 8008c10:	4618      	mov	r0, r3
 8008c12:	f000 f90d 	bl	8008e30 <RTC_ByteToBcd2>
 8008c16:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008c18:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008c22:	4313      	orrs	r3, r2
 8008c24:	617b      	str	r3, [r7, #20]
 8008c26:	e00e      	b.n	8008c46 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	78db      	ldrb	r3, [r3, #3]
 8008c2c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	785b      	ldrb	r3, [r3, #1]
 8008c32:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008c34:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008c36:	68ba      	ldr	r2, [r7, #8]
 8008c38:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8008c3a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	781b      	ldrb	r3, [r3, #0]
 8008c40:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008c42:	4313      	orrs	r3, r2
 8008c44:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	22ca      	movs	r2, #202	; 0xca
 8008c4c:	625a      	str	r2, [r3, #36]	; 0x24
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2253      	movs	r2, #83	; 0x53
 8008c54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	f000 f8be 	bl	8008dd8 <RTC_EnterInitMode>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d00b      	beq.n	8008c7a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	22ff      	movs	r2, #255	; 0xff
 8008c68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2204      	movs	r2, #4
 8008c6e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2200      	movs	r2, #0
 8008c74:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008c76:	2301      	movs	r3, #1
 8008c78:	e033      	b.n	8008ce2 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008c84:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008c88:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	68da      	ldr	r2, [r3, #12]
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c98:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	689b      	ldr	r3, [r3, #8]
 8008ca0:	f003 0320 	and.w	r3, r3, #32
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d111      	bne.n	8008ccc <HAL_RTC_SetDate+0x130>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008ca8:	68f8      	ldr	r0, [r7, #12]
 8008caa:	f000 f86d 	bl	8008d88 <HAL_RTC_WaitForSynchro>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d00b      	beq.n	8008ccc <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	22ff      	movs	r2, #255	; 0xff
 8008cba:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2204      	movs	r2, #4
 8008cc0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	e00a      	b.n	8008ce2 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	22ff      	movs	r2, #255	; 0xff
 8008cd2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008ce0:	2300      	movs	r3, #0
  }
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	371c      	adds	r7, #28
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd90      	pop	{r4, r7, pc}

08008cea <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN :  Binary data format
  *            @arg RTC_FORMAT_BCD :  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008cea:	b580      	push	{r7, lr}
 8008cec:	b086      	sub	sp, #24
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	60f8      	str	r0, [r7, #12]
 8008cf2:	60b9      	str	r1, [r7, #8]
 8008cf4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008d04:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008d08:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	0c1b      	lsrs	r3, r3, #16
 8008d0e:	b2da      	uxtb	r2, r3
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	0a1b      	lsrs	r3, r3, #8
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	f003 031f 	and.w	r3, r3, #31
 8008d1e:	b2da      	uxtb	r2, r3
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d2c:	b2da      	uxtb	r2, r3
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	0b5b      	lsrs	r3, r3, #13
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	f003 0307 	and.w	r3, r3, #7
 8008d3c:	b2da      	uxtb	r2, r3
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d11a      	bne.n	8008d7e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	78db      	ldrb	r3, [r3, #3]
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f000 f88d 	bl	8008e6c <RTC_Bcd2ToByte>
 8008d52:	4603      	mov	r3, r0
 8008d54:	461a      	mov	r2, r3
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	785b      	ldrb	r3, [r3, #1]
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f000 f884 	bl	8008e6c <RTC_Bcd2ToByte>
 8008d64:	4603      	mov	r3, r0
 8008d66:	461a      	mov	r2, r3
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	789b      	ldrb	r3, [r3, #2]
 8008d70:	4618      	mov	r0, r3
 8008d72:	f000 f87b 	bl	8008e6c <RTC_Bcd2ToByte>
 8008d76:	4603      	mov	r3, r0
 8008d78:	461a      	mov	r2, r3
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008d7e:	2300      	movs	r3, #0
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3718      	adds	r7, #24
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008d90:	2300      	movs	r3, #0
 8008d92:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	68da      	ldr	r2, [r3, #12]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008da2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8008da4:	f7fc f9ae 	bl	8005104 <HAL_GetTick>
 8008da8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008daa:	e009      	b.n	8008dc0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008dac:	f7fc f9aa 	bl	8005104 <HAL_GetTick>
 8008db0:	4602      	mov	r2, r0
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	1ad3      	subs	r3, r2, r3
 8008db6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008dba:	d901      	bls.n	8008dc0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008dbc:	2303      	movs	r3, #3
 8008dbe:	e007      	b.n	8008dd0 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	f003 0320 	and.w	r3, r3, #32
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d0ee      	beq.n	8008dac <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008dce:	2300      	movs	r3, #0
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3710      	adds	r7, #16
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008de0:	2300      	movs	r3, #0
 8008de2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	68db      	ldr	r3, [r3, #12]
 8008dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d119      	bne.n	8008e26 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f04f 32ff 	mov.w	r2, #4294967295
 8008dfa:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008dfc:	f7fc f982 	bl	8005104 <HAL_GetTick>
 8008e00:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008e02:	e009      	b.n	8008e18 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008e04:	f7fc f97e 	bl	8005104 <HAL_GetTick>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	1ad3      	subs	r3, r2, r3
 8008e0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e12:	d901      	bls.n	8008e18 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008e14:	2303      	movs	r3, #3
 8008e16:	e007      	b.n	8008e28 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d0ee      	beq.n	8008e04 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008e26:	2300      	movs	r3, #0
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3710      	adds	r7, #16
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b085      	sub	sp, #20
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	4603      	mov	r3, r0
 8008e38:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8008e3e:	e005      	b.n	8008e4c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	3301      	adds	r3, #1
 8008e44:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8008e46:	79fb      	ldrb	r3, [r7, #7]
 8008e48:	3b0a      	subs	r3, #10
 8008e4a:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8008e4c:	79fb      	ldrb	r3, [r7, #7]
 8008e4e:	2b09      	cmp	r3, #9
 8008e50:	d8f6      	bhi.n	8008e40 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	011b      	lsls	r3, r3, #4
 8008e58:	b2da      	uxtb	r2, r3
 8008e5a:	79fb      	ldrb	r3, [r7, #7]
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	b2db      	uxtb	r3, r3
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3714      	adds	r7, #20
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr

08008e6c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b085      	sub	sp, #20
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	4603      	mov	r3, r0
 8008e74:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8008e76:	2300      	movs	r3, #0
 8008e78:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8008e7a:	79fb      	ldrb	r3, [r7, #7]
 8008e7c:	091b      	lsrs	r3, r3, #4
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	461a      	mov	r2, r3
 8008e82:	4613      	mov	r3, r2
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	4413      	add	r3, r2
 8008e88:	005b      	lsls	r3, r3, #1
 8008e8a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 8008e8c:	79fb      	ldrb	r3, [r7, #7]
 8008e8e:	f003 030f 	and.w	r3, r3, #15
 8008e92:	b2da      	uxtb	r2, r3
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	4413      	add	r3, r2
 8008e9a:	b2db      	uxtb	r3, r3
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3714      	adds	r7, #20
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr

08008ea8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d101      	bne.n	8008eba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	e09d      	b.n	8008ff6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d108      	bne.n	8008ed4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008eca:	d009      	beq.n	8008ee0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	61da      	str	r2, [r3, #28]
 8008ed2:	e005      	b.n	8008ee0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d106      	bne.n	8008f00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f7fa fff6 	bl	8003eec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2202      	movs	r2, #2
 8008f04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f16:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f20:	d902      	bls.n	8008f28 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008f22:	2300      	movs	r3, #0
 8008f24:	60fb      	str	r3, [r7, #12]
 8008f26:	e002      	b.n	8008f2e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008f28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f2c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008f36:	d007      	beq.n	8008f48 <HAL_SPI_Init+0xa0>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f40:	d002      	beq.n	8008f48 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008f58:	431a      	orrs	r2, r3
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	691b      	ldr	r3, [r3, #16]
 8008f5e:	f003 0302 	and.w	r3, r3, #2
 8008f62:	431a      	orrs	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	695b      	ldr	r3, [r3, #20]
 8008f68:	f003 0301 	and.w	r3, r3, #1
 8008f6c:	431a      	orrs	r2, r3
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	699b      	ldr	r3, [r3, #24]
 8008f72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f76:	431a      	orrs	r2, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	69db      	ldr	r3, [r3, #28]
 8008f7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f80:	431a      	orrs	r2, r3
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6a1b      	ldr	r3, [r3, #32]
 8008f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f8a:	ea42 0103 	orr.w	r1, r2, r3
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f92:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	430a      	orrs	r2, r1
 8008f9c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	699b      	ldr	r3, [r3, #24]
 8008fa2:	0c1b      	lsrs	r3, r3, #16
 8008fa4:	f003 0204 	and.w	r2, r3, #4
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fac:	f003 0310 	and.w	r3, r3, #16
 8008fb0:	431a      	orrs	r2, r3
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fb6:	f003 0308 	and.w	r3, r3, #8
 8008fba:	431a      	orrs	r2, r3
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008fc4:	ea42 0103 	orr.w	r1, r2, r3
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	430a      	orrs	r2, r1
 8008fd4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	69da      	ldr	r2, [r3, #28]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008fe4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008ff4:	2300      	movs	r3, #0
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3710      	adds	r7, #16
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}

08008ffe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ffe:	b580      	push	{r7, lr}
 8009000:	b082      	sub	sp, #8
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d101      	bne.n	8009010 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800900c:	2301      	movs	r3, #1
 800900e:	e049      	b.n	80090a4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009016:	b2db      	uxtb	r3, r3
 8009018:	2b00      	cmp	r3, #0
 800901a:	d106      	bne.n	800902a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2200      	movs	r2, #0
 8009020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f7fa ffa3 	bl	8003f70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2202      	movs	r2, #2
 800902e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	3304      	adds	r3, #4
 800903a:	4619      	mov	r1, r3
 800903c:	4610      	mov	r0, r2
 800903e:	f000 fd31 	bl	8009aa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2201      	movs	r2, #1
 8009046:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2201      	movs	r2, #1
 800904e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2201      	movs	r2, #1
 8009056:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2201      	movs	r2, #1
 800905e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2201      	movs	r2, #1
 8009066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2201      	movs	r2, #1
 800906e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2201      	movs	r2, #1
 8009076:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2201      	movs	r2, #1
 800907e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2201      	movs	r2, #1
 8009086:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2201      	movs	r2, #1
 800908e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2201      	movs	r2, #1
 8009096:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2201      	movs	r2, #1
 800909e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80090a2:	2300      	movs	r3, #0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3708      	adds	r7, #8
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b085      	sub	sp, #20
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d001      	beq.n	80090c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	e04a      	b.n	800915a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2202      	movs	r2, #2
 80090c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	68da      	ldr	r2, [r3, #12]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f042 0201 	orr.w	r2, r2, #1
 80090da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a21      	ldr	r2, [pc, #132]	; (8009168 <HAL_TIM_Base_Start_IT+0xbc>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d018      	beq.n	8009118 <HAL_TIM_Base_Start_IT+0x6c>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090ee:	d013      	beq.n	8009118 <HAL_TIM_Base_Start_IT+0x6c>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a1d      	ldr	r2, [pc, #116]	; (800916c <HAL_TIM_Base_Start_IT+0xc0>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d00e      	beq.n	8009118 <HAL_TIM_Base_Start_IT+0x6c>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a1c      	ldr	r2, [pc, #112]	; (8009170 <HAL_TIM_Base_Start_IT+0xc4>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d009      	beq.n	8009118 <HAL_TIM_Base_Start_IT+0x6c>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a1a      	ldr	r2, [pc, #104]	; (8009174 <HAL_TIM_Base_Start_IT+0xc8>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d004      	beq.n	8009118 <HAL_TIM_Base_Start_IT+0x6c>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a19      	ldr	r2, [pc, #100]	; (8009178 <HAL_TIM_Base_Start_IT+0xcc>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d115      	bne.n	8009144 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	689a      	ldr	r2, [r3, #8]
 800911e:	4b17      	ldr	r3, [pc, #92]	; (800917c <HAL_TIM_Base_Start_IT+0xd0>)
 8009120:	4013      	ands	r3, r2
 8009122:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2b06      	cmp	r3, #6
 8009128:	d015      	beq.n	8009156 <HAL_TIM_Base_Start_IT+0xaa>
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009130:	d011      	beq.n	8009156 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f042 0201 	orr.w	r2, r2, #1
 8009140:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009142:	e008      	b.n	8009156 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f042 0201 	orr.w	r2, r2, #1
 8009152:	601a      	str	r2, [r3, #0]
 8009154:	e000      	b.n	8009158 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009156:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009158:	2300      	movs	r3, #0
}
 800915a:	4618      	mov	r0, r3
 800915c:	3714      	adds	r7, #20
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr
 8009166:	bf00      	nop
 8009168:	40012c00 	.word	0x40012c00
 800916c:	40000400 	.word	0x40000400
 8009170:	40000800 	.word	0x40000800
 8009174:	40013400 	.word	0x40013400
 8009178:	40014000 	.word	0x40014000
 800917c:	00010007 	.word	0x00010007

08009180 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d101      	bne.n	8009192 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800918e:	2301      	movs	r3, #1
 8009190:	e049      	b.n	8009226 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009198:	b2db      	uxtb	r3, r3
 800919a:	2b00      	cmp	r3, #0
 800919c:	d106      	bne.n	80091ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 f841 	bl	800922e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2202      	movs	r2, #2
 80091b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681a      	ldr	r2, [r3, #0]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	3304      	adds	r3, #4
 80091bc:	4619      	mov	r1, r3
 80091be:	4610      	mov	r0, r2
 80091c0:	f000 fc70 	bl	8009aa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2201      	movs	r2, #1
 80091c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2201      	movs	r2, #1
 80091d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2201      	movs	r2, #1
 80091d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2201      	movs	r2, #1
 80091e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2201      	movs	r2, #1
 80091e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2201      	movs	r2, #1
 80091f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2201      	movs	r2, #1
 80091f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2201      	movs	r2, #1
 8009200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2201      	movs	r2, #1
 8009208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2201      	movs	r2, #1
 8009210:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2201      	movs	r2, #1
 8009218:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2201      	movs	r2, #1
 8009220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009224:	2300      	movs	r3, #0
}
 8009226:	4618      	mov	r0, r3
 8009228:	3708      	adds	r7, #8
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}

0800922e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800922e:	b480      	push	{r7}
 8009230:	b083      	sub	sp, #12
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009236:	bf00      	nop
 8009238:	370c      	adds	r7, #12
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr
	...

08009244 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d109      	bne.n	8009268 <HAL_TIM_PWM_Start+0x24>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800925a:	b2db      	uxtb	r3, r3
 800925c:	2b01      	cmp	r3, #1
 800925e:	bf14      	ite	ne
 8009260:	2301      	movne	r3, #1
 8009262:	2300      	moveq	r3, #0
 8009264:	b2db      	uxtb	r3, r3
 8009266:	e03c      	b.n	80092e2 <HAL_TIM_PWM_Start+0x9e>
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	2b04      	cmp	r3, #4
 800926c:	d109      	bne.n	8009282 <HAL_TIM_PWM_Start+0x3e>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009274:	b2db      	uxtb	r3, r3
 8009276:	2b01      	cmp	r3, #1
 8009278:	bf14      	ite	ne
 800927a:	2301      	movne	r3, #1
 800927c:	2300      	moveq	r3, #0
 800927e:	b2db      	uxtb	r3, r3
 8009280:	e02f      	b.n	80092e2 <HAL_TIM_PWM_Start+0x9e>
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	2b08      	cmp	r3, #8
 8009286:	d109      	bne.n	800929c <HAL_TIM_PWM_Start+0x58>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800928e:	b2db      	uxtb	r3, r3
 8009290:	2b01      	cmp	r3, #1
 8009292:	bf14      	ite	ne
 8009294:	2301      	movne	r3, #1
 8009296:	2300      	moveq	r3, #0
 8009298:	b2db      	uxtb	r3, r3
 800929a:	e022      	b.n	80092e2 <HAL_TIM_PWM_Start+0x9e>
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	2b0c      	cmp	r3, #12
 80092a0:	d109      	bne.n	80092b6 <HAL_TIM_PWM_Start+0x72>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092a8:	b2db      	uxtb	r3, r3
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	bf14      	ite	ne
 80092ae:	2301      	movne	r3, #1
 80092b0:	2300      	moveq	r3, #0
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	e015      	b.n	80092e2 <HAL_TIM_PWM_Start+0x9e>
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	2b10      	cmp	r3, #16
 80092ba:	d109      	bne.n	80092d0 <HAL_TIM_PWM_Start+0x8c>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	bf14      	ite	ne
 80092c8:	2301      	movne	r3, #1
 80092ca:	2300      	moveq	r3, #0
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	e008      	b.n	80092e2 <HAL_TIM_PWM_Start+0x9e>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	2b01      	cmp	r3, #1
 80092da:	bf14      	ite	ne
 80092dc:	2301      	movne	r3, #1
 80092de:	2300      	moveq	r3, #0
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d001      	beq.n	80092ea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80092e6:	2301      	movs	r3, #1
 80092e8:	e097      	b.n	800941a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d104      	bne.n	80092fa <HAL_TIM_PWM_Start+0xb6>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2202      	movs	r2, #2
 80092f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092f8:	e023      	b.n	8009342 <HAL_TIM_PWM_Start+0xfe>
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	2b04      	cmp	r3, #4
 80092fe:	d104      	bne.n	800930a <HAL_TIM_PWM_Start+0xc6>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2202      	movs	r2, #2
 8009304:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009308:	e01b      	b.n	8009342 <HAL_TIM_PWM_Start+0xfe>
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	2b08      	cmp	r3, #8
 800930e:	d104      	bne.n	800931a <HAL_TIM_PWM_Start+0xd6>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2202      	movs	r2, #2
 8009314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009318:	e013      	b.n	8009342 <HAL_TIM_PWM_Start+0xfe>
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	2b0c      	cmp	r3, #12
 800931e:	d104      	bne.n	800932a <HAL_TIM_PWM_Start+0xe6>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2202      	movs	r2, #2
 8009324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009328:	e00b      	b.n	8009342 <HAL_TIM_PWM_Start+0xfe>
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	2b10      	cmp	r3, #16
 800932e:	d104      	bne.n	800933a <HAL_TIM_PWM_Start+0xf6>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2202      	movs	r2, #2
 8009334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009338:	e003      	b.n	8009342 <HAL_TIM_PWM_Start+0xfe>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2202      	movs	r2, #2
 800933e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	2201      	movs	r2, #1
 8009348:	6839      	ldr	r1, [r7, #0]
 800934a:	4618      	mov	r0, r3
 800934c:	f000 ffaa 	bl	800a2a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a33      	ldr	r2, [pc, #204]	; (8009424 <HAL_TIM_PWM_Start+0x1e0>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d013      	beq.n	8009382 <HAL_TIM_PWM_Start+0x13e>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a32      	ldr	r2, [pc, #200]	; (8009428 <HAL_TIM_PWM_Start+0x1e4>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d00e      	beq.n	8009382 <HAL_TIM_PWM_Start+0x13e>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a30      	ldr	r2, [pc, #192]	; (800942c <HAL_TIM_PWM_Start+0x1e8>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d009      	beq.n	8009382 <HAL_TIM_PWM_Start+0x13e>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a2f      	ldr	r2, [pc, #188]	; (8009430 <HAL_TIM_PWM_Start+0x1ec>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d004      	beq.n	8009382 <HAL_TIM_PWM_Start+0x13e>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a2d      	ldr	r2, [pc, #180]	; (8009434 <HAL_TIM_PWM_Start+0x1f0>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d101      	bne.n	8009386 <HAL_TIM_PWM_Start+0x142>
 8009382:	2301      	movs	r3, #1
 8009384:	e000      	b.n	8009388 <HAL_TIM_PWM_Start+0x144>
 8009386:	2300      	movs	r3, #0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d007      	beq.n	800939c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800939a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a20      	ldr	r2, [pc, #128]	; (8009424 <HAL_TIM_PWM_Start+0x1e0>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d018      	beq.n	80093d8 <HAL_TIM_PWM_Start+0x194>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093ae:	d013      	beq.n	80093d8 <HAL_TIM_PWM_Start+0x194>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a20      	ldr	r2, [pc, #128]	; (8009438 <HAL_TIM_PWM_Start+0x1f4>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d00e      	beq.n	80093d8 <HAL_TIM_PWM_Start+0x194>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4a1f      	ldr	r2, [pc, #124]	; (800943c <HAL_TIM_PWM_Start+0x1f8>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d009      	beq.n	80093d8 <HAL_TIM_PWM_Start+0x194>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a17      	ldr	r2, [pc, #92]	; (8009428 <HAL_TIM_PWM_Start+0x1e4>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d004      	beq.n	80093d8 <HAL_TIM_PWM_Start+0x194>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a16      	ldr	r2, [pc, #88]	; (800942c <HAL_TIM_PWM_Start+0x1e8>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d115      	bne.n	8009404 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	689a      	ldr	r2, [r3, #8]
 80093de:	4b18      	ldr	r3, [pc, #96]	; (8009440 <HAL_TIM_PWM_Start+0x1fc>)
 80093e0:	4013      	ands	r3, r2
 80093e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2b06      	cmp	r3, #6
 80093e8:	d015      	beq.n	8009416 <HAL_TIM_PWM_Start+0x1d2>
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093f0:	d011      	beq.n	8009416 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	681a      	ldr	r2, [r3, #0]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f042 0201 	orr.w	r2, r2, #1
 8009400:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009402:	e008      	b.n	8009416 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	681a      	ldr	r2, [r3, #0]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f042 0201 	orr.w	r2, r2, #1
 8009412:	601a      	str	r2, [r3, #0]
 8009414:	e000      	b.n	8009418 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009416:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009418:	2300      	movs	r3, #0
}
 800941a:	4618      	mov	r0, r3
 800941c:	3710      	adds	r7, #16
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop
 8009424:	40012c00 	.word	0x40012c00
 8009428:	40013400 	.word	0x40013400
 800942c:	40014000 	.word	0x40014000
 8009430:	40014400 	.word	0x40014400
 8009434:	40014800 	.word	0x40014800
 8009438:	40000400 	.word	0x40000400
 800943c:	40000800 	.word	0x40000800
 8009440:	00010007 	.word	0x00010007

08009444 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	691b      	ldr	r3, [r3, #16]
 8009452:	f003 0302 	and.w	r3, r3, #2
 8009456:	2b02      	cmp	r3, #2
 8009458:	d122      	bne.n	80094a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	f003 0302 	and.w	r3, r3, #2
 8009464:	2b02      	cmp	r3, #2
 8009466:	d11b      	bne.n	80094a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f06f 0202 	mvn.w	r2, #2
 8009470:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2201      	movs	r2, #1
 8009476:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	699b      	ldr	r3, [r3, #24]
 800947e:	f003 0303 	and.w	r3, r3, #3
 8009482:	2b00      	cmp	r3, #0
 8009484:	d003      	beq.n	800948e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 faed 	bl	8009a66 <HAL_TIM_IC_CaptureCallback>
 800948c:	e005      	b.n	800949a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 fadf 	bl	8009a52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 faf0 	bl	8009a7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	691b      	ldr	r3, [r3, #16]
 80094a6:	f003 0304 	and.w	r3, r3, #4
 80094aa:	2b04      	cmp	r3, #4
 80094ac:	d122      	bne.n	80094f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	f003 0304 	and.w	r3, r3, #4
 80094b8:	2b04      	cmp	r3, #4
 80094ba:	d11b      	bne.n	80094f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f06f 0204 	mvn.w	r2, #4
 80094c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2202      	movs	r2, #2
 80094ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	699b      	ldr	r3, [r3, #24]
 80094d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d003      	beq.n	80094e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 fac3 	bl	8009a66 <HAL_TIM_IC_CaptureCallback>
 80094e0:	e005      	b.n	80094ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 fab5 	bl	8009a52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 fac6 	bl	8009a7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	691b      	ldr	r3, [r3, #16]
 80094fa:	f003 0308 	and.w	r3, r3, #8
 80094fe:	2b08      	cmp	r3, #8
 8009500:	d122      	bne.n	8009548 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	68db      	ldr	r3, [r3, #12]
 8009508:	f003 0308 	and.w	r3, r3, #8
 800950c:	2b08      	cmp	r3, #8
 800950e:	d11b      	bne.n	8009548 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f06f 0208 	mvn.w	r2, #8
 8009518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2204      	movs	r2, #4
 800951e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	69db      	ldr	r3, [r3, #28]
 8009526:	f003 0303 	and.w	r3, r3, #3
 800952a:	2b00      	cmp	r3, #0
 800952c:	d003      	beq.n	8009536 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 fa99 	bl	8009a66 <HAL_TIM_IC_CaptureCallback>
 8009534:	e005      	b.n	8009542 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f000 fa8b 	bl	8009a52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 fa9c 	bl	8009a7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2200      	movs	r2, #0
 8009546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	691b      	ldr	r3, [r3, #16]
 800954e:	f003 0310 	and.w	r3, r3, #16
 8009552:	2b10      	cmp	r3, #16
 8009554:	d122      	bne.n	800959c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	f003 0310 	and.w	r3, r3, #16
 8009560:	2b10      	cmp	r3, #16
 8009562:	d11b      	bne.n	800959c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f06f 0210 	mvn.w	r2, #16
 800956c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2208      	movs	r2, #8
 8009572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	69db      	ldr	r3, [r3, #28]
 800957a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800957e:	2b00      	cmp	r3, #0
 8009580:	d003      	beq.n	800958a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f000 fa6f 	bl	8009a66 <HAL_TIM_IC_CaptureCallback>
 8009588:	e005      	b.n	8009596 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 fa61 	bl	8009a52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 fa72 	bl	8009a7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2200      	movs	r2, #0
 800959a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	691b      	ldr	r3, [r3, #16]
 80095a2:	f003 0301 	and.w	r3, r3, #1
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d10e      	bne.n	80095c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	68db      	ldr	r3, [r3, #12]
 80095b0:	f003 0301 	and.w	r3, r3, #1
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d107      	bne.n	80095c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f06f 0201 	mvn.w	r2, #1
 80095c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 fa3b 	bl	8009a3e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	691b      	ldr	r3, [r3, #16]
 80095ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095d2:	2b80      	cmp	r3, #128	; 0x80
 80095d4:	d10e      	bne.n	80095f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	68db      	ldr	r3, [r3, #12]
 80095dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095e0:	2b80      	cmp	r3, #128	; 0x80
 80095e2:	d107      	bne.n	80095f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80095ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 ff08 	bl	800a404 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	691b      	ldr	r3, [r3, #16]
 80095fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009602:	d10e      	bne.n	8009622 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	68db      	ldr	r3, [r3, #12]
 800960a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800960e:	2b80      	cmp	r3, #128	; 0x80
 8009610:	d107      	bne.n	8009622 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800961a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f000 fefb 	bl	800a418 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	691b      	ldr	r3, [r3, #16]
 8009628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800962c:	2b40      	cmp	r3, #64	; 0x40
 800962e:	d10e      	bne.n	800964e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	68db      	ldr	r3, [r3, #12]
 8009636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800963a:	2b40      	cmp	r3, #64	; 0x40
 800963c:	d107      	bne.n	800964e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 fa20 	bl	8009a8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	691b      	ldr	r3, [r3, #16]
 8009654:	f003 0320 	and.w	r3, r3, #32
 8009658:	2b20      	cmp	r3, #32
 800965a:	d10e      	bne.n	800967a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	68db      	ldr	r3, [r3, #12]
 8009662:	f003 0320 	and.w	r3, r3, #32
 8009666:	2b20      	cmp	r3, #32
 8009668:	d107      	bne.n	800967a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f06f 0220 	mvn.w	r2, #32
 8009672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 febb 	bl	800a3f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800967a:	bf00      	nop
 800967c:	3708      	adds	r7, #8
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
	...

08009684 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b086      	sub	sp, #24
 8009688:	af00      	add	r7, sp, #0
 800968a:	60f8      	str	r0, [r7, #12]
 800968c:	60b9      	str	r1, [r7, #8]
 800968e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009690:	2300      	movs	r3, #0
 8009692:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800969a:	2b01      	cmp	r3, #1
 800969c:	d101      	bne.n	80096a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800969e:	2302      	movs	r3, #2
 80096a0:	e0ff      	b.n	80098a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2201      	movs	r2, #1
 80096a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2b14      	cmp	r3, #20
 80096ae:	f200 80f0 	bhi.w	8009892 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80096b2:	a201      	add	r2, pc, #4	; (adr r2, 80096b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80096b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b8:	0800970d 	.word	0x0800970d
 80096bc:	08009893 	.word	0x08009893
 80096c0:	08009893 	.word	0x08009893
 80096c4:	08009893 	.word	0x08009893
 80096c8:	0800974d 	.word	0x0800974d
 80096cc:	08009893 	.word	0x08009893
 80096d0:	08009893 	.word	0x08009893
 80096d4:	08009893 	.word	0x08009893
 80096d8:	0800978f 	.word	0x0800978f
 80096dc:	08009893 	.word	0x08009893
 80096e0:	08009893 	.word	0x08009893
 80096e4:	08009893 	.word	0x08009893
 80096e8:	080097cf 	.word	0x080097cf
 80096ec:	08009893 	.word	0x08009893
 80096f0:	08009893 	.word	0x08009893
 80096f4:	08009893 	.word	0x08009893
 80096f8:	08009811 	.word	0x08009811
 80096fc:	08009893 	.word	0x08009893
 8009700:	08009893 	.word	0x08009893
 8009704:	08009893 	.word	0x08009893
 8009708:	08009851 	.word	0x08009851
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	68b9      	ldr	r1, [r7, #8]
 8009712:	4618      	mov	r0, r3
 8009714:	f000 fa56 	bl	8009bc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	699a      	ldr	r2, [r3, #24]
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f042 0208 	orr.w	r2, r2, #8
 8009726:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	699a      	ldr	r2, [r3, #24]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f022 0204 	bic.w	r2, r2, #4
 8009736:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	6999      	ldr	r1, [r3, #24]
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	691a      	ldr	r2, [r3, #16]
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	430a      	orrs	r2, r1
 8009748:	619a      	str	r2, [r3, #24]
      break;
 800974a:	e0a5      	b.n	8009898 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	68b9      	ldr	r1, [r7, #8]
 8009752:	4618      	mov	r0, r3
 8009754:	f000 fac6 	bl	8009ce4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	699a      	ldr	r2, [r3, #24]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009766:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	699a      	ldr	r2, [r3, #24]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009776:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	6999      	ldr	r1, [r3, #24]
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	691b      	ldr	r3, [r3, #16]
 8009782:	021a      	lsls	r2, r3, #8
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	430a      	orrs	r2, r1
 800978a:	619a      	str	r2, [r3, #24]
      break;
 800978c:	e084      	b.n	8009898 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	68b9      	ldr	r1, [r7, #8]
 8009794:	4618      	mov	r0, r3
 8009796:	f000 fb2f 	bl	8009df8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	69da      	ldr	r2, [r3, #28]
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f042 0208 	orr.w	r2, r2, #8
 80097a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	69da      	ldr	r2, [r3, #28]
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f022 0204 	bic.w	r2, r2, #4
 80097b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	69d9      	ldr	r1, [r3, #28]
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	691a      	ldr	r2, [r3, #16]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	430a      	orrs	r2, r1
 80097ca:	61da      	str	r2, [r3, #28]
      break;
 80097cc:	e064      	b.n	8009898 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	68b9      	ldr	r1, [r7, #8]
 80097d4:	4618      	mov	r0, r3
 80097d6:	f000 fb97 	bl	8009f08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	69da      	ldr	r2, [r3, #28]
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	69da      	ldr	r2, [r3, #28]
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	69d9      	ldr	r1, [r3, #28]
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	691b      	ldr	r3, [r3, #16]
 8009804:	021a      	lsls	r2, r3, #8
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	430a      	orrs	r2, r1
 800980c:	61da      	str	r2, [r3, #28]
      break;
 800980e:	e043      	b.n	8009898 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	68b9      	ldr	r1, [r7, #8]
 8009816:	4618      	mov	r0, r3
 8009818:	f000 fbe0 	bl	8009fdc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f042 0208 	orr.w	r2, r2, #8
 800982a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f022 0204 	bic.w	r2, r2, #4
 800983a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	691a      	ldr	r2, [r3, #16]
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	430a      	orrs	r2, r1
 800984c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800984e:	e023      	b.n	8009898 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	68b9      	ldr	r1, [r7, #8]
 8009856:	4618      	mov	r0, r3
 8009858:	f000 fc24 	bl	800a0a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800986a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800987a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	691b      	ldr	r3, [r3, #16]
 8009886:	021a      	lsls	r2, r3, #8
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	430a      	orrs	r2, r1
 800988e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009890:	e002      	b.n	8009898 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8009892:	2301      	movs	r3, #1
 8009894:	75fb      	strb	r3, [r7, #23]
      break;
 8009896:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2200      	movs	r2, #0
 800989c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80098a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3718      	adds	r7, #24
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
 80098aa:	bf00      	nop

080098ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b084      	sub	sp, #16
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80098b6:	2300      	movs	r3, #0
 80098b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d101      	bne.n	80098c8 <HAL_TIM_ConfigClockSource+0x1c>
 80098c4:	2302      	movs	r3, #2
 80098c6:	e0b6      	b.n	8009a36 <HAL_TIM_ConfigClockSource+0x18a>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2201      	movs	r2, #1
 80098cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2202      	movs	r2, #2
 80098d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	689b      	ldr	r3, [r3, #8]
 80098de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80098ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80098f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	68ba      	ldr	r2, [r7, #8]
 80098fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009904:	d03e      	beq.n	8009984 <HAL_TIM_ConfigClockSource+0xd8>
 8009906:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800990a:	f200 8087 	bhi.w	8009a1c <HAL_TIM_ConfigClockSource+0x170>
 800990e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009912:	f000 8086 	beq.w	8009a22 <HAL_TIM_ConfigClockSource+0x176>
 8009916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800991a:	d87f      	bhi.n	8009a1c <HAL_TIM_ConfigClockSource+0x170>
 800991c:	2b70      	cmp	r3, #112	; 0x70
 800991e:	d01a      	beq.n	8009956 <HAL_TIM_ConfigClockSource+0xaa>
 8009920:	2b70      	cmp	r3, #112	; 0x70
 8009922:	d87b      	bhi.n	8009a1c <HAL_TIM_ConfigClockSource+0x170>
 8009924:	2b60      	cmp	r3, #96	; 0x60
 8009926:	d050      	beq.n	80099ca <HAL_TIM_ConfigClockSource+0x11e>
 8009928:	2b60      	cmp	r3, #96	; 0x60
 800992a:	d877      	bhi.n	8009a1c <HAL_TIM_ConfigClockSource+0x170>
 800992c:	2b50      	cmp	r3, #80	; 0x50
 800992e:	d03c      	beq.n	80099aa <HAL_TIM_ConfigClockSource+0xfe>
 8009930:	2b50      	cmp	r3, #80	; 0x50
 8009932:	d873      	bhi.n	8009a1c <HAL_TIM_ConfigClockSource+0x170>
 8009934:	2b40      	cmp	r3, #64	; 0x40
 8009936:	d058      	beq.n	80099ea <HAL_TIM_ConfigClockSource+0x13e>
 8009938:	2b40      	cmp	r3, #64	; 0x40
 800993a:	d86f      	bhi.n	8009a1c <HAL_TIM_ConfigClockSource+0x170>
 800993c:	2b30      	cmp	r3, #48	; 0x30
 800993e:	d064      	beq.n	8009a0a <HAL_TIM_ConfigClockSource+0x15e>
 8009940:	2b30      	cmp	r3, #48	; 0x30
 8009942:	d86b      	bhi.n	8009a1c <HAL_TIM_ConfigClockSource+0x170>
 8009944:	2b20      	cmp	r3, #32
 8009946:	d060      	beq.n	8009a0a <HAL_TIM_ConfigClockSource+0x15e>
 8009948:	2b20      	cmp	r3, #32
 800994a:	d867      	bhi.n	8009a1c <HAL_TIM_ConfigClockSource+0x170>
 800994c:	2b00      	cmp	r3, #0
 800994e:	d05c      	beq.n	8009a0a <HAL_TIM_ConfigClockSource+0x15e>
 8009950:	2b10      	cmp	r3, #16
 8009952:	d05a      	beq.n	8009a0a <HAL_TIM_ConfigClockSource+0x15e>
 8009954:	e062      	b.n	8009a1c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6818      	ldr	r0, [r3, #0]
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	6899      	ldr	r1, [r3, #8]
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	685a      	ldr	r2, [r3, #4]
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	68db      	ldr	r3, [r3, #12]
 8009966:	f000 fc7d 	bl	800a264 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009978:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	68ba      	ldr	r2, [r7, #8]
 8009980:	609a      	str	r2, [r3, #8]
      break;
 8009982:	e04f      	b.n	8009a24 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6818      	ldr	r0, [r3, #0]
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	6899      	ldr	r1, [r3, #8]
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	685a      	ldr	r2, [r3, #4]
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	68db      	ldr	r3, [r3, #12]
 8009994:	f000 fc66 	bl	800a264 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	689a      	ldr	r2, [r3, #8]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80099a6:	609a      	str	r2, [r3, #8]
      break;
 80099a8:	e03c      	b.n	8009a24 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6818      	ldr	r0, [r3, #0]
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	6859      	ldr	r1, [r3, #4]
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	68db      	ldr	r3, [r3, #12]
 80099b6:	461a      	mov	r2, r3
 80099b8:	f000 fbda 	bl	800a170 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	2150      	movs	r1, #80	; 0x50
 80099c2:	4618      	mov	r0, r3
 80099c4:	f000 fc33 	bl	800a22e <TIM_ITRx_SetConfig>
      break;
 80099c8:	e02c      	b.n	8009a24 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6818      	ldr	r0, [r3, #0]
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	6859      	ldr	r1, [r3, #4]
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	68db      	ldr	r3, [r3, #12]
 80099d6:	461a      	mov	r2, r3
 80099d8:	f000 fbf9 	bl	800a1ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	2160      	movs	r1, #96	; 0x60
 80099e2:	4618      	mov	r0, r3
 80099e4:	f000 fc23 	bl	800a22e <TIM_ITRx_SetConfig>
      break;
 80099e8:	e01c      	b.n	8009a24 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6818      	ldr	r0, [r3, #0]
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	6859      	ldr	r1, [r3, #4]
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	68db      	ldr	r3, [r3, #12]
 80099f6:	461a      	mov	r2, r3
 80099f8:	f000 fbba 	bl	800a170 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	2140      	movs	r1, #64	; 0x40
 8009a02:	4618      	mov	r0, r3
 8009a04:	f000 fc13 	bl	800a22e <TIM_ITRx_SetConfig>
      break;
 8009a08:	e00c      	b.n	8009a24 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681a      	ldr	r2, [r3, #0]
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4619      	mov	r1, r3
 8009a14:	4610      	mov	r0, r2
 8009a16:	f000 fc0a 	bl	800a22e <TIM_ITRx_SetConfig>
      break;
 8009a1a:	e003      	b.n	8009a24 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8009a20:	e000      	b.n	8009a24 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009a22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2201      	movs	r2, #1
 8009a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a3e:	b480      	push	{r7}
 8009a40:	b083      	sub	sp, #12
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009a46:	bf00      	nop
 8009a48:	370c      	adds	r7, #12
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr

08009a52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a52:	b480      	push	{r7}
 8009a54:	b083      	sub	sp, #12
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009a5a:	bf00      	nop
 8009a5c:	370c      	adds	r7, #12
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a64:	4770      	bx	lr

08009a66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009a66:	b480      	push	{r7}
 8009a68:	b083      	sub	sp, #12
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009a6e:	bf00      	nop
 8009a70:	370c      	adds	r7, #12
 8009a72:	46bd      	mov	sp, r7
 8009a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a78:	4770      	bx	lr

08009a7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009a7a:	b480      	push	{r7}
 8009a7c:	b083      	sub	sp, #12
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009a82:	bf00      	nop
 8009a84:	370c      	adds	r7, #12
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr

08009a8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009a8e:	b480      	push	{r7}
 8009a90:	b083      	sub	sp, #12
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009a96:	bf00      	nop
 8009a98:	370c      	adds	r7, #12
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr
	...

08009aa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b085      	sub	sp, #20
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	4a3c      	ldr	r2, [pc, #240]	; (8009ba8 <TIM_Base_SetConfig+0x104>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d00f      	beq.n	8009adc <TIM_Base_SetConfig+0x38>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ac2:	d00b      	beq.n	8009adc <TIM_Base_SetConfig+0x38>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	4a39      	ldr	r2, [pc, #228]	; (8009bac <TIM_Base_SetConfig+0x108>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d007      	beq.n	8009adc <TIM_Base_SetConfig+0x38>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	4a38      	ldr	r2, [pc, #224]	; (8009bb0 <TIM_Base_SetConfig+0x10c>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d003      	beq.n	8009adc <TIM_Base_SetConfig+0x38>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	4a37      	ldr	r2, [pc, #220]	; (8009bb4 <TIM_Base_SetConfig+0x110>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d108      	bne.n	8009aee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ae2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	68fa      	ldr	r2, [r7, #12]
 8009aea:	4313      	orrs	r3, r2
 8009aec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	4a2d      	ldr	r2, [pc, #180]	; (8009ba8 <TIM_Base_SetConfig+0x104>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d01b      	beq.n	8009b2e <TIM_Base_SetConfig+0x8a>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009afc:	d017      	beq.n	8009b2e <TIM_Base_SetConfig+0x8a>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	4a2a      	ldr	r2, [pc, #168]	; (8009bac <TIM_Base_SetConfig+0x108>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d013      	beq.n	8009b2e <TIM_Base_SetConfig+0x8a>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	4a29      	ldr	r2, [pc, #164]	; (8009bb0 <TIM_Base_SetConfig+0x10c>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d00f      	beq.n	8009b2e <TIM_Base_SetConfig+0x8a>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	4a28      	ldr	r2, [pc, #160]	; (8009bb4 <TIM_Base_SetConfig+0x110>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d00b      	beq.n	8009b2e <TIM_Base_SetConfig+0x8a>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	4a27      	ldr	r2, [pc, #156]	; (8009bb8 <TIM_Base_SetConfig+0x114>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d007      	beq.n	8009b2e <TIM_Base_SetConfig+0x8a>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	4a26      	ldr	r2, [pc, #152]	; (8009bbc <TIM_Base_SetConfig+0x118>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d003      	beq.n	8009b2e <TIM_Base_SetConfig+0x8a>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	4a25      	ldr	r2, [pc, #148]	; (8009bc0 <TIM_Base_SetConfig+0x11c>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d108      	bne.n	8009b40 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	68db      	ldr	r3, [r3, #12]
 8009b3a:	68fa      	ldr	r2, [r7, #12]
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	695b      	ldr	r3, [r3, #20]
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	68fa      	ldr	r2, [r7, #12]
 8009b52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	689a      	ldr	r2, [r3, #8]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	681a      	ldr	r2, [r3, #0]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	4a10      	ldr	r2, [pc, #64]	; (8009ba8 <TIM_Base_SetConfig+0x104>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d00f      	beq.n	8009b8c <TIM_Base_SetConfig+0xe8>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	4a11      	ldr	r2, [pc, #68]	; (8009bb4 <TIM_Base_SetConfig+0x110>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d00b      	beq.n	8009b8c <TIM_Base_SetConfig+0xe8>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	4a10      	ldr	r2, [pc, #64]	; (8009bb8 <TIM_Base_SetConfig+0x114>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d007      	beq.n	8009b8c <TIM_Base_SetConfig+0xe8>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	4a0f      	ldr	r2, [pc, #60]	; (8009bbc <TIM_Base_SetConfig+0x118>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d003      	beq.n	8009b8c <TIM_Base_SetConfig+0xe8>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	4a0e      	ldr	r2, [pc, #56]	; (8009bc0 <TIM_Base_SetConfig+0x11c>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d103      	bne.n	8009b94 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	691a      	ldr	r2, [r3, #16]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2201      	movs	r2, #1
 8009b98:	615a      	str	r2, [r3, #20]
}
 8009b9a:	bf00      	nop
 8009b9c:	3714      	adds	r7, #20
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr
 8009ba6:	bf00      	nop
 8009ba8:	40012c00 	.word	0x40012c00
 8009bac:	40000400 	.word	0x40000400
 8009bb0:	40000800 	.word	0x40000800
 8009bb4:	40013400 	.word	0x40013400
 8009bb8:	40014000 	.word	0x40014000
 8009bbc:	40014400 	.word	0x40014400
 8009bc0:	40014800 	.word	0x40014800

08009bc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b087      	sub	sp, #28
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6a1b      	ldr	r3, [r3, #32]
 8009bd2:	f023 0201 	bic.w	r2, r3, #1
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6a1b      	ldr	r3, [r3, #32]
 8009bde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	699b      	ldr	r3, [r3, #24]
 8009bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f023 0303 	bic.w	r3, r3, #3
 8009bfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	68fa      	ldr	r2, [r7, #12]
 8009c06:	4313      	orrs	r3, r2
 8009c08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	f023 0302 	bic.w	r3, r3, #2
 8009c10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	697a      	ldr	r2, [r7, #20]
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	4a2c      	ldr	r2, [pc, #176]	; (8009cd0 <TIM_OC1_SetConfig+0x10c>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d00f      	beq.n	8009c44 <TIM_OC1_SetConfig+0x80>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	4a2b      	ldr	r2, [pc, #172]	; (8009cd4 <TIM_OC1_SetConfig+0x110>)
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d00b      	beq.n	8009c44 <TIM_OC1_SetConfig+0x80>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	4a2a      	ldr	r2, [pc, #168]	; (8009cd8 <TIM_OC1_SetConfig+0x114>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d007      	beq.n	8009c44 <TIM_OC1_SetConfig+0x80>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	4a29      	ldr	r2, [pc, #164]	; (8009cdc <TIM_OC1_SetConfig+0x118>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d003      	beq.n	8009c44 <TIM_OC1_SetConfig+0x80>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	4a28      	ldr	r2, [pc, #160]	; (8009ce0 <TIM_OC1_SetConfig+0x11c>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d10c      	bne.n	8009c5e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	f023 0308 	bic.w	r3, r3, #8
 8009c4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	68db      	ldr	r3, [r3, #12]
 8009c50:	697a      	ldr	r2, [r7, #20]
 8009c52:	4313      	orrs	r3, r2
 8009c54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	f023 0304 	bic.w	r3, r3, #4
 8009c5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	4a1b      	ldr	r2, [pc, #108]	; (8009cd0 <TIM_OC1_SetConfig+0x10c>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d00f      	beq.n	8009c86 <TIM_OC1_SetConfig+0xc2>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	4a1a      	ldr	r2, [pc, #104]	; (8009cd4 <TIM_OC1_SetConfig+0x110>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d00b      	beq.n	8009c86 <TIM_OC1_SetConfig+0xc2>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	4a19      	ldr	r2, [pc, #100]	; (8009cd8 <TIM_OC1_SetConfig+0x114>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d007      	beq.n	8009c86 <TIM_OC1_SetConfig+0xc2>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	4a18      	ldr	r2, [pc, #96]	; (8009cdc <TIM_OC1_SetConfig+0x118>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d003      	beq.n	8009c86 <TIM_OC1_SetConfig+0xc2>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	4a17      	ldr	r2, [pc, #92]	; (8009ce0 <TIM_OC1_SetConfig+0x11c>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d111      	bne.n	8009caa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	695b      	ldr	r3, [r3, #20]
 8009c9a:	693a      	ldr	r2, [r7, #16]
 8009c9c:	4313      	orrs	r3, r2
 8009c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	699b      	ldr	r3, [r3, #24]
 8009ca4:	693a      	ldr	r2, [r7, #16]
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	693a      	ldr	r2, [r7, #16]
 8009cae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	68fa      	ldr	r2, [r7, #12]
 8009cb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	685a      	ldr	r2, [r3, #4]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	697a      	ldr	r2, [r7, #20]
 8009cc2:	621a      	str	r2, [r3, #32]
}
 8009cc4:	bf00      	nop
 8009cc6:	371c      	adds	r7, #28
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr
 8009cd0:	40012c00 	.word	0x40012c00
 8009cd4:	40013400 	.word	0x40013400
 8009cd8:	40014000 	.word	0x40014000
 8009cdc:	40014400 	.word	0x40014400
 8009ce0:	40014800 	.word	0x40014800

08009ce4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b087      	sub	sp, #28
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6a1b      	ldr	r3, [r3, #32]
 8009cf2:	f023 0210 	bic.w	r2, r3, #16
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6a1b      	ldr	r3, [r3, #32]
 8009cfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	685b      	ldr	r3, [r3, #4]
 8009d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	699b      	ldr	r3, [r3, #24]
 8009d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	021b      	lsls	r3, r3, #8
 8009d26:	68fa      	ldr	r2, [r7, #12]
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	f023 0320 	bic.w	r3, r3, #32
 8009d32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	689b      	ldr	r3, [r3, #8]
 8009d38:	011b      	lsls	r3, r3, #4
 8009d3a:	697a      	ldr	r2, [r7, #20]
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	4a28      	ldr	r2, [pc, #160]	; (8009de4 <TIM_OC2_SetConfig+0x100>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d003      	beq.n	8009d50 <TIM_OC2_SetConfig+0x6c>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	4a27      	ldr	r2, [pc, #156]	; (8009de8 <TIM_OC2_SetConfig+0x104>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d10d      	bne.n	8009d6c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	68db      	ldr	r3, [r3, #12]
 8009d5c:	011b      	lsls	r3, r3, #4
 8009d5e:	697a      	ldr	r2, [r7, #20]
 8009d60:	4313      	orrs	r3, r2
 8009d62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	4a1d      	ldr	r2, [pc, #116]	; (8009de4 <TIM_OC2_SetConfig+0x100>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d00f      	beq.n	8009d94 <TIM_OC2_SetConfig+0xb0>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	4a1c      	ldr	r2, [pc, #112]	; (8009de8 <TIM_OC2_SetConfig+0x104>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d00b      	beq.n	8009d94 <TIM_OC2_SetConfig+0xb0>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	4a1b      	ldr	r2, [pc, #108]	; (8009dec <TIM_OC2_SetConfig+0x108>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d007      	beq.n	8009d94 <TIM_OC2_SetConfig+0xb0>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	4a1a      	ldr	r2, [pc, #104]	; (8009df0 <TIM_OC2_SetConfig+0x10c>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d003      	beq.n	8009d94 <TIM_OC2_SetConfig+0xb0>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	4a19      	ldr	r2, [pc, #100]	; (8009df4 <TIM_OC2_SetConfig+0x110>)
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d113      	bne.n	8009dbc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009d9a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009da2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	695b      	ldr	r3, [r3, #20]
 8009da8:	009b      	lsls	r3, r3, #2
 8009daa:	693a      	ldr	r2, [r7, #16]
 8009dac:	4313      	orrs	r3, r2
 8009dae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	699b      	ldr	r3, [r3, #24]
 8009db4:	009b      	lsls	r3, r3, #2
 8009db6:	693a      	ldr	r2, [r7, #16]
 8009db8:	4313      	orrs	r3, r2
 8009dba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	693a      	ldr	r2, [r7, #16]
 8009dc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	68fa      	ldr	r2, [r7, #12]
 8009dc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	685a      	ldr	r2, [r3, #4]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	697a      	ldr	r2, [r7, #20]
 8009dd4:	621a      	str	r2, [r3, #32]
}
 8009dd6:	bf00      	nop
 8009dd8:	371c      	adds	r7, #28
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr
 8009de2:	bf00      	nop
 8009de4:	40012c00 	.word	0x40012c00
 8009de8:	40013400 	.word	0x40013400
 8009dec:	40014000 	.word	0x40014000
 8009df0:	40014400 	.word	0x40014400
 8009df4:	40014800 	.word	0x40014800

08009df8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b087      	sub	sp, #28
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6a1b      	ldr	r3, [r3, #32]
 8009e06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6a1b      	ldr	r3, [r3, #32]
 8009e12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	69db      	ldr	r3, [r3, #28]
 8009e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f023 0303 	bic.w	r3, r3, #3
 8009e32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	68fa      	ldr	r2, [r7, #12]
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009e44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	689b      	ldr	r3, [r3, #8]
 8009e4a:	021b      	lsls	r3, r3, #8
 8009e4c:	697a      	ldr	r2, [r7, #20]
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	4a27      	ldr	r2, [pc, #156]	; (8009ef4 <TIM_OC3_SetConfig+0xfc>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d003      	beq.n	8009e62 <TIM_OC3_SetConfig+0x6a>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	4a26      	ldr	r2, [pc, #152]	; (8009ef8 <TIM_OC3_SetConfig+0x100>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d10d      	bne.n	8009e7e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009e68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	68db      	ldr	r3, [r3, #12]
 8009e6e:	021b      	lsls	r3, r3, #8
 8009e70:	697a      	ldr	r2, [r7, #20]
 8009e72:	4313      	orrs	r3, r2
 8009e74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009e7c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	4a1c      	ldr	r2, [pc, #112]	; (8009ef4 <TIM_OC3_SetConfig+0xfc>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d00f      	beq.n	8009ea6 <TIM_OC3_SetConfig+0xae>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	4a1b      	ldr	r2, [pc, #108]	; (8009ef8 <TIM_OC3_SetConfig+0x100>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d00b      	beq.n	8009ea6 <TIM_OC3_SetConfig+0xae>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	4a1a      	ldr	r2, [pc, #104]	; (8009efc <TIM_OC3_SetConfig+0x104>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d007      	beq.n	8009ea6 <TIM_OC3_SetConfig+0xae>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	4a19      	ldr	r2, [pc, #100]	; (8009f00 <TIM_OC3_SetConfig+0x108>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d003      	beq.n	8009ea6 <TIM_OC3_SetConfig+0xae>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	4a18      	ldr	r2, [pc, #96]	; (8009f04 <TIM_OC3_SetConfig+0x10c>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d113      	bne.n	8009ece <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009eac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	695b      	ldr	r3, [r3, #20]
 8009eba:	011b      	lsls	r3, r3, #4
 8009ebc:	693a      	ldr	r2, [r7, #16]
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	699b      	ldr	r3, [r3, #24]
 8009ec6:	011b      	lsls	r3, r3, #4
 8009ec8:	693a      	ldr	r2, [r7, #16]
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	693a      	ldr	r2, [r7, #16]
 8009ed2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	68fa      	ldr	r2, [r7, #12]
 8009ed8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	685a      	ldr	r2, [r3, #4]
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	697a      	ldr	r2, [r7, #20]
 8009ee6:	621a      	str	r2, [r3, #32]
}
 8009ee8:	bf00      	nop
 8009eea:	371c      	adds	r7, #28
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr
 8009ef4:	40012c00 	.word	0x40012c00
 8009ef8:	40013400 	.word	0x40013400
 8009efc:	40014000 	.word	0x40014000
 8009f00:	40014400 	.word	0x40014400
 8009f04:	40014800 	.word	0x40014800

08009f08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b087      	sub	sp, #28
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6a1b      	ldr	r3, [r3, #32]
 8009f16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6a1b      	ldr	r3, [r3, #32]
 8009f22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	69db      	ldr	r3, [r3, #28]
 8009f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	021b      	lsls	r3, r3, #8
 8009f4a:	68fa      	ldr	r2, [r7, #12]
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009f56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	031b      	lsls	r3, r3, #12
 8009f5e:	693a      	ldr	r2, [r7, #16]
 8009f60:	4313      	orrs	r3, r2
 8009f62:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	4a18      	ldr	r2, [pc, #96]	; (8009fc8 <TIM_OC4_SetConfig+0xc0>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d00f      	beq.n	8009f8c <TIM_OC4_SetConfig+0x84>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	4a17      	ldr	r2, [pc, #92]	; (8009fcc <TIM_OC4_SetConfig+0xc4>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d00b      	beq.n	8009f8c <TIM_OC4_SetConfig+0x84>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	4a16      	ldr	r2, [pc, #88]	; (8009fd0 <TIM_OC4_SetConfig+0xc8>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d007      	beq.n	8009f8c <TIM_OC4_SetConfig+0x84>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	4a15      	ldr	r2, [pc, #84]	; (8009fd4 <TIM_OC4_SetConfig+0xcc>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d003      	beq.n	8009f8c <TIM_OC4_SetConfig+0x84>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	4a14      	ldr	r2, [pc, #80]	; (8009fd8 <TIM_OC4_SetConfig+0xd0>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d109      	bne.n	8009fa0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	695b      	ldr	r3, [r3, #20]
 8009f98:	019b      	lsls	r3, r3, #6
 8009f9a:	697a      	ldr	r2, [r7, #20]
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	697a      	ldr	r2, [r7, #20]
 8009fa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	68fa      	ldr	r2, [r7, #12]
 8009faa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	685a      	ldr	r2, [r3, #4]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	693a      	ldr	r2, [r7, #16]
 8009fb8:	621a      	str	r2, [r3, #32]
}
 8009fba:	bf00      	nop
 8009fbc:	371c      	adds	r7, #28
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc4:	4770      	bx	lr
 8009fc6:	bf00      	nop
 8009fc8:	40012c00 	.word	0x40012c00
 8009fcc:	40013400 	.word	0x40013400
 8009fd0:	40014000 	.word	0x40014000
 8009fd4:	40014400 	.word	0x40014400
 8009fd8:	40014800 	.word	0x40014800

08009fdc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b087      	sub	sp, #28
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6a1b      	ldr	r3, [r3, #32]
 8009fea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6a1b      	ldr	r3, [r3, #32]
 8009ff6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a00a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a00e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	68fa      	ldr	r2, [r7, #12]
 800a016:	4313      	orrs	r3, r2
 800a018:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a020:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	689b      	ldr	r3, [r3, #8]
 800a026:	041b      	lsls	r3, r3, #16
 800a028:	693a      	ldr	r2, [r7, #16]
 800a02a:	4313      	orrs	r3, r2
 800a02c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	4a17      	ldr	r2, [pc, #92]	; (800a090 <TIM_OC5_SetConfig+0xb4>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d00f      	beq.n	800a056 <TIM_OC5_SetConfig+0x7a>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	4a16      	ldr	r2, [pc, #88]	; (800a094 <TIM_OC5_SetConfig+0xb8>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d00b      	beq.n	800a056 <TIM_OC5_SetConfig+0x7a>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	4a15      	ldr	r2, [pc, #84]	; (800a098 <TIM_OC5_SetConfig+0xbc>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d007      	beq.n	800a056 <TIM_OC5_SetConfig+0x7a>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	4a14      	ldr	r2, [pc, #80]	; (800a09c <TIM_OC5_SetConfig+0xc0>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d003      	beq.n	800a056 <TIM_OC5_SetConfig+0x7a>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	4a13      	ldr	r2, [pc, #76]	; (800a0a0 <TIM_OC5_SetConfig+0xc4>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d109      	bne.n	800a06a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a05c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	695b      	ldr	r3, [r3, #20]
 800a062:	021b      	lsls	r3, r3, #8
 800a064:	697a      	ldr	r2, [r7, #20]
 800a066:	4313      	orrs	r3, r2
 800a068:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	697a      	ldr	r2, [r7, #20]
 800a06e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	68fa      	ldr	r2, [r7, #12]
 800a074:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	685a      	ldr	r2, [r3, #4]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	693a      	ldr	r2, [r7, #16]
 800a082:	621a      	str	r2, [r3, #32]
}
 800a084:	bf00      	nop
 800a086:	371c      	adds	r7, #28
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr
 800a090:	40012c00 	.word	0x40012c00
 800a094:	40013400 	.word	0x40013400
 800a098:	40014000 	.word	0x40014000
 800a09c:	40014400 	.word	0x40014400
 800a0a0:	40014800 	.word	0x40014800

0800a0a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b087      	sub	sp, #28
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6a1b      	ldr	r3, [r3, #32]
 800a0b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6a1b      	ldr	r3, [r3, #32]
 800a0be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a0d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	021b      	lsls	r3, r3, #8
 800a0de:	68fa      	ldr	r2, [r7, #12]
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a0ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	689b      	ldr	r3, [r3, #8]
 800a0f0:	051b      	lsls	r3, r3, #20
 800a0f2:	693a      	ldr	r2, [r7, #16]
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	4a18      	ldr	r2, [pc, #96]	; (800a15c <TIM_OC6_SetConfig+0xb8>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d00f      	beq.n	800a120 <TIM_OC6_SetConfig+0x7c>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	4a17      	ldr	r2, [pc, #92]	; (800a160 <TIM_OC6_SetConfig+0xbc>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d00b      	beq.n	800a120 <TIM_OC6_SetConfig+0x7c>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	4a16      	ldr	r2, [pc, #88]	; (800a164 <TIM_OC6_SetConfig+0xc0>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d007      	beq.n	800a120 <TIM_OC6_SetConfig+0x7c>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	4a15      	ldr	r2, [pc, #84]	; (800a168 <TIM_OC6_SetConfig+0xc4>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d003      	beq.n	800a120 <TIM_OC6_SetConfig+0x7c>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	4a14      	ldr	r2, [pc, #80]	; (800a16c <TIM_OC6_SetConfig+0xc8>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d109      	bne.n	800a134 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a126:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	695b      	ldr	r3, [r3, #20]
 800a12c:	029b      	lsls	r3, r3, #10
 800a12e:	697a      	ldr	r2, [r7, #20]
 800a130:	4313      	orrs	r3, r2
 800a132:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	697a      	ldr	r2, [r7, #20]
 800a138:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	68fa      	ldr	r2, [r7, #12]
 800a13e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	685a      	ldr	r2, [r3, #4]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	693a      	ldr	r2, [r7, #16]
 800a14c:	621a      	str	r2, [r3, #32]
}
 800a14e:	bf00      	nop
 800a150:	371c      	adds	r7, #28
 800a152:	46bd      	mov	sp, r7
 800a154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a158:	4770      	bx	lr
 800a15a:	bf00      	nop
 800a15c:	40012c00 	.word	0x40012c00
 800a160:	40013400 	.word	0x40013400
 800a164:	40014000 	.word	0x40014000
 800a168:	40014400 	.word	0x40014400
 800a16c:	40014800 	.word	0x40014800

0800a170 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a170:	b480      	push	{r7}
 800a172:	b087      	sub	sp, #28
 800a174:	af00      	add	r7, sp, #0
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	60b9      	str	r1, [r7, #8]
 800a17a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	6a1b      	ldr	r3, [r3, #32]
 800a180:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	6a1b      	ldr	r3, [r3, #32]
 800a186:	f023 0201 	bic.w	r2, r3, #1
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	699b      	ldr	r3, [r3, #24]
 800a192:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a19a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	011b      	lsls	r3, r3, #4
 800a1a0:	693a      	ldr	r2, [r7, #16]
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	f023 030a 	bic.w	r3, r3, #10
 800a1ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a1ae:	697a      	ldr	r2, [r7, #20]
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	693a      	ldr	r2, [r7, #16]
 800a1ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	697a      	ldr	r2, [r7, #20]
 800a1c0:	621a      	str	r2, [r3, #32]
}
 800a1c2:	bf00      	nop
 800a1c4:	371c      	adds	r7, #28
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr

0800a1ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1ce:	b480      	push	{r7}
 800a1d0:	b087      	sub	sp, #28
 800a1d2:	af00      	add	r7, sp, #0
 800a1d4:	60f8      	str	r0, [r7, #12]
 800a1d6:	60b9      	str	r1, [r7, #8]
 800a1d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	6a1b      	ldr	r3, [r3, #32]
 800a1de:	f023 0210 	bic.w	r2, r3, #16
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	699b      	ldr	r3, [r3, #24]
 800a1ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	6a1b      	ldr	r3, [r3, #32]
 800a1f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a1f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	031b      	lsls	r3, r3, #12
 800a1fe:	697a      	ldr	r2, [r7, #20]
 800a200:	4313      	orrs	r3, r2
 800a202:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a20a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	011b      	lsls	r3, r3, #4
 800a210:	693a      	ldr	r2, [r7, #16]
 800a212:	4313      	orrs	r3, r2
 800a214:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	697a      	ldr	r2, [r7, #20]
 800a21a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	693a      	ldr	r2, [r7, #16]
 800a220:	621a      	str	r2, [r3, #32]
}
 800a222:	bf00      	nop
 800a224:	371c      	adds	r7, #28
 800a226:	46bd      	mov	sp, r7
 800a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22c:	4770      	bx	lr

0800a22e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a22e:	b480      	push	{r7}
 800a230:	b085      	sub	sp, #20
 800a232:	af00      	add	r7, sp, #0
 800a234:	6078      	str	r0, [r7, #4]
 800a236:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	689b      	ldr	r3, [r3, #8]
 800a23c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a244:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a246:	683a      	ldr	r2, [r7, #0]
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	4313      	orrs	r3, r2
 800a24c:	f043 0307 	orr.w	r3, r3, #7
 800a250:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	68fa      	ldr	r2, [r7, #12]
 800a256:	609a      	str	r2, [r3, #8]
}
 800a258:	bf00      	nop
 800a25a:	3714      	adds	r7, #20
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr

0800a264 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a264:	b480      	push	{r7}
 800a266:	b087      	sub	sp, #28
 800a268:	af00      	add	r7, sp, #0
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	60b9      	str	r1, [r7, #8]
 800a26e:	607a      	str	r2, [r7, #4]
 800a270:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a27e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	021a      	lsls	r2, r3, #8
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	431a      	orrs	r2, r3
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	4313      	orrs	r3, r2
 800a28c:	697a      	ldr	r2, [r7, #20]
 800a28e:	4313      	orrs	r3, r2
 800a290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	697a      	ldr	r2, [r7, #20]
 800a296:	609a      	str	r2, [r3, #8]
}
 800a298:	bf00      	nop
 800a29a:	371c      	adds	r7, #28
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr

0800a2a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b087      	sub	sp, #28
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	60f8      	str	r0, [r7, #12]
 800a2ac:	60b9      	str	r1, [r7, #8]
 800a2ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	f003 031f 	and.w	r3, r3, #31
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	fa02 f303 	lsl.w	r3, r2, r3
 800a2bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	6a1a      	ldr	r2, [r3, #32]
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	43db      	mvns	r3, r3
 800a2c6:	401a      	ands	r2, r3
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	6a1a      	ldr	r2, [r3, #32]
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	f003 031f 	and.w	r3, r3, #31
 800a2d6:	6879      	ldr	r1, [r7, #4]
 800a2d8:	fa01 f303 	lsl.w	r3, r1, r3
 800a2dc:	431a      	orrs	r2, r3
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	621a      	str	r2, [r3, #32]
}
 800a2e2:	bf00      	nop
 800a2e4:	371c      	adds	r7, #28
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr
	...

0800a2f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b085      	sub	sp, #20
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a300:	2b01      	cmp	r3, #1
 800a302:	d101      	bne.n	800a308 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a304:	2302      	movs	r3, #2
 800a306:	e063      	b.n	800a3d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2201      	movs	r2, #1
 800a30c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2202      	movs	r2, #2
 800a314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	685b      	ldr	r3, [r3, #4]
 800a31e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	689b      	ldr	r3, [r3, #8]
 800a326:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	4a2b      	ldr	r2, [pc, #172]	; (800a3dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d004      	beq.n	800a33c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	4a2a      	ldr	r2, [pc, #168]	; (800a3e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a338:	4293      	cmp	r3, r2
 800a33a:	d108      	bne.n	800a34e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a342:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	685b      	ldr	r3, [r3, #4]
 800a348:	68fa      	ldr	r2, [r7, #12]
 800a34a:	4313      	orrs	r3, r2
 800a34c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a354:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	68fa      	ldr	r2, [r7, #12]
 800a35c:	4313      	orrs	r3, r2
 800a35e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	68fa      	ldr	r2, [r7, #12]
 800a366:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4a1b      	ldr	r2, [pc, #108]	; (800a3dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d018      	beq.n	800a3a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a37a:	d013      	beq.n	800a3a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a18      	ldr	r2, [pc, #96]	; (800a3e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d00e      	beq.n	800a3a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4a17      	ldr	r2, [pc, #92]	; (800a3e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d009      	beq.n	800a3a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4a12      	ldr	r2, [pc, #72]	; (800a3e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a396:	4293      	cmp	r3, r2
 800a398:	d004      	beq.n	800a3a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4a13      	ldr	r2, [pc, #76]	; (800a3ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d10c      	bne.n	800a3be <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	689b      	ldr	r3, [r3, #8]
 800a3b0:	68ba      	ldr	r2, [r7, #8]
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	68ba      	ldr	r2, [r7, #8]
 800a3bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a3ce:	2300      	movs	r3, #0
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3714      	adds	r7, #20
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr
 800a3dc:	40012c00 	.word	0x40012c00
 800a3e0:	40013400 	.word	0x40013400
 800a3e4:	40000400 	.word	0x40000400
 800a3e8:	40000800 	.word	0x40000800
 800a3ec:	40014000 	.word	0x40014000

0800a3f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b083      	sub	sp, #12
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a3f8:	bf00      	nop
 800a3fa:	370c      	adds	r7, #12
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr

0800a404 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a404:	b480      	push	{r7}
 800a406:	b083      	sub	sp, #12
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a40c:	bf00      	nop
 800a40e:	370c      	adds	r7, #12
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr

0800a418 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a418:	b480      	push	{r7}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a420:	bf00      	nop
 800a422:	370c      	adds	r7, #12
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr

0800a42c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b082      	sub	sp, #8
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d101      	bne.n	800a43e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a43a:	2301      	movs	r3, #1
 800a43c:	e040      	b.n	800a4c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a442:	2b00      	cmp	r3, #0
 800a444:	d106      	bne.n	800a454 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2200      	movs	r2, #0
 800a44a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f7f9 fe3e 	bl	80040d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2224      	movs	r2, #36	; 0x24
 800a458:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	681a      	ldr	r2, [r3, #0]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f022 0201 	bic.w	r2, r2, #1
 800a468:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f000 fc16 	bl	800ac9c <UART_SetConfig>
 800a470:	4603      	mov	r3, r0
 800a472:	2b01      	cmp	r3, #1
 800a474:	d101      	bne.n	800a47a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a476:	2301      	movs	r3, #1
 800a478:	e022      	b.n	800a4c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d002      	beq.n	800a488 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 fdde 	bl	800b044 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	685a      	ldr	r2, [r3, #4]
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a496:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	689a      	ldr	r2, [r3, #8]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a4a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	681a      	ldr	r2, [r3, #0]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f042 0201 	orr.w	r2, r2, #1
 800a4b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f000 fe65 	bl	800b188 <UART_CheckIdleState>
 800a4be:	4603      	mov	r3, r0
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3708      	adds	r7, #8
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b08a      	sub	sp, #40	; 0x28
 800a4cc:	af02      	add	r7, sp, #8
 800a4ce:	60f8      	str	r0, [r7, #12]
 800a4d0:	60b9      	str	r1, [r7, #8]
 800a4d2:	603b      	str	r3, [r7, #0]
 800a4d4:	4613      	mov	r3, r2
 800a4d6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a4dc:	2b20      	cmp	r3, #32
 800a4de:	f040 8082 	bne.w	800a5e6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d002      	beq.n	800a4ee <HAL_UART_Transmit+0x26>
 800a4e8:	88fb      	ldrh	r3, [r7, #6]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d101      	bne.n	800a4f2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	e07a      	b.n	800a5e8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a4f8:	2b01      	cmp	r3, #1
 800a4fa:	d101      	bne.n	800a500 <HAL_UART_Transmit+0x38>
 800a4fc:	2302      	movs	r3, #2
 800a4fe:	e073      	b.n	800a5e8 <HAL_UART_Transmit+0x120>
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2201      	movs	r2, #1
 800a504:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2200      	movs	r2, #0
 800a50c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	2221      	movs	r2, #33	; 0x21
 800a514:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a516:	f7fa fdf5 	bl	8005104 <HAL_GetTick>
 800a51a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	88fa      	ldrh	r2, [r7, #6]
 800a520:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	88fa      	ldrh	r2, [r7, #6]
 800a528:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	689b      	ldr	r3, [r3, #8]
 800a530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a534:	d108      	bne.n	800a548 <HAL_UART_Transmit+0x80>
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	691b      	ldr	r3, [r3, #16]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d104      	bne.n	800a548 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800a53e:	2300      	movs	r3, #0
 800a540:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	61bb      	str	r3, [r7, #24]
 800a546:	e003      	b.n	800a550 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a54c:	2300      	movs	r3, #0
 800a54e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2200      	movs	r2, #0
 800a554:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800a558:	e02d      	b.n	800a5b6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	9300      	str	r3, [sp, #0]
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	2200      	movs	r2, #0
 800a562:	2180      	movs	r1, #128	; 0x80
 800a564:	68f8      	ldr	r0, [r7, #12]
 800a566:	f000 fe58 	bl	800b21a <UART_WaitOnFlagUntilTimeout>
 800a56a:	4603      	mov	r3, r0
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d001      	beq.n	800a574 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800a570:	2303      	movs	r3, #3
 800a572:	e039      	b.n	800a5e8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800a574:	69fb      	ldr	r3, [r7, #28]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d10b      	bne.n	800a592 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a57a:	69bb      	ldr	r3, [r7, #24]
 800a57c:	881a      	ldrh	r2, [r3, #0]
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a586:	b292      	uxth	r2, r2
 800a588:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a58a:	69bb      	ldr	r3, [r7, #24]
 800a58c:	3302      	adds	r3, #2
 800a58e:	61bb      	str	r3, [r7, #24]
 800a590:	e008      	b.n	800a5a4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a592:	69fb      	ldr	r3, [r7, #28]
 800a594:	781a      	ldrb	r2, [r3, #0]
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	b292      	uxth	r2, r2
 800a59c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a59e:	69fb      	ldr	r3, [r7, #28]
 800a5a0:	3301      	adds	r3, #1
 800a5a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	3b01      	subs	r3, #1
 800a5ae:	b29a      	uxth	r2, r3
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d1cb      	bne.n	800a55a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	9300      	str	r3, [sp, #0]
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	2140      	movs	r1, #64	; 0x40
 800a5cc:	68f8      	ldr	r0, [r7, #12]
 800a5ce:	f000 fe24 	bl	800b21a <UART_WaitOnFlagUntilTimeout>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d001      	beq.n	800a5dc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800a5d8:	2303      	movs	r3, #3
 800a5da:	e005      	b.n	800a5e8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2220      	movs	r2, #32
 800a5e0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	e000      	b.n	800a5e8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800a5e6:	2302      	movs	r3, #2
  }
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3720      	adds	r7, #32
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}

0800a5f0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b08a      	sub	sp, #40	; 0x28
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	60f8      	str	r0, [r7, #12]
 800a5f8:	60b9      	str	r1, [r7, #8]
 800a5fa:	4613      	mov	r3, r2
 800a5fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a602:	2b20      	cmp	r3, #32
 800a604:	d13d      	bne.n	800a682 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d002      	beq.n	800a612 <HAL_UART_Receive_IT+0x22>
 800a60c:	88fb      	ldrh	r3, [r7, #6]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d101      	bne.n	800a616 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800a612:	2301      	movs	r3, #1
 800a614:	e036      	b.n	800a684 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d101      	bne.n	800a624 <HAL_UART_Receive_IT+0x34>
 800a620:	2302      	movs	r3, #2
 800a622:	e02f      	b.n	800a684 <HAL_UART_Receive_IT+0x94>
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	2201      	movs	r2, #1
 800a628:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2200      	movs	r2, #0
 800a630:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d018      	beq.n	800a672 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	e853 3f00 	ldrex	r3, [r3]
 800a64c:	613b      	str	r3, [r7, #16]
   return(result);
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a654:	627b      	str	r3, [r7, #36]	; 0x24
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	461a      	mov	r2, r3
 800a65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65e:	623b      	str	r3, [r7, #32]
 800a660:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a662:	69f9      	ldr	r1, [r7, #28]
 800a664:	6a3a      	ldr	r2, [r7, #32]
 800a666:	e841 2300 	strex	r3, r2, [r1]
 800a66a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a66c:	69bb      	ldr	r3, [r7, #24]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d1e6      	bne.n	800a640 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a672:	88fb      	ldrh	r3, [r7, #6]
 800a674:	461a      	mov	r2, r3
 800a676:	68b9      	ldr	r1, [r7, #8]
 800a678:	68f8      	ldr	r0, [r7, #12]
 800a67a:	f000 fe93 	bl	800b3a4 <UART_Start_Receive_IT>
 800a67e:	4603      	mov	r3, r0
 800a680:	e000      	b.n	800a684 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a682:	2302      	movs	r3, #2
  }
}
 800a684:	4618      	mov	r0, r3
 800a686:	3728      	adds	r7, #40	; 0x28
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b0ba      	sub	sp, #232	; 0xe8
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	69db      	ldr	r3, [r3, #28]
 800a69a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	689b      	ldr	r3, [r3, #8]
 800a6ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a6b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a6b6:	f640 030f 	movw	r3, #2063	; 0x80f
 800a6ba:	4013      	ands	r3, r2
 800a6bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a6c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d115      	bne.n	800a6f4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a6c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6cc:	f003 0320 	and.w	r3, r3, #32
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d00f      	beq.n	800a6f4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a6d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6d8:	f003 0320 	and.w	r3, r3, #32
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d009      	beq.n	800a6f4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	f000 82a3 	beq.w	800ac30 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	4798      	blx	r3
      }
      return;
 800a6f2:	e29d      	b.n	800ac30 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a6f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	f000 8117 	beq.w	800a92c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a6fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a702:	f003 0301 	and.w	r3, r3, #1
 800a706:	2b00      	cmp	r3, #0
 800a708:	d106      	bne.n	800a718 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a70a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a70e:	4b85      	ldr	r3, [pc, #532]	; (800a924 <HAL_UART_IRQHandler+0x298>)
 800a710:	4013      	ands	r3, r2
 800a712:	2b00      	cmp	r3, #0
 800a714:	f000 810a 	beq.w	800a92c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a71c:	f003 0301 	and.w	r3, r3, #1
 800a720:	2b00      	cmp	r3, #0
 800a722:	d011      	beq.n	800a748 <HAL_UART_IRQHandler+0xbc>
 800a724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d00b      	beq.n	800a748 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	2201      	movs	r2, #1
 800a736:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a73e:	f043 0201 	orr.w	r2, r3, #1
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a74c:	f003 0302 	and.w	r3, r3, #2
 800a750:	2b00      	cmp	r3, #0
 800a752:	d011      	beq.n	800a778 <HAL_UART_IRQHandler+0xec>
 800a754:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a758:	f003 0301 	and.w	r3, r3, #1
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d00b      	beq.n	800a778 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	2202      	movs	r2, #2
 800a766:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a76e:	f043 0204 	orr.w	r2, r3, #4
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a77c:	f003 0304 	and.w	r3, r3, #4
 800a780:	2b00      	cmp	r3, #0
 800a782:	d011      	beq.n	800a7a8 <HAL_UART_IRQHandler+0x11c>
 800a784:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a788:	f003 0301 	and.w	r3, r3, #1
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d00b      	beq.n	800a7a8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	2204      	movs	r2, #4
 800a796:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a79e:	f043 0202 	orr.w	r2, r3, #2
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a7a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7ac:	f003 0308 	and.w	r3, r3, #8
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d017      	beq.n	800a7e4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a7b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7b8:	f003 0320 	and.w	r3, r3, #32
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d105      	bne.n	800a7cc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a7c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a7c4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d00b      	beq.n	800a7e4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	2208      	movs	r2, #8
 800a7d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7da:	f043 0208 	orr.w	r2, r3, #8
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a7e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d012      	beq.n	800a816 <HAL_UART_IRQHandler+0x18a>
 800a7f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d00c      	beq.n	800a816 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a804:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a80c:	f043 0220 	orr.w	r2, r3, #32
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	f000 8209 	beq.w	800ac34 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a826:	f003 0320 	and.w	r3, r3, #32
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d00d      	beq.n	800a84a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a82e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a832:	f003 0320 	and.w	r3, r3, #32
 800a836:	2b00      	cmp	r3, #0
 800a838:	d007      	beq.n	800a84a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d003      	beq.n	800a84a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a850:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	689b      	ldr	r3, [r3, #8]
 800a85a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a85e:	2b40      	cmp	r3, #64	; 0x40
 800a860:	d005      	beq.n	800a86e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a862:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a866:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d04f      	beq.n	800a90e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f000 fe30 	bl	800b4d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	689b      	ldr	r3, [r3, #8]
 800a87a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a87e:	2b40      	cmp	r3, #64	; 0x40
 800a880:	d141      	bne.n	800a906 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	3308      	adds	r3, #8
 800a888:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a88c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a890:	e853 3f00 	ldrex	r3, [r3]
 800a894:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a898:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a89c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	3308      	adds	r3, #8
 800a8aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a8ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a8b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a8ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a8be:	e841 2300 	strex	r3, r2, [r1]
 800a8c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a8c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d1d9      	bne.n	800a882 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d013      	beq.n	800a8fe <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8da:	4a13      	ldr	r2, [pc, #76]	; (800a928 <HAL_UART_IRQHandler+0x29c>)
 800a8dc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f7fc f8b0 	bl	8006a48 <HAL_DMA_Abort_IT>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d017      	beq.n	800a91e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800a8f8:	4610      	mov	r0, r2
 800a8fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8fc:	e00f      	b.n	800a91e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f000 f9b6 	bl	800ac70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a904:	e00b      	b.n	800a91e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f000 f9b2 	bl	800ac70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a90c:	e007      	b.n	800a91e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f000 f9ae 	bl	800ac70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2200      	movs	r2, #0
 800a918:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800a91c:	e18a      	b.n	800ac34 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a91e:	bf00      	nop
    return;
 800a920:	e188      	b.n	800ac34 <HAL_UART_IRQHandler+0x5a8>
 800a922:	bf00      	nop
 800a924:	04000120 	.word	0x04000120
 800a928:	0800b59b 	.word	0x0800b59b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a930:	2b01      	cmp	r3, #1
 800a932:	f040 8143 	bne.w	800abbc <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a93a:	f003 0310 	and.w	r3, r3, #16
 800a93e:	2b00      	cmp	r3, #0
 800a940:	f000 813c 	beq.w	800abbc <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a948:	f003 0310 	and.w	r3, r3, #16
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	f000 8135 	beq.w	800abbc <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	2210      	movs	r2, #16
 800a958:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	689b      	ldr	r3, [r3, #8]
 800a960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a964:	2b40      	cmp	r3, #64	; 0x40
 800a966:	f040 80b1 	bne.w	800aacc <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a976:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	f000 815c 	beq.w	800ac38 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a986:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a98a:	429a      	cmp	r2, r3
 800a98c:	f080 8154 	bcs.w	800ac38 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a996:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a99e:	699b      	ldr	r3, [r3, #24]
 800a9a0:	2b20      	cmp	r3, #32
 800a9a2:	f000 8085 	beq.w	800aab0 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a9b2:	e853 3f00 	ldrex	r3, [r3]
 800a9b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a9ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a9be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a9c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a9d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a9d4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9d8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a9dc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a9e0:	e841 2300 	strex	r3, r2, [r1]
 800a9e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a9e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d1da      	bne.n	800a9a6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	3308      	adds	r3, #8
 800a9f6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a9fa:	e853 3f00 	ldrex	r3, [r3]
 800a9fe:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800aa00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa02:	f023 0301 	bic.w	r3, r3, #1
 800aa06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	3308      	adds	r3, #8
 800aa10:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800aa14:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800aa18:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa1a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800aa1c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800aa20:	e841 2300 	strex	r3, r2, [r1]
 800aa24:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800aa26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d1e1      	bne.n	800a9f0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	3308      	adds	r3, #8
 800aa32:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa36:	e853 3f00 	ldrex	r3, [r3]
 800aa3a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800aa3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	3308      	adds	r3, #8
 800aa4c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800aa50:	66fa      	str	r2, [r7, #108]	; 0x6c
 800aa52:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa54:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800aa56:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800aa58:	e841 2300 	strex	r3, r2, [r1]
 800aa5c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800aa5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d1e3      	bne.n	800aa2c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2220      	movs	r2, #32
 800aa68:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa78:	e853 3f00 	ldrex	r3, [r3]
 800aa7c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aa7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa80:	f023 0310 	bic.w	r3, r3, #16
 800aa84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	461a      	mov	r2, r3
 800aa8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aa92:	65bb      	str	r3, [r7, #88]	; 0x58
 800aa94:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aa98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aa9a:	e841 2300 	strex	r3, r2, [r1]
 800aa9e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aaa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d1e4      	bne.n	800aa70 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f7fb ff93 	bl	80069d6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800aabc:	b29b      	uxth	r3, r3
 800aabe:	1ad3      	subs	r3, r2, r3
 800aac0:	b29b      	uxth	r3, r3
 800aac2:	4619      	mov	r1, r3
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f000 f8dd 	bl	800ac84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aaca:	e0b5      	b.n	800ac38 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800aad8:	b29b      	uxth	r3, r3
 800aada:	1ad3      	subs	r3, r2, r3
 800aadc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800aae6:	b29b      	uxth	r3, r3
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	f000 80a7 	beq.w	800ac3c <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800aaee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	f000 80a2 	beq.w	800ac3c <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aafe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab00:	e853 3f00 	ldrex	r3, [r3]
 800ab04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ab06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	461a      	mov	r2, r3
 800ab16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ab1a:	647b      	str	r3, [r7, #68]	; 0x44
 800ab1c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ab20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab22:	e841 2300 	strex	r3, r2, [r1]
 800ab26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ab28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d1e4      	bne.n	800aaf8 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	3308      	adds	r3, #8
 800ab34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab38:	e853 3f00 	ldrex	r3, [r3]
 800ab3c:	623b      	str	r3, [r7, #32]
   return(result);
 800ab3e:	6a3b      	ldr	r3, [r7, #32]
 800ab40:	f023 0301 	bic.w	r3, r3, #1
 800ab44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	3308      	adds	r3, #8
 800ab4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ab52:	633a      	str	r2, [r7, #48]	; 0x30
 800ab54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab5a:	e841 2300 	strex	r3, r2, [r1]
 800ab5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ab60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d1e3      	bne.n	800ab2e <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2220      	movs	r2, #32
 800ab6a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2200      	movs	r2, #0
 800ab76:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	e853 3f00 	ldrex	r3, [r3]
 800ab84:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	f023 0310 	bic.w	r3, r3, #16
 800ab8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	461a      	mov	r2, r3
 800ab96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ab9a:	61fb      	str	r3, [r7, #28]
 800ab9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab9e:	69b9      	ldr	r1, [r7, #24]
 800aba0:	69fa      	ldr	r2, [r7, #28]
 800aba2:	e841 2300 	strex	r3, r2, [r1]
 800aba6:	617b      	str	r3, [r7, #20]
   return(result);
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d1e4      	bne.n	800ab78 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800abae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800abb2:	4619      	mov	r1, r3
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f000 f865 	bl	800ac84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800abba:	e03f      	b.n	800ac3c <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800abbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d00e      	beq.n	800abe6 <HAL_UART_IRQHandler+0x55a>
 800abc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800abcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d008      	beq.n	800abe6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800abdc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f000 fe77 	bl	800b8d2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800abe4:	e02d      	b.n	800ac42 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800abe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d00e      	beq.n	800ac10 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800abf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d008      	beq.n	800ac10 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d01c      	beq.n	800ac40 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	4798      	blx	r3
    }
    return;
 800ac0e:	e017      	b.n	800ac40 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ac10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d012      	beq.n	800ac42 <HAL_UART_IRQHandler+0x5b6>
 800ac1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d00c      	beq.n	800ac42 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f000 fccc 	bl	800b5c6 <UART_EndTransmit_IT>
    return;
 800ac2e:	e008      	b.n	800ac42 <HAL_UART_IRQHandler+0x5b6>
      return;
 800ac30:	bf00      	nop
 800ac32:	e006      	b.n	800ac42 <HAL_UART_IRQHandler+0x5b6>
    return;
 800ac34:	bf00      	nop
 800ac36:	e004      	b.n	800ac42 <HAL_UART_IRQHandler+0x5b6>
      return;
 800ac38:	bf00      	nop
 800ac3a:	e002      	b.n	800ac42 <HAL_UART_IRQHandler+0x5b6>
      return;
 800ac3c:	bf00      	nop
 800ac3e:	e000      	b.n	800ac42 <HAL_UART_IRQHandler+0x5b6>
    return;
 800ac40:	bf00      	nop
  }

}
 800ac42:	37e8      	adds	r7, #232	; 0xe8
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b083      	sub	sp, #12
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ac50:	bf00      	nop
 800ac52:	370c      	adds	r7, #12
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr

0800ac5c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b083      	sub	sp, #12
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800ac64:	bf00      	nop
 800ac66:	370c      	adds	r7, #12
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr

0800ac70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ac70:	b480      	push	{r7}
 800ac72:	b083      	sub	sp, #12
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ac78:	bf00      	nop
 800ac7a:	370c      	adds	r7, #12
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr

0800ac84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b083      	sub	sp, #12
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	460b      	mov	r3, r1
 800ac8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ac90:	bf00      	nop
 800ac92:	370c      	adds	r7, #12
 800ac94:	46bd      	mov	sp, r7
 800ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9a:	4770      	bx	lr

0800ac9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b088      	sub	sp, #32
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aca4:	2300      	movs	r3, #0
 800aca6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	689a      	ldr	r2, [r3, #8]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	691b      	ldr	r3, [r3, #16]
 800acb0:	431a      	orrs	r2, r3
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	695b      	ldr	r3, [r3, #20]
 800acb6:	431a      	orrs	r2, r3
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	69db      	ldr	r3, [r3, #28]
 800acbc:	4313      	orrs	r3, r2
 800acbe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800acca:	f023 030c 	bic.w	r3, r3, #12
 800acce:	687a      	ldr	r2, [r7, #4]
 800acd0:	6812      	ldr	r2, [r2, #0]
 800acd2:	6979      	ldr	r1, [r7, #20]
 800acd4:	430b      	orrs	r3, r1
 800acd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	68da      	ldr	r2, [r3, #12]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	430a      	orrs	r2, r1
 800acec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	699b      	ldr	r3, [r3, #24]
 800acf2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6a1b      	ldr	r3, [r3, #32]
 800acf8:	697a      	ldr	r2, [r7, #20]
 800acfa:	4313      	orrs	r3, r2
 800acfc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	689b      	ldr	r3, [r3, #8]
 800ad04:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	697a      	ldr	r2, [r7, #20]
 800ad0e:	430a      	orrs	r2, r1
 800ad10:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	4aae      	ldr	r2, [pc, #696]	; (800afd0 <UART_SetConfig+0x334>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d120      	bne.n	800ad5e <UART_SetConfig+0xc2>
 800ad1c:	4bad      	ldr	r3, [pc, #692]	; (800afd4 <UART_SetConfig+0x338>)
 800ad1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad20:	f003 0303 	and.w	r3, r3, #3
 800ad24:	2b03      	cmp	r3, #3
 800ad26:	d817      	bhi.n	800ad58 <UART_SetConfig+0xbc>
 800ad28:	a201      	add	r2, pc, #4	; (adr r2, 800ad30 <UART_SetConfig+0x94>)
 800ad2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad2e:	bf00      	nop
 800ad30:	0800ad41 	.word	0x0800ad41
 800ad34:	0800ad4d 	.word	0x0800ad4d
 800ad38:	0800ad53 	.word	0x0800ad53
 800ad3c:	0800ad47 	.word	0x0800ad47
 800ad40:	2301      	movs	r3, #1
 800ad42:	77fb      	strb	r3, [r7, #31]
 800ad44:	e0b5      	b.n	800aeb2 <UART_SetConfig+0x216>
 800ad46:	2302      	movs	r3, #2
 800ad48:	77fb      	strb	r3, [r7, #31]
 800ad4a:	e0b2      	b.n	800aeb2 <UART_SetConfig+0x216>
 800ad4c:	2304      	movs	r3, #4
 800ad4e:	77fb      	strb	r3, [r7, #31]
 800ad50:	e0af      	b.n	800aeb2 <UART_SetConfig+0x216>
 800ad52:	2308      	movs	r3, #8
 800ad54:	77fb      	strb	r3, [r7, #31]
 800ad56:	e0ac      	b.n	800aeb2 <UART_SetConfig+0x216>
 800ad58:	2310      	movs	r3, #16
 800ad5a:	77fb      	strb	r3, [r7, #31]
 800ad5c:	e0a9      	b.n	800aeb2 <UART_SetConfig+0x216>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4a9d      	ldr	r2, [pc, #628]	; (800afd8 <UART_SetConfig+0x33c>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d124      	bne.n	800adb2 <UART_SetConfig+0x116>
 800ad68:	4b9a      	ldr	r3, [pc, #616]	; (800afd4 <UART_SetConfig+0x338>)
 800ad6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ad70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ad74:	d011      	beq.n	800ad9a <UART_SetConfig+0xfe>
 800ad76:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ad7a:	d817      	bhi.n	800adac <UART_SetConfig+0x110>
 800ad7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad80:	d011      	beq.n	800ada6 <UART_SetConfig+0x10a>
 800ad82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad86:	d811      	bhi.n	800adac <UART_SetConfig+0x110>
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d003      	beq.n	800ad94 <UART_SetConfig+0xf8>
 800ad8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad90:	d006      	beq.n	800ada0 <UART_SetConfig+0x104>
 800ad92:	e00b      	b.n	800adac <UART_SetConfig+0x110>
 800ad94:	2300      	movs	r3, #0
 800ad96:	77fb      	strb	r3, [r7, #31]
 800ad98:	e08b      	b.n	800aeb2 <UART_SetConfig+0x216>
 800ad9a:	2302      	movs	r3, #2
 800ad9c:	77fb      	strb	r3, [r7, #31]
 800ad9e:	e088      	b.n	800aeb2 <UART_SetConfig+0x216>
 800ada0:	2304      	movs	r3, #4
 800ada2:	77fb      	strb	r3, [r7, #31]
 800ada4:	e085      	b.n	800aeb2 <UART_SetConfig+0x216>
 800ada6:	2308      	movs	r3, #8
 800ada8:	77fb      	strb	r3, [r7, #31]
 800adaa:	e082      	b.n	800aeb2 <UART_SetConfig+0x216>
 800adac:	2310      	movs	r3, #16
 800adae:	77fb      	strb	r3, [r7, #31]
 800adb0:	e07f      	b.n	800aeb2 <UART_SetConfig+0x216>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	4a89      	ldr	r2, [pc, #548]	; (800afdc <UART_SetConfig+0x340>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	d124      	bne.n	800ae06 <UART_SetConfig+0x16a>
 800adbc:	4b85      	ldr	r3, [pc, #532]	; (800afd4 <UART_SetConfig+0x338>)
 800adbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adc0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800adc4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800adc8:	d011      	beq.n	800adee <UART_SetConfig+0x152>
 800adca:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800adce:	d817      	bhi.n	800ae00 <UART_SetConfig+0x164>
 800add0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800add4:	d011      	beq.n	800adfa <UART_SetConfig+0x15e>
 800add6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800adda:	d811      	bhi.n	800ae00 <UART_SetConfig+0x164>
 800addc:	2b00      	cmp	r3, #0
 800adde:	d003      	beq.n	800ade8 <UART_SetConfig+0x14c>
 800ade0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ade4:	d006      	beq.n	800adf4 <UART_SetConfig+0x158>
 800ade6:	e00b      	b.n	800ae00 <UART_SetConfig+0x164>
 800ade8:	2300      	movs	r3, #0
 800adea:	77fb      	strb	r3, [r7, #31]
 800adec:	e061      	b.n	800aeb2 <UART_SetConfig+0x216>
 800adee:	2302      	movs	r3, #2
 800adf0:	77fb      	strb	r3, [r7, #31]
 800adf2:	e05e      	b.n	800aeb2 <UART_SetConfig+0x216>
 800adf4:	2304      	movs	r3, #4
 800adf6:	77fb      	strb	r3, [r7, #31]
 800adf8:	e05b      	b.n	800aeb2 <UART_SetConfig+0x216>
 800adfa:	2308      	movs	r3, #8
 800adfc:	77fb      	strb	r3, [r7, #31]
 800adfe:	e058      	b.n	800aeb2 <UART_SetConfig+0x216>
 800ae00:	2310      	movs	r3, #16
 800ae02:	77fb      	strb	r3, [r7, #31]
 800ae04:	e055      	b.n	800aeb2 <UART_SetConfig+0x216>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	4a75      	ldr	r2, [pc, #468]	; (800afe0 <UART_SetConfig+0x344>)
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d124      	bne.n	800ae5a <UART_SetConfig+0x1be>
 800ae10:	4b70      	ldr	r3, [pc, #448]	; (800afd4 <UART_SetConfig+0x338>)
 800ae12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae14:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800ae18:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ae1c:	d011      	beq.n	800ae42 <UART_SetConfig+0x1a6>
 800ae1e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ae22:	d817      	bhi.n	800ae54 <UART_SetConfig+0x1b8>
 800ae24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae28:	d011      	beq.n	800ae4e <UART_SetConfig+0x1b2>
 800ae2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae2e:	d811      	bhi.n	800ae54 <UART_SetConfig+0x1b8>
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d003      	beq.n	800ae3c <UART_SetConfig+0x1a0>
 800ae34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae38:	d006      	beq.n	800ae48 <UART_SetConfig+0x1ac>
 800ae3a:	e00b      	b.n	800ae54 <UART_SetConfig+0x1b8>
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	77fb      	strb	r3, [r7, #31]
 800ae40:	e037      	b.n	800aeb2 <UART_SetConfig+0x216>
 800ae42:	2302      	movs	r3, #2
 800ae44:	77fb      	strb	r3, [r7, #31]
 800ae46:	e034      	b.n	800aeb2 <UART_SetConfig+0x216>
 800ae48:	2304      	movs	r3, #4
 800ae4a:	77fb      	strb	r3, [r7, #31]
 800ae4c:	e031      	b.n	800aeb2 <UART_SetConfig+0x216>
 800ae4e:	2308      	movs	r3, #8
 800ae50:	77fb      	strb	r3, [r7, #31]
 800ae52:	e02e      	b.n	800aeb2 <UART_SetConfig+0x216>
 800ae54:	2310      	movs	r3, #16
 800ae56:	77fb      	strb	r3, [r7, #31]
 800ae58:	e02b      	b.n	800aeb2 <UART_SetConfig+0x216>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	4a61      	ldr	r2, [pc, #388]	; (800afe4 <UART_SetConfig+0x348>)
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d124      	bne.n	800aeae <UART_SetConfig+0x212>
 800ae64:	4b5b      	ldr	r3, [pc, #364]	; (800afd4 <UART_SetConfig+0x338>)
 800ae66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae68:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800ae6c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ae70:	d011      	beq.n	800ae96 <UART_SetConfig+0x1fa>
 800ae72:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ae76:	d817      	bhi.n	800aea8 <UART_SetConfig+0x20c>
 800ae78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae7c:	d011      	beq.n	800aea2 <UART_SetConfig+0x206>
 800ae7e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae82:	d811      	bhi.n	800aea8 <UART_SetConfig+0x20c>
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d003      	beq.n	800ae90 <UART_SetConfig+0x1f4>
 800ae88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae8c:	d006      	beq.n	800ae9c <UART_SetConfig+0x200>
 800ae8e:	e00b      	b.n	800aea8 <UART_SetConfig+0x20c>
 800ae90:	2300      	movs	r3, #0
 800ae92:	77fb      	strb	r3, [r7, #31]
 800ae94:	e00d      	b.n	800aeb2 <UART_SetConfig+0x216>
 800ae96:	2302      	movs	r3, #2
 800ae98:	77fb      	strb	r3, [r7, #31]
 800ae9a:	e00a      	b.n	800aeb2 <UART_SetConfig+0x216>
 800ae9c:	2304      	movs	r3, #4
 800ae9e:	77fb      	strb	r3, [r7, #31]
 800aea0:	e007      	b.n	800aeb2 <UART_SetConfig+0x216>
 800aea2:	2308      	movs	r3, #8
 800aea4:	77fb      	strb	r3, [r7, #31]
 800aea6:	e004      	b.n	800aeb2 <UART_SetConfig+0x216>
 800aea8:	2310      	movs	r3, #16
 800aeaa:	77fb      	strb	r3, [r7, #31]
 800aeac:	e001      	b.n	800aeb2 <UART_SetConfig+0x216>
 800aeae:	2310      	movs	r3, #16
 800aeb0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	69db      	ldr	r3, [r3, #28]
 800aeb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aeba:	d15c      	bne.n	800af76 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 800aebc:	7ffb      	ldrb	r3, [r7, #31]
 800aebe:	2b08      	cmp	r3, #8
 800aec0:	d827      	bhi.n	800af12 <UART_SetConfig+0x276>
 800aec2:	a201      	add	r2, pc, #4	; (adr r2, 800aec8 <UART_SetConfig+0x22c>)
 800aec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aec8:	0800aeed 	.word	0x0800aeed
 800aecc:	0800aef5 	.word	0x0800aef5
 800aed0:	0800aefd 	.word	0x0800aefd
 800aed4:	0800af13 	.word	0x0800af13
 800aed8:	0800af03 	.word	0x0800af03
 800aedc:	0800af13 	.word	0x0800af13
 800aee0:	0800af13 	.word	0x0800af13
 800aee4:	0800af13 	.word	0x0800af13
 800aee8:	0800af0b 	.word	0x0800af0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aeec:	f7fd fab6 	bl	800845c <HAL_RCC_GetPCLK1Freq>
 800aef0:	61b8      	str	r0, [r7, #24]
        break;
 800aef2:	e013      	b.n	800af1c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aef4:	f7fd fad4 	bl	80084a0 <HAL_RCC_GetPCLK2Freq>
 800aef8:	61b8      	str	r0, [r7, #24]
        break;
 800aefa:	e00f      	b.n	800af1c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aefc:	4b3a      	ldr	r3, [pc, #232]	; (800afe8 <UART_SetConfig+0x34c>)
 800aefe:	61bb      	str	r3, [r7, #24]
        break;
 800af00:	e00c      	b.n	800af1c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af02:	f7fd fa35 	bl	8008370 <HAL_RCC_GetSysClockFreq>
 800af06:	61b8      	str	r0, [r7, #24]
        break;
 800af08:	e008      	b.n	800af1c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af0e:	61bb      	str	r3, [r7, #24]
        break;
 800af10:	e004      	b.n	800af1c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800af12:	2300      	movs	r3, #0
 800af14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800af16:	2301      	movs	r3, #1
 800af18:	77bb      	strb	r3, [r7, #30]
        break;
 800af1a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800af1c:	69bb      	ldr	r3, [r7, #24]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	f000 8085 	beq.w	800b02e <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800af24:	69bb      	ldr	r3, [r7, #24]
 800af26:	005a      	lsls	r2, r3, #1
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	685b      	ldr	r3, [r3, #4]
 800af2c:	085b      	lsrs	r3, r3, #1
 800af2e:	441a      	add	r2, r3
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	fbb2 f3f3 	udiv	r3, r2, r3
 800af38:	b29b      	uxth	r3, r3
 800af3a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	2b0f      	cmp	r3, #15
 800af40:	d916      	bls.n	800af70 <UART_SetConfig+0x2d4>
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af48:	d212      	bcs.n	800af70 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	b29b      	uxth	r3, r3
 800af4e:	f023 030f 	bic.w	r3, r3, #15
 800af52:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	085b      	lsrs	r3, r3, #1
 800af58:	b29b      	uxth	r3, r3
 800af5a:	f003 0307 	and.w	r3, r3, #7
 800af5e:	b29a      	uxth	r2, r3
 800af60:	89fb      	ldrh	r3, [r7, #14]
 800af62:	4313      	orrs	r3, r2
 800af64:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	89fa      	ldrh	r2, [r7, #14]
 800af6c:	60da      	str	r2, [r3, #12]
 800af6e:	e05e      	b.n	800b02e <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 800af70:	2301      	movs	r3, #1
 800af72:	77bb      	strb	r3, [r7, #30]
 800af74:	e05b      	b.n	800b02e <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 800af76:	7ffb      	ldrb	r3, [r7, #31]
 800af78:	2b08      	cmp	r3, #8
 800af7a:	d837      	bhi.n	800afec <UART_SetConfig+0x350>
 800af7c:	a201      	add	r2, pc, #4	; (adr r2, 800af84 <UART_SetConfig+0x2e8>)
 800af7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af82:	bf00      	nop
 800af84:	0800afa9 	.word	0x0800afa9
 800af88:	0800afb1 	.word	0x0800afb1
 800af8c:	0800afb9 	.word	0x0800afb9
 800af90:	0800afed 	.word	0x0800afed
 800af94:	0800afbf 	.word	0x0800afbf
 800af98:	0800afed 	.word	0x0800afed
 800af9c:	0800afed 	.word	0x0800afed
 800afa0:	0800afed 	.word	0x0800afed
 800afa4:	0800afc7 	.word	0x0800afc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800afa8:	f7fd fa58 	bl	800845c <HAL_RCC_GetPCLK1Freq>
 800afac:	61b8      	str	r0, [r7, #24]
        break;
 800afae:	e022      	b.n	800aff6 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800afb0:	f7fd fa76 	bl	80084a0 <HAL_RCC_GetPCLK2Freq>
 800afb4:	61b8      	str	r0, [r7, #24]
        break;
 800afb6:	e01e      	b.n	800aff6 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800afb8:	4b0b      	ldr	r3, [pc, #44]	; (800afe8 <UART_SetConfig+0x34c>)
 800afba:	61bb      	str	r3, [r7, #24]
        break;
 800afbc:	e01b      	b.n	800aff6 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800afbe:	f7fd f9d7 	bl	8008370 <HAL_RCC_GetSysClockFreq>
 800afc2:	61b8      	str	r0, [r7, #24]
        break;
 800afc4:	e017      	b.n	800aff6 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800afc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800afca:	61bb      	str	r3, [r7, #24]
        break;
 800afcc:	e013      	b.n	800aff6 <UART_SetConfig+0x35a>
 800afce:	bf00      	nop
 800afd0:	40013800 	.word	0x40013800
 800afd4:	40021000 	.word	0x40021000
 800afd8:	40004400 	.word	0x40004400
 800afdc:	40004800 	.word	0x40004800
 800afe0:	40004c00 	.word	0x40004c00
 800afe4:	40005000 	.word	0x40005000
 800afe8:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800afec:	2300      	movs	r3, #0
 800afee:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800aff0:	2301      	movs	r3, #1
 800aff2:	77bb      	strb	r3, [r7, #30]
        break;
 800aff4:	bf00      	nop
    }

    if (pclk != 0U)
 800aff6:	69bb      	ldr	r3, [r7, #24]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d018      	beq.n	800b02e <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	085a      	lsrs	r2, r3, #1
 800b002:	69bb      	ldr	r3, [r7, #24]
 800b004:	441a      	add	r2, r3
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	685b      	ldr	r3, [r3, #4]
 800b00a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b00e:	b29b      	uxth	r3, r3
 800b010:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	2b0f      	cmp	r3, #15
 800b016:	d908      	bls.n	800b02a <UART_SetConfig+0x38e>
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b01e:	d204      	bcs.n	800b02a <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	693a      	ldr	r2, [r7, #16]
 800b026:	60da      	str	r2, [r3, #12]
 800b028:	e001      	b.n	800b02e <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 800b02a:	2301      	movs	r3, #1
 800b02c:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2200      	movs	r2, #0
 800b032:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2200      	movs	r2, #0
 800b038:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b03a:	7fbb      	ldrb	r3, [r7, #30]
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3720      	adds	r7, #32
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}

0800b044 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b044:	b480      	push	{r7}
 800b046:	b083      	sub	sp, #12
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b050:	f003 0301 	and.w	r3, r3, #1
 800b054:	2b00      	cmp	r3, #0
 800b056:	d00a      	beq.n	800b06e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	430a      	orrs	r2, r1
 800b06c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b072:	f003 0302 	and.w	r3, r3, #2
 800b076:	2b00      	cmp	r3, #0
 800b078:	d00a      	beq.n	800b090 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	430a      	orrs	r2, r1
 800b08e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b094:	f003 0304 	and.w	r3, r3, #4
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d00a      	beq.n	800b0b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	685b      	ldr	r3, [r3, #4]
 800b0a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	430a      	orrs	r2, r1
 800b0b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b6:	f003 0308 	and.w	r3, r3, #8
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d00a      	beq.n	800b0d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	685b      	ldr	r3, [r3, #4]
 800b0c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	430a      	orrs	r2, r1
 800b0d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0d8:	f003 0310 	and.w	r3, r3, #16
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d00a      	beq.n	800b0f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	689b      	ldr	r3, [r3, #8]
 800b0e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	430a      	orrs	r2, r1
 800b0f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0fa:	f003 0320 	and.w	r3, r3, #32
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d00a      	beq.n	800b118 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	689b      	ldr	r3, [r3, #8]
 800b108:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	430a      	orrs	r2, r1
 800b116:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b11c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b120:	2b00      	cmp	r3, #0
 800b122:	d01a      	beq.n	800b15a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	685b      	ldr	r3, [r3, #4]
 800b12a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	430a      	orrs	r2, r1
 800b138:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b13e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b142:	d10a      	bne.n	800b15a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	685b      	ldr	r3, [r3, #4]
 800b14a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	430a      	orrs	r2, r1
 800b158:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b162:	2b00      	cmp	r3, #0
 800b164:	d00a      	beq.n	800b17c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	430a      	orrs	r2, r1
 800b17a:	605a      	str	r2, [r3, #4]
  }
}
 800b17c:	bf00      	nop
 800b17e:	370c      	adds	r7, #12
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr

0800b188 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b086      	sub	sp, #24
 800b18c:	af02      	add	r7, sp, #8
 800b18e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2200      	movs	r2, #0
 800b194:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b198:	f7f9 ffb4 	bl	8005104 <HAL_GetTick>
 800b19c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f003 0308 	and.w	r3, r3, #8
 800b1a8:	2b08      	cmp	r3, #8
 800b1aa:	d10e      	bne.n	800b1ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b1ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b1b0:	9300      	str	r3, [sp, #0]
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f000 f82d 	bl	800b21a <UART_WaitOnFlagUntilTimeout>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d001      	beq.n	800b1ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b1c6:	2303      	movs	r3, #3
 800b1c8:	e023      	b.n	800b212 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f003 0304 	and.w	r3, r3, #4
 800b1d4:	2b04      	cmp	r3, #4
 800b1d6:	d10e      	bne.n	800b1f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b1d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b1dc:	9300      	str	r3, [sp, #0]
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f000 f817 	bl	800b21a <UART_WaitOnFlagUntilTimeout>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d001      	beq.n	800b1f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b1f2:	2303      	movs	r3, #3
 800b1f4:	e00d      	b.n	800b212 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2220      	movs	r2, #32
 800b1fa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2220      	movs	r2, #32
 800b200:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2200      	movs	r2, #0
 800b206:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2200      	movs	r2, #0
 800b20c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800b210:	2300      	movs	r3, #0
}
 800b212:	4618      	mov	r0, r3
 800b214:	3710      	adds	r7, #16
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}

0800b21a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b21a:	b580      	push	{r7, lr}
 800b21c:	b09c      	sub	sp, #112	; 0x70
 800b21e:	af00      	add	r7, sp, #0
 800b220:	60f8      	str	r0, [r7, #12]
 800b222:	60b9      	str	r1, [r7, #8]
 800b224:	603b      	str	r3, [r7, #0]
 800b226:	4613      	mov	r3, r2
 800b228:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b22a:	e0a5      	b.n	800b378 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b22c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b22e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b232:	f000 80a1 	beq.w	800b378 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b236:	f7f9 ff65 	bl	8005104 <HAL_GetTick>
 800b23a:	4602      	mov	r2, r0
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	1ad3      	subs	r3, r2, r3
 800b240:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b242:	429a      	cmp	r2, r3
 800b244:	d302      	bcc.n	800b24c <UART_WaitOnFlagUntilTimeout+0x32>
 800b246:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d13e      	bne.n	800b2ca <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b254:	e853 3f00 	ldrex	r3, [r3]
 800b258:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b25a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b25c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b260:	667b      	str	r3, [r7, #100]	; 0x64
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	461a      	mov	r2, r3
 800b268:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b26a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b26c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b26e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b270:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b272:	e841 2300 	strex	r3, r2, [r1]
 800b276:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b278:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d1e6      	bne.n	800b24c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	3308      	adds	r3, #8
 800b284:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b288:	e853 3f00 	ldrex	r3, [r3]
 800b28c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b290:	f023 0301 	bic.w	r3, r3, #1
 800b294:	663b      	str	r3, [r7, #96]	; 0x60
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	3308      	adds	r3, #8
 800b29c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b29e:	64ba      	str	r2, [r7, #72]	; 0x48
 800b2a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b2a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b2a6:	e841 2300 	strex	r3, r2, [r1]
 800b2aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b2ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d1e5      	bne.n	800b27e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	2220      	movs	r2, #32
 800b2b6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	2220      	movs	r2, #32
 800b2bc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800b2c6:	2303      	movs	r3, #3
 800b2c8:	e067      	b.n	800b39a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f003 0304 	and.w	r3, r3, #4
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d04f      	beq.n	800b378 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	69db      	ldr	r3, [r3, #28]
 800b2de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b2e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2e6:	d147      	bne.n	800b378 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b2f0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2fa:	e853 3f00 	ldrex	r3, [r3]
 800b2fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b302:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b306:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	461a      	mov	r2, r3
 800b30e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b310:	637b      	str	r3, [r7, #52]	; 0x34
 800b312:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b314:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b316:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b318:	e841 2300 	strex	r3, r2, [r1]
 800b31c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b320:	2b00      	cmp	r3, #0
 800b322:	d1e6      	bne.n	800b2f2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	3308      	adds	r3, #8
 800b32a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	e853 3f00 	ldrex	r3, [r3]
 800b332:	613b      	str	r3, [r7, #16]
   return(result);
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	f023 0301 	bic.w	r3, r3, #1
 800b33a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	3308      	adds	r3, #8
 800b342:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b344:	623a      	str	r2, [r7, #32]
 800b346:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b348:	69f9      	ldr	r1, [r7, #28]
 800b34a:	6a3a      	ldr	r2, [r7, #32]
 800b34c:	e841 2300 	strex	r3, r2, [r1]
 800b350:	61bb      	str	r3, [r7, #24]
   return(result);
 800b352:	69bb      	ldr	r3, [r7, #24]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d1e5      	bne.n	800b324 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	2220      	movs	r2, #32
 800b35c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	2220      	movs	r2, #32
 800b362:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	2220      	movs	r2, #32
 800b368:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2200      	movs	r2, #0
 800b370:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800b374:	2303      	movs	r3, #3
 800b376:	e010      	b.n	800b39a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	69da      	ldr	r2, [r3, #28]
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	4013      	ands	r3, r2
 800b382:	68ba      	ldr	r2, [r7, #8]
 800b384:	429a      	cmp	r2, r3
 800b386:	bf0c      	ite	eq
 800b388:	2301      	moveq	r3, #1
 800b38a:	2300      	movne	r3, #0
 800b38c:	b2db      	uxtb	r3, r3
 800b38e:	461a      	mov	r2, r3
 800b390:	79fb      	ldrb	r3, [r7, #7]
 800b392:	429a      	cmp	r2, r3
 800b394:	f43f af4a 	beq.w	800b22c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b398:	2300      	movs	r3, #0
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3770      	adds	r7, #112	; 0x70
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
	...

0800b3a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b091      	sub	sp, #68	; 0x44
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	60f8      	str	r0, [r7, #12]
 800b3ac:	60b9      	str	r1, [r7, #8]
 800b3ae:	4613      	mov	r3, r2
 800b3b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	68ba      	ldr	r2, [r7, #8]
 800b3b6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	88fa      	ldrh	r2, [r7, #6]
 800b3bc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	88fa      	ldrh	r2, [r7, #6]
 800b3c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	689b      	ldr	r3, [r3, #8]
 800b3d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3d6:	d10e      	bne.n	800b3f6 <UART_Start_Receive_IT+0x52>
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	691b      	ldr	r3, [r3, #16]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d105      	bne.n	800b3ec <UART_Start_Receive_IT+0x48>
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b3e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b3ea:	e01a      	b.n	800b422 <UART_Start_Receive_IT+0x7e>
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	22ff      	movs	r2, #255	; 0xff
 800b3f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b3f4:	e015      	b.n	800b422 <UART_Start_Receive_IT+0x7e>
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	689b      	ldr	r3, [r3, #8]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d10d      	bne.n	800b41a <UART_Start_Receive_IT+0x76>
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	691b      	ldr	r3, [r3, #16]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d104      	bne.n	800b410 <UART_Start_Receive_IT+0x6c>
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	22ff      	movs	r2, #255	; 0xff
 800b40a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b40e:	e008      	b.n	800b422 <UART_Start_Receive_IT+0x7e>
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	227f      	movs	r2, #127	; 0x7f
 800b414:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b418:	e003      	b.n	800b422 <UART_Start_Receive_IT+0x7e>
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	2200      	movs	r2, #0
 800b41e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	2200      	movs	r2, #0
 800b426:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	2222      	movs	r2, #34	; 0x22
 800b42e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	3308      	adds	r3, #8
 800b436:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b43a:	e853 3f00 	ldrex	r3, [r3]
 800b43e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b442:	f043 0301 	orr.w	r3, r3, #1
 800b446:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	3308      	adds	r3, #8
 800b44e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b450:	637a      	str	r2, [r7, #52]	; 0x34
 800b452:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b454:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b456:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b458:	e841 2300 	strex	r3, r2, [r1]
 800b45c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b460:	2b00      	cmp	r3, #0
 800b462:	d1e5      	bne.n	800b430 <UART_Start_Receive_IT+0x8c>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	689b      	ldr	r3, [r3, #8]
 800b468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b46c:	d107      	bne.n	800b47e <UART_Start_Receive_IT+0xda>
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	691b      	ldr	r3, [r3, #16]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d103      	bne.n	800b47e <UART_Start_Receive_IT+0xda>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	4a14      	ldr	r2, [pc, #80]	; (800b4cc <UART_Start_Receive_IT+0x128>)
 800b47a:	665a      	str	r2, [r3, #100]	; 0x64
 800b47c:	e002      	b.n	800b484 <UART_Start_Receive_IT+0xe0>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	4a13      	ldr	r2, [pc, #76]	; (800b4d0 <UART_Start_Receive_IT+0x12c>)
 800b482:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2200      	movs	r2, #0
 800b488:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	e853 3f00 	ldrex	r3, [r3]
 800b498:	613b      	str	r3, [r7, #16]
   return(result);
 800b49a:	693b      	ldr	r3, [r7, #16]
 800b49c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800b4a0:	63bb      	str	r3, [r7, #56]	; 0x38
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4aa:	623b      	str	r3, [r7, #32]
 800b4ac:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ae:	69f9      	ldr	r1, [r7, #28]
 800b4b0:	6a3a      	ldr	r2, [r7, #32]
 800b4b2:	e841 2300 	strex	r3, r2, [r1]
 800b4b6:	61bb      	str	r3, [r7, #24]
   return(result);
 800b4b8:	69bb      	ldr	r3, [r7, #24]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d1e6      	bne.n	800b48c <UART_Start_Receive_IT+0xe8>
  return HAL_OK;
 800b4be:	2300      	movs	r3, #0
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3744      	adds	r7, #68	; 0x44
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr
 800b4cc:	0800b777 	.word	0x0800b777
 800b4d0:	0800b61b 	.word	0x0800b61b

0800b4d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b095      	sub	sp, #84	; 0x54
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4e4:	e853 3f00 	ldrex	r3, [r3]
 800b4e8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b4f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	461a      	mov	r2, r3
 800b4f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4fa:	643b      	str	r3, [r7, #64]	; 0x40
 800b4fc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b500:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b502:	e841 2300 	strex	r3, r2, [r1]
 800b506:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d1e6      	bne.n	800b4dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	3308      	adds	r3, #8
 800b514:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b516:	6a3b      	ldr	r3, [r7, #32]
 800b518:	e853 3f00 	ldrex	r3, [r3]
 800b51c:	61fb      	str	r3, [r7, #28]
   return(result);
 800b51e:	69fb      	ldr	r3, [r7, #28]
 800b520:	f023 0301 	bic.w	r3, r3, #1
 800b524:	64bb      	str	r3, [r7, #72]	; 0x48
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	3308      	adds	r3, #8
 800b52c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b52e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b530:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b532:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b534:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b536:	e841 2300 	strex	r3, r2, [r1]
 800b53a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d1e5      	bne.n	800b50e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b546:	2b01      	cmp	r3, #1
 800b548:	d118      	bne.n	800b57c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	e853 3f00 	ldrex	r3, [r3]
 800b556:	60bb      	str	r3, [r7, #8]
   return(result);
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	f023 0310 	bic.w	r3, r3, #16
 800b55e:	647b      	str	r3, [r7, #68]	; 0x44
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	461a      	mov	r2, r3
 800b566:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b568:	61bb      	str	r3, [r7, #24]
 800b56a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b56c:	6979      	ldr	r1, [r7, #20]
 800b56e:	69ba      	ldr	r2, [r7, #24]
 800b570:	e841 2300 	strex	r3, r2, [r1]
 800b574:	613b      	str	r3, [r7, #16]
   return(result);
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d1e6      	bne.n	800b54a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2220      	movs	r2, #32
 800b580:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2200      	movs	r2, #0
 800b586:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2200      	movs	r2, #0
 800b58c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800b58e:	bf00      	nop
 800b590:	3754      	adds	r7, #84	; 0x54
 800b592:	46bd      	mov	sp, r7
 800b594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b598:	4770      	bx	lr

0800b59a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b59a:	b580      	push	{r7, lr}
 800b59c:	b084      	sub	sp, #16
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b5b8:	68f8      	ldr	r0, [r7, #12]
 800b5ba:	f7ff fb59 	bl	800ac70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5be:	bf00      	nop
 800b5c0:	3710      	adds	r7, #16
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}

0800b5c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b5c6:	b580      	push	{r7, lr}
 800b5c8:	b088      	sub	sp, #32
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	e853 3f00 	ldrex	r3, [r3]
 800b5da:	60bb      	str	r3, [r7, #8]
   return(result);
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b5e2:	61fb      	str	r3, [r7, #28]
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	461a      	mov	r2, r3
 800b5ea:	69fb      	ldr	r3, [r7, #28]
 800b5ec:	61bb      	str	r3, [r7, #24]
 800b5ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5f0:	6979      	ldr	r1, [r7, #20]
 800b5f2:	69ba      	ldr	r2, [r7, #24]
 800b5f4:	e841 2300 	strex	r3, r2, [r1]
 800b5f8:	613b      	str	r3, [r7, #16]
   return(result);
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d1e6      	bne.n	800b5ce <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2220      	movs	r2, #32
 800b604:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2200      	movs	r2, #0
 800b60a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f7ff fb1b 	bl	800ac48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b612:	bf00      	nop
 800b614:	3720      	adds	r7, #32
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}

0800b61a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b61a:	b580      	push	{r7, lr}
 800b61c:	b096      	sub	sp, #88	; 0x58
 800b61e:	af00      	add	r7, sp, #0
 800b620:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b628:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b630:	2b22      	cmp	r3, #34	; 0x22
 800b632:	f040 8094 	bne.w	800b75e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b63c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b640:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800b644:	b2d9      	uxtb	r1, r3
 800b646:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b64a:	b2da      	uxtb	r2, r3
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b650:	400a      	ands	r2, r1
 800b652:	b2d2      	uxtb	r2, r2
 800b654:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b65a:	1c5a      	adds	r2, r3, #1
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b666:	b29b      	uxth	r3, r3
 800b668:	3b01      	subs	r3, #1
 800b66a:	b29a      	uxth	r2, r3
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b678:	b29b      	uxth	r3, r3
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d177      	bne.n	800b76e <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b686:	e853 3f00 	ldrex	r3, [r3]
 800b68a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b68c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b68e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b692:	653b      	str	r3, [r7, #80]	; 0x50
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	461a      	mov	r2, r3
 800b69a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b69c:	647b      	str	r3, [r7, #68]	; 0x44
 800b69e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b6a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b6a4:	e841 2300 	strex	r3, r2, [r1]
 800b6a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b6aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d1e6      	bne.n	800b67e <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	3308      	adds	r3, #8
 800b6b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ba:	e853 3f00 	ldrex	r3, [r3]
 800b6be:	623b      	str	r3, [r7, #32]
   return(result);
 800b6c0:	6a3b      	ldr	r3, [r7, #32]
 800b6c2:	f023 0301 	bic.w	r3, r3, #1
 800b6c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	3308      	adds	r3, #8
 800b6ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b6d0:	633a      	str	r2, [r7, #48]	; 0x30
 800b6d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b6d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6d8:	e841 2300 	strex	r3, r2, [r1]
 800b6dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d1e5      	bne.n	800b6b0 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2220      	movs	r2, #32
 800b6e8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6f4:	2b01      	cmp	r3, #1
 800b6f6:	d12e      	bne.n	800b756 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	e853 3f00 	ldrex	r3, [r3]
 800b70a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	f023 0310 	bic.w	r3, r3, #16
 800b712:	64bb      	str	r3, [r7, #72]	; 0x48
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	461a      	mov	r2, r3
 800b71a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b71c:	61fb      	str	r3, [r7, #28]
 800b71e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b720:	69b9      	ldr	r1, [r7, #24]
 800b722:	69fa      	ldr	r2, [r7, #28]
 800b724:	e841 2300 	strex	r3, r2, [r1]
 800b728:	617b      	str	r3, [r7, #20]
   return(result);
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d1e6      	bne.n	800b6fe <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	69db      	ldr	r3, [r3, #28]
 800b736:	f003 0310 	and.w	r3, r3, #16
 800b73a:	2b10      	cmp	r3, #16
 800b73c:	d103      	bne.n	800b746 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	2210      	movs	r2, #16
 800b744:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b74c:	4619      	mov	r1, r3
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f7ff fa98 	bl	800ac84 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b754:	e00b      	b.n	800b76e <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f7ff fa80 	bl	800ac5c <HAL_UART_RxCpltCallback>
}
 800b75c:	e007      	b.n	800b76e <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	699a      	ldr	r2, [r3, #24]
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f042 0208 	orr.w	r2, r2, #8
 800b76c:	619a      	str	r2, [r3, #24]
}
 800b76e:	bf00      	nop
 800b770:	3758      	adds	r7, #88	; 0x58
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}

0800b776 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b776:	b580      	push	{r7, lr}
 800b778:	b096      	sub	sp, #88	; 0x58
 800b77a:	af00      	add	r7, sp, #0
 800b77c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b784:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b78c:	2b22      	cmp	r3, #34	; 0x22
 800b78e:	f040 8094 	bne.w	800b8ba <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b798:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7a0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800b7a2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800b7a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b7aa:	4013      	ands	r3, r2
 800b7ac:	b29a      	uxth	r2, r3
 800b7ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7b0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7b6:	1c9a      	adds	r2, r3, #2
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b7c2:	b29b      	uxth	r3, r3
 800b7c4:	3b01      	subs	r3, #1
 800b7c6:	b29a      	uxth	r2, r3
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b7d4:	b29b      	uxth	r3, r3
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d177      	bne.n	800b8ca <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7e2:	e853 3f00 	ldrex	r3, [r3]
 800b7e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b7ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	461a      	mov	r2, r3
 800b7f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7f8:	643b      	str	r3, [r7, #64]	; 0x40
 800b7fa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b7fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b800:	e841 2300 	strex	r3, r2, [r1]
 800b804:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d1e6      	bne.n	800b7da <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	3308      	adds	r3, #8
 800b812:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b814:	6a3b      	ldr	r3, [r7, #32]
 800b816:	e853 3f00 	ldrex	r3, [r3]
 800b81a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b81c:	69fb      	ldr	r3, [r7, #28]
 800b81e:	f023 0301 	bic.w	r3, r3, #1
 800b822:	64bb      	str	r3, [r7, #72]	; 0x48
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	3308      	adds	r3, #8
 800b82a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b82c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b82e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b830:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b834:	e841 2300 	strex	r3, r2, [r1]
 800b838:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d1e5      	bne.n	800b80c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2220      	movs	r2, #32
 800b844:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2200      	movs	r2, #0
 800b84a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b850:	2b01      	cmp	r3, #1
 800b852:	d12e      	bne.n	800b8b2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2200      	movs	r2, #0
 800b858:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	e853 3f00 	ldrex	r3, [r3]
 800b866:	60bb      	str	r3, [r7, #8]
   return(result);
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	f023 0310 	bic.w	r3, r3, #16
 800b86e:	647b      	str	r3, [r7, #68]	; 0x44
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	461a      	mov	r2, r3
 800b876:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b878:	61bb      	str	r3, [r7, #24]
 800b87a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b87c:	6979      	ldr	r1, [r7, #20]
 800b87e:	69ba      	ldr	r2, [r7, #24]
 800b880:	e841 2300 	strex	r3, r2, [r1]
 800b884:	613b      	str	r3, [r7, #16]
   return(result);
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d1e6      	bne.n	800b85a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	69db      	ldr	r3, [r3, #28]
 800b892:	f003 0310 	and.w	r3, r3, #16
 800b896:	2b10      	cmp	r3, #16
 800b898:	d103      	bne.n	800b8a2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	2210      	movs	r2, #16
 800b8a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f7ff f9ea 	bl	800ac84 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b8b0:	e00b      	b.n	800b8ca <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f7ff f9d2 	bl	800ac5c <HAL_UART_RxCpltCallback>
}
 800b8b8:	e007      	b.n	800b8ca <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	699a      	ldr	r2, [r3, #24]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	f042 0208 	orr.w	r2, r2, #8
 800b8c8:	619a      	str	r2, [r3, #24]
}
 800b8ca:	bf00      	nop
 800b8cc:	3758      	adds	r7, #88	; 0x58
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}

0800b8d2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b8d2:	b480      	push	{r7}
 800b8d4:	b083      	sub	sp, #12
 800b8d6:	af00      	add	r7, sp, #0
 800b8d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b8da:	bf00      	nop
 800b8dc:	370c      	adds	r7, #12
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e4:	4770      	bx	lr

0800b8e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800b8e6:	b480      	push	{r7}
 800b8e8:	b085      	sub	sp, #20
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b8ee:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800b8f2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b8fa:	b29a      	uxth	r2, r3
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	b29b      	uxth	r3, r3
 800b900:	43db      	mvns	r3, r3
 800b902:	b29b      	uxth	r3, r3
 800b904:	4013      	ands	r3, r2
 800b906:	b29a      	uxth	r2, r3
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b90e:	2300      	movs	r3, #0
}
 800b910:	4618      	mov	r0, r3
 800b912:	3714      	adds	r7, #20
 800b914:	46bd      	mov	sp, r7
 800b916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91a:	4770      	bx	lr

0800b91c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b91c:	b084      	sub	sp, #16
 800b91e:	b480      	push	{r7}
 800b920:	b083      	sub	sp, #12
 800b922:	af00      	add	r7, sp, #0
 800b924:	6078      	str	r0, [r7, #4]
 800b926:	f107 0014 	add.w	r0, r7, #20
 800b92a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2201      	movs	r2, #1
 800b932:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2200      	movs	r2, #0
 800b93a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2200      	movs	r2, #0
 800b942:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2200      	movs	r2, #0
 800b94a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800b94e:	2300      	movs	r3, #0
}
 800b950:	4618      	mov	r0, r3
 800b952:	370c      	adds	r7, #12
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	b004      	add	sp, #16
 800b95c:	4770      	bx	lr
	...

0800b960 <__errno>:
 800b960:	4b01      	ldr	r3, [pc, #4]	; (800b968 <__errno+0x8>)
 800b962:	6818      	ldr	r0, [r3, #0]
 800b964:	4770      	bx	lr
 800b966:	bf00      	nop
 800b968:	20000258 	.word	0x20000258

0800b96c <__libc_init_array>:
 800b96c:	b570      	push	{r4, r5, r6, lr}
 800b96e:	4d0d      	ldr	r5, [pc, #52]	; (800b9a4 <__libc_init_array+0x38>)
 800b970:	4c0d      	ldr	r4, [pc, #52]	; (800b9a8 <__libc_init_array+0x3c>)
 800b972:	1b64      	subs	r4, r4, r5
 800b974:	10a4      	asrs	r4, r4, #2
 800b976:	2600      	movs	r6, #0
 800b978:	42a6      	cmp	r6, r4
 800b97a:	d109      	bne.n	800b990 <__libc_init_array+0x24>
 800b97c:	4d0b      	ldr	r5, [pc, #44]	; (800b9ac <__libc_init_array+0x40>)
 800b97e:	4c0c      	ldr	r4, [pc, #48]	; (800b9b0 <__libc_init_array+0x44>)
 800b980:	f001 f9f4 	bl	800cd6c <_init>
 800b984:	1b64      	subs	r4, r4, r5
 800b986:	10a4      	asrs	r4, r4, #2
 800b988:	2600      	movs	r6, #0
 800b98a:	42a6      	cmp	r6, r4
 800b98c:	d105      	bne.n	800b99a <__libc_init_array+0x2e>
 800b98e:	bd70      	pop	{r4, r5, r6, pc}
 800b990:	f855 3b04 	ldr.w	r3, [r5], #4
 800b994:	4798      	blx	r3
 800b996:	3601      	adds	r6, #1
 800b998:	e7ee      	b.n	800b978 <__libc_init_array+0xc>
 800b99a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b99e:	4798      	blx	r3
 800b9a0:	3601      	adds	r6, #1
 800b9a2:	e7f2      	b.n	800b98a <__libc_init_array+0x1e>
 800b9a4:	0800e674 	.word	0x0800e674
 800b9a8:	0800e674 	.word	0x0800e674
 800b9ac:	0800e674 	.word	0x0800e674
 800b9b0:	0800e678 	.word	0x0800e678

0800b9b4 <memset>:
 800b9b4:	4402      	add	r2, r0
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	4293      	cmp	r3, r2
 800b9ba:	d100      	bne.n	800b9be <memset+0xa>
 800b9bc:	4770      	bx	lr
 800b9be:	f803 1b01 	strb.w	r1, [r3], #1
 800b9c2:	e7f9      	b.n	800b9b8 <memset+0x4>

0800b9c4 <rand>:
 800b9c4:	4b17      	ldr	r3, [pc, #92]	; (800ba24 <rand+0x60>)
 800b9c6:	b510      	push	{r4, lr}
 800b9c8:	681c      	ldr	r4, [r3, #0]
 800b9ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b9cc:	b9b3      	cbnz	r3, 800b9fc <rand+0x38>
 800b9ce:	2018      	movs	r0, #24
 800b9d0:	f000 f888 	bl	800bae4 <malloc>
 800b9d4:	63a0      	str	r0, [r4, #56]	; 0x38
 800b9d6:	b928      	cbnz	r0, 800b9e4 <rand+0x20>
 800b9d8:	4602      	mov	r2, r0
 800b9da:	4b13      	ldr	r3, [pc, #76]	; (800ba28 <rand+0x64>)
 800b9dc:	4813      	ldr	r0, [pc, #76]	; (800ba2c <rand+0x68>)
 800b9de:	214e      	movs	r1, #78	; 0x4e
 800b9e0:	f000 f850 	bl	800ba84 <__assert_func>
 800b9e4:	4a12      	ldr	r2, [pc, #72]	; (800ba30 <rand+0x6c>)
 800b9e6:	4b13      	ldr	r3, [pc, #76]	; (800ba34 <rand+0x70>)
 800b9e8:	e9c0 2300 	strd	r2, r3, [r0]
 800b9ec:	4b12      	ldr	r3, [pc, #72]	; (800ba38 <rand+0x74>)
 800b9ee:	6083      	str	r3, [r0, #8]
 800b9f0:	230b      	movs	r3, #11
 800b9f2:	8183      	strh	r3, [r0, #12]
 800b9f4:	2201      	movs	r2, #1
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800b9fc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b9fe:	480f      	ldr	r0, [pc, #60]	; (800ba3c <rand+0x78>)
 800ba00:	690a      	ldr	r2, [r1, #16]
 800ba02:	694b      	ldr	r3, [r1, #20]
 800ba04:	4c0e      	ldr	r4, [pc, #56]	; (800ba40 <rand+0x7c>)
 800ba06:	4350      	muls	r0, r2
 800ba08:	fb04 0003 	mla	r0, r4, r3, r0
 800ba0c:	fba2 3404 	umull	r3, r4, r2, r4
 800ba10:	1c5a      	adds	r2, r3, #1
 800ba12:	4404      	add	r4, r0
 800ba14:	f144 0000 	adc.w	r0, r4, #0
 800ba18:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800ba1c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ba20:	bd10      	pop	{r4, pc}
 800ba22:	bf00      	nop
 800ba24:	20000258 	.word	0x20000258
 800ba28:	0800e52c 	.word	0x0800e52c
 800ba2c:	0800e543 	.word	0x0800e543
 800ba30:	abcd330e 	.word	0xabcd330e
 800ba34:	e66d1234 	.word	0xe66d1234
 800ba38:	0005deec 	.word	0x0005deec
 800ba3c:	5851f42d 	.word	0x5851f42d
 800ba40:	4c957f2d 	.word	0x4c957f2d

0800ba44 <siprintf>:
 800ba44:	b40e      	push	{r1, r2, r3}
 800ba46:	b500      	push	{lr}
 800ba48:	b09c      	sub	sp, #112	; 0x70
 800ba4a:	ab1d      	add	r3, sp, #116	; 0x74
 800ba4c:	9002      	str	r0, [sp, #8]
 800ba4e:	9006      	str	r0, [sp, #24]
 800ba50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ba54:	4809      	ldr	r0, [pc, #36]	; (800ba7c <siprintf+0x38>)
 800ba56:	9107      	str	r1, [sp, #28]
 800ba58:	9104      	str	r1, [sp, #16]
 800ba5a:	4909      	ldr	r1, [pc, #36]	; (800ba80 <siprintf+0x3c>)
 800ba5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba60:	9105      	str	r1, [sp, #20]
 800ba62:	6800      	ldr	r0, [r0, #0]
 800ba64:	9301      	str	r3, [sp, #4]
 800ba66:	a902      	add	r1, sp, #8
 800ba68:	f000 f94a 	bl	800bd00 <_svfiprintf_r>
 800ba6c:	9b02      	ldr	r3, [sp, #8]
 800ba6e:	2200      	movs	r2, #0
 800ba70:	701a      	strb	r2, [r3, #0]
 800ba72:	b01c      	add	sp, #112	; 0x70
 800ba74:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba78:	b003      	add	sp, #12
 800ba7a:	4770      	bx	lr
 800ba7c:	20000258 	.word	0x20000258
 800ba80:	ffff0208 	.word	0xffff0208

0800ba84 <__assert_func>:
 800ba84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba86:	4614      	mov	r4, r2
 800ba88:	461a      	mov	r2, r3
 800ba8a:	4b09      	ldr	r3, [pc, #36]	; (800bab0 <__assert_func+0x2c>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	4605      	mov	r5, r0
 800ba90:	68d8      	ldr	r0, [r3, #12]
 800ba92:	b14c      	cbz	r4, 800baa8 <__assert_func+0x24>
 800ba94:	4b07      	ldr	r3, [pc, #28]	; (800bab4 <__assert_func+0x30>)
 800ba96:	9100      	str	r1, [sp, #0]
 800ba98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ba9c:	4906      	ldr	r1, [pc, #24]	; (800bab8 <__assert_func+0x34>)
 800ba9e:	462b      	mov	r3, r5
 800baa0:	f000 f80e 	bl	800bac0 <fiprintf>
 800baa4:	f000 fdea 	bl	800c67c <abort>
 800baa8:	4b04      	ldr	r3, [pc, #16]	; (800babc <__assert_func+0x38>)
 800baaa:	461c      	mov	r4, r3
 800baac:	e7f3      	b.n	800ba96 <__assert_func+0x12>
 800baae:	bf00      	nop
 800bab0:	20000258 	.word	0x20000258
 800bab4:	0800e5a2 	.word	0x0800e5a2
 800bab8:	0800e5af 	.word	0x0800e5af
 800babc:	0800e5dd 	.word	0x0800e5dd

0800bac0 <fiprintf>:
 800bac0:	b40e      	push	{r1, r2, r3}
 800bac2:	b503      	push	{r0, r1, lr}
 800bac4:	4601      	mov	r1, r0
 800bac6:	ab03      	add	r3, sp, #12
 800bac8:	4805      	ldr	r0, [pc, #20]	; (800bae0 <fiprintf+0x20>)
 800baca:	f853 2b04 	ldr.w	r2, [r3], #4
 800bace:	6800      	ldr	r0, [r0, #0]
 800bad0:	9301      	str	r3, [sp, #4]
 800bad2:	f000 fa3f 	bl	800bf54 <_vfiprintf_r>
 800bad6:	b002      	add	sp, #8
 800bad8:	f85d eb04 	ldr.w	lr, [sp], #4
 800badc:	b003      	add	sp, #12
 800bade:	4770      	bx	lr
 800bae0:	20000258 	.word	0x20000258

0800bae4 <malloc>:
 800bae4:	4b02      	ldr	r3, [pc, #8]	; (800baf0 <malloc+0xc>)
 800bae6:	4601      	mov	r1, r0
 800bae8:	6818      	ldr	r0, [r3, #0]
 800baea:	f000 b853 	b.w	800bb94 <_malloc_r>
 800baee:	bf00      	nop
 800baf0:	20000258 	.word	0x20000258

0800baf4 <_free_r>:
 800baf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800baf6:	2900      	cmp	r1, #0
 800baf8:	d048      	beq.n	800bb8c <_free_r+0x98>
 800bafa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bafe:	9001      	str	r0, [sp, #4]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	f1a1 0404 	sub.w	r4, r1, #4
 800bb06:	bfb8      	it	lt
 800bb08:	18e4      	addlt	r4, r4, r3
 800bb0a:	f001 f805 	bl	800cb18 <__malloc_lock>
 800bb0e:	4a20      	ldr	r2, [pc, #128]	; (800bb90 <_free_r+0x9c>)
 800bb10:	9801      	ldr	r0, [sp, #4]
 800bb12:	6813      	ldr	r3, [r2, #0]
 800bb14:	4615      	mov	r5, r2
 800bb16:	b933      	cbnz	r3, 800bb26 <_free_r+0x32>
 800bb18:	6063      	str	r3, [r4, #4]
 800bb1a:	6014      	str	r4, [r2, #0]
 800bb1c:	b003      	add	sp, #12
 800bb1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb22:	f000 bfff 	b.w	800cb24 <__malloc_unlock>
 800bb26:	42a3      	cmp	r3, r4
 800bb28:	d90b      	bls.n	800bb42 <_free_r+0x4e>
 800bb2a:	6821      	ldr	r1, [r4, #0]
 800bb2c:	1862      	adds	r2, r4, r1
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	bf04      	itt	eq
 800bb32:	681a      	ldreq	r2, [r3, #0]
 800bb34:	685b      	ldreq	r3, [r3, #4]
 800bb36:	6063      	str	r3, [r4, #4]
 800bb38:	bf04      	itt	eq
 800bb3a:	1852      	addeq	r2, r2, r1
 800bb3c:	6022      	streq	r2, [r4, #0]
 800bb3e:	602c      	str	r4, [r5, #0]
 800bb40:	e7ec      	b.n	800bb1c <_free_r+0x28>
 800bb42:	461a      	mov	r2, r3
 800bb44:	685b      	ldr	r3, [r3, #4]
 800bb46:	b10b      	cbz	r3, 800bb4c <_free_r+0x58>
 800bb48:	42a3      	cmp	r3, r4
 800bb4a:	d9fa      	bls.n	800bb42 <_free_r+0x4e>
 800bb4c:	6811      	ldr	r1, [r2, #0]
 800bb4e:	1855      	adds	r5, r2, r1
 800bb50:	42a5      	cmp	r5, r4
 800bb52:	d10b      	bne.n	800bb6c <_free_r+0x78>
 800bb54:	6824      	ldr	r4, [r4, #0]
 800bb56:	4421      	add	r1, r4
 800bb58:	1854      	adds	r4, r2, r1
 800bb5a:	42a3      	cmp	r3, r4
 800bb5c:	6011      	str	r1, [r2, #0]
 800bb5e:	d1dd      	bne.n	800bb1c <_free_r+0x28>
 800bb60:	681c      	ldr	r4, [r3, #0]
 800bb62:	685b      	ldr	r3, [r3, #4]
 800bb64:	6053      	str	r3, [r2, #4]
 800bb66:	4421      	add	r1, r4
 800bb68:	6011      	str	r1, [r2, #0]
 800bb6a:	e7d7      	b.n	800bb1c <_free_r+0x28>
 800bb6c:	d902      	bls.n	800bb74 <_free_r+0x80>
 800bb6e:	230c      	movs	r3, #12
 800bb70:	6003      	str	r3, [r0, #0]
 800bb72:	e7d3      	b.n	800bb1c <_free_r+0x28>
 800bb74:	6825      	ldr	r5, [r4, #0]
 800bb76:	1961      	adds	r1, r4, r5
 800bb78:	428b      	cmp	r3, r1
 800bb7a:	bf04      	itt	eq
 800bb7c:	6819      	ldreq	r1, [r3, #0]
 800bb7e:	685b      	ldreq	r3, [r3, #4]
 800bb80:	6063      	str	r3, [r4, #4]
 800bb82:	bf04      	itt	eq
 800bb84:	1949      	addeq	r1, r1, r5
 800bb86:	6021      	streq	r1, [r4, #0]
 800bb88:	6054      	str	r4, [r2, #4]
 800bb8a:	e7c7      	b.n	800bb1c <_free_r+0x28>
 800bb8c:	b003      	add	sp, #12
 800bb8e:	bd30      	pop	{r4, r5, pc}
 800bb90:	20000388 	.word	0x20000388

0800bb94 <_malloc_r>:
 800bb94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb96:	1ccd      	adds	r5, r1, #3
 800bb98:	f025 0503 	bic.w	r5, r5, #3
 800bb9c:	3508      	adds	r5, #8
 800bb9e:	2d0c      	cmp	r5, #12
 800bba0:	bf38      	it	cc
 800bba2:	250c      	movcc	r5, #12
 800bba4:	2d00      	cmp	r5, #0
 800bba6:	4606      	mov	r6, r0
 800bba8:	db01      	blt.n	800bbae <_malloc_r+0x1a>
 800bbaa:	42a9      	cmp	r1, r5
 800bbac:	d903      	bls.n	800bbb6 <_malloc_r+0x22>
 800bbae:	230c      	movs	r3, #12
 800bbb0:	6033      	str	r3, [r6, #0]
 800bbb2:	2000      	movs	r0, #0
 800bbb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbb6:	f000 ffaf 	bl	800cb18 <__malloc_lock>
 800bbba:	4921      	ldr	r1, [pc, #132]	; (800bc40 <_malloc_r+0xac>)
 800bbbc:	680a      	ldr	r2, [r1, #0]
 800bbbe:	4614      	mov	r4, r2
 800bbc0:	b99c      	cbnz	r4, 800bbea <_malloc_r+0x56>
 800bbc2:	4f20      	ldr	r7, [pc, #128]	; (800bc44 <_malloc_r+0xb0>)
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	b923      	cbnz	r3, 800bbd2 <_malloc_r+0x3e>
 800bbc8:	4621      	mov	r1, r4
 800bbca:	4630      	mov	r0, r6
 800bbcc:	f000 fc86 	bl	800c4dc <_sbrk_r>
 800bbd0:	6038      	str	r0, [r7, #0]
 800bbd2:	4629      	mov	r1, r5
 800bbd4:	4630      	mov	r0, r6
 800bbd6:	f000 fc81 	bl	800c4dc <_sbrk_r>
 800bbda:	1c43      	adds	r3, r0, #1
 800bbdc:	d123      	bne.n	800bc26 <_malloc_r+0x92>
 800bbde:	230c      	movs	r3, #12
 800bbe0:	6033      	str	r3, [r6, #0]
 800bbe2:	4630      	mov	r0, r6
 800bbe4:	f000 ff9e 	bl	800cb24 <__malloc_unlock>
 800bbe8:	e7e3      	b.n	800bbb2 <_malloc_r+0x1e>
 800bbea:	6823      	ldr	r3, [r4, #0]
 800bbec:	1b5b      	subs	r3, r3, r5
 800bbee:	d417      	bmi.n	800bc20 <_malloc_r+0x8c>
 800bbf0:	2b0b      	cmp	r3, #11
 800bbf2:	d903      	bls.n	800bbfc <_malloc_r+0x68>
 800bbf4:	6023      	str	r3, [r4, #0]
 800bbf6:	441c      	add	r4, r3
 800bbf8:	6025      	str	r5, [r4, #0]
 800bbfa:	e004      	b.n	800bc06 <_malloc_r+0x72>
 800bbfc:	6863      	ldr	r3, [r4, #4]
 800bbfe:	42a2      	cmp	r2, r4
 800bc00:	bf0c      	ite	eq
 800bc02:	600b      	streq	r3, [r1, #0]
 800bc04:	6053      	strne	r3, [r2, #4]
 800bc06:	4630      	mov	r0, r6
 800bc08:	f000 ff8c 	bl	800cb24 <__malloc_unlock>
 800bc0c:	f104 000b 	add.w	r0, r4, #11
 800bc10:	1d23      	adds	r3, r4, #4
 800bc12:	f020 0007 	bic.w	r0, r0, #7
 800bc16:	1ac2      	subs	r2, r0, r3
 800bc18:	d0cc      	beq.n	800bbb4 <_malloc_r+0x20>
 800bc1a:	1a1b      	subs	r3, r3, r0
 800bc1c:	50a3      	str	r3, [r4, r2]
 800bc1e:	e7c9      	b.n	800bbb4 <_malloc_r+0x20>
 800bc20:	4622      	mov	r2, r4
 800bc22:	6864      	ldr	r4, [r4, #4]
 800bc24:	e7cc      	b.n	800bbc0 <_malloc_r+0x2c>
 800bc26:	1cc4      	adds	r4, r0, #3
 800bc28:	f024 0403 	bic.w	r4, r4, #3
 800bc2c:	42a0      	cmp	r0, r4
 800bc2e:	d0e3      	beq.n	800bbf8 <_malloc_r+0x64>
 800bc30:	1a21      	subs	r1, r4, r0
 800bc32:	4630      	mov	r0, r6
 800bc34:	f000 fc52 	bl	800c4dc <_sbrk_r>
 800bc38:	3001      	adds	r0, #1
 800bc3a:	d1dd      	bne.n	800bbf8 <_malloc_r+0x64>
 800bc3c:	e7cf      	b.n	800bbde <_malloc_r+0x4a>
 800bc3e:	bf00      	nop
 800bc40:	20000388 	.word	0x20000388
 800bc44:	2000038c 	.word	0x2000038c

0800bc48 <__ssputs_r>:
 800bc48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc4c:	688e      	ldr	r6, [r1, #8]
 800bc4e:	429e      	cmp	r6, r3
 800bc50:	4682      	mov	sl, r0
 800bc52:	460c      	mov	r4, r1
 800bc54:	4690      	mov	r8, r2
 800bc56:	461f      	mov	r7, r3
 800bc58:	d838      	bhi.n	800bccc <__ssputs_r+0x84>
 800bc5a:	898a      	ldrh	r2, [r1, #12]
 800bc5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bc60:	d032      	beq.n	800bcc8 <__ssputs_r+0x80>
 800bc62:	6825      	ldr	r5, [r4, #0]
 800bc64:	6909      	ldr	r1, [r1, #16]
 800bc66:	eba5 0901 	sub.w	r9, r5, r1
 800bc6a:	6965      	ldr	r5, [r4, #20]
 800bc6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bc74:	3301      	adds	r3, #1
 800bc76:	444b      	add	r3, r9
 800bc78:	106d      	asrs	r5, r5, #1
 800bc7a:	429d      	cmp	r5, r3
 800bc7c:	bf38      	it	cc
 800bc7e:	461d      	movcc	r5, r3
 800bc80:	0553      	lsls	r3, r2, #21
 800bc82:	d531      	bpl.n	800bce8 <__ssputs_r+0xa0>
 800bc84:	4629      	mov	r1, r5
 800bc86:	f7ff ff85 	bl	800bb94 <_malloc_r>
 800bc8a:	4606      	mov	r6, r0
 800bc8c:	b950      	cbnz	r0, 800bca4 <__ssputs_r+0x5c>
 800bc8e:	230c      	movs	r3, #12
 800bc90:	f8ca 3000 	str.w	r3, [sl]
 800bc94:	89a3      	ldrh	r3, [r4, #12]
 800bc96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc9a:	81a3      	strh	r3, [r4, #12]
 800bc9c:	f04f 30ff 	mov.w	r0, #4294967295
 800bca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bca4:	6921      	ldr	r1, [r4, #16]
 800bca6:	464a      	mov	r2, r9
 800bca8:	f000 ff0e 	bl	800cac8 <memcpy>
 800bcac:	89a3      	ldrh	r3, [r4, #12]
 800bcae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bcb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcb6:	81a3      	strh	r3, [r4, #12]
 800bcb8:	6126      	str	r6, [r4, #16]
 800bcba:	6165      	str	r5, [r4, #20]
 800bcbc:	444e      	add	r6, r9
 800bcbe:	eba5 0509 	sub.w	r5, r5, r9
 800bcc2:	6026      	str	r6, [r4, #0]
 800bcc4:	60a5      	str	r5, [r4, #8]
 800bcc6:	463e      	mov	r6, r7
 800bcc8:	42be      	cmp	r6, r7
 800bcca:	d900      	bls.n	800bcce <__ssputs_r+0x86>
 800bccc:	463e      	mov	r6, r7
 800bcce:	4632      	mov	r2, r6
 800bcd0:	6820      	ldr	r0, [r4, #0]
 800bcd2:	4641      	mov	r1, r8
 800bcd4:	f000 ff06 	bl	800cae4 <memmove>
 800bcd8:	68a3      	ldr	r3, [r4, #8]
 800bcda:	6822      	ldr	r2, [r4, #0]
 800bcdc:	1b9b      	subs	r3, r3, r6
 800bcde:	4432      	add	r2, r6
 800bce0:	60a3      	str	r3, [r4, #8]
 800bce2:	6022      	str	r2, [r4, #0]
 800bce4:	2000      	movs	r0, #0
 800bce6:	e7db      	b.n	800bca0 <__ssputs_r+0x58>
 800bce8:	462a      	mov	r2, r5
 800bcea:	f000 ff21 	bl	800cb30 <_realloc_r>
 800bcee:	4606      	mov	r6, r0
 800bcf0:	2800      	cmp	r0, #0
 800bcf2:	d1e1      	bne.n	800bcb8 <__ssputs_r+0x70>
 800bcf4:	6921      	ldr	r1, [r4, #16]
 800bcf6:	4650      	mov	r0, sl
 800bcf8:	f7ff fefc 	bl	800baf4 <_free_r>
 800bcfc:	e7c7      	b.n	800bc8e <__ssputs_r+0x46>
	...

0800bd00 <_svfiprintf_r>:
 800bd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd04:	4698      	mov	r8, r3
 800bd06:	898b      	ldrh	r3, [r1, #12]
 800bd08:	061b      	lsls	r3, r3, #24
 800bd0a:	b09d      	sub	sp, #116	; 0x74
 800bd0c:	4607      	mov	r7, r0
 800bd0e:	460d      	mov	r5, r1
 800bd10:	4614      	mov	r4, r2
 800bd12:	d50e      	bpl.n	800bd32 <_svfiprintf_r+0x32>
 800bd14:	690b      	ldr	r3, [r1, #16]
 800bd16:	b963      	cbnz	r3, 800bd32 <_svfiprintf_r+0x32>
 800bd18:	2140      	movs	r1, #64	; 0x40
 800bd1a:	f7ff ff3b 	bl	800bb94 <_malloc_r>
 800bd1e:	6028      	str	r0, [r5, #0]
 800bd20:	6128      	str	r0, [r5, #16]
 800bd22:	b920      	cbnz	r0, 800bd2e <_svfiprintf_r+0x2e>
 800bd24:	230c      	movs	r3, #12
 800bd26:	603b      	str	r3, [r7, #0]
 800bd28:	f04f 30ff 	mov.w	r0, #4294967295
 800bd2c:	e0d1      	b.n	800bed2 <_svfiprintf_r+0x1d2>
 800bd2e:	2340      	movs	r3, #64	; 0x40
 800bd30:	616b      	str	r3, [r5, #20]
 800bd32:	2300      	movs	r3, #0
 800bd34:	9309      	str	r3, [sp, #36]	; 0x24
 800bd36:	2320      	movs	r3, #32
 800bd38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd3c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd40:	2330      	movs	r3, #48	; 0x30
 800bd42:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800beec <_svfiprintf_r+0x1ec>
 800bd46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd4a:	f04f 0901 	mov.w	r9, #1
 800bd4e:	4623      	mov	r3, r4
 800bd50:	469a      	mov	sl, r3
 800bd52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd56:	b10a      	cbz	r2, 800bd5c <_svfiprintf_r+0x5c>
 800bd58:	2a25      	cmp	r2, #37	; 0x25
 800bd5a:	d1f9      	bne.n	800bd50 <_svfiprintf_r+0x50>
 800bd5c:	ebba 0b04 	subs.w	fp, sl, r4
 800bd60:	d00b      	beq.n	800bd7a <_svfiprintf_r+0x7a>
 800bd62:	465b      	mov	r3, fp
 800bd64:	4622      	mov	r2, r4
 800bd66:	4629      	mov	r1, r5
 800bd68:	4638      	mov	r0, r7
 800bd6a:	f7ff ff6d 	bl	800bc48 <__ssputs_r>
 800bd6e:	3001      	adds	r0, #1
 800bd70:	f000 80aa 	beq.w	800bec8 <_svfiprintf_r+0x1c8>
 800bd74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd76:	445a      	add	r2, fp
 800bd78:	9209      	str	r2, [sp, #36]	; 0x24
 800bd7a:	f89a 3000 	ldrb.w	r3, [sl]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	f000 80a2 	beq.w	800bec8 <_svfiprintf_r+0x1c8>
 800bd84:	2300      	movs	r3, #0
 800bd86:	f04f 32ff 	mov.w	r2, #4294967295
 800bd8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd8e:	f10a 0a01 	add.w	sl, sl, #1
 800bd92:	9304      	str	r3, [sp, #16]
 800bd94:	9307      	str	r3, [sp, #28]
 800bd96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd9a:	931a      	str	r3, [sp, #104]	; 0x68
 800bd9c:	4654      	mov	r4, sl
 800bd9e:	2205      	movs	r2, #5
 800bda0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bda4:	4851      	ldr	r0, [pc, #324]	; (800beec <_svfiprintf_r+0x1ec>)
 800bda6:	f7f4 fa1b 	bl	80001e0 <memchr>
 800bdaa:	9a04      	ldr	r2, [sp, #16]
 800bdac:	b9d8      	cbnz	r0, 800bde6 <_svfiprintf_r+0xe6>
 800bdae:	06d0      	lsls	r0, r2, #27
 800bdb0:	bf44      	itt	mi
 800bdb2:	2320      	movmi	r3, #32
 800bdb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdb8:	0711      	lsls	r1, r2, #28
 800bdba:	bf44      	itt	mi
 800bdbc:	232b      	movmi	r3, #43	; 0x2b
 800bdbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdc2:	f89a 3000 	ldrb.w	r3, [sl]
 800bdc6:	2b2a      	cmp	r3, #42	; 0x2a
 800bdc8:	d015      	beq.n	800bdf6 <_svfiprintf_r+0xf6>
 800bdca:	9a07      	ldr	r2, [sp, #28]
 800bdcc:	4654      	mov	r4, sl
 800bdce:	2000      	movs	r0, #0
 800bdd0:	f04f 0c0a 	mov.w	ip, #10
 800bdd4:	4621      	mov	r1, r4
 800bdd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bdda:	3b30      	subs	r3, #48	; 0x30
 800bddc:	2b09      	cmp	r3, #9
 800bdde:	d94e      	bls.n	800be7e <_svfiprintf_r+0x17e>
 800bde0:	b1b0      	cbz	r0, 800be10 <_svfiprintf_r+0x110>
 800bde2:	9207      	str	r2, [sp, #28]
 800bde4:	e014      	b.n	800be10 <_svfiprintf_r+0x110>
 800bde6:	eba0 0308 	sub.w	r3, r0, r8
 800bdea:	fa09 f303 	lsl.w	r3, r9, r3
 800bdee:	4313      	orrs	r3, r2
 800bdf0:	9304      	str	r3, [sp, #16]
 800bdf2:	46a2      	mov	sl, r4
 800bdf4:	e7d2      	b.n	800bd9c <_svfiprintf_r+0x9c>
 800bdf6:	9b03      	ldr	r3, [sp, #12]
 800bdf8:	1d19      	adds	r1, r3, #4
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	9103      	str	r1, [sp, #12]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	bfbb      	ittet	lt
 800be02:	425b      	neglt	r3, r3
 800be04:	f042 0202 	orrlt.w	r2, r2, #2
 800be08:	9307      	strge	r3, [sp, #28]
 800be0a:	9307      	strlt	r3, [sp, #28]
 800be0c:	bfb8      	it	lt
 800be0e:	9204      	strlt	r2, [sp, #16]
 800be10:	7823      	ldrb	r3, [r4, #0]
 800be12:	2b2e      	cmp	r3, #46	; 0x2e
 800be14:	d10c      	bne.n	800be30 <_svfiprintf_r+0x130>
 800be16:	7863      	ldrb	r3, [r4, #1]
 800be18:	2b2a      	cmp	r3, #42	; 0x2a
 800be1a:	d135      	bne.n	800be88 <_svfiprintf_r+0x188>
 800be1c:	9b03      	ldr	r3, [sp, #12]
 800be1e:	1d1a      	adds	r2, r3, #4
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	9203      	str	r2, [sp, #12]
 800be24:	2b00      	cmp	r3, #0
 800be26:	bfb8      	it	lt
 800be28:	f04f 33ff 	movlt.w	r3, #4294967295
 800be2c:	3402      	adds	r4, #2
 800be2e:	9305      	str	r3, [sp, #20]
 800be30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800befc <_svfiprintf_r+0x1fc>
 800be34:	7821      	ldrb	r1, [r4, #0]
 800be36:	2203      	movs	r2, #3
 800be38:	4650      	mov	r0, sl
 800be3a:	f7f4 f9d1 	bl	80001e0 <memchr>
 800be3e:	b140      	cbz	r0, 800be52 <_svfiprintf_r+0x152>
 800be40:	2340      	movs	r3, #64	; 0x40
 800be42:	eba0 000a 	sub.w	r0, r0, sl
 800be46:	fa03 f000 	lsl.w	r0, r3, r0
 800be4a:	9b04      	ldr	r3, [sp, #16]
 800be4c:	4303      	orrs	r3, r0
 800be4e:	3401      	adds	r4, #1
 800be50:	9304      	str	r3, [sp, #16]
 800be52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be56:	4826      	ldr	r0, [pc, #152]	; (800bef0 <_svfiprintf_r+0x1f0>)
 800be58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be5c:	2206      	movs	r2, #6
 800be5e:	f7f4 f9bf 	bl	80001e0 <memchr>
 800be62:	2800      	cmp	r0, #0
 800be64:	d038      	beq.n	800bed8 <_svfiprintf_r+0x1d8>
 800be66:	4b23      	ldr	r3, [pc, #140]	; (800bef4 <_svfiprintf_r+0x1f4>)
 800be68:	bb1b      	cbnz	r3, 800beb2 <_svfiprintf_r+0x1b2>
 800be6a:	9b03      	ldr	r3, [sp, #12]
 800be6c:	3307      	adds	r3, #7
 800be6e:	f023 0307 	bic.w	r3, r3, #7
 800be72:	3308      	adds	r3, #8
 800be74:	9303      	str	r3, [sp, #12]
 800be76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be78:	4433      	add	r3, r6
 800be7a:	9309      	str	r3, [sp, #36]	; 0x24
 800be7c:	e767      	b.n	800bd4e <_svfiprintf_r+0x4e>
 800be7e:	fb0c 3202 	mla	r2, ip, r2, r3
 800be82:	460c      	mov	r4, r1
 800be84:	2001      	movs	r0, #1
 800be86:	e7a5      	b.n	800bdd4 <_svfiprintf_r+0xd4>
 800be88:	2300      	movs	r3, #0
 800be8a:	3401      	adds	r4, #1
 800be8c:	9305      	str	r3, [sp, #20]
 800be8e:	4619      	mov	r1, r3
 800be90:	f04f 0c0a 	mov.w	ip, #10
 800be94:	4620      	mov	r0, r4
 800be96:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be9a:	3a30      	subs	r2, #48	; 0x30
 800be9c:	2a09      	cmp	r2, #9
 800be9e:	d903      	bls.n	800bea8 <_svfiprintf_r+0x1a8>
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d0c5      	beq.n	800be30 <_svfiprintf_r+0x130>
 800bea4:	9105      	str	r1, [sp, #20]
 800bea6:	e7c3      	b.n	800be30 <_svfiprintf_r+0x130>
 800bea8:	fb0c 2101 	mla	r1, ip, r1, r2
 800beac:	4604      	mov	r4, r0
 800beae:	2301      	movs	r3, #1
 800beb0:	e7f0      	b.n	800be94 <_svfiprintf_r+0x194>
 800beb2:	ab03      	add	r3, sp, #12
 800beb4:	9300      	str	r3, [sp, #0]
 800beb6:	462a      	mov	r2, r5
 800beb8:	4b0f      	ldr	r3, [pc, #60]	; (800bef8 <_svfiprintf_r+0x1f8>)
 800beba:	a904      	add	r1, sp, #16
 800bebc:	4638      	mov	r0, r7
 800bebe:	f3af 8000 	nop.w
 800bec2:	1c42      	adds	r2, r0, #1
 800bec4:	4606      	mov	r6, r0
 800bec6:	d1d6      	bne.n	800be76 <_svfiprintf_r+0x176>
 800bec8:	89ab      	ldrh	r3, [r5, #12]
 800beca:	065b      	lsls	r3, r3, #25
 800becc:	f53f af2c 	bmi.w	800bd28 <_svfiprintf_r+0x28>
 800bed0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bed2:	b01d      	add	sp, #116	; 0x74
 800bed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bed8:	ab03      	add	r3, sp, #12
 800beda:	9300      	str	r3, [sp, #0]
 800bedc:	462a      	mov	r2, r5
 800bede:	4b06      	ldr	r3, [pc, #24]	; (800bef8 <_svfiprintf_r+0x1f8>)
 800bee0:	a904      	add	r1, sp, #16
 800bee2:	4638      	mov	r0, r7
 800bee4:	f000 f9d4 	bl	800c290 <_printf_i>
 800bee8:	e7eb      	b.n	800bec2 <_svfiprintf_r+0x1c2>
 800beea:	bf00      	nop
 800beec:	0800e5de 	.word	0x0800e5de
 800bef0:	0800e5e8 	.word	0x0800e5e8
 800bef4:	00000000 	.word	0x00000000
 800bef8:	0800bc49 	.word	0x0800bc49
 800befc:	0800e5e4 	.word	0x0800e5e4

0800bf00 <__sfputc_r>:
 800bf00:	6893      	ldr	r3, [r2, #8]
 800bf02:	3b01      	subs	r3, #1
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	b410      	push	{r4}
 800bf08:	6093      	str	r3, [r2, #8]
 800bf0a:	da08      	bge.n	800bf1e <__sfputc_r+0x1e>
 800bf0c:	6994      	ldr	r4, [r2, #24]
 800bf0e:	42a3      	cmp	r3, r4
 800bf10:	db01      	blt.n	800bf16 <__sfputc_r+0x16>
 800bf12:	290a      	cmp	r1, #10
 800bf14:	d103      	bne.n	800bf1e <__sfputc_r+0x1e>
 800bf16:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf1a:	f000 baef 	b.w	800c4fc <__swbuf_r>
 800bf1e:	6813      	ldr	r3, [r2, #0]
 800bf20:	1c58      	adds	r0, r3, #1
 800bf22:	6010      	str	r0, [r2, #0]
 800bf24:	7019      	strb	r1, [r3, #0]
 800bf26:	4608      	mov	r0, r1
 800bf28:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf2c:	4770      	bx	lr

0800bf2e <__sfputs_r>:
 800bf2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf30:	4606      	mov	r6, r0
 800bf32:	460f      	mov	r7, r1
 800bf34:	4614      	mov	r4, r2
 800bf36:	18d5      	adds	r5, r2, r3
 800bf38:	42ac      	cmp	r4, r5
 800bf3a:	d101      	bne.n	800bf40 <__sfputs_r+0x12>
 800bf3c:	2000      	movs	r0, #0
 800bf3e:	e007      	b.n	800bf50 <__sfputs_r+0x22>
 800bf40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf44:	463a      	mov	r2, r7
 800bf46:	4630      	mov	r0, r6
 800bf48:	f7ff ffda 	bl	800bf00 <__sfputc_r>
 800bf4c:	1c43      	adds	r3, r0, #1
 800bf4e:	d1f3      	bne.n	800bf38 <__sfputs_r+0xa>
 800bf50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bf54 <_vfiprintf_r>:
 800bf54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf58:	460d      	mov	r5, r1
 800bf5a:	b09d      	sub	sp, #116	; 0x74
 800bf5c:	4614      	mov	r4, r2
 800bf5e:	4698      	mov	r8, r3
 800bf60:	4606      	mov	r6, r0
 800bf62:	b118      	cbz	r0, 800bf6c <_vfiprintf_r+0x18>
 800bf64:	6983      	ldr	r3, [r0, #24]
 800bf66:	b90b      	cbnz	r3, 800bf6c <_vfiprintf_r+0x18>
 800bf68:	f000 fcaa 	bl	800c8c0 <__sinit>
 800bf6c:	4b89      	ldr	r3, [pc, #548]	; (800c194 <_vfiprintf_r+0x240>)
 800bf6e:	429d      	cmp	r5, r3
 800bf70:	d11b      	bne.n	800bfaa <_vfiprintf_r+0x56>
 800bf72:	6875      	ldr	r5, [r6, #4]
 800bf74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf76:	07d9      	lsls	r1, r3, #31
 800bf78:	d405      	bmi.n	800bf86 <_vfiprintf_r+0x32>
 800bf7a:	89ab      	ldrh	r3, [r5, #12]
 800bf7c:	059a      	lsls	r2, r3, #22
 800bf7e:	d402      	bmi.n	800bf86 <_vfiprintf_r+0x32>
 800bf80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf82:	f000 fd3b 	bl	800c9fc <__retarget_lock_acquire_recursive>
 800bf86:	89ab      	ldrh	r3, [r5, #12]
 800bf88:	071b      	lsls	r3, r3, #28
 800bf8a:	d501      	bpl.n	800bf90 <_vfiprintf_r+0x3c>
 800bf8c:	692b      	ldr	r3, [r5, #16]
 800bf8e:	b9eb      	cbnz	r3, 800bfcc <_vfiprintf_r+0x78>
 800bf90:	4629      	mov	r1, r5
 800bf92:	4630      	mov	r0, r6
 800bf94:	f000 fb04 	bl	800c5a0 <__swsetup_r>
 800bf98:	b1c0      	cbz	r0, 800bfcc <_vfiprintf_r+0x78>
 800bf9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf9c:	07dc      	lsls	r4, r3, #31
 800bf9e:	d50e      	bpl.n	800bfbe <_vfiprintf_r+0x6a>
 800bfa0:	f04f 30ff 	mov.w	r0, #4294967295
 800bfa4:	b01d      	add	sp, #116	; 0x74
 800bfa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfaa:	4b7b      	ldr	r3, [pc, #492]	; (800c198 <_vfiprintf_r+0x244>)
 800bfac:	429d      	cmp	r5, r3
 800bfae:	d101      	bne.n	800bfb4 <_vfiprintf_r+0x60>
 800bfb0:	68b5      	ldr	r5, [r6, #8]
 800bfb2:	e7df      	b.n	800bf74 <_vfiprintf_r+0x20>
 800bfb4:	4b79      	ldr	r3, [pc, #484]	; (800c19c <_vfiprintf_r+0x248>)
 800bfb6:	429d      	cmp	r5, r3
 800bfb8:	bf08      	it	eq
 800bfba:	68f5      	ldreq	r5, [r6, #12]
 800bfbc:	e7da      	b.n	800bf74 <_vfiprintf_r+0x20>
 800bfbe:	89ab      	ldrh	r3, [r5, #12]
 800bfc0:	0598      	lsls	r0, r3, #22
 800bfc2:	d4ed      	bmi.n	800bfa0 <_vfiprintf_r+0x4c>
 800bfc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bfc6:	f000 fd1a 	bl	800c9fe <__retarget_lock_release_recursive>
 800bfca:	e7e9      	b.n	800bfa0 <_vfiprintf_r+0x4c>
 800bfcc:	2300      	movs	r3, #0
 800bfce:	9309      	str	r3, [sp, #36]	; 0x24
 800bfd0:	2320      	movs	r3, #32
 800bfd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bfd6:	f8cd 800c 	str.w	r8, [sp, #12]
 800bfda:	2330      	movs	r3, #48	; 0x30
 800bfdc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c1a0 <_vfiprintf_r+0x24c>
 800bfe0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bfe4:	f04f 0901 	mov.w	r9, #1
 800bfe8:	4623      	mov	r3, r4
 800bfea:	469a      	mov	sl, r3
 800bfec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bff0:	b10a      	cbz	r2, 800bff6 <_vfiprintf_r+0xa2>
 800bff2:	2a25      	cmp	r2, #37	; 0x25
 800bff4:	d1f9      	bne.n	800bfea <_vfiprintf_r+0x96>
 800bff6:	ebba 0b04 	subs.w	fp, sl, r4
 800bffa:	d00b      	beq.n	800c014 <_vfiprintf_r+0xc0>
 800bffc:	465b      	mov	r3, fp
 800bffe:	4622      	mov	r2, r4
 800c000:	4629      	mov	r1, r5
 800c002:	4630      	mov	r0, r6
 800c004:	f7ff ff93 	bl	800bf2e <__sfputs_r>
 800c008:	3001      	adds	r0, #1
 800c00a:	f000 80aa 	beq.w	800c162 <_vfiprintf_r+0x20e>
 800c00e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c010:	445a      	add	r2, fp
 800c012:	9209      	str	r2, [sp, #36]	; 0x24
 800c014:	f89a 3000 	ldrb.w	r3, [sl]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	f000 80a2 	beq.w	800c162 <_vfiprintf_r+0x20e>
 800c01e:	2300      	movs	r3, #0
 800c020:	f04f 32ff 	mov.w	r2, #4294967295
 800c024:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c028:	f10a 0a01 	add.w	sl, sl, #1
 800c02c:	9304      	str	r3, [sp, #16]
 800c02e:	9307      	str	r3, [sp, #28]
 800c030:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c034:	931a      	str	r3, [sp, #104]	; 0x68
 800c036:	4654      	mov	r4, sl
 800c038:	2205      	movs	r2, #5
 800c03a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c03e:	4858      	ldr	r0, [pc, #352]	; (800c1a0 <_vfiprintf_r+0x24c>)
 800c040:	f7f4 f8ce 	bl	80001e0 <memchr>
 800c044:	9a04      	ldr	r2, [sp, #16]
 800c046:	b9d8      	cbnz	r0, 800c080 <_vfiprintf_r+0x12c>
 800c048:	06d1      	lsls	r1, r2, #27
 800c04a:	bf44      	itt	mi
 800c04c:	2320      	movmi	r3, #32
 800c04e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c052:	0713      	lsls	r3, r2, #28
 800c054:	bf44      	itt	mi
 800c056:	232b      	movmi	r3, #43	; 0x2b
 800c058:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c05c:	f89a 3000 	ldrb.w	r3, [sl]
 800c060:	2b2a      	cmp	r3, #42	; 0x2a
 800c062:	d015      	beq.n	800c090 <_vfiprintf_r+0x13c>
 800c064:	9a07      	ldr	r2, [sp, #28]
 800c066:	4654      	mov	r4, sl
 800c068:	2000      	movs	r0, #0
 800c06a:	f04f 0c0a 	mov.w	ip, #10
 800c06e:	4621      	mov	r1, r4
 800c070:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c074:	3b30      	subs	r3, #48	; 0x30
 800c076:	2b09      	cmp	r3, #9
 800c078:	d94e      	bls.n	800c118 <_vfiprintf_r+0x1c4>
 800c07a:	b1b0      	cbz	r0, 800c0aa <_vfiprintf_r+0x156>
 800c07c:	9207      	str	r2, [sp, #28]
 800c07e:	e014      	b.n	800c0aa <_vfiprintf_r+0x156>
 800c080:	eba0 0308 	sub.w	r3, r0, r8
 800c084:	fa09 f303 	lsl.w	r3, r9, r3
 800c088:	4313      	orrs	r3, r2
 800c08a:	9304      	str	r3, [sp, #16]
 800c08c:	46a2      	mov	sl, r4
 800c08e:	e7d2      	b.n	800c036 <_vfiprintf_r+0xe2>
 800c090:	9b03      	ldr	r3, [sp, #12]
 800c092:	1d19      	adds	r1, r3, #4
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	9103      	str	r1, [sp, #12]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	bfbb      	ittet	lt
 800c09c:	425b      	neglt	r3, r3
 800c09e:	f042 0202 	orrlt.w	r2, r2, #2
 800c0a2:	9307      	strge	r3, [sp, #28]
 800c0a4:	9307      	strlt	r3, [sp, #28]
 800c0a6:	bfb8      	it	lt
 800c0a8:	9204      	strlt	r2, [sp, #16]
 800c0aa:	7823      	ldrb	r3, [r4, #0]
 800c0ac:	2b2e      	cmp	r3, #46	; 0x2e
 800c0ae:	d10c      	bne.n	800c0ca <_vfiprintf_r+0x176>
 800c0b0:	7863      	ldrb	r3, [r4, #1]
 800c0b2:	2b2a      	cmp	r3, #42	; 0x2a
 800c0b4:	d135      	bne.n	800c122 <_vfiprintf_r+0x1ce>
 800c0b6:	9b03      	ldr	r3, [sp, #12]
 800c0b8:	1d1a      	adds	r2, r3, #4
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	9203      	str	r2, [sp, #12]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	bfb8      	it	lt
 800c0c2:	f04f 33ff 	movlt.w	r3, #4294967295
 800c0c6:	3402      	adds	r4, #2
 800c0c8:	9305      	str	r3, [sp, #20]
 800c0ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c1b0 <_vfiprintf_r+0x25c>
 800c0ce:	7821      	ldrb	r1, [r4, #0]
 800c0d0:	2203      	movs	r2, #3
 800c0d2:	4650      	mov	r0, sl
 800c0d4:	f7f4 f884 	bl	80001e0 <memchr>
 800c0d8:	b140      	cbz	r0, 800c0ec <_vfiprintf_r+0x198>
 800c0da:	2340      	movs	r3, #64	; 0x40
 800c0dc:	eba0 000a 	sub.w	r0, r0, sl
 800c0e0:	fa03 f000 	lsl.w	r0, r3, r0
 800c0e4:	9b04      	ldr	r3, [sp, #16]
 800c0e6:	4303      	orrs	r3, r0
 800c0e8:	3401      	adds	r4, #1
 800c0ea:	9304      	str	r3, [sp, #16]
 800c0ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0f0:	482c      	ldr	r0, [pc, #176]	; (800c1a4 <_vfiprintf_r+0x250>)
 800c0f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c0f6:	2206      	movs	r2, #6
 800c0f8:	f7f4 f872 	bl	80001e0 <memchr>
 800c0fc:	2800      	cmp	r0, #0
 800c0fe:	d03f      	beq.n	800c180 <_vfiprintf_r+0x22c>
 800c100:	4b29      	ldr	r3, [pc, #164]	; (800c1a8 <_vfiprintf_r+0x254>)
 800c102:	bb1b      	cbnz	r3, 800c14c <_vfiprintf_r+0x1f8>
 800c104:	9b03      	ldr	r3, [sp, #12]
 800c106:	3307      	adds	r3, #7
 800c108:	f023 0307 	bic.w	r3, r3, #7
 800c10c:	3308      	adds	r3, #8
 800c10e:	9303      	str	r3, [sp, #12]
 800c110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c112:	443b      	add	r3, r7
 800c114:	9309      	str	r3, [sp, #36]	; 0x24
 800c116:	e767      	b.n	800bfe8 <_vfiprintf_r+0x94>
 800c118:	fb0c 3202 	mla	r2, ip, r2, r3
 800c11c:	460c      	mov	r4, r1
 800c11e:	2001      	movs	r0, #1
 800c120:	e7a5      	b.n	800c06e <_vfiprintf_r+0x11a>
 800c122:	2300      	movs	r3, #0
 800c124:	3401      	adds	r4, #1
 800c126:	9305      	str	r3, [sp, #20]
 800c128:	4619      	mov	r1, r3
 800c12a:	f04f 0c0a 	mov.w	ip, #10
 800c12e:	4620      	mov	r0, r4
 800c130:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c134:	3a30      	subs	r2, #48	; 0x30
 800c136:	2a09      	cmp	r2, #9
 800c138:	d903      	bls.n	800c142 <_vfiprintf_r+0x1ee>
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d0c5      	beq.n	800c0ca <_vfiprintf_r+0x176>
 800c13e:	9105      	str	r1, [sp, #20]
 800c140:	e7c3      	b.n	800c0ca <_vfiprintf_r+0x176>
 800c142:	fb0c 2101 	mla	r1, ip, r1, r2
 800c146:	4604      	mov	r4, r0
 800c148:	2301      	movs	r3, #1
 800c14a:	e7f0      	b.n	800c12e <_vfiprintf_r+0x1da>
 800c14c:	ab03      	add	r3, sp, #12
 800c14e:	9300      	str	r3, [sp, #0]
 800c150:	462a      	mov	r2, r5
 800c152:	4b16      	ldr	r3, [pc, #88]	; (800c1ac <_vfiprintf_r+0x258>)
 800c154:	a904      	add	r1, sp, #16
 800c156:	4630      	mov	r0, r6
 800c158:	f3af 8000 	nop.w
 800c15c:	4607      	mov	r7, r0
 800c15e:	1c78      	adds	r0, r7, #1
 800c160:	d1d6      	bne.n	800c110 <_vfiprintf_r+0x1bc>
 800c162:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c164:	07d9      	lsls	r1, r3, #31
 800c166:	d405      	bmi.n	800c174 <_vfiprintf_r+0x220>
 800c168:	89ab      	ldrh	r3, [r5, #12]
 800c16a:	059a      	lsls	r2, r3, #22
 800c16c:	d402      	bmi.n	800c174 <_vfiprintf_r+0x220>
 800c16e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c170:	f000 fc45 	bl	800c9fe <__retarget_lock_release_recursive>
 800c174:	89ab      	ldrh	r3, [r5, #12]
 800c176:	065b      	lsls	r3, r3, #25
 800c178:	f53f af12 	bmi.w	800bfa0 <_vfiprintf_r+0x4c>
 800c17c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c17e:	e711      	b.n	800bfa4 <_vfiprintf_r+0x50>
 800c180:	ab03      	add	r3, sp, #12
 800c182:	9300      	str	r3, [sp, #0]
 800c184:	462a      	mov	r2, r5
 800c186:	4b09      	ldr	r3, [pc, #36]	; (800c1ac <_vfiprintf_r+0x258>)
 800c188:	a904      	add	r1, sp, #16
 800c18a:	4630      	mov	r0, r6
 800c18c:	f000 f880 	bl	800c290 <_printf_i>
 800c190:	e7e4      	b.n	800c15c <_vfiprintf_r+0x208>
 800c192:	bf00      	nop
 800c194:	0800e634 	.word	0x0800e634
 800c198:	0800e654 	.word	0x0800e654
 800c19c:	0800e614 	.word	0x0800e614
 800c1a0:	0800e5de 	.word	0x0800e5de
 800c1a4:	0800e5e8 	.word	0x0800e5e8
 800c1a8:	00000000 	.word	0x00000000
 800c1ac:	0800bf2f 	.word	0x0800bf2f
 800c1b0:	0800e5e4 	.word	0x0800e5e4

0800c1b4 <_printf_common>:
 800c1b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1b8:	4616      	mov	r6, r2
 800c1ba:	4699      	mov	r9, r3
 800c1bc:	688a      	ldr	r2, [r1, #8]
 800c1be:	690b      	ldr	r3, [r1, #16]
 800c1c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c1c4:	4293      	cmp	r3, r2
 800c1c6:	bfb8      	it	lt
 800c1c8:	4613      	movlt	r3, r2
 800c1ca:	6033      	str	r3, [r6, #0]
 800c1cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c1d0:	4607      	mov	r7, r0
 800c1d2:	460c      	mov	r4, r1
 800c1d4:	b10a      	cbz	r2, 800c1da <_printf_common+0x26>
 800c1d6:	3301      	adds	r3, #1
 800c1d8:	6033      	str	r3, [r6, #0]
 800c1da:	6823      	ldr	r3, [r4, #0]
 800c1dc:	0699      	lsls	r1, r3, #26
 800c1de:	bf42      	ittt	mi
 800c1e0:	6833      	ldrmi	r3, [r6, #0]
 800c1e2:	3302      	addmi	r3, #2
 800c1e4:	6033      	strmi	r3, [r6, #0]
 800c1e6:	6825      	ldr	r5, [r4, #0]
 800c1e8:	f015 0506 	ands.w	r5, r5, #6
 800c1ec:	d106      	bne.n	800c1fc <_printf_common+0x48>
 800c1ee:	f104 0a19 	add.w	sl, r4, #25
 800c1f2:	68e3      	ldr	r3, [r4, #12]
 800c1f4:	6832      	ldr	r2, [r6, #0]
 800c1f6:	1a9b      	subs	r3, r3, r2
 800c1f8:	42ab      	cmp	r3, r5
 800c1fa:	dc26      	bgt.n	800c24a <_printf_common+0x96>
 800c1fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c200:	1e13      	subs	r3, r2, #0
 800c202:	6822      	ldr	r2, [r4, #0]
 800c204:	bf18      	it	ne
 800c206:	2301      	movne	r3, #1
 800c208:	0692      	lsls	r2, r2, #26
 800c20a:	d42b      	bmi.n	800c264 <_printf_common+0xb0>
 800c20c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c210:	4649      	mov	r1, r9
 800c212:	4638      	mov	r0, r7
 800c214:	47c0      	blx	r8
 800c216:	3001      	adds	r0, #1
 800c218:	d01e      	beq.n	800c258 <_printf_common+0xa4>
 800c21a:	6823      	ldr	r3, [r4, #0]
 800c21c:	68e5      	ldr	r5, [r4, #12]
 800c21e:	6832      	ldr	r2, [r6, #0]
 800c220:	f003 0306 	and.w	r3, r3, #6
 800c224:	2b04      	cmp	r3, #4
 800c226:	bf08      	it	eq
 800c228:	1aad      	subeq	r5, r5, r2
 800c22a:	68a3      	ldr	r3, [r4, #8]
 800c22c:	6922      	ldr	r2, [r4, #16]
 800c22e:	bf0c      	ite	eq
 800c230:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c234:	2500      	movne	r5, #0
 800c236:	4293      	cmp	r3, r2
 800c238:	bfc4      	itt	gt
 800c23a:	1a9b      	subgt	r3, r3, r2
 800c23c:	18ed      	addgt	r5, r5, r3
 800c23e:	2600      	movs	r6, #0
 800c240:	341a      	adds	r4, #26
 800c242:	42b5      	cmp	r5, r6
 800c244:	d11a      	bne.n	800c27c <_printf_common+0xc8>
 800c246:	2000      	movs	r0, #0
 800c248:	e008      	b.n	800c25c <_printf_common+0xa8>
 800c24a:	2301      	movs	r3, #1
 800c24c:	4652      	mov	r2, sl
 800c24e:	4649      	mov	r1, r9
 800c250:	4638      	mov	r0, r7
 800c252:	47c0      	blx	r8
 800c254:	3001      	adds	r0, #1
 800c256:	d103      	bne.n	800c260 <_printf_common+0xac>
 800c258:	f04f 30ff 	mov.w	r0, #4294967295
 800c25c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c260:	3501      	adds	r5, #1
 800c262:	e7c6      	b.n	800c1f2 <_printf_common+0x3e>
 800c264:	18e1      	adds	r1, r4, r3
 800c266:	1c5a      	adds	r2, r3, #1
 800c268:	2030      	movs	r0, #48	; 0x30
 800c26a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c26e:	4422      	add	r2, r4
 800c270:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c274:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c278:	3302      	adds	r3, #2
 800c27a:	e7c7      	b.n	800c20c <_printf_common+0x58>
 800c27c:	2301      	movs	r3, #1
 800c27e:	4622      	mov	r2, r4
 800c280:	4649      	mov	r1, r9
 800c282:	4638      	mov	r0, r7
 800c284:	47c0      	blx	r8
 800c286:	3001      	adds	r0, #1
 800c288:	d0e6      	beq.n	800c258 <_printf_common+0xa4>
 800c28a:	3601      	adds	r6, #1
 800c28c:	e7d9      	b.n	800c242 <_printf_common+0x8e>
	...

0800c290 <_printf_i>:
 800c290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c294:	460c      	mov	r4, r1
 800c296:	4691      	mov	r9, r2
 800c298:	7e27      	ldrb	r7, [r4, #24]
 800c29a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c29c:	2f78      	cmp	r7, #120	; 0x78
 800c29e:	4680      	mov	r8, r0
 800c2a0:	469a      	mov	sl, r3
 800c2a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c2a6:	d807      	bhi.n	800c2b8 <_printf_i+0x28>
 800c2a8:	2f62      	cmp	r7, #98	; 0x62
 800c2aa:	d80a      	bhi.n	800c2c2 <_printf_i+0x32>
 800c2ac:	2f00      	cmp	r7, #0
 800c2ae:	f000 80d8 	beq.w	800c462 <_printf_i+0x1d2>
 800c2b2:	2f58      	cmp	r7, #88	; 0x58
 800c2b4:	f000 80a3 	beq.w	800c3fe <_printf_i+0x16e>
 800c2b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c2bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c2c0:	e03a      	b.n	800c338 <_printf_i+0xa8>
 800c2c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c2c6:	2b15      	cmp	r3, #21
 800c2c8:	d8f6      	bhi.n	800c2b8 <_printf_i+0x28>
 800c2ca:	a001      	add	r0, pc, #4	; (adr r0, 800c2d0 <_printf_i+0x40>)
 800c2cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c2d0:	0800c329 	.word	0x0800c329
 800c2d4:	0800c33d 	.word	0x0800c33d
 800c2d8:	0800c2b9 	.word	0x0800c2b9
 800c2dc:	0800c2b9 	.word	0x0800c2b9
 800c2e0:	0800c2b9 	.word	0x0800c2b9
 800c2e4:	0800c2b9 	.word	0x0800c2b9
 800c2e8:	0800c33d 	.word	0x0800c33d
 800c2ec:	0800c2b9 	.word	0x0800c2b9
 800c2f0:	0800c2b9 	.word	0x0800c2b9
 800c2f4:	0800c2b9 	.word	0x0800c2b9
 800c2f8:	0800c2b9 	.word	0x0800c2b9
 800c2fc:	0800c449 	.word	0x0800c449
 800c300:	0800c36d 	.word	0x0800c36d
 800c304:	0800c42b 	.word	0x0800c42b
 800c308:	0800c2b9 	.word	0x0800c2b9
 800c30c:	0800c2b9 	.word	0x0800c2b9
 800c310:	0800c46b 	.word	0x0800c46b
 800c314:	0800c2b9 	.word	0x0800c2b9
 800c318:	0800c36d 	.word	0x0800c36d
 800c31c:	0800c2b9 	.word	0x0800c2b9
 800c320:	0800c2b9 	.word	0x0800c2b9
 800c324:	0800c433 	.word	0x0800c433
 800c328:	680b      	ldr	r3, [r1, #0]
 800c32a:	1d1a      	adds	r2, r3, #4
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	600a      	str	r2, [r1, #0]
 800c330:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c334:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c338:	2301      	movs	r3, #1
 800c33a:	e0a3      	b.n	800c484 <_printf_i+0x1f4>
 800c33c:	6825      	ldr	r5, [r4, #0]
 800c33e:	6808      	ldr	r0, [r1, #0]
 800c340:	062e      	lsls	r6, r5, #24
 800c342:	f100 0304 	add.w	r3, r0, #4
 800c346:	d50a      	bpl.n	800c35e <_printf_i+0xce>
 800c348:	6805      	ldr	r5, [r0, #0]
 800c34a:	600b      	str	r3, [r1, #0]
 800c34c:	2d00      	cmp	r5, #0
 800c34e:	da03      	bge.n	800c358 <_printf_i+0xc8>
 800c350:	232d      	movs	r3, #45	; 0x2d
 800c352:	426d      	negs	r5, r5
 800c354:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c358:	485e      	ldr	r0, [pc, #376]	; (800c4d4 <_printf_i+0x244>)
 800c35a:	230a      	movs	r3, #10
 800c35c:	e019      	b.n	800c392 <_printf_i+0x102>
 800c35e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c362:	6805      	ldr	r5, [r0, #0]
 800c364:	600b      	str	r3, [r1, #0]
 800c366:	bf18      	it	ne
 800c368:	b22d      	sxthne	r5, r5
 800c36a:	e7ef      	b.n	800c34c <_printf_i+0xbc>
 800c36c:	680b      	ldr	r3, [r1, #0]
 800c36e:	6825      	ldr	r5, [r4, #0]
 800c370:	1d18      	adds	r0, r3, #4
 800c372:	6008      	str	r0, [r1, #0]
 800c374:	0628      	lsls	r0, r5, #24
 800c376:	d501      	bpl.n	800c37c <_printf_i+0xec>
 800c378:	681d      	ldr	r5, [r3, #0]
 800c37a:	e002      	b.n	800c382 <_printf_i+0xf2>
 800c37c:	0669      	lsls	r1, r5, #25
 800c37e:	d5fb      	bpl.n	800c378 <_printf_i+0xe8>
 800c380:	881d      	ldrh	r5, [r3, #0]
 800c382:	4854      	ldr	r0, [pc, #336]	; (800c4d4 <_printf_i+0x244>)
 800c384:	2f6f      	cmp	r7, #111	; 0x6f
 800c386:	bf0c      	ite	eq
 800c388:	2308      	moveq	r3, #8
 800c38a:	230a      	movne	r3, #10
 800c38c:	2100      	movs	r1, #0
 800c38e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c392:	6866      	ldr	r6, [r4, #4]
 800c394:	60a6      	str	r6, [r4, #8]
 800c396:	2e00      	cmp	r6, #0
 800c398:	bfa2      	ittt	ge
 800c39a:	6821      	ldrge	r1, [r4, #0]
 800c39c:	f021 0104 	bicge.w	r1, r1, #4
 800c3a0:	6021      	strge	r1, [r4, #0]
 800c3a2:	b90d      	cbnz	r5, 800c3a8 <_printf_i+0x118>
 800c3a4:	2e00      	cmp	r6, #0
 800c3a6:	d04d      	beq.n	800c444 <_printf_i+0x1b4>
 800c3a8:	4616      	mov	r6, r2
 800c3aa:	fbb5 f1f3 	udiv	r1, r5, r3
 800c3ae:	fb03 5711 	mls	r7, r3, r1, r5
 800c3b2:	5dc7      	ldrb	r7, [r0, r7]
 800c3b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c3b8:	462f      	mov	r7, r5
 800c3ba:	42bb      	cmp	r3, r7
 800c3bc:	460d      	mov	r5, r1
 800c3be:	d9f4      	bls.n	800c3aa <_printf_i+0x11a>
 800c3c0:	2b08      	cmp	r3, #8
 800c3c2:	d10b      	bne.n	800c3dc <_printf_i+0x14c>
 800c3c4:	6823      	ldr	r3, [r4, #0]
 800c3c6:	07df      	lsls	r7, r3, #31
 800c3c8:	d508      	bpl.n	800c3dc <_printf_i+0x14c>
 800c3ca:	6923      	ldr	r3, [r4, #16]
 800c3cc:	6861      	ldr	r1, [r4, #4]
 800c3ce:	4299      	cmp	r1, r3
 800c3d0:	bfde      	ittt	le
 800c3d2:	2330      	movle	r3, #48	; 0x30
 800c3d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c3d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c3dc:	1b92      	subs	r2, r2, r6
 800c3de:	6122      	str	r2, [r4, #16]
 800c3e0:	f8cd a000 	str.w	sl, [sp]
 800c3e4:	464b      	mov	r3, r9
 800c3e6:	aa03      	add	r2, sp, #12
 800c3e8:	4621      	mov	r1, r4
 800c3ea:	4640      	mov	r0, r8
 800c3ec:	f7ff fee2 	bl	800c1b4 <_printf_common>
 800c3f0:	3001      	adds	r0, #1
 800c3f2:	d14c      	bne.n	800c48e <_printf_i+0x1fe>
 800c3f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c3f8:	b004      	add	sp, #16
 800c3fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3fe:	4835      	ldr	r0, [pc, #212]	; (800c4d4 <_printf_i+0x244>)
 800c400:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c404:	6823      	ldr	r3, [r4, #0]
 800c406:	680e      	ldr	r6, [r1, #0]
 800c408:	061f      	lsls	r7, r3, #24
 800c40a:	f856 5b04 	ldr.w	r5, [r6], #4
 800c40e:	600e      	str	r6, [r1, #0]
 800c410:	d514      	bpl.n	800c43c <_printf_i+0x1ac>
 800c412:	07d9      	lsls	r1, r3, #31
 800c414:	bf44      	itt	mi
 800c416:	f043 0320 	orrmi.w	r3, r3, #32
 800c41a:	6023      	strmi	r3, [r4, #0]
 800c41c:	b91d      	cbnz	r5, 800c426 <_printf_i+0x196>
 800c41e:	6823      	ldr	r3, [r4, #0]
 800c420:	f023 0320 	bic.w	r3, r3, #32
 800c424:	6023      	str	r3, [r4, #0]
 800c426:	2310      	movs	r3, #16
 800c428:	e7b0      	b.n	800c38c <_printf_i+0xfc>
 800c42a:	6823      	ldr	r3, [r4, #0]
 800c42c:	f043 0320 	orr.w	r3, r3, #32
 800c430:	6023      	str	r3, [r4, #0]
 800c432:	2378      	movs	r3, #120	; 0x78
 800c434:	4828      	ldr	r0, [pc, #160]	; (800c4d8 <_printf_i+0x248>)
 800c436:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c43a:	e7e3      	b.n	800c404 <_printf_i+0x174>
 800c43c:	065e      	lsls	r6, r3, #25
 800c43e:	bf48      	it	mi
 800c440:	b2ad      	uxthmi	r5, r5
 800c442:	e7e6      	b.n	800c412 <_printf_i+0x182>
 800c444:	4616      	mov	r6, r2
 800c446:	e7bb      	b.n	800c3c0 <_printf_i+0x130>
 800c448:	680b      	ldr	r3, [r1, #0]
 800c44a:	6826      	ldr	r6, [r4, #0]
 800c44c:	6960      	ldr	r0, [r4, #20]
 800c44e:	1d1d      	adds	r5, r3, #4
 800c450:	600d      	str	r5, [r1, #0]
 800c452:	0635      	lsls	r5, r6, #24
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	d501      	bpl.n	800c45c <_printf_i+0x1cc>
 800c458:	6018      	str	r0, [r3, #0]
 800c45a:	e002      	b.n	800c462 <_printf_i+0x1d2>
 800c45c:	0671      	lsls	r1, r6, #25
 800c45e:	d5fb      	bpl.n	800c458 <_printf_i+0x1c8>
 800c460:	8018      	strh	r0, [r3, #0]
 800c462:	2300      	movs	r3, #0
 800c464:	6123      	str	r3, [r4, #16]
 800c466:	4616      	mov	r6, r2
 800c468:	e7ba      	b.n	800c3e0 <_printf_i+0x150>
 800c46a:	680b      	ldr	r3, [r1, #0]
 800c46c:	1d1a      	adds	r2, r3, #4
 800c46e:	600a      	str	r2, [r1, #0]
 800c470:	681e      	ldr	r6, [r3, #0]
 800c472:	6862      	ldr	r2, [r4, #4]
 800c474:	2100      	movs	r1, #0
 800c476:	4630      	mov	r0, r6
 800c478:	f7f3 feb2 	bl	80001e0 <memchr>
 800c47c:	b108      	cbz	r0, 800c482 <_printf_i+0x1f2>
 800c47e:	1b80      	subs	r0, r0, r6
 800c480:	6060      	str	r0, [r4, #4]
 800c482:	6863      	ldr	r3, [r4, #4]
 800c484:	6123      	str	r3, [r4, #16]
 800c486:	2300      	movs	r3, #0
 800c488:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c48c:	e7a8      	b.n	800c3e0 <_printf_i+0x150>
 800c48e:	6923      	ldr	r3, [r4, #16]
 800c490:	4632      	mov	r2, r6
 800c492:	4649      	mov	r1, r9
 800c494:	4640      	mov	r0, r8
 800c496:	47d0      	blx	sl
 800c498:	3001      	adds	r0, #1
 800c49a:	d0ab      	beq.n	800c3f4 <_printf_i+0x164>
 800c49c:	6823      	ldr	r3, [r4, #0]
 800c49e:	079b      	lsls	r3, r3, #30
 800c4a0:	d413      	bmi.n	800c4ca <_printf_i+0x23a>
 800c4a2:	68e0      	ldr	r0, [r4, #12]
 800c4a4:	9b03      	ldr	r3, [sp, #12]
 800c4a6:	4298      	cmp	r0, r3
 800c4a8:	bfb8      	it	lt
 800c4aa:	4618      	movlt	r0, r3
 800c4ac:	e7a4      	b.n	800c3f8 <_printf_i+0x168>
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	4632      	mov	r2, r6
 800c4b2:	4649      	mov	r1, r9
 800c4b4:	4640      	mov	r0, r8
 800c4b6:	47d0      	blx	sl
 800c4b8:	3001      	adds	r0, #1
 800c4ba:	d09b      	beq.n	800c3f4 <_printf_i+0x164>
 800c4bc:	3501      	adds	r5, #1
 800c4be:	68e3      	ldr	r3, [r4, #12]
 800c4c0:	9903      	ldr	r1, [sp, #12]
 800c4c2:	1a5b      	subs	r3, r3, r1
 800c4c4:	42ab      	cmp	r3, r5
 800c4c6:	dcf2      	bgt.n	800c4ae <_printf_i+0x21e>
 800c4c8:	e7eb      	b.n	800c4a2 <_printf_i+0x212>
 800c4ca:	2500      	movs	r5, #0
 800c4cc:	f104 0619 	add.w	r6, r4, #25
 800c4d0:	e7f5      	b.n	800c4be <_printf_i+0x22e>
 800c4d2:	bf00      	nop
 800c4d4:	0800e5ef 	.word	0x0800e5ef
 800c4d8:	0800e600 	.word	0x0800e600

0800c4dc <_sbrk_r>:
 800c4dc:	b538      	push	{r3, r4, r5, lr}
 800c4de:	4d06      	ldr	r5, [pc, #24]	; (800c4f8 <_sbrk_r+0x1c>)
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	4604      	mov	r4, r0
 800c4e4:	4608      	mov	r0, r1
 800c4e6:	602b      	str	r3, [r5, #0]
 800c4e8:	f7f8 fd40 	bl	8004f6c <_sbrk>
 800c4ec:	1c43      	adds	r3, r0, #1
 800c4ee:	d102      	bne.n	800c4f6 <_sbrk_r+0x1a>
 800c4f0:	682b      	ldr	r3, [r5, #0]
 800c4f2:	b103      	cbz	r3, 800c4f6 <_sbrk_r+0x1a>
 800c4f4:	6023      	str	r3, [r4, #0]
 800c4f6:	bd38      	pop	{r3, r4, r5, pc}
 800c4f8:	20001ca4 	.word	0x20001ca4

0800c4fc <__swbuf_r>:
 800c4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4fe:	460e      	mov	r6, r1
 800c500:	4614      	mov	r4, r2
 800c502:	4605      	mov	r5, r0
 800c504:	b118      	cbz	r0, 800c50e <__swbuf_r+0x12>
 800c506:	6983      	ldr	r3, [r0, #24]
 800c508:	b90b      	cbnz	r3, 800c50e <__swbuf_r+0x12>
 800c50a:	f000 f9d9 	bl	800c8c0 <__sinit>
 800c50e:	4b21      	ldr	r3, [pc, #132]	; (800c594 <__swbuf_r+0x98>)
 800c510:	429c      	cmp	r4, r3
 800c512:	d12b      	bne.n	800c56c <__swbuf_r+0x70>
 800c514:	686c      	ldr	r4, [r5, #4]
 800c516:	69a3      	ldr	r3, [r4, #24]
 800c518:	60a3      	str	r3, [r4, #8]
 800c51a:	89a3      	ldrh	r3, [r4, #12]
 800c51c:	071a      	lsls	r2, r3, #28
 800c51e:	d52f      	bpl.n	800c580 <__swbuf_r+0x84>
 800c520:	6923      	ldr	r3, [r4, #16]
 800c522:	b36b      	cbz	r3, 800c580 <__swbuf_r+0x84>
 800c524:	6923      	ldr	r3, [r4, #16]
 800c526:	6820      	ldr	r0, [r4, #0]
 800c528:	1ac0      	subs	r0, r0, r3
 800c52a:	6963      	ldr	r3, [r4, #20]
 800c52c:	b2f6      	uxtb	r6, r6
 800c52e:	4283      	cmp	r3, r0
 800c530:	4637      	mov	r7, r6
 800c532:	dc04      	bgt.n	800c53e <__swbuf_r+0x42>
 800c534:	4621      	mov	r1, r4
 800c536:	4628      	mov	r0, r5
 800c538:	f000 f92e 	bl	800c798 <_fflush_r>
 800c53c:	bb30      	cbnz	r0, 800c58c <__swbuf_r+0x90>
 800c53e:	68a3      	ldr	r3, [r4, #8]
 800c540:	3b01      	subs	r3, #1
 800c542:	60a3      	str	r3, [r4, #8]
 800c544:	6823      	ldr	r3, [r4, #0]
 800c546:	1c5a      	adds	r2, r3, #1
 800c548:	6022      	str	r2, [r4, #0]
 800c54a:	701e      	strb	r6, [r3, #0]
 800c54c:	6963      	ldr	r3, [r4, #20]
 800c54e:	3001      	adds	r0, #1
 800c550:	4283      	cmp	r3, r0
 800c552:	d004      	beq.n	800c55e <__swbuf_r+0x62>
 800c554:	89a3      	ldrh	r3, [r4, #12]
 800c556:	07db      	lsls	r3, r3, #31
 800c558:	d506      	bpl.n	800c568 <__swbuf_r+0x6c>
 800c55a:	2e0a      	cmp	r6, #10
 800c55c:	d104      	bne.n	800c568 <__swbuf_r+0x6c>
 800c55e:	4621      	mov	r1, r4
 800c560:	4628      	mov	r0, r5
 800c562:	f000 f919 	bl	800c798 <_fflush_r>
 800c566:	b988      	cbnz	r0, 800c58c <__swbuf_r+0x90>
 800c568:	4638      	mov	r0, r7
 800c56a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c56c:	4b0a      	ldr	r3, [pc, #40]	; (800c598 <__swbuf_r+0x9c>)
 800c56e:	429c      	cmp	r4, r3
 800c570:	d101      	bne.n	800c576 <__swbuf_r+0x7a>
 800c572:	68ac      	ldr	r4, [r5, #8]
 800c574:	e7cf      	b.n	800c516 <__swbuf_r+0x1a>
 800c576:	4b09      	ldr	r3, [pc, #36]	; (800c59c <__swbuf_r+0xa0>)
 800c578:	429c      	cmp	r4, r3
 800c57a:	bf08      	it	eq
 800c57c:	68ec      	ldreq	r4, [r5, #12]
 800c57e:	e7ca      	b.n	800c516 <__swbuf_r+0x1a>
 800c580:	4621      	mov	r1, r4
 800c582:	4628      	mov	r0, r5
 800c584:	f000 f80c 	bl	800c5a0 <__swsetup_r>
 800c588:	2800      	cmp	r0, #0
 800c58a:	d0cb      	beq.n	800c524 <__swbuf_r+0x28>
 800c58c:	f04f 37ff 	mov.w	r7, #4294967295
 800c590:	e7ea      	b.n	800c568 <__swbuf_r+0x6c>
 800c592:	bf00      	nop
 800c594:	0800e634 	.word	0x0800e634
 800c598:	0800e654 	.word	0x0800e654
 800c59c:	0800e614 	.word	0x0800e614

0800c5a0 <__swsetup_r>:
 800c5a0:	4b32      	ldr	r3, [pc, #200]	; (800c66c <__swsetup_r+0xcc>)
 800c5a2:	b570      	push	{r4, r5, r6, lr}
 800c5a4:	681d      	ldr	r5, [r3, #0]
 800c5a6:	4606      	mov	r6, r0
 800c5a8:	460c      	mov	r4, r1
 800c5aa:	b125      	cbz	r5, 800c5b6 <__swsetup_r+0x16>
 800c5ac:	69ab      	ldr	r3, [r5, #24]
 800c5ae:	b913      	cbnz	r3, 800c5b6 <__swsetup_r+0x16>
 800c5b0:	4628      	mov	r0, r5
 800c5b2:	f000 f985 	bl	800c8c0 <__sinit>
 800c5b6:	4b2e      	ldr	r3, [pc, #184]	; (800c670 <__swsetup_r+0xd0>)
 800c5b8:	429c      	cmp	r4, r3
 800c5ba:	d10f      	bne.n	800c5dc <__swsetup_r+0x3c>
 800c5bc:	686c      	ldr	r4, [r5, #4]
 800c5be:	89a3      	ldrh	r3, [r4, #12]
 800c5c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c5c4:	0719      	lsls	r1, r3, #28
 800c5c6:	d42c      	bmi.n	800c622 <__swsetup_r+0x82>
 800c5c8:	06dd      	lsls	r5, r3, #27
 800c5ca:	d411      	bmi.n	800c5f0 <__swsetup_r+0x50>
 800c5cc:	2309      	movs	r3, #9
 800c5ce:	6033      	str	r3, [r6, #0]
 800c5d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c5d4:	81a3      	strh	r3, [r4, #12]
 800c5d6:	f04f 30ff 	mov.w	r0, #4294967295
 800c5da:	e03e      	b.n	800c65a <__swsetup_r+0xba>
 800c5dc:	4b25      	ldr	r3, [pc, #148]	; (800c674 <__swsetup_r+0xd4>)
 800c5de:	429c      	cmp	r4, r3
 800c5e0:	d101      	bne.n	800c5e6 <__swsetup_r+0x46>
 800c5e2:	68ac      	ldr	r4, [r5, #8]
 800c5e4:	e7eb      	b.n	800c5be <__swsetup_r+0x1e>
 800c5e6:	4b24      	ldr	r3, [pc, #144]	; (800c678 <__swsetup_r+0xd8>)
 800c5e8:	429c      	cmp	r4, r3
 800c5ea:	bf08      	it	eq
 800c5ec:	68ec      	ldreq	r4, [r5, #12]
 800c5ee:	e7e6      	b.n	800c5be <__swsetup_r+0x1e>
 800c5f0:	0758      	lsls	r0, r3, #29
 800c5f2:	d512      	bpl.n	800c61a <__swsetup_r+0x7a>
 800c5f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c5f6:	b141      	cbz	r1, 800c60a <__swsetup_r+0x6a>
 800c5f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c5fc:	4299      	cmp	r1, r3
 800c5fe:	d002      	beq.n	800c606 <__swsetup_r+0x66>
 800c600:	4630      	mov	r0, r6
 800c602:	f7ff fa77 	bl	800baf4 <_free_r>
 800c606:	2300      	movs	r3, #0
 800c608:	6363      	str	r3, [r4, #52]	; 0x34
 800c60a:	89a3      	ldrh	r3, [r4, #12]
 800c60c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c610:	81a3      	strh	r3, [r4, #12]
 800c612:	2300      	movs	r3, #0
 800c614:	6063      	str	r3, [r4, #4]
 800c616:	6923      	ldr	r3, [r4, #16]
 800c618:	6023      	str	r3, [r4, #0]
 800c61a:	89a3      	ldrh	r3, [r4, #12]
 800c61c:	f043 0308 	orr.w	r3, r3, #8
 800c620:	81a3      	strh	r3, [r4, #12]
 800c622:	6923      	ldr	r3, [r4, #16]
 800c624:	b94b      	cbnz	r3, 800c63a <__swsetup_r+0x9a>
 800c626:	89a3      	ldrh	r3, [r4, #12]
 800c628:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c62c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c630:	d003      	beq.n	800c63a <__swsetup_r+0x9a>
 800c632:	4621      	mov	r1, r4
 800c634:	4630      	mov	r0, r6
 800c636:	f000 fa07 	bl	800ca48 <__smakebuf_r>
 800c63a:	89a0      	ldrh	r0, [r4, #12]
 800c63c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c640:	f010 0301 	ands.w	r3, r0, #1
 800c644:	d00a      	beq.n	800c65c <__swsetup_r+0xbc>
 800c646:	2300      	movs	r3, #0
 800c648:	60a3      	str	r3, [r4, #8]
 800c64a:	6963      	ldr	r3, [r4, #20]
 800c64c:	425b      	negs	r3, r3
 800c64e:	61a3      	str	r3, [r4, #24]
 800c650:	6923      	ldr	r3, [r4, #16]
 800c652:	b943      	cbnz	r3, 800c666 <__swsetup_r+0xc6>
 800c654:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c658:	d1ba      	bne.n	800c5d0 <__swsetup_r+0x30>
 800c65a:	bd70      	pop	{r4, r5, r6, pc}
 800c65c:	0781      	lsls	r1, r0, #30
 800c65e:	bf58      	it	pl
 800c660:	6963      	ldrpl	r3, [r4, #20]
 800c662:	60a3      	str	r3, [r4, #8]
 800c664:	e7f4      	b.n	800c650 <__swsetup_r+0xb0>
 800c666:	2000      	movs	r0, #0
 800c668:	e7f7      	b.n	800c65a <__swsetup_r+0xba>
 800c66a:	bf00      	nop
 800c66c:	20000258 	.word	0x20000258
 800c670:	0800e634 	.word	0x0800e634
 800c674:	0800e654 	.word	0x0800e654
 800c678:	0800e614 	.word	0x0800e614

0800c67c <abort>:
 800c67c:	b508      	push	{r3, lr}
 800c67e:	2006      	movs	r0, #6
 800c680:	f000 faa4 	bl	800cbcc <raise>
 800c684:	2001      	movs	r0, #1
 800c686:	f7f8 fbf9 	bl	8004e7c <_exit>
	...

0800c68c <__sflush_r>:
 800c68c:	898a      	ldrh	r2, [r1, #12]
 800c68e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c692:	4605      	mov	r5, r0
 800c694:	0710      	lsls	r0, r2, #28
 800c696:	460c      	mov	r4, r1
 800c698:	d458      	bmi.n	800c74c <__sflush_r+0xc0>
 800c69a:	684b      	ldr	r3, [r1, #4]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	dc05      	bgt.n	800c6ac <__sflush_r+0x20>
 800c6a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	dc02      	bgt.n	800c6ac <__sflush_r+0x20>
 800c6a6:	2000      	movs	r0, #0
 800c6a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c6ae:	2e00      	cmp	r6, #0
 800c6b0:	d0f9      	beq.n	800c6a6 <__sflush_r+0x1a>
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c6b8:	682f      	ldr	r7, [r5, #0]
 800c6ba:	602b      	str	r3, [r5, #0]
 800c6bc:	d032      	beq.n	800c724 <__sflush_r+0x98>
 800c6be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c6c0:	89a3      	ldrh	r3, [r4, #12]
 800c6c2:	075a      	lsls	r2, r3, #29
 800c6c4:	d505      	bpl.n	800c6d2 <__sflush_r+0x46>
 800c6c6:	6863      	ldr	r3, [r4, #4]
 800c6c8:	1ac0      	subs	r0, r0, r3
 800c6ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c6cc:	b10b      	cbz	r3, 800c6d2 <__sflush_r+0x46>
 800c6ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c6d0:	1ac0      	subs	r0, r0, r3
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	4602      	mov	r2, r0
 800c6d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c6d8:	6a21      	ldr	r1, [r4, #32]
 800c6da:	4628      	mov	r0, r5
 800c6dc:	47b0      	blx	r6
 800c6de:	1c43      	adds	r3, r0, #1
 800c6e0:	89a3      	ldrh	r3, [r4, #12]
 800c6e2:	d106      	bne.n	800c6f2 <__sflush_r+0x66>
 800c6e4:	6829      	ldr	r1, [r5, #0]
 800c6e6:	291d      	cmp	r1, #29
 800c6e8:	d82c      	bhi.n	800c744 <__sflush_r+0xb8>
 800c6ea:	4a2a      	ldr	r2, [pc, #168]	; (800c794 <__sflush_r+0x108>)
 800c6ec:	40ca      	lsrs	r2, r1
 800c6ee:	07d6      	lsls	r6, r2, #31
 800c6f0:	d528      	bpl.n	800c744 <__sflush_r+0xb8>
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	6062      	str	r2, [r4, #4]
 800c6f6:	04d9      	lsls	r1, r3, #19
 800c6f8:	6922      	ldr	r2, [r4, #16]
 800c6fa:	6022      	str	r2, [r4, #0]
 800c6fc:	d504      	bpl.n	800c708 <__sflush_r+0x7c>
 800c6fe:	1c42      	adds	r2, r0, #1
 800c700:	d101      	bne.n	800c706 <__sflush_r+0x7a>
 800c702:	682b      	ldr	r3, [r5, #0]
 800c704:	b903      	cbnz	r3, 800c708 <__sflush_r+0x7c>
 800c706:	6560      	str	r0, [r4, #84]	; 0x54
 800c708:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c70a:	602f      	str	r7, [r5, #0]
 800c70c:	2900      	cmp	r1, #0
 800c70e:	d0ca      	beq.n	800c6a6 <__sflush_r+0x1a>
 800c710:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c714:	4299      	cmp	r1, r3
 800c716:	d002      	beq.n	800c71e <__sflush_r+0x92>
 800c718:	4628      	mov	r0, r5
 800c71a:	f7ff f9eb 	bl	800baf4 <_free_r>
 800c71e:	2000      	movs	r0, #0
 800c720:	6360      	str	r0, [r4, #52]	; 0x34
 800c722:	e7c1      	b.n	800c6a8 <__sflush_r+0x1c>
 800c724:	6a21      	ldr	r1, [r4, #32]
 800c726:	2301      	movs	r3, #1
 800c728:	4628      	mov	r0, r5
 800c72a:	47b0      	blx	r6
 800c72c:	1c41      	adds	r1, r0, #1
 800c72e:	d1c7      	bne.n	800c6c0 <__sflush_r+0x34>
 800c730:	682b      	ldr	r3, [r5, #0]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d0c4      	beq.n	800c6c0 <__sflush_r+0x34>
 800c736:	2b1d      	cmp	r3, #29
 800c738:	d001      	beq.n	800c73e <__sflush_r+0xb2>
 800c73a:	2b16      	cmp	r3, #22
 800c73c:	d101      	bne.n	800c742 <__sflush_r+0xb6>
 800c73e:	602f      	str	r7, [r5, #0]
 800c740:	e7b1      	b.n	800c6a6 <__sflush_r+0x1a>
 800c742:	89a3      	ldrh	r3, [r4, #12]
 800c744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c748:	81a3      	strh	r3, [r4, #12]
 800c74a:	e7ad      	b.n	800c6a8 <__sflush_r+0x1c>
 800c74c:	690f      	ldr	r7, [r1, #16]
 800c74e:	2f00      	cmp	r7, #0
 800c750:	d0a9      	beq.n	800c6a6 <__sflush_r+0x1a>
 800c752:	0793      	lsls	r3, r2, #30
 800c754:	680e      	ldr	r6, [r1, #0]
 800c756:	bf08      	it	eq
 800c758:	694b      	ldreq	r3, [r1, #20]
 800c75a:	600f      	str	r7, [r1, #0]
 800c75c:	bf18      	it	ne
 800c75e:	2300      	movne	r3, #0
 800c760:	eba6 0807 	sub.w	r8, r6, r7
 800c764:	608b      	str	r3, [r1, #8]
 800c766:	f1b8 0f00 	cmp.w	r8, #0
 800c76a:	dd9c      	ble.n	800c6a6 <__sflush_r+0x1a>
 800c76c:	6a21      	ldr	r1, [r4, #32]
 800c76e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c770:	4643      	mov	r3, r8
 800c772:	463a      	mov	r2, r7
 800c774:	4628      	mov	r0, r5
 800c776:	47b0      	blx	r6
 800c778:	2800      	cmp	r0, #0
 800c77a:	dc06      	bgt.n	800c78a <__sflush_r+0xfe>
 800c77c:	89a3      	ldrh	r3, [r4, #12]
 800c77e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c782:	81a3      	strh	r3, [r4, #12]
 800c784:	f04f 30ff 	mov.w	r0, #4294967295
 800c788:	e78e      	b.n	800c6a8 <__sflush_r+0x1c>
 800c78a:	4407      	add	r7, r0
 800c78c:	eba8 0800 	sub.w	r8, r8, r0
 800c790:	e7e9      	b.n	800c766 <__sflush_r+0xda>
 800c792:	bf00      	nop
 800c794:	20400001 	.word	0x20400001

0800c798 <_fflush_r>:
 800c798:	b538      	push	{r3, r4, r5, lr}
 800c79a:	690b      	ldr	r3, [r1, #16]
 800c79c:	4605      	mov	r5, r0
 800c79e:	460c      	mov	r4, r1
 800c7a0:	b913      	cbnz	r3, 800c7a8 <_fflush_r+0x10>
 800c7a2:	2500      	movs	r5, #0
 800c7a4:	4628      	mov	r0, r5
 800c7a6:	bd38      	pop	{r3, r4, r5, pc}
 800c7a8:	b118      	cbz	r0, 800c7b2 <_fflush_r+0x1a>
 800c7aa:	6983      	ldr	r3, [r0, #24]
 800c7ac:	b90b      	cbnz	r3, 800c7b2 <_fflush_r+0x1a>
 800c7ae:	f000 f887 	bl	800c8c0 <__sinit>
 800c7b2:	4b14      	ldr	r3, [pc, #80]	; (800c804 <_fflush_r+0x6c>)
 800c7b4:	429c      	cmp	r4, r3
 800c7b6:	d11b      	bne.n	800c7f0 <_fflush_r+0x58>
 800c7b8:	686c      	ldr	r4, [r5, #4]
 800c7ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d0ef      	beq.n	800c7a2 <_fflush_r+0xa>
 800c7c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c7c4:	07d0      	lsls	r0, r2, #31
 800c7c6:	d404      	bmi.n	800c7d2 <_fflush_r+0x3a>
 800c7c8:	0599      	lsls	r1, r3, #22
 800c7ca:	d402      	bmi.n	800c7d2 <_fflush_r+0x3a>
 800c7cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c7ce:	f000 f915 	bl	800c9fc <__retarget_lock_acquire_recursive>
 800c7d2:	4628      	mov	r0, r5
 800c7d4:	4621      	mov	r1, r4
 800c7d6:	f7ff ff59 	bl	800c68c <__sflush_r>
 800c7da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c7dc:	07da      	lsls	r2, r3, #31
 800c7de:	4605      	mov	r5, r0
 800c7e0:	d4e0      	bmi.n	800c7a4 <_fflush_r+0xc>
 800c7e2:	89a3      	ldrh	r3, [r4, #12]
 800c7e4:	059b      	lsls	r3, r3, #22
 800c7e6:	d4dd      	bmi.n	800c7a4 <_fflush_r+0xc>
 800c7e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c7ea:	f000 f908 	bl	800c9fe <__retarget_lock_release_recursive>
 800c7ee:	e7d9      	b.n	800c7a4 <_fflush_r+0xc>
 800c7f0:	4b05      	ldr	r3, [pc, #20]	; (800c808 <_fflush_r+0x70>)
 800c7f2:	429c      	cmp	r4, r3
 800c7f4:	d101      	bne.n	800c7fa <_fflush_r+0x62>
 800c7f6:	68ac      	ldr	r4, [r5, #8]
 800c7f8:	e7df      	b.n	800c7ba <_fflush_r+0x22>
 800c7fa:	4b04      	ldr	r3, [pc, #16]	; (800c80c <_fflush_r+0x74>)
 800c7fc:	429c      	cmp	r4, r3
 800c7fe:	bf08      	it	eq
 800c800:	68ec      	ldreq	r4, [r5, #12]
 800c802:	e7da      	b.n	800c7ba <_fflush_r+0x22>
 800c804:	0800e634 	.word	0x0800e634
 800c808:	0800e654 	.word	0x0800e654
 800c80c:	0800e614 	.word	0x0800e614

0800c810 <std>:
 800c810:	2300      	movs	r3, #0
 800c812:	b510      	push	{r4, lr}
 800c814:	4604      	mov	r4, r0
 800c816:	e9c0 3300 	strd	r3, r3, [r0]
 800c81a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c81e:	6083      	str	r3, [r0, #8]
 800c820:	8181      	strh	r1, [r0, #12]
 800c822:	6643      	str	r3, [r0, #100]	; 0x64
 800c824:	81c2      	strh	r2, [r0, #14]
 800c826:	6183      	str	r3, [r0, #24]
 800c828:	4619      	mov	r1, r3
 800c82a:	2208      	movs	r2, #8
 800c82c:	305c      	adds	r0, #92	; 0x5c
 800c82e:	f7ff f8c1 	bl	800b9b4 <memset>
 800c832:	4b05      	ldr	r3, [pc, #20]	; (800c848 <std+0x38>)
 800c834:	6263      	str	r3, [r4, #36]	; 0x24
 800c836:	4b05      	ldr	r3, [pc, #20]	; (800c84c <std+0x3c>)
 800c838:	62a3      	str	r3, [r4, #40]	; 0x28
 800c83a:	4b05      	ldr	r3, [pc, #20]	; (800c850 <std+0x40>)
 800c83c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c83e:	4b05      	ldr	r3, [pc, #20]	; (800c854 <std+0x44>)
 800c840:	6224      	str	r4, [r4, #32]
 800c842:	6323      	str	r3, [r4, #48]	; 0x30
 800c844:	bd10      	pop	{r4, pc}
 800c846:	bf00      	nop
 800c848:	0800cc05 	.word	0x0800cc05
 800c84c:	0800cc27 	.word	0x0800cc27
 800c850:	0800cc5f 	.word	0x0800cc5f
 800c854:	0800cc83 	.word	0x0800cc83

0800c858 <_cleanup_r>:
 800c858:	4901      	ldr	r1, [pc, #4]	; (800c860 <_cleanup_r+0x8>)
 800c85a:	f000 b8af 	b.w	800c9bc <_fwalk_reent>
 800c85e:	bf00      	nop
 800c860:	0800c799 	.word	0x0800c799

0800c864 <__sfmoreglue>:
 800c864:	b570      	push	{r4, r5, r6, lr}
 800c866:	1e4a      	subs	r2, r1, #1
 800c868:	2568      	movs	r5, #104	; 0x68
 800c86a:	4355      	muls	r5, r2
 800c86c:	460e      	mov	r6, r1
 800c86e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c872:	f7ff f98f 	bl	800bb94 <_malloc_r>
 800c876:	4604      	mov	r4, r0
 800c878:	b140      	cbz	r0, 800c88c <__sfmoreglue+0x28>
 800c87a:	2100      	movs	r1, #0
 800c87c:	e9c0 1600 	strd	r1, r6, [r0]
 800c880:	300c      	adds	r0, #12
 800c882:	60a0      	str	r0, [r4, #8]
 800c884:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c888:	f7ff f894 	bl	800b9b4 <memset>
 800c88c:	4620      	mov	r0, r4
 800c88e:	bd70      	pop	{r4, r5, r6, pc}

0800c890 <__sfp_lock_acquire>:
 800c890:	4801      	ldr	r0, [pc, #4]	; (800c898 <__sfp_lock_acquire+0x8>)
 800c892:	f000 b8b3 	b.w	800c9fc <__retarget_lock_acquire_recursive>
 800c896:	bf00      	nop
 800c898:	20001ca0 	.word	0x20001ca0

0800c89c <__sfp_lock_release>:
 800c89c:	4801      	ldr	r0, [pc, #4]	; (800c8a4 <__sfp_lock_release+0x8>)
 800c89e:	f000 b8ae 	b.w	800c9fe <__retarget_lock_release_recursive>
 800c8a2:	bf00      	nop
 800c8a4:	20001ca0 	.word	0x20001ca0

0800c8a8 <__sinit_lock_acquire>:
 800c8a8:	4801      	ldr	r0, [pc, #4]	; (800c8b0 <__sinit_lock_acquire+0x8>)
 800c8aa:	f000 b8a7 	b.w	800c9fc <__retarget_lock_acquire_recursive>
 800c8ae:	bf00      	nop
 800c8b0:	20001c9b 	.word	0x20001c9b

0800c8b4 <__sinit_lock_release>:
 800c8b4:	4801      	ldr	r0, [pc, #4]	; (800c8bc <__sinit_lock_release+0x8>)
 800c8b6:	f000 b8a2 	b.w	800c9fe <__retarget_lock_release_recursive>
 800c8ba:	bf00      	nop
 800c8bc:	20001c9b 	.word	0x20001c9b

0800c8c0 <__sinit>:
 800c8c0:	b510      	push	{r4, lr}
 800c8c2:	4604      	mov	r4, r0
 800c8c4:	f7ff fff0 	bl	800c8a8 <__sinit_lock_acquire>
 800c8c8:	69a3      	ldr	r3, [r4, #24]
 800c8ca:	b11b      	cbz	r3, 800c8d4 <__sinit+0x14>
 800c8cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8d0:	f7ff bff0 	b.w	800c8b4 <__sinit_lock_release>
 800c8d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c8d8:	6523      	str	r3, [r4, #80]	; 0x50
 800c8da:	4b13      	ldr	r3, [pc, #76]	; (800c928 <__sinit+0x68>)
 800c8dc:	4a13      	ldr	r2, [pc, #76]	; (800c92c <__sinit+0x6c>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	62a2      	str	r2, [r4, #40]	; 0x28
 800c8e2:	42a3      	cmp	r3, r4
 800c8e4:	bf04      	itt	eq
 800c8e6:	2301      	moveq	r3, #1
 800c8e8:	61a3      	streq	r3, [r4, #24]
 800c8ea:	4620      	mov	r0, r4
 800c8ec:	f000 f820 	bl	800c930 <__sfp>
 800c8f0:	6060      	str	r0, [r4, #4]
 800c8f2:	4620      	mov	r0, r4
 800c8f4:	f000 f81c 	bl	800c930 <__sfp>
 800c8f8:	60a0      	str	r0, [r4, #8]
 800c8fa:	4620      	mov	r0, r4
 800c8fc:	f000 f818 	bl	800c930 <__sfp>
 800c900:	2200      	movs	r2, #0
 800c902:	60e0      	str	r0, [r4, #12]
 800c904:	2104      	movs	r1, #4
 800c906:	6860      	ldr	r0, [r4, #4]
 800c908:	f7ff ff82 	bl	800c810 <std>
 800c90c:	68a0      	ldr	r0, [r4, #8]
 800c90e:	2201      	movs	r2, #1
 800c910:	2109      	movs	r1, #9
 800c912:	f7ff ff7d 	bl	800c810 <std>
 800c916:	68e0      	ldr	r0, [r4, #12]
 800c918:	2202      	movs	r2, #2
 800c91a:	2112      	movs	r1, #18
 800c91c:	f7ff ff78 	bl	800c810 <std>
 800c920:	2301      	movs	r3, #1
 800c922:	61a3      	str	r3, [r4, #24]
 800c924:	e7d2      	b.n	800c8cc <__sinit+0xc>
 800c926:	bf00      	nop
 800c928:	0800e528 	.word	0x0800e528
 800c92c:	0800c859 	.word	0x0800c859

0800c930 <__sfp>:
 800c930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c932:	4607      	mov	r7, r0
 800c934:	f7ff ffac 	bl	800c890 <__sfp_lock_acquire>
 800c938:	4b1e      	ldr	r3, [pc, #120]	; (800c9b4 <__sfp+0x84>)
 800c93a:	681e      	ldr	r6, [r3, #0]
 800c93c:	69b3      	ldr	r3, [r6, #24]
 800c93e:	b913      	cbnz	r3, 800c946 <__sfp+0x16>
 800c940:	4630      	mov	r0, r6
 800c942:	f7ff ffbd 	bl	800c8c0 <__sinit>
 800c946:	3648      	adds	r6, #72	; 0x48
 800c948:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c94c:	3b01      	subs	r3, #1
 800c94e:	d503      	bpl.n	800c958 <__sfp+0x28>
 800c950:	6833      	ldr	r3, [r6, #0]
 800c952:	b30b      	cbz	r3, 800c998 <__sfp+0x68>
 800c954:	6836      	ldr	r6, [r6, #0]
 800c956:	e7f7      	b.n	800c948 <__sfp+0x18>
 800c958:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c95c:	b9d5      	cbnz	r5, 800c994 <__sfp+0x64>
 800c95e:	4b16      	ldr	r3, [pc, #88]	; (800c9b8 <__sfp+0x88>)
 800c960:	60e3      	str	r3, [r4, #12]
 800c962:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c966:	6665      	str	r5, [r4, #100]	; 0x64
 800c968:	f000 f847 	bl	800c9fa <__retarget_lock_init_recursive>
 800c96c:	f7ff ff96 	bl	800c89c <__sfp_lock_release>
 800c970:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c974:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c978:	6025      	str	r5, [r4, #0]
 800c97a:	61a5      	str	r5, [r4, #24]
 800c97c:	2208      	movs	r2, #8
 800c97e:	4629      	mov	r1, r5
 800c980:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c984:	f7ff f816 	bl	800b9b4 <memset>
 800c988:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c98c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c990:	4620      	mov	r0, r4
 800c992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c994:	3468      	adds	r4, #104	; 0x68
 800c996:	e7d9      	b.n	800c94c <__sfp+0x1c>
 800c998:	2104      	movs	r1, #4
 800c99a:	4638      	mov	r0, r7
 800c99c:	f7ff ff62 	bl	800c864 <__sfmoreglue>
 800c9a0:	4604      	mov	r4, r0
 800c9a2:	6030      	str	r0, [r6, #0]
 800c9a4:	2800      	cmp	r0, #0
 800c9a6:	d1d5      	bne.n	800c954 <__sfp+0x24>
 800c9a8:	f7ff ff78 	bl	800c89c <__sfp_lock_release>
 800c9ac:	230c      	movs	r3, #12
 800c9ae:	603b      	str	r3, [r7, #0]
 800c9b0:	e7ee      	b.n	800c990 <__sfp+0x60>
 800c9b2:	bf00      	nop
 800c9b4:	0800e528 	.word	0x0800e528
 800c9b8:	ffff0001 	.word	0xffff0001

0800c9bc <_fwalk_reent>:
 800c9bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9c0:	4606      	mov	r6, r0
 800c9c2:	4688      	mov	r8, r1
 800c9c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c9c8:	2700      	movs	r7, #0
 800c9ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c9ce:	f1b9 0901 	subs.w	r9, r9, #1
 800c9d2:	d505      	bpl.n	800c9e0 <_fwalk_reent+0x24>
 800c9d4:	6824      	ldr	r4, [r4, #0]
 800c9d6:	2c00      	cmp	r4, #0
 800c9d8:	d1f7      	bne.n	800c9ca <_fwalk_reent+0xe>
 800c9da:	4638      	mov	r0, r7
 800c9dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9e0:	89ab      	ldrh	r3, [r5, #12]
 800c9e2:	2b01      	cmp	r3, #1
 800c9e4:	d907      	bls.n	800c9f6 <_fwalk_reent+0x3a>
 800c9e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c9ea:	3301      	adds	r3, #1
 800c9ec:	d003      	beq.n	800c9f6 <_fwalk_reent+0x3a>
 800c9ee:	4629      	mov	r1, r5
 800c9f0:	4630      	mov	r0, r6
 800c9f2:	47c0      	blx	r8
 800c9f4:	4307      	orrs	r7, r0
 800c9f6:	3568      	adds	r5, #104	; 0x68
 800c9f8:	e7e9      	b.n	800c9ce <_fwalk_reent+0x12>

0800c9fa <__retarget_lock_init_recursive>:
 800c9fa:	4770      	bx	lr

0800c9fc <__retarget_lock_acquire_recursive>:
 800c9fc:	4770      	bx	lr

0800c9fe <__retarget_lock_release_recursive>:
 800c9fe:	4770      	bx	lr

0800ca00 <__swhatbuf_r>:
 800ca00:	b570      	push	{r4, r5, r6, lr}
 800ca02:	460e      	mov	r6, r1
 800ca04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca08:	2900      	cmp	r1, #0
 800ca0a:	b096      	sub	sp, #88	; 0x58
 800ca0c:	4614      	mov	r4, r2
 800ca0e:	461d      	mov	r5, r3
 800ca10:	da07      	bge.n	800ca22 <__swhatbuf_r+0x22>
 800ca12:	2300      	movs	r3, #0
 800ca14:	602b      	str	r3, [r5, #0]
 800ca16:	89b3      	ldrh	r3, [r6, #12]
 800ca18:	061a      	lsls	r2, r3, #24
 800ca1a:	d410      	bmi.n	800ca3e <__swhatbuf_r+0x3e>
 800ca1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca20:	e00e      	b.n	800ca40 <__swhatbuf_r+0x40>
 800ca22:	466a      	mov	r2, sp
 800ca24:	f000 f954 	bl	800ccd0 <_fstat_r>
 800ca28:	2800      	cmp	r0, #0
 800ca2a:	dbf2      	blt.n	800ca12 <__swhatbuf_r+0x12>
 800ca2c:	9a01      	ldr	r2, [sp, #4]
 800ca2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ca32:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ca36:	425a      	negs	r2, r3
 800ca38:	415a      	adcs	r2, r3
 800ca3a:	602a      	str	r2, [r5, #0]
 800ca3c:	e7ee      	b.n	800ca1c <__swhatbuf_r+0x1c>
 800ca3e:	2340      	movs	r3, #64	; 0x40
 800ca40:	2000      	movs	r0, #0
 800ca42:	6023      	str	r3, [r4, #0]
 800ca44:	b016      	add	sp, #88	; 0x58
 800ca46:	bd70      	pop	{r4, r5, r6, pc}

0800ca48 <__smakebuf_r>:
 800ca48:	898b      	ldrh	r3, [r1, #12]
 800ca4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ca4c:	079d      	lsls	r5, r3, #30
 800ca4e:	4606      	mov	r6, r0
 800ca50:	460c      	mov	r4, r1
 800ca52:	d507      	bpl.n	800ca64 <__smakebuf_r+0x1c>
 800ca54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ca58:	6023      	str	r3, [r4, #0]
 800ca5a:	6123      	str	r3, [r4, #16]
 800ca5c:	2301      	movs	r3, #1
 800ca5e:	6163      	str	r3, [r4, #20]
 800ca60:	b002      	add	sp, #8
 800ca62:	bd70      	pop	{r4, r5, r6, pc}
 800ca64:	ab01      	add	r3, sp, #4
 800ca66:	466a      	mov	r2, sp
 800ca68:	f7ff ffca 	bl	800ca00 <__swhatbuf_r>
 800ca6c:	9900      	ldr	r1, [sp, #0]
 800ca6e:	4605      	mov	r5, r0
 800ca70:	4630      	mov	r0, r6
 800ca72:	f7ff f88f 	bl	800bb94 <_malloc_r>
 800ca76:	b948      	cbnz	r0, 800ca8c <__smakebuf_r+0x44>
 800ca78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca7c:	059a      	lsls	r2, r3, #22
 800ca7e:	d4ef      	bmi.n	800ca60 <__smakebuf_r+0x18>
 800ca80:	f023 0303 	bic.w	r3, r3, #3
 800ca84:	f043 0302 	orr.w	r3, r3, #2
 800ca88:	81a3      	strh	r3, [r4, #12]
 800ca8a:	e7e3      	b.n	800ca54 <__smakebuf_r+0xc>
 800ca8c:	4b0d      	ldr	r3, [pc, #52]	; (800cac4 <__smakebuf_r+0x7c>)
 800ca8e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ca90:	89a3      	ldrh	r3, [r4, #12]
 800ca92:	6020      	str	r0, [r4, #0]
 800ca94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca98:	81a3      	strh	r3, [r4, #12]
 800ca9a:	9b00      	ldr	r3, [sp, #0]
 800ca9c:	6163      	str	r3, [r4, #20]
 800ca9e:	9b01      	ldr	r3, [sp, #4]
 800caa0:	6120      	str	r0, [r4, #16]
 800caa2:	b15b      	cbz	r3, 800cabc <__smakebuf_r+0x74>
 800caa4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800caa8:	4630      	mov	r0, r6
 800caaa:	f000 f923 	bl	800ccf4 <_isatty_r>
 800caae:	b128      	cbz	r0, 800cabc <__smakebuf_r+0x74>
 800cab0:	89a3      	ldrh	r3, [r4, #12]
 800cab2:	f023 0303 	bic.w	r3, r3, #3
 800cab6:	f043 0301 	orr.w	r3, r3, #1
 800caba:	81a3      	strh	r3, [r4, #12]
 800cabc:	89a0      	ldrh	r0, [r4, #12]
 800cabe:	4305      	orrs	r5, r0
 800cac0:	81a5      	strh	r5, [r4, #12]
 800cac2:	e7cd      	b.n	800ca60 <__smakebuf_r+0x18>
 800cac4:	0800c859 	.word	0x0800c859

0800cac8 <memcpy>:
 800cac8:	440a      	add	r2, r1
 800caca:	4291      	cmp	r1, r2
 800cacc:	f100 33ff 	add.w	r3, r0, #4294967295
 800cad0:	d100      	bne.n	800cad4 <memcpy+0xc>
 800cad2:	4770      	bx	lr
 800cad4:	b510      	push	{r4, lr}
 800cad6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cada:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cade:	4291      	cmp	r1, r2
 800cae0:	d1f9      	bne.n	800cad6 <memcpy+0xe>
 800cae2:	bd10      	pop	{r4, pc}

0800cae4 <memmove>:
 800cae4:	4288      	cmp	r0, r1
 800cae6:	b510      	push	{r4, lr}
 800cae8:	eb01 0402 	add.w	r4, r1, r2
 800caec:	d902      	bls.n	800caf4 <memmove+0x10>
 800caee:	4284      	cmp	r4, r0
 800caf0:	4623      	mov	r3, r4
 800caf2:	d807      	bhi.n	800cb04 <memmove+0x20>
 800caf4:	1e43      	subs	r3, r0, #1
 800caf6:	42a1      	cmp	r1, r4
 800caf8:	d008      	beq.n	800cb0c <memmove+0x28>
 800cafa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cafe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cb02:	e7f8      	b.n	800caf6 <memmove+0x12>
 800cb04:	4402      	add	r2, r0
 800cb06:	4601      	mov	r1, r0
 800cb08:	428a      	cmp	r2, r1
 800cb0a:	d100      	bne.n	800cb0e <memmove+0x2a>
 800cb0c:	bd10      	pop	{r4, pc}
 800cb0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cb12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cb16:	e7f7      	b.n	800cb08 <memmove+0x24>

0800cb18 <__malloc_lock>:
 800cb18:	4801      	ldr	r0, [pc, #4]	; (800cb20 <__malloc_lock+0x8>)
 800cb1a:	f7ff bf6f 	b.w	800c9fc <__retarget_lock_acquire_recursive>
 800cb1e:	bf00      	nop
 800cb20:	20001c9c 	.word	0x20001c9c

0800cb24 <__malloc_unlock>:
 800cb24:	4801      	ldr	r0, [pc, #4]	; (800cb2c <__malloc_unlock+0x8>)
 800cb26:	f7ff bf6a 	b.w	800c9fe <__retarget_lock_release_recursive>
 800cb2a:	bf00      	nop
 800cb2c:	20001c9c 	.word	0x20001c9c

0800cb30 <_realloc_r>:
 800cb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb32:	4607      	mov	r7, r0
 800cb34:	4614      	mov	r4, r2
 800cb36:	460e      	mov	r6, r1
 800cb38:	b921      	cbnz	r1, 800cb44 <_realloc_r+0x14>
 800cb3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cb3e:	4611      	mov	r1, r2
 800cb40:	f7ff b828 	b.w	800bb94 <_malloc_r>
 800cb44:	b922      	cbnz	r2, 800cb50 <_realloc_r+0x20>
 800cb46:	f7fe ffd5 	bl	800baf4 <_free_r>
 800cb4a:	4625      	mov	r5, r4
 800cb4c:	4628      	mov	r0, r5
 800cb4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb50:	f000 f8f2 	bl	800cd38 <_malloc_usable_size_r>
 800cb54:	42a0      	cmp	r0, r4
 800cb56:	d20f      	bcs.n	800cb78 <_realloc_r+0x48>
 800cb58:	4621      	mov	r1, r4
 800cb5a:	4638      	mov	r0, r7
 800cb5c:	f7ff f81a 	bl	800bb94 <_malloc_r>
 800cb60:	4605      	mov	r5, r0
 800cb62:	2800      	cmp	r0, #0
 800cb64:	d0f2      	beq.n	800cb4c <_realloc_r+0x1c>
 800cb66:	4631      	mov	r1, r6
 800cb68:	4622      	mov	r2, r4
 800cb6a:	f7ff ffad 	bl	800cac8 <memcpy>
 800cb6e:	4631      	mov	r1, r6
 800cb70:	4638      	mov	r0, r7
 800cb72:	f7fe ffbf 	bl	800baf4 <_free_r>
 800cb76:	e7e9      	b.n	800cb4c <_realloc_r+0x1c>
 800cb78:	4635      	mov	r5, r6
 800cb7a:	e7e7      	b.n	800cb4c <_realloc_r+0x1c>

0800cb7c <_raise_r>:
 800cb7c:	291f      	cmp	r1, #31
 800cb7e:	b538      	push	{r3, r4, r5, lr}
 800cb80:	4604      	mov	r4, r0
 800cb82:	460d      	mov	r5, r1
 800cb84:	d904      	bls.n	800cb90 <_raise_r+0x14>
 800cb86:	2316      	movs	r3, #22
 800cb88:	6003      	str	r3, [r0, #0]
 800cb8a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb8e:	bd38      	pop	{r3, r4, r5, pc}
 800cb90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cb92:	b112      	cbz	r2, 800cb9a <_raise_r+0x1e>
 800cb94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cb98:	b94b      	cbnz	r3, 800cbae <_raise_r+0x32>
 800cb9a:	4620      	mov	r0, r4
 800cb9c:	f000 f830 	bl	800cc00 <_getpid_r>
 800cba0:	462a      	mov	r2, r5
 800cba2:	4601      	mov	r1, r0
 800cba4:	4620      	mov	r0, r4
 800cba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cbaa:	f000 b817 	b.w	800cbdc <_kill_r>
 800cbae:	2b01      	cmp	r3, #1
 800cbb0:	d00a      	beq.n	800cbc8 <_raise_r+0x4c>
 800cbb2:	1c59      	adds	r1, r3, #1
 800cbb4:	d103      	bne.n	800cbbe <_raise_r+0x42>
 800cbb6:	2316      	movs	r3, #22
 800cbb8:	6003      	str	r3, [r0, #0]
 800cbba:	2001      	movs	r0, #1
 800cbbc:	e7e7      	b.n	800cb8e <_raise_r+0x12>
 800cbbe:	2400      	movs	r4, #0
 800cbc0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cbc4:	4628      	mov	r0, r5
 800cbc6:	4798      	blx	r3
 800cbc8:	2000      	movs	r0, #0
 800cbca:	e7e0      	b.n	800cb8e <_raise_r+0x12>

0800cbcc <raise>:
 800cbcc:	4b02      	ldr	r3, [pc, #8]	; (800cbd8 <raise+0xc>)
 800cbce:	4601      	mov	r1, r0
 800cbd0:	6818      	ldr	r0, [r3, #0]
 800cbd2:	f7ff bfd3 	b.w	800cb7c <_raise_r>
 800cbd6:	bf00      	nop
 800cbd8:	20000258 	.word	0x20000258

0800cbdc <_kill_r>:
 800cbdc:	b538      	push	{r3, r4, r5, lr}
 800cbde:	4d07      	ldr	r5, [pc, #28]	; (800cbfc <_kill_r+0x20>)
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	4604      	mov	r4, r0
 800cbe4:	4608      	mov	r0, r1
 800cbe6:	4611      	mov	r1, r2
 800cbe8:	602b      	str	r3, [r5, #0]
 800cbea:	f7f8 f937 	bl	8004e5c <_kill>
 800cbee:	1c43      	adds	r3, r0, #1
 800cbf0:	d102      	bne.n	800cbf8 <_kill_r+0x1c>
 800cbf2:	682b      	ldr	r3, [r5, #0]
 800cbf4:	b103      	cbz	r3, 800cbf8 <_kill_r+0x1c>
 800cbf6:	6023      	str	r3, [r4, #0]
 800cbf8:	bd38      	pop	{r3, r4, r5, pc}
 800cbfa:	bf00      	nop
 800cbfc:	20001ca4 	.word	0x20001ca4

0800cc00 <_getpid_r>:
 800cc00:	f7f8 b924 	b.w	8004e4c <_getpid>

0800cc04 <__sread>:
 800cc04:	b510      	push	{r4, lr}
 800cc06:	460c      	mov	r4, r1
 800cc08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc0c:	f000 f89c 	bl	800cd48 <_read_r>
 800cc10:	2800      	cmp	r0, #0
 800cc12:	bfab      	itete	ge
 800cc14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cc16:	89a3      	ldrhlt	r3, [r4, #12]
 800cc18:	181b      	addge	r3, r3, r0
 800cc1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cc1e:	bfac      	ite	ge
 800cc20:	6563      	strge	r3, [r4, #84]	; 0x54
 800cc22:	81a3      	strhlt	r3, [r4, #12]
 800cc24:	bd10      	pop	{r4, pc}

0800cc26 <__swrite>:
 800cc26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc2a:	461f      	mov	r7, r3
 800cc2c:	898b      	ldrh	r3, [r1, #12]
 800cc2e:	05db      	lsls	r3, r3, #23
 800cc30:	4605      	mov	r5, r0
 800cc32:	460c      	mov	r4, r1
 800cc34:	4616      	mov	r6, r2
 800cc36:	d505      	bpl.n	800cc44 <__swrite+0x1e>
 800cc38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc3c:	2302      	movs	r3, #2
 800cc3e:	2200      	movs	r2, #0
 800cc40:	f000 f868 	bl	800cd14 <_lseek_r>
 800cc44:	89a3      	ldrh	r3, [r4, #12]
 800cc46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cc4e:	81a3      	strh	r3, [r4, #12]
 800cc50:	4632      	mov	r2, r6
 800cc52:	463b      	mov	r3, r7
 800cc54:	4628      	mov	r0, r5
 800cc56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc5a:	f000 b817 	b.w	800cc8c <_write_r>

0800cc5e <__sseek>:
 800cc5e:	b510      	push	{r4, lr}
 800cc60:	460c      	mov	r4, r1
 800cc62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc66:	f000 f855 	bl	800cd14 <_lseek_r>
 800cc6a:	1c43      	adds	r3, r0, #1
 800cc6c:	89a3      	ldrh	r3, [r4, #12]
 800cc6e:	bf15      	itete	ne
 800cc70:	6560      	strne	r0, [r4, #84]	; 0x54
 800cc72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cc76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cc7a:	81a3      	strheq	r3, [r4, #12]
 800cc7c:	bf18      	it	ne
 800cc7e:	81a3      	strhne	r3, [r4, #12]
 800cc80:	bd10      	pop	{r4, pc}

0800cc82 <__sclose>:
 800cc82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc86:	f000 b813 	b.w	800ccb0 <_close_r>
	...

0800cc8c <_write_r>:
 800cc8c:	b538      	push	{r3, r4, r5, lr}
 800cc8e:	4d07      	ldr	r5, [pc, #28]	; (800ccac <_write_r+0x20>)
 800cc90:	4604      	mov	r4, r0
 800cc92:	4608      	mov	r0, r1
 800cc94:	4611      	mov	r1, r2
 800cc96:	2200      	movs	r2, #0
 800cc98:	602a      	str	r2, [r5, #0]
 800cc9a:	461a      	mov	r2, r3
 800cc9c:	f7f8 f915 	bl	8004eca <_write>
 800cca0:	1c43      	adds	r3, r0, #1
 800cca2:	d102      	bne.n	800ccaa <_write_r+0x1e>
 800cca4:	682b      	ldr	r3, [r5, #0]
 800cca6:	b103      	cbz	r3, 800ccaa <_write_r+0x1e>
 800cca8:	6023      	str	r3, [r4, #0]
 800ccaa:	bd38      	pop	{r3, r4, r5, pc}
 800ccac:	20001ca4 	.word	0x20001ca4

0800ccb0 <_close_r>:
 800ccb0:	b538      	push	{r3, r4, r5, lr}
 800ccb2:	4d06      	ldr	r5, [pc, #24]	; (800cccc <_close_r+0x1c>)
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	4604      	mov	r4, r0
 800ccb8:	4608      	mov	r0, r1
 800ccba:	602b      	str	r3, [r5, #0]
 800ccbc:	f7f8 f921 	bl	8004f02 <_close>
 800ccc0:	1c43      	adds	r3, r0, #1
 800ccc2:	d102      	bne.n	800ccca <_close_r+0x1a>
 800ccc4:	682b      	ldr	r3, [r5, #0]
 800ccc6:	b103      	cbz	r3, 800ccca <_close_r+0x1a>
 800ccc8:	6023      	str	r3, [r4, #0]
 800ccca:	bd38      	pop	{r3, r4, r5, pc}
 800cccc:	20001ca4 	.word	0x20001ca4

0800ccd0 <_fstat_r>:
 800ccd0:	b538      	push	{r3, r4, r5, lr}
 800ccd2:	4d07      	ldr	r5, [pc, #28]	; (800ccf0 <_fstat_r+0x20>)
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	4604      	mov	r4, r0
 800ccd8:	4608      	mov	r0, r1
 800ccda:	4611      	mov	r1, r2
 800ccdc:	602b      	str	r3, [r5, #0]
 800ccde:	f7f8 f91c 	bl	8004f1a <_fstat>
 800cce2:	1c43      	adds	r3, r0, #1
 800cce4:	d102      	bne.n	800ccec <_fstat_r+0x1c>
 800cce6:	682b      	ldr	r3, [r5, #0]
 800cce8:	b103      	cbz	r3, 800ccec <_fstat_r+0x1c>
 800ccea:	6023      	str	r3, [r4, #0]
 800ccec:	bd38      	pop	{r3, r4, r5, pc}
 800ccee:	bf00      	nop
 800ccf0:	20001ca4 	.word	0x20001ca4

0800ccf4 <_isatty_r>:
 800ccf4:	b538      	push	{r3, r4, r5, lr}
 800ccf6:	4d06      	ldr	r5, [pc, #24]	; (800cd10 <_isatty_r+0x1c>)
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	4604      	mov	r4, r0
 800ccfc:	4608      	mov	r0, r1
 800ccfe:	602b      	str	r3, [r5, #0]
 800cd00:	f7f8 f91b 	bl	8004f3a <_isatty>
 800cd04:	1c43      	adds	r3, r0, #1
 800cd06:	d102      	bne.n	800cd0e <_isatty_r+0x1a>
 800cd08:	682b      	ldr	r3, [r5, #0]
 800cd0a:	b103      	cbz	r3, 800cd0e <_isatty_r+0x1a>
 800cd0c:	6023      	str	r3, [r4, #0]
 800cd0e:	bd38      	pop	{r3, r4, r5, pc}
 800cd10:	20001ca4 	.word	0x20001ca4

0800cd14 <_lseek_r>:
 800cd14:	b538      	push	{r3, r4, r5, lr}
 800cd16:	4d07      	ldr	r5, [pc, #28]	; (800cd34 <_lseek_r+0x20>)
 800cd18:	4604      	mov	r4, r0
 800cd1a:	4608      	mov	r0, r1
 800cd1c:	4611      	mov	r1, r2
 800cd1e:	2200      	movs	r2, #0
 800cd20:	602a      	str	r2, [r5, #0]
 800cd22:	461a      	mov	r2, r3
 800cd24:	f7f8 f914 	bl	8004f50 <_lseek>
 800cd28:	1c43      	adds	r3, r0, #1
 800cd2a:	d102      	bne.n	800cd32 <_lseek_r+0x1e>
 800cd2c:	682b      	ldr	r3, [r5, #0]
 800cd2e:	b103      	cbz	r3, 800cd32 <_lseek_r+0x1e>
 800cd30:	6023      	str	r3, [r4, #0]
 800cd32:	bd38      	pop	{r3, r4, r5, pc}
 800cd34:	20001ca4 	.word	0x20001ca4

0800cd38 <_malloc_usable_size_r>:
 800cd38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd3c:	1f18      	subs	r0, r3, #4
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	bfbc      	itt	lt
 800cd42:	580b      	ldrlt	r3, [r1, r0]
 800cd44:	18c0      	addlt	r0, r0, r3
 800cd46:	4770      	bx	lr

0800cd48 <_read_r>:
 800cd48:	b538      	push	{r3, r4, r5, lr}
 800cd4a:	4d07      	ldr	r5, [pc, #28]	; (800cd68 <_read_r+0x20>)
 800cd4c:	4604      	mov	r4, r0
 800cd4e:	4608      	mov	r0, r1
 800cd50:	4611      	mov	r1, r2
 800cd52:	2200      	movs	r2, #0
 800cd54:	602a      	str	r2, [r5, #0]
 800cd56:	461a      	mov	r2, r3
 800cd58:	f7f8 f89a 	bl	8004e90 <_read>
 800cd5c:	1c43      	adds	r3, r0, #1
 800cd5e:	d102      	bne.n	800cd66 <_read_r+0x1e>
 800cd60:	682b      	ldr	r3, [r5, #0]
 800cd62:	b103      	cbz	r3, 800cd66 <_read_r+0x1e>
 800cd64:	6023      	str	r3, [r4, #0]
 800cd66:	bd38      	pop	{r3, r4, r5, pc}
 800cd68:	20001ca4 	.word	0x20001ca4

0800cd6c <_init>:
 800cd6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd6e:	bf00      	nop
 800cd70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd72:	bc08      	pop	{r3}
 800cd74:	469e      	mov	lr, r3
 800cd76:	4770      	bx	lr

0800cd78 <_fini>:
 800cd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd7a:	bf00      	nop
 800cd7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd7e:	bc08      	pop	{r3}
 800cd80:	469e      	mov	lr, r3
 800cd82:	4770      	bx	lr
