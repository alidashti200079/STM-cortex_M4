
p4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000602c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080061b4  080061b4  000161b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006208  08006208  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08006208  08006208  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006208  08006208  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006208  08006208  00016208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800620c  0800620c  0001620c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006210  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00000578  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000058c  2000058c  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   000160f8  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002976  00000000  00000000  0003613c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001340  00000000  00000000  00038ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001250  00000000  00000000  00039df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001eaee  00000000  00000000  0003b048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000174ac  00000000  00000000  00059b36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bda77  00000000  00000000  00070fe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012ea59  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000052e4  00000000  00000000  0012eaac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800619c 	.word	0x0800619c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	0800619c 	.word	0x0800619c

080001c8 <initForSevenSeg>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void initForSevenSeg() {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0

	__HAL_RCC_GPIOC_CLK_ENABLE();
 80001ce:	4b0e      	ldr	r3, [pc, #56]	; (8000208 <initForSevenSeg+0x40>)
 80001d0:	695b      	ldr	r3, [r3, #20]
 80001d2:	4a0d      	ldr	r2, [pc, #52]	; (8000208 <initForSevenSeg+0x40>)
 80001d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80001d8:	6153      	str	r3, [r2, #20]
 80001da:	4b0b      	ldr	r3, [pc, #44]	; (8000208 <initForSevenSeg+0x40>)
 80001dc:	695b      	ldr	r3, [r3, #20]
 80001de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80001e2:	603b      	str	r3, [r7, #0]
 80001e4:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef temp;
	temp.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 ;
 80001e6:	f240 13ff 	movw	r3, #511	; 0x1ff
 80001ea:	607b      	str	r3, [r7, #4]
	temp.Mode = GPIO_MODE_OUTPUT_PP;
 80001ec:	2301      	movs	r3, #1
 80001ee:	60bb      	str	r3, [r7, #8]
	temp.Speed = GPIO_SPEED_FREQ_HIGH;
 80001f0:	2303      	movs	r3, #3
 80001f2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &temp);
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	4619      	mov	r1, r3
 80001f8:	4804      	ldr	r0, [pc, #16]	; (800020c <initForSevenSeg+0x44>)
 80001fa:	f002 fddb 	bl	8002db4 <HAL_GPIO_Init>
}
 80001fe:	bf00      	nop
 8000200:	3718      	adds	r7, #24
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	40021000 	.word	0x40021000
 800020c:	48000800 	.word	0x48000800

08000210 <numberToBCD0>:

void numberToBCD0(int number)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b086      	sub	sp, #24
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
	int x1 = number&1;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f003 0301 	and.w	r3, r3, #1
 800021e:	617b      	str	r3, [r7, #20]
	int x2 = number&2;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	f003 0302 	and.w	r3, r3, #2
 8000226:	613b      	str	r3, [r7, #16]
	int x3 = number&4;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f003 0304 	and.w	r3, r3, #4
 800022e:	60fb      	str	r3, [r7, #12]
	int x4 = number&8;
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	f003 0308 	and.w	r3, r3, #8
 8000236:	60bb      	str	r3, [r7, #8]

	if (x1 > 0) x1 = 1;
 8000238:	697b      	ldr	r3, [r7, #20]
 800023a:	2b00      	cmp	r3, #0
 800023c:	dd01      	ble.n	8000242 <numberToBCD0+0x32>
 800023e:	2301      	movs	r3, #1
 8000240:	617b      	str	r3, [r7, #20]
	if (x2 > 0) x2 = 1;
 8000242:	693b      	ldr	r3, [r7, #16]
 8000244:	2b00      	cmp	r3, #0
 8000246:	dd01      	ble.n	800024c <numberToBCD0+0x3c>
 8000248:	2301      	movs	r3, #1
 800024a:	613b      	str	r3, [r7, #16]
	if (x3 > 0) x3 = 1;
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	2b00      	cmp	r3, #0
 8000250:	dd01      	ble.n	8000256 <numberToBCD0+0x46>
 8000252:	2301      	movs	r3, #1
 8000254:	60fb      	str	r3, [r7, #12]
	if (x4 > 0) x4 = 1;
 8000256:	68bb      	ldr	r3, [r7, #8]
 8000258:	2b00      	cmp	r3, #0
 800025a:	dd01      	ble.n	8000260 <numberToBCD0+0x50>
 800025c:	2301      	movs	r3, #1
 800025e:	60bb      	str	r3, [r7, #8]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, x1);
 8000260:	697b      	ldr	r3, [r7, #20]
 8000262:	b2db      	uxtb	r3, r3
 8000264:	461a      	mov	r2, r3
 8000266:	2101      	movs	r1, #1
 8000268:	480d      	ldr	r0, [pc, #52]	; (80002a0 <numberToBCD0+0x90>)
 800026a:	f002 ff1d 	bl	80030a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, x2);
 800026e:	693b      	ldr	r3, [r7, #16]
 8000270:	b2db      	uxtb	r3, r3
 8000272:	461a      	mov	r2, r3
 8000274:	2102      	movs	r1, #2
 8000276:	480a      	ldr	r0, [pc, #40]	; (80002a0 <numberToBCD0+0x90>)
 8000278:	f002 ff16 	bl	80030a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, x3);
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	b2db      	uxtb	r3, r3
 8000280:	461a      	mov	r2, r3
 8000282:	2104      	movs	r1, #4
 8000284:	4806      	ldr	r0, [pc, #24]	; (80002a0 <numberToBCD0+0x90>)
 8000286:	f002 ff0f 	bl	80030a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, x4);
 800028a:	68bb      	ldr	r3, [r7, #8]
 800028c:	b2db      	uxtb	r3, r3
 800028e:	461a      	mov	r2, r3
 8000290:	2108      	movs	r1, #8
 8000292:	4803      	ldr	r0, [pc, #12]	; (80002a0 <numberToBCD0+0x90>)
 8000294:	f002 ff08 	bl	80030a8 <HAL_GPIO_WritePin>

}
 8000298:	bf00      	nop
 800029a:	3718      	adds	r7, #24
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	48000800 	.word	0x48000800

080002a4 <show>:

int x = 0;
void show(int num1, int num2) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
 80002ac:	6039      	str	r1, [r7, #0]

	x++;
 80002ae:	4b3e      	ldr	r3, [pc, #248]	; (80003a8 <show+0x104>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	3301      	adds	r3, #1
 80002b4:	4a3c      	ldr	r2, [pc, #240]	; (80003a8 <show+0x104>)
 80002b6:	6013      	str	r3, [r2, #0]
	if( x == 100 ) {
 80002b8:	4b3b      	ldr	r3, [pc, #236]	; (80003a8 <show+0x104>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	2b64      	cmp	r3, #100	; 0x64
 80002be:	d119      	bne.n	80002f4 <show+0x50>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 , 1);
 80002c0:	2201      	movs	r2, #1
 80002c2:	21f0      	movs	r1, #240	; 0xf0
 80002c4:	4839      	ldr	r0, [pc, #228]	; (80003ac <show+0x108>)
 80002c6:	f002 feef 	bl	80030a8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7 | GPIO_PIN_8, 0);
 80002ca:	2200      	movs	r2, #0
 80002cc:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80002d0:	4836      	ldr	r0, [pc, #216]	; (80003ac <show+0x108>)
 80002d2:	f002 fee9 	bl	80030a8 <HAL_GPIO_WritePin>
		numberToBCD0( num1  % 10 );
 80002d6:	687a      	ldr	r2, [r7, #4]
 80002d8:	4b35      	ldr	r3, [pc, #212]	; (80003b0 <show+0x10c>)
 80002da:	fb83 1302 	smull	r1, r3, r3, r2
 80002de:	1099      	asrs	r1, r3, #2
 80002e0:	17d3      	asrs	r3, r2, #31
 80002e2:	1ac9      	subs	r1, r1, r3
 80002e4:	460b      	mov	r3, r1
 80002e6:	009b      	lsls	r3, r3, #2
 80002e8:	440b      	add	r3, r1
 80002ea:	005b      	lsls	r3, r3, #1
 80002ec:	1ad1      	subs	r1, r2, r3
 80002ee:	4608      	mov	r0, r1
 80002f0:	f7ff ff8e 	bl	8000210 <numberToBCD0>
	}

	if ( x == 200 ) {
 80002f4:	4b2c      	ldr	r3, [pc, #176]	; (80003a8 <show+0x104>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	2bc8      	cmp	r3, #200	; 0xc8
 80002fa:	d114      	bne.n	8000326 <show+0x82>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 |GPIO_PIN_7, 1);
 80002fc:	2201      	movs	r2, #1
 80002fe:	21f0      	movs	r1, #240	; 0xf0
 8000300:	482a      	ldr	r0, [pc, #168]	; (80003ac <show+0x108>)
 8000302:	f002 fed1 	bl	80030a8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6 | GPIO_PIN_8, 0);
 8000306:	2200      	movs	r2, #0
 8000308:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800030c:	4827      	ldr	r0, [pc, #156]	; (80003ac <show+0x108>)
 800030e:	f002 fecb 	bl	80030a8 <HAL_GPIO_WritePin>
		numberToBCD0( num1 / 10 );
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4a26      	ldr	r2, [pc, #152]	; (80003b0 <show+0x10c>)
 8000316:	fb82 1203 	smull	r1, r2, r2, r3
 800031a:	1092      	asrs	r2, r2, #2
 800031c:	17db      	asrs	r3, r3, #31
 800031e:	1ad3      	subs	r3, r2, r3
 8000320:	4618      	mov	r0, r3
 8000322:	f7ff ff75 	bl	8000210 <numberToBCD0>
	}

	if ( x == 300 ) {
 8000326:	4b20      	ldr	r3, [pc, #128]	; (80003a8 <show+0x104>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800032e:	d119      	bne.n	8000364 <show+0xc0>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, 1);
 8000330:	2201      	movs	r2, #1
 8000332:	21f0      	movs	r1, #240	; 0xf0
 8000334:	481d      	ldr	r0, [pc, #116]	; (80003ac <show+0x108>)
 8000336:	f002 feb7 	bl	80030a8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5 | GPIO_PIN_8, 0);
 800033a:	2200      	movs	r2, #0
 800033c:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000340:	481a      	ldr	r0, [pc, #104]	; (80003ac <show+0x108>)
 8000342:	f002 feb1 	bl	80030a8 <HAL_GPIO_WritePin>
		numberToBCD0( num2  % 10 );
 8000346:	683a      	ldr	r2, [r7, #0]
 8000348:	4b19      	ldr	r3, [pc, #100]	; (80003b0 <show+0x10c>)
 800034a:	fb83 1302 	smull	r1, r3, r3, r2
 800034e:	1099      	asrs	r1, r3, #2
 8000350:	17d3      	asrs	r3, r2, #31
 8000352:	1ac9      	subs	r1, r1, r3
 8000354:	460b      	mov	r3, r1
 8000356:	009b      	lsls	r3, r3, #2
 8000358:	440b      	add	r3, r1
 800035a:	005b      	lsls	r3, r3, #1
 800035c:	1ad1      	subs	r1, r2, r3
 800035e:	4608      	mov	r0, r1
 8000360:	f7ff ff56 	bl	8000210 <numberToBCD0>
	}

	if ( x == 400 ) {
 8000364:	4b10      	ldr	r3, [pc, #64]	; (80003a8 <show+0x104>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800036c:	d117      	bne.n	800039e <show+0xfa>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, 1);
 800036e:	2201      	movs	r2, #1
 8000370:	21f0      	movs	r1, #240	; 0xf0
 8000372:	480e      	ldr	r0, [pc, #56]	; (80003ac <show+0x108>)
 8000374:	f002 fe98 	bl	80030a8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4 | GPIO_PIN_8, 0);
 8000378:	2200      	movs	r2, #0
 800037a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800037e:	480b      	ldr	r0, [pc, #44]	; (80003ac <show+0x108>)
 8000380:	f002 fe92 	bl	80030a8 <HAL_GPIO_WritePin>
		numberToBCD0( num2 / 10 );
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	4a0a      	ldr	r2, [pc, #40]	; (80003b0 <show+0x10c>)
 8000388:	fb82 1203 	smull	r1, r2, r2, r3
 800038c:	1092      	asrs	r2, r2, #2
 800038e:	17db      	asrs	r3, r3, #31
 8000390:	1ad3      	subs	r3, r2, r3
 8000392:	4618      	mov	r0, r3
 8000394:	f7ff ff3c 	bl	8000210 <numberToBCD0>
		x=0;
 8000398:	4b03      	ldr	r3, [pc, #12]	; (80003a8 <show+0x104>)
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
	}
}
 800039e:	bf00      	nop
 80003a0:	3708      	adds	r7, #8
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	20000030 	.word	0x20000030
 80003ac:	48000800 	.word	0x48000800
 80003b0:	66666667 	.word	0x66666667

080003b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003b8:	f001 f838 	bl	800142c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003bc:	f000 f82a 	bl	8000414 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c0:	f000 fb24 	bl	8000a0c <MX_GPIO_Init>
  MX_I2C1_Init();
 80003c4:	f000 f96e 	bl	80006a4 <MX_I2C1_Init>
  MX_SPI1_Init();
 80003c8:	f000 f9ac 	bl	8000724 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80003cc:	f000 fafc 	bl	80009c8 <MX_USB_PCD_Init>
  MX_ADC1_Init();
 80003d0:	f000 f888 	bl	80004e4 <MX_ADC1_Init>
  MX_TIM2_Init();
 80003d4:	f000 f9e4 	bl	80007a0 <MX_TIM2_Init>
  MX_ADC3_Init();
 80003d8:	f000 f8f4 	bl	80005c4 <MX_ADC3_Init>
  MX_TIM3_Init();
 80003dc:	f000 fa56 	bl	800088c <MX_TIM3_Init>
  MX_TIM4_Init();
 80003e0:	f000 faa2 	bl	8000928 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  	initForSevenSeg();
 80003e4:	f7ff fef0 	bl	80001c8 <initForSevenSeg>

  	HAL_TIM_Base_Start_IT(&htim4);
 80003e8:	4806      	ldr	r0, [pc, #24]	; (8000404 <main+0x50>)
 80003ea:	f004 fc19 	bl	8004c20 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim3);
 80003ee:	4806      	ldr	r0, [pc, #24]	; (8000408 <main+0x54>)
 80003f0:	f004 fc16 	bl	8004c20 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_IT(&hadc1);
 80003f4:	4805      	ldr	r0, [pc, #20]	; (800040c <main+0x58>)
 80003f6:	f001 faa1 	bl	800193c <HAL_ADC_Start_IT>
	HAL_ADC_Start_IT(&hadc3);
 80003fa:	4805      	ldr	r0, [pc, #20]	; (8000410 <main+0x5c>)
 80003fc:	f001 fa9e 	bl	800193c <HAL_ADC_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000400:	e7fe      	b.n	8000400 <main+0x4c>
 8000402:	bf00      	nop
 8000404:	20000054 	.word	0x20000054
 8000408:	200000ec 	.word	0x200000ec
 800040c:	20000138 	.word	0x20000138
 8000410:	20000188 	.word	0x20000188

08000414 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b09e      	sub	sp, #120	; 0x78
 8000418:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800041a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800041e:	2228      	movs	r2, #40	; 0x28
 8000420:	2100      	movs	r1, #0
 8000422:	4618      	mov	r0, r3
 8000424:	f005 feb2 	bl	800618c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000428:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
 8000430:	605a      	str	r2, [r3, #4]
 8000432:	609a      	str	r2, [r3, #8]
 8000434:	60da      	str	r2, [r3, #12]
 8000436:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000438:	463b      	mov	r3, r7
 800043a:	223c      	movs	r2, #60	; 0x3c
 800043c:	2100      	movs	r1, #0
 800043e:	4618      	mov	r0, r3
 8000440:	f005 fea4 	bl	800618c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000444:	2303      	movs	r3, #3
 8000446:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000448:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800044c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800044e:	2300      	movs	r3, #0
 8000450:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000452:	2301      	movs	r3, #1
 8000454:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000456:	2310      	movs	r3, #16
 8000458:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800045a:	2302      	movs	r3, #2
 800045c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800045e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000462:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000464:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000468:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800046a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800046e:	4618      	mov	r0, r3
 8000470:	f003 f836 	bl	80034e0 <HAL_RCC_OscConfig>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800047a:	f000 fb45 	bl	8000b08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800047e:	230f      	movs	r3, #15
 8000480:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000482:	2302      	movs	r3, #2
 8000484:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000486:	2300      	movs	r3, #0
 8000488:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800048a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800048e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000490:	2300      	movs	r3, #0
 8000492:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000494:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000498:	2101      	movs	r1, #1
 800049a:	4618      	mov	r0, r3
 800049c:	f003 ff28 	bl	80042f0 <HAL_RCC_ClockConfig>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80004a6:	f000 fb2f 	bl	8000b08 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 80004aa:	4b0d      	ldr	r3, [pc, #52]	; (80004e0 <SystemClock_Config+0xcc>)
 80004ac:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80004ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004b2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80004b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004b8:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80004ba:	2300      	movs	r3, #0
 80004bc:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80004be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80004c2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004c4:	463b      	mov	r3, r7
 80004c6:	4618      	mov	r0, r3
 80004c8:	f004 f8f8 	bl	80046bc <HAL_RCCEx_PeriphCLKConfig>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80004d2:	f000 fb19 	bl	8000b08 <Error_Handler>
  }
}
 80004d6:	bf00      	nop
 80004d8:	3778      	adds	r7, #120	; 0x78
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	000201a0 	.word	0x000201a0

080004e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b08a      	sub	sp, #40	; 0x28
 80004e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80004ea:	f107 031c 	add.w	r3, r7, #28
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
 80004f2:	605a      	str	r2, [r3, #4]
 80004f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	605a      	str	r2, [r3, #4]
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	60da      	str	r2, [r3, #12]
 8000502:	611a      	str	r2, [r3, #16]
 8000504:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000506:	4b2e      	ldr	r3, [pc, #184]	; (80005c0 <MX_ADC1_Init+0xdc>)
 8000508:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800050c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800050e:	4b2c      	ldr	r3, [pc, #176]	; (80005c0 <MX_ADC1_Init+0xdc>)
 8000510:	2200      	movs	r2, #0
 8000512:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000514:	4b2a      	ldr	r3, [pc, #168]	; (80005c0 <MX_ADC1_Init+0xdc>)
 8000516:	2200      	movs	r2, #0
 8000518:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800051a:	4b29      	ldr	r3, [pc, #164]	; (80005c0 <MX_ADC1_Init+0xdc>)
 800051c:	2200      	movs	r2, #0
 800051e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000520:	4b27      	ldr	r3, [pc, #156]	; (80005c0 <MX_ADC1_Init+0xdc>)
 8000522:	2200      	movs	r2, #0
 8000524:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000526:	4b26      	ldr	r3, [pc, #152]	; (80005c0 <MX_ADC1_Init+0xdc>)
 8000528:	2200      	movs	r2, #0
 800052a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800052e:	4b24      	ldr	r3, [pc, #144]	; (80005c0 <MX_ADC1_Init+0xdc>)
 8000530:	2200      	movs	r2, #0
 8000532:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000534:	4b22      	ldr	r3, [pc, #136]	; (80005c0 <MX_ADC1_Init+0xdc>)
 8000536:	2201      	movs	r2, #1
 8000538:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800053a:	4b21      	ldr	r3, [pc, #132]	; (80005c0 <MX_ADC1_Init+0xdc>)
 800053c:	2200      	movs	r2, #0
 800053e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000540:	4b1f      	ldr	r3, [pc, #124]	; (80005c0 <MX_ADC1_Init+0xdc>)
 8000542:	2201      	movs	r2, #1
 8000544:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000546:	4b1e      	ldr	r3, [pc, #120]	; (80005c0 <MX_ADC1_Init+0xdc>)
 8000548:	2200      	movs	r2, #0
 800054a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800054e:	4b1c      	ldr	r3, [pc, #112]	; (80005c0 <MX_ADC1_Init+0xdc>)
 8000550:	2204      	movs	r2, #4
 8000552:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000554:	4b1a      	ldr	r3, [pc, #104]	; (80005c0 <MX_ADC1_Init+0xdc>)
 8000556:	2200      	movs	r2, #0
 8000558:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800055a:	4b19      	ldr	r3, [pc, #100]	; (80005c0 <MX_ADC1_Init+0xdc>)
 800055c:	2200      	movs	r2, #0
 800055e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000560:	4817      	ldr	r0, [pc, #92]	; (80005c0 <MX_ADC1_Init+0xdc>)
 8000562:	f001 f80b 	bl	800157c <HAL_ADC_Init>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800056c:	f000 facc 	bl	8000b08 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000570:	2300      	movs	r3, #0
 8000572:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000574:	f107 031c 	add.w	r3, r7, #28
 8000578:	4619      	mov	r1, r3
 800057a:	4811      	ldr	r0, [pc, #68]	; (80005c0 <MX_ADC1_Init+0xdc>)
 800057c:	f002 f94c 	bl	8002818 <HAL_ADCEx_MultiModeConfigChannel>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000586:	f000 fabf 	bl	8000b08 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800058a:	2302      	movs	r3, #2
 800058c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800058e:	2301      	movs	r3, #1
 8000590:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000592:	2300      	movs	r3, #0
 8000594:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000596:	2307      	movs	r3, #7
 8000598:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	4619      	mov	r1, r3
 80005a6:	4806      	ldr	r0, [pc, #24]	; (80005c0 <MX_ADC1_Init+0xdc>)
 80005a8:	f001 fe4a 	bl	8002240 <HAL_ADC_ConfigChannel>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80005b2:	f000 faa9 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005b6:	bf00      	nop
 80005b8:	3728      	adds	r7, #40	; 0x28
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000138 	.word	0x20000138

080005c4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08a      	sub	sp, #40	; 0x28
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ca:	f107 031c 	add.w	r3, r7, #28
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]
 80005e4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 80005e6:	4b2d      	ldr	r3, [pc, #180]	; (800069c <MX_ADC3_Init+0xd8>)
 80005e8:	4a2d      	ldr	r2, [pc, #180]	; (80006a0 <MX_ADC3_Init+0xdc>)
 80005ea:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005ec:	4b2b      	ldr	r3, [pc, #172]	; (800069c <MX_ADC3_Init+0xd8>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80005f2:	4b2a      	ldr	r3, [pc, #168]	; (800069c <MX_ADC3_Init+0xd8>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005f8:	4b28      	ldr	r3, [pc, #160]	; (800069c <MX_ADC3_Init+0xd8>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80005fe:	4b27      	ldr	r3, [pc, #156]	; (800069c <MX_ADC3_Init+0xd8>)
 8000600:	2200      	movs	r2, #0
 8000602:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000604:	4b25      	ldr	r3, [pc, #148]	; (800069c <MX_ADC3_Init+0xd8>)
 8000606:	2200      	movs	r2, #0
 8000608:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800060c:	4b23      	ldr	r3, [pc, #140]	; (800069c <MX_ADC3_Init+0xd8>)
 800060e:	2200      	movs	r2, #0
 8000610:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000612:	4b22      	ldr	r3, [pc, #136]	; (800069c <MX_ADC3_Init+0xd8>)
 8000614:	2201      	movs	r2, #1
 8000616:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000618:	4b20      	ldr	r3, [pc, #128]	; (800069c <MX_ADC3_Init+0xd8>)
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800061e:	4b1f      	ldr	r3, [pc, #124]	; (800069c <MX_ADC3_Init+0xd8>)
 8000620:	2201      	movs	r2, #1
 8000622:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000624:	4b1d      	ldr	r3, [pc, #116]	; (800069c <MX_ADC3_Init+0xd8>)
 8000626:	2200      	movs	r2, #0
 8000628:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800062c:	4b1b      	ldr	r3, [pc, #108]	; (800069c <MX_ADC3_Init+0xd8>)
 800062e:	2204      	movs	r2, #4
 8000630:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000632:	4b1a      	ldr	r3, [pc, #104]	; (800069c <MX_ADC3_Init+0xd8>)
 8000634:	2200      	movs	r2, #0
 8000636:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000638:	4b18      	ldr	r3, [pc, #96]	; (800069c <MX_ADC3_Init+0xd8>)
 800063a:	2200      	movs	r2, #0
 800063c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800063e:	4817      	ldr	r0, [pc, #92]	; (800069c <MX_ADC3_Init+0xd8>)
 8000640:	f000 ff9c 	bl	800157c <HAL_ADC_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 800064a:	f000 fa5d 	bl	8000b08 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800064e:	2300      	movs	r3, #0
 8000650:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000652:	f107 031c 	add.w	r3, r7, #28
 8000656:	4619      	mov	r1, r3
 8000658:	4810      	ldr	r0, [pc, #64]	; (800069c <MX_ADC3_Init+0xd8>)
 800065a:	f002 f8dd 	bl	8002818 <HAL_ADCEx_MultiModeConfigChannel>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 8000664:	f000 fa50 	bl	8000b08 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000668:	2301      	movs	r3, #1
 800066a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800066c:	2301      	movs	r3, #1
 800066e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000670:	2300      	movs	r3, #0
 8000672:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000674:	2307      	movs	r3, #7
 8000676:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800067c:	2300      	movs	r3, #0
 800067e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	4619      	mov	r1, r3
 8000684:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_ADC3_Init+0xd8>)
 8000686:	f001 fddb 	bl	8002240 <HAL_ADC_ConfigChannel>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8000690:	f000 fa3a 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000694:	bf00      	nop
 8000696:	3728      	adds	r7, #40	; 0x28
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	20000188 	.word	0x20000188
 80006a0:	50000400 	.word	0x50000400

080006a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006a8:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <MX_I2C1_Init+0x74>)
 80006aa:	4a1c      	ldr	r2, [pc, #112]	; (800071c <MX_I2C1_Init+0x78>)
 80006ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80006ae:	4b1a      	ldr	r3, [pc, #104]	; (8000718 <MX_I2C1_Init+0x74>)
 80006b0:	4a1b      	ldr	r2, [pc, #108]	; (8000720 <MX_I2C1_Init+0x7c>)
 80006b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006b4:	4b18      	ldr	r3, [pc, #96]	; (8000718 <MX_I2C1_Init+0x74>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ba:	4b17      	ldr	r3, [pc, #92]	; (8000718 <MX_I2C1_Init+0x74>)
 80006bc:	2201      	movs	r2, #1
 80006be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c0:	4b15      	ldr	r3, [pc, #84]	; (8000718 <MX_I2C1_Init+0x74>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006c6:	4b14      	ldr	r3, [pc, #80]	; (8000718 <MX_I2C1_Init+0x74>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <MX_I2C1_Init+0x74>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006d2:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_I2C1_Init+0x74>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_I2C1_Init+0x74>)
 80006da:	2200      	movs	r2, #0
 80006dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006de:	480e      	ldr	r0, [pc, #56]	; (8000718 <MX_I2C1_Init+0x74>)
 80006e0:	f002 fcfa 	bl	80030d8 <HAL_I2C_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006ea:	f000 fa0d 	bl	8000b08 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006ee:	2100      	movs	r1, #0
 80006f0:	4809      	ldr	r0, [pc, #36]	; (8000718 <MX_I2C1_Init+0x74>)
 80006f2:	f002 fd80 	bl	80031f6 <HAL_I2CEx_ConfigAnalogFilter>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006fc:	f000 fa04 	bl	8000b08 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000700:	2100      	movs	r1, #0
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_I2C1_Init+0x74>)
 8000704:	f002 fdc2 	bl	800328c <HAL_I2CEx_ConfigDigitalFilter>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800070e:	f000 f9fb 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	200000a0 	.word	0x200000a0
 800071c:	40005400 	.word	0x40005400
 8000720:	2000090e 	.word	0x2000090e

08000724 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <MX_SPI1_Init+0x74>)
 800072a:	4a1c      	ldr	r2, [pc, #112]	; (800079c <MX_SPI1_Init+0x78>)
 800072c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <MX_SPI1_Init+0x74>)
 8000730:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000734:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000736:	4b18      	ldr	r3, [pc, #96]	; (8000798 <MX_SPI1_Init+0x74>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800073c:	4b16      	ldr	r3, [pc, #88]	; (8000798 <MX_SPI1_Init+0x74>)
 800073e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000742:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000744:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MX_SPI1_Init+0x74>)
 8000746:	2200      	movs	r2, #0
 8000748:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800074a:	4b13      	ldr	r3, [pc, #76]	; (8000798 <MX_SPI1_Init+0x74>)
 800074c:	2200      	movs	r2, #0
 800074e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000750:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_SPI1_Init+0x74>)
 8000752:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000756:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_SPI1_Init+0x74>)
 800075a:	2208      	movs	r2, #8
 800075c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_SPI1_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_SPI1_Init+0x74>)
 8000766:	2200      	movs	r2, #0
 8000768:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <MX_SPI1_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_SPI1_Init+0x74>)
 8000772:	2207      	movs	r2, #7
 8000774:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000776:	4b08      	ldr	r3, [pc, #32]	; (8000798 <MX_SPI1_Init+0x74>)
 8000778:	2200      	movs	r2, #0
 800077a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_SPI1_Init+0x74>)
 800077e:	2208      	movs	r2, #8
 8000780:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <MX_SPI1_Init+0x74>)
 8000784:	f004 f94a 	bl	8004a1c <HAL_SPI_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800078e:	f000 f9bb 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200001d8 	.word	0x200001d8
 800079c:	40013000 	.word	0x40013000

080007a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08e      	sub	sp, #56	; 0x38
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b4:	f107 031c 	add.w	r3, r7, #28
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007c0:	463b      	mov	r3, r7
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]
 80007ce:	615a      	str	r2, [r3, #20]
 80007d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007d2:	4b2d      	ldr	r3, [pc, #180]	; (8000888 <MX_TIM2_Init+0xe8>)
 80007d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 80007da:	4b2b      	ldr	r3, [pc, #172]	; (8000888 <MX_TIM2_Init+0xe8>)
 80007dc:	222f      	movs	r2, #47	; 0x2f
 80007de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e0:	4b29      	ldr	r3, [pc, #164]	; (8000888 <MX_TIM2_Init+0xe8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80007e6:	4b28      	ldr	r3, [pc, #160]	; (8000888 <MX_TIM2_Init+0xe8>)
 80007e8:	2209      	movs	r2, #9
 80007ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ec:	4b26      	ldr	r3, [pc, #152]	; (8000888 <MX_TIM2_Init+0xe8>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f2:	4b25      	ldr	r3, [pc, #148]	; (8000888 <MX_TIM2_Init+0xe8>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007f8:	4823      	ldr	r0, [pc, #140]	; (8000888 <MX_TIM2_Init+0xe8>)
 80007fa:	f004 f9ba 	bl	8004b72 <HAL_TIM_Base_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000804:	f000 f980 	bl	8000b08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800080e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000812:	4619      	mov	r1, r3
 8000814:	481c      	ldr	r0, [pc, #112]	; (8000888 <MX_TIM2_Init+0xe8>)
 8000816:	f004 fe99 	bl	800554c <HAL_TIM_ConfigClockSource>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000820:	f000 f972 	bl	8000b08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000824:	4818      	ldr	r0, [pc, #96]	; (8000888 <MX_TIM2_Init+0xe8>)
 8000826:	f004 fa65 	bl	8004cf4 <HAL_TIM_PWM_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000830:	f000 f96a 	bl	8000b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000838:	2300      	movs	r3, #0
 800083a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800083c:	f107 031c 	add.w	r3, r7, #28
 8000840:	4619      	mov	r1, r3
 8000842:	4811      	ldr	r0, [pc, #68]	; (8000888 <MX_TIM2_Init+0xe8>)
 8000844:	f005 fba4 	bl	8005f90 <HAL_TIMEx_MasterConfigSynchronization>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800084e:	f000 f95b 	bl	8000b08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000852:	2360      	movs	r3, #96	; 0x60
 8000854:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000862:	463b      	mov	r3, r7
 8000864:	2200      	movs	r2, #0
 8000866:	4619      	mov	r1, r3
 8000868:	4807      	ldr	r0, [pc, #28]	; (8000888 <MX_TIM2_Init+0xe8>)
 800086a:	f004 fd5b 	bl	8005324 <HAL_TIM_PWM_ConfigChannel>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000874:	f000 f948 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000878:	4803      	ldr	r0, [pc, #12]	; (8000888 <MX_TIM2_Init+0xe8>)
 800087a:	f000 facb 	bl	8000e14 <HAL_TIM_MspPostInit>

}
 800087e:	bf00      	nop
 8000880:	3738      	adds	r7, #56	; 0x38
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	2000023c 	.word	0x2000023c

0800088c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b088      	sub	sp, #32
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000892:	f107 0310 	add.w	r3, r7, #16
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008aa:	4b1d      	ldr	r3, [pc, #116]	; (8000920 <MX_TIM3_Init+0x94>)
 80008ac:	4a1d      	ldr	r2, [pc, #116]	; (8000924 <MX_TIM3_Init+0x98>)
 80008ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 80008b0:	4b1b      	ldr	r3, [pc, #108]	; (8000920 <MX_TIM3_Init+0x94>)
 80008b2:	222f      	movs	r2, #47	; 0x2f
 80008b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b6:	4b1a      	ldr	r3, [pc, #104]	; (8000920 <MX_TIM3_Init+0x94>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 80008bc:	4b18      	ldr	r3, [pc, #96]	; (8000920 <MX_TIM3_Init+0x94>)
 80008be:	2209      	movs	r2, #9
 80008c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c2:	4b17      	ldr	r3, [pc, #92]	; (8000920 <MX_TIM3_Init+0x94>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c8:	4b15      	ldr	r3, [pc, #84]	; (8000920 <MX_TIM3_Init+0x94>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008ce:	4814      	ldr	r0, [pc, #80]	; (8000920 <MX_TIM3_Init+0x94>)
 80008d0:	f004 f94f 	bl	8004b72 <HAL_TIM_Base_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80008da:	f000 f915 	bl	8000b08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008e4:	f107 0310 	add.w	r3, r7, #16
 80008e8:	4619      	mov	r1, r3
 80008ea:	480d      	ldr	r0, [pc, #52]	; (8000920 <MX_TIM3_Init+0x94>)
 80008ec:	f004 fe2e 	bl	800554c <HAL_TIM_ConfigClockSource>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80008f6:	f000 f907 	bl	8000b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	4619      	mov	r1, r3
 8000906:	4806      	ldr	r0, [pc, #24]	; (8000920 <MX_TIM3_Init+0x94>)
 8000908:	f005 fb42 	bl	8005f90 <HAL_TIMEx_MasterConfigSynchronization>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000912:	f000 f8f9 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	3720      	adds	r7, #32
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	200000ec 	.word	0x200000ec
 8000924:	40000400 	.word	0x40000400

08000928 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800092e:	f107 0310 	add.w	r3, r7, #16
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000946:	4b1e      	ldr	r3, [pc, #120]	; (80009c0 <MX_TIM4_Init+0x98>)
 8000948:	4a1e      	ldr	r2, [pc, #120]	; (80009c4 <MX_TIM4_Init+0x9c>)
 800094a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4799;
 800094c:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <MX_TIM4_Init+0x98>)
 800094e:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000952:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000954:	4b1a      	ldr	r3, [pc, #104]	; (80009c0 <MX_TIM4_Init+0x98>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 800095a:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <MX_TIM4_Init+0x98>)
 800095c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000960:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000962:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <MX_TIM4_Init+0x98>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000968:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <MX_TIM4_Init+0x98>)
 800096a:	2200      	movs	r2, #0
 800096c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800096e:	4814      	ldr	r0, [pc, #80]	; (80009c0 <MX_TIM4_Init+0x98>)
 8000970:	f004 f8ff 	bl	8004b72 <HAL_TIM_Base_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800097a:	f000 f8c5 	bl	8000b08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800097e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000982:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000984:	f107 0310 	add.w	r3, r7, #16
 8000988:	4619      	mov	r1, r3
 800098a:	480d      	ldr	r0, [pc, #52]	; (80009c0 <MX_TIM4_Init+0x98>)
 800098c:	f004 fdde 	bl	800554c <HAL_TIM_ConfigClockSource>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8000996:	f000 f8b7 	bl	8000b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	4619      	mov	r1, r3
 80009a6:	4806      	ldr	r0, [pc, #24]	; (80009c0 <MX_TIM4_Init+0x98>)
 80009a8:	f005 faf2 	bl	8005f90 <HAL_TIMEx_MasterConfigSynchronization>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80009b2:	f000 f8a9 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	3720      	adds	r7, #32
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000054 	.word	0x20000054
 80009c4:	40000800 	.word	0x40000800

080009c8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80009cc:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <MX_USB_PCD_Init+0x3c>)
 80009ce:	4a0e      	ldr	r2, [pc, #56]	; (8000a08 <MX_USB_PCD_Init+0x40>)
 80009d0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <MX_USB_PCD_Init+0x3c>)
 80009d4:	2208      	movs	r2, #8
 80009d6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80009d8:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <MX_USB_PCD_Init+0x3c>)
 80009da:	2202      	movs	r2, #2
 80009dc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <MX_USB_PCD_Init+0x3c>)
 80009e0:	2202      	movs	r2, #2
 80009e2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80009e4:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <MX_USB_PCD_Init+0x3c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <MX_USB_PCD_Init+0x3c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80009f0:	4804      	ldr	r0, [pc, #16]	; (8000a04 <MX_USB_PCD_Init+0x3c>)
 80009f2:	f002 fc97 	bl	8003324 <HAL_PCD_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80009fc:	f000 f884 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000288 	.word	0x20000288
 8000a08:	40005c00 	.word	0x40005c00

08000a0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	; 0x28
 8000a10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	60da      	str	r2, [r3, #12]
 8000a20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a22:	4b37      	ldr	r3, [pc, #220]	; (8000b00 <MX_GPIO_Init+0xf4>)
 8000a24:	695b      	ldr	r3, [r3, #20]
 8000a26:	4a36      	ldr	r2, [pc, #216]	; (8000b00 <MX_GPIO_Init+0xf4>)
 8000a28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a2c:	6153      	str	r3, [r2, #20]
 8000a2e:	4b34      	ldr	r3, [pc, #208]	; (8000b00 <MX_GPIO_Init+0xf4>)
 8000a30:	695b      	ldr	r3, [r3, #20]
 8000a32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3a:	4b31      	ldr	r3, [pc, #196]	; (8000b00 <MX_GPIO_Init+0xf4>)
 8000a3c:	695b      	ldr	r3, [r3, #20]
 8000a3e:	4a30      	ldr	r2, [pc, #192]	; (8000b00 <MX_GPIO_Init+0xf4>)
 8000a40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a44:	6153      	str	r3, [r2, #20]
 8000a46:	4b2e      	ldr	r3, [pc, #184]	; (8000b00 <MX_GPIO_Init+0xf4>)
 8000a48:	695b      	ldr	r3, [r3, #20]
 8000a4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a52:	4b2b      	ldr	r3, [pc, #172]	; (8000b00 <MX_GPIO_Init+0xf4>)
 8000a54:	695b      	ldr	r3, [r3, #20]
 8000a56:	4a2a      	ldr	r2, [pc, #168]	; (8000b00 <MX_GPIO_Init+0xf4>)
 8000a58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a5c:	6153      	str	r3, [r2, #20]
 8000a5e:	4b28      	ldr	r3, [pc, #160]	; (8000b00 <MX_GPIO_Init+0xf4>)
 8000a60:	695b      	ldr	r3, [r3, #20]
 8000a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	4b25      	ldr	r3, [pc, #148]	; (8000b00 <MX_GPIO_Init+0xf4>)
 8000a6c:	695b      	ldr	r3, [r3, #20]
 8000a6e:	4a24      	ldr	r2, [pc, #144]	; (8000b00 <MX_GPIO_Init+0xf4>)
 8000a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a74:	6153      	str	r3, [r2, #20]
 8000a76:	4b22      	ldr	r3, [pc, #136]	; (8000b00 <MX_GPIO_Init+0xf4>)
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a82:	4b1f      	ldr	r3, [pc, #124]	; (8000b00 <MX_GPIO_Init+0xf4>)
 8000a84:	695b      	ldr	r3, [r3, #20]
 8000a86:	4a1e      	ldr	r2, [pc, #120]	; (8000b00 <MX_GPIO_Init+0xf4>)
 8000a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a8c:	6153      	str	r3, [r2, #20]
 8000a8e:	4b1c      	ldr	r3, [pc, #112]	; (8000b00 <MX_GPIO_Init+0xf4>)
 8000a90:	695b      	ldr	r3, [r3, #20]
 8000a92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000aa0:	4818      	ldr	r0, [pc, #96]	; (8000b04 <MX_GPIO_Init+0xf8>)
 8000aa2:	f002 fb01 	bl	80030a8 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000aa6:	2337      	movs	r3, #55	; 0x37
 8000aa8:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000aaa:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000aae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4812      	ldr	r0, [pc, #72]	; (8000b04 <MX_GPIO_Init+0xf8>)
 8000abc:	f002 f97a 	bl	8002db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000ac0:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000ac4:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	480a      	ldr	r0, [pc, #40]	; (8000b04 <MX_GPIO_Init+0xf8>)
 8000ada:	f002 f96b 	bl	8002db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4619      	mov	r1, r3
 8000af0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af4:	f002 f95e 	bl	8002db4 <HAL_GPIO_Init>

}
 8000af8:	bf00      	nop
 8000afa:	3728      	adds	r7, #40	; 0x28
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40021000 	.word	0x40021000
 8000b04:	48001000 	.word	0x48001000

08000b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b0c:	b672      	cpsid	i
}
 8000b0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <Error_Handler+0x8>
	...

08000b14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1a:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <HAL_MspInit+0x44>)
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	4a0e      	ldr	r2, [pc, #56]	; (8000b58 <HAL_MspInit+0x44>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	6193      	str	r3, [r2, #24]
 8000b26:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <HAL_MspInit+0x44>)
 8000b28:	699b      	ldr	r3, [r3, #24]
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <HAL_MspInit+0x44>)
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	4a08      	ldr	r2, [pc, #32]	; (8000b58 <HAL_MspInit+0x44>)
 8000b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b3c:	61d3      	str	r3, [r2, #28]
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_MspInit+0x44>)
 8000b40:	69db      	ldr	r3, [r3, #28]
 8000b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000b4a:	2005      	movs	r0, #5
 8000b4c:	f002 f8f0 	bl	8002d30 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40021000 	.word	0x40021000

08000b5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08c      	sub	sp, #48	; 0x30
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 031c 	add.w	r3, r7, #28
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b7c:	d12d      	bne.n	8000bda <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000b7e:	4b31      	ldr	r3, [pc, #196]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000b80:	695b      	ldr	r3, [r3, #20]
 8000b82:	4a30      	ldr	r2, [pc, #192]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b88:	6153      	str	r3, [r2, #20]
 8000b8a:	4b2e      	ldr	r3, [pc, #184]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000b8c:	695b      	ldr	r3, [r3, #20]
 8000b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b92:	61bb      	str	r3, [r7, #24]
 8000b94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	4b2b      	ldr	r3, [pc, #172]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000b98:	695b      	ldr	r3, [r3, #20]
 8000b9a:	4a2a      	ldr	r2, [pc, #168]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba0:	6153      	str	r3, [r2, #20]
 8000ba2:	4b28      	ldr	r3, [pc, #160]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000ba4:	695b      	ldr	r3, [r3, #20]
 8000ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bba:	f107 031c 	add.w	r3, r7, #28
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc4:	f002 f8f6 	bl	8002db4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 3, 0);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2103      	movs	r1, #3
 8000bcc:	2012      	movs	r0, #18
 8000bce:	f002 f8ba 	bl	8002d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000bd2:	2012      	movs	r0, #18
 8000bd4:	f002 f8d3 	bl	8002d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000bd8:	e030      	b.n	8000c3c <HAL_ADC_MspInit+0xe0>
  else if(hadc->Instance==ADC3)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a1a      	ldr	r2, [pc, #104]	; (8000c48 <HAL_ADC_MspInit+0xec>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d12b      	bne.n	8000c3c <HAL_ADC_MspInit+0xe0>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8000be4:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000be6:	695b      	ldr	r3, [r3, #20]
 8000be8:	4a16      	ldr	r2, [pc, #88]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000bea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000bee:	6153      	str	r3, [r2, #20]
 8000bf0:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000bf2:	695b      	ldr	r3, [r3, #20]
 8000bf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfc:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000bfe:	695b      	ldr	r3, [r3, #20]
 8000c00:	4a10      	ldr	r2, [pc, #64]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000c02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c06:	6153      	str	r3, [r2, #20]
 8000c08:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <HAL_ADC_MspInit+0xe8>)
 8000c0a:	695b      	ldr	r3, [r3, #20]
 8000c0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c14:	2302      	movs	r3, #2
 8000c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c20:	f107 031c 	add.w	r3, r7, #28
 8000c24:	4619      	mov	r1, r3
 8000c26:	4809      	ldr	r0, [pc, #36]	; (8000c4c <HAL_ADC_MspInit+0xf0>)
 8000c28:	f002 f8c4 	bl	8002db4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC3_IRQn, 2, 0);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2102      	movs	r1, #2
 8000c30:	202f      	movs	r0, #47	; 0x2f
 8000c32:	f002 f888 	bl	8002d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000c36:	202f      	movs	r0, #47	; 0x2f
 8000c38:	f002 f8a1 	bl	8002d7e <HAL_NVIC_EnableIRQ>
}
 8000c3c:	bf00      	nop
 8000c3e:	3730      	adds	r7, #48	; 0x30
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40021000 	.word	0x40021000
 8000c48:	50000400 	.word	0x50000400
 8000c4c:	48000400 	.word	0x48000400

08000c50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	; 0x28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a17      	ldr	r2, [pc, #92]	; (8000ccc <HAL_I2C_MspInit+0x7c>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d127      	bne.n	8000cc2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c72:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <HAL_I2C_MspInit+0x80>)
 8000c74:	695b      	ldr	r3, [r3, #20]
 8000c76:	4a16      	ldr	r2, [pc, #88]	; (8000cd0 <HAL_I2C_MspInit+0x80>)
 8000c78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c7c:	6153      	str	r3, [r2, #20]
 8000c7e:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <HAL_I2C_MspInit+0x80>)
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000c8a:	23c0      	movs	r3, #192	; 0xc0
 8000c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c8e:	2312      	movs	r3, #18
 8000c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c92:	2301      	movs	r3, #1
 8000c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c96:	2303      	movs	r3, #3
 8000c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c9a:	2304      	movs	r3, #4
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	480b      	ldr	r0, [pc, #44]	; (8000cd4 <HAL_I2C_MspInit+0x84>)
 8000ca6:	f002 f885 	bl	8002db4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000caa:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <HAL_I2C_MspInit+0x80>)
 8000cac:	69db      	ldr	r3, [r3, #28]
 8000cae:	4a08      	ldr	r2, [pc, #32]	; (8000cd0 <HAL_I2C_MspInit+0x80>)
 8000cb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cb4:	61d3      	str	r3, [r2, #28]
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_I2C_MspInit+0x80>)
 8000cb8:	69db      	ldr	r3, [r3, #28]
 8000cba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cc2:	bf00      	nop
 8000cc4:	3728      	adds	r7, #40	; 0x28
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40005400 	.word	0x40005400
 8000cd0:	40021000 	.word	0x40021000
 8000cd4:	48000400 	.word	0x48000400

08000cd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08a      	sub	sp, #40	; 0x28
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a17      	ldr	r2, [pc, #92]	; (8000d54 <HAL_SPI_MspInit+0x7c>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d128      	bne.n	8000d4c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cfa:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <HAL_SPI_MspInit+0x80>)
 8000cfc:	699b      	ldr	r3, [r3, #24]
 8000cfe:	4a16      	ldr	r2, [pc, #88]	; (8000d58 <HAL_SPI_MspInit+0x80>)
 8000d00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d04:	6193      	str	r3, [r2, #24]
 8000d06:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <HAL_SPI_MspInit+0x80>)
 8000d08:	699b      	ldr	r3, [r3, #24]
 8000d0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d12:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <HAL_SPI_MspInit+0x80>)
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	4a10      	ldr	r2, [pc, #64]	; (8000d58 <HAL_SPI_MspInit+0x80>)
 8000d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d1c:	6153      	str	r3, [r2, #20]
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <HAL_SPI_MspInit+0x80>)
 8000d20:	695b      	ldr	r3, [r3, #20]
 8000d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000d2a:	23e0      	movs	r3, #224	; 0xe0
 8000d2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d36:	2303      	movs	r3, #3
 8000d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d3a:	2305      	movs	r3, #5
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	4619      	mov	r1, r3
 8000d44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d48:	f002 f834 	bl	8002db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d4c:	bf00      	nop
 8000d4e:	3728      	adds	r7, #40	; 0x28
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40013000 	.word	0x40013000
 8000d58:	40021000 	.word	0x40021000

08000d5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d6c:	d114      	bne.n	8000d98 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d6e:	4b26      	ldr	r3, [pc, #152]	; (8000e08 <HAL_TIM_Base_MspInit+0xac>)
 8000d70:	69db      	ldr	r3, [r3, #28]
 8000d72:	4a25      	ldr	r2, [pc, #148]	; (8000e08 <HAL_TIM_Base_MspInit+0xac>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	61d3      	str	r3, [r2, #28]
 8000d7a:	4b23      	ldr	r3, [pc, #140]	; (8000e08 <HAL_TIM_Base_MspInit+0xac>)
 8000d7c:	69db      	ldr	r3, [r3, #28]
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2100      	movs	r1, #0
 8000d8a:	201c      	movs	r0, #28
 8000d8c:	f001 ffdb 	bl	8002d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d90:	201c      	movs	r0, #28
 8000d92:	f001 fff4 	bl	8002d7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000d96:	e032      	b.n	8000dfe <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a1b      	ldr	r2, [pc, #108]	; (8000e0c <HAL_TIM_Base_MspInit+0xb0>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d114      	bne.n	8000dcc <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000da2:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <HAL_TIM_Base_MspInit+0xac>)
 8000da4:	69db      	ldr	r3, [r3, #28]
 8000da6:	4a18      	ldr	r2, [pc, #96]	; (8000e08 <HAL_TIM_Base_MspInit+0xac>)
 8000da8:	f043 0302 	orr.w	r3, r3, #2
 8000dac:	61d3      	str	r3, [r2, #28]
 8000dae:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <HAL_TIM_Base_MspInit+0xac>)
 8000db0:	69db      	ldr	r3, [r3, #28]
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	201d      	movs	r0, #29
 8000dc0:	f001 ffc1 	bl	8002d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000dc4:	201d      	movs	r0, #29
 8000dc6:	f001 ffda 	bl	8002d7e <HAL_NVIC_EnableIRQ>
}
 8000dca:	e018      	b.n	8000dfe <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM4)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a0f      	ldr	r2, [pc, #60]	; (8000e10 <HAL_TIM_Base_MspInit+0xb4>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d113      	bne.n	8000dfe <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <HAL_TIM_Base_MspInit+0xac>)
 8000dd8:	69db      	ldr	r3, [r3, #28]
 8000dda:	4a0b      	ldr	r2, [pc, #44]	; (8000e08 <HAL_TIM_Base_MspInit+0xac>)
 8000ddc:	f043 0304 	orr.w	r3, r3, #4
 8000de0:	61d3      	str	r3, [r2, #28]
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <HAL_TIM_Base_MspInit+0xac>)
 8000de4:	69db      	ldr	r3, [r3, #28]
 8000de6:	f003 0304 	and.w	r3, r3, #4
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2100      	movs	r1, #0
 8000df2:	201e      	movs	r0, #30
 8000df4:	f001 ffa7 	bl	8002d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000df8:	201e      	movs	r0, #30
 8000dfa:	f001 ffc0 	bl	8002d7e <HAL_NVIC_EnableIRQ>
}
 8000dfe:	bf00      	nop
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	40000400 	.word	0x40000400
 8000e10:	40000800 	.word	0x40000800

08000e14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b088      	sub	sp, #32
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 030c 	add.w	r3, r7, #12
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e34:	d11d      	bne.n	8000e72 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <HAL_TIM_MspPostInit+0x68>)
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	4a10      	ldr	r2, [pc, #64]	; (8000e7c <HAL_TIM_MspPostInit+0x68>)
 8000e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e40:	6153      	str	r3, [r2, #20]
 8000e42:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <HAL_TIM_MspPostInit+0x68>)
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e52:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e60:	2301      	movs	r3, #1
 8000e62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e64:	f107 030c 	add.w	r3, r7, #12
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6e:	f001 ffa1 	bl	8002db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e72:	bf00      	nop
 8000e74:	3720      	adds	r7, #32
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40021000 	.word	0x40021000

08000e80 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08a      	sub	sp, #40	; 0x28
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a18      	ldr	r2, [pc, #96]	; (8000f00 <HAL_PCD_MspInit+0x80>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d129      	bne.n	8000ef6 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <HAL_PCD_MspInit+0x84>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	4a17      	ldr	r2, [pc, #92]	; (8000f04 <HAL_PCD_MspInit+0x84>)
 8000ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eac:	6153      	str	r3, [r2, #20]
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <HAL_PCD_MspInit+0x84>)
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000eba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000ecc:	230e      	movs	r3, #14
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eda:	f001 ff6b 	bl	8002db4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000ede:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <HAL_PCD_MspInit+0x84>)
 8000ee0:	69db      	ldr	r3, [r3, #28]
 8000ee2:	4a08      	ldr	r2, [pc, #32]	; (8000f04 <HAL_PCD_MspInit+0x84>)
 8000ee4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ee8:	61d3      	str	r3, [r2, #28]
 8000eea:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_PCD_MspInit+0x84>)
 8000eec:	69db      	ldr	r3, [r3, #28]
 8000eee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000ef6:	bf00      	nop
 8000ef8:	3728      	adds	r7, #40	; 0x28
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40005c00 	.word	0x40005c00
 8000f04:	40021000 	.word	0x40021000

08000f08 <warning_start>:
	{   0,  350},
	{   350,  350},
	{   0,  350}
};

void warning_start() {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(pwm_timer, pwm_channe1);
 8000f0c:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <warning_start+0x18>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <warning_start+0x1c>)
 8000f12:	6812      	ldr	r2, [r2, #0]
 8000f14:	4611      	mov	r1, r2
 8000f16:	4618      	mov	r0, r3
 8000f18:	f003 ff4e 	bl	8004db8 <HAL_TIM_PWM_Start>
}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000000 	.word	0x20000000
 8000f24:	2000004c 	.word	0x2000004c

08000f28 <warning_stop>:

void warning_stop() {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(pwm_timer, pwm_channe1);
 8000f2c:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <warning_stop+0x18>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a04      	ldr	r2, [pc, #16]	; (8000f44 <warning_stop+0x1c>)
 8000f32:	6812      	ldr	r2, [r2, #0]
 8000f34:	4611      	mov	r1, r2
 8000f36:	4618      	mov	r0, r3
 8000f38:	f004 f83e 	bl	8004fb8 <HAL_TIM_PWM_Stop>
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000000 	.word	0x20000000
 8000f44:	2000004c 	.word	0x2000004c

08000f48 <PWM_Change_Tone>:

void PWM_Change_Tone(uint16_t pwm_freq, uint16_t volume) // pwm_freq (1 - 20000), volume (0 - 1000)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	460a      	mov	r2, r1
 8000f52:	80fb      	strh	r3, [r7, #6]
 8000f54:	4613      	mov	r3, r2
 8000f56:	80bb      	strh	r3, [r7, #4]
    if (pwm_freq == 0 || pwm_freq > 20000)
 8000f58:	88fb      	ldrh	r3, [r7, #6]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d004      	beq.n	8000f68 <PWM_Change_Tone+0x20>
 8000f5e:	88fb      	ldrh	r3, [r7, #6]
 8000f60:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d937      	bls.n	8000fd8 <PWM_Change_Tone+0x90>
    {
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channe1, 0);
 8000f68:	4b52      	ldr	r3, [pc, #328]	; (80010b4 <PWM_Change_Tone+0x16c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d105      	bne.n	8000f7c <PWM_Change_Tone+0x34>
 8000f70:	4b51      	ldr	r3, [pc, #324]	; (80010b8 <PWM_Change_Tone+0x170>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2200      	movs	r2, #0
 8000f78:	635a      	str	r2, [r3, #52]	; 0x34
 8000f7a:	e097      	b.n	80010ac <PWM_Change_Tone+0x164>
 8000f7c:	4b4d      	ldr	r3, [pc, #308]	; (80010b4 <PWM_Change_Tone+0x16c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b04      	cmp	r3, #4
 8000f82:	d105      	bne.n	8000f90 <PWM_Change_Tone+0x48>
 8000f84:	4b4c      	ldr	r3, [pc, #304]	; (80010b8 <PWM_Change_Tone+0x170>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	6393      	str	r3, [r2, #56]	; 0x38
 8000f8e:	e08d      	b.n	80010ac <PWM_Change_Tone+0x164>
 8000f90:	4b48      	ldr	r3, [pc, #288]	; (80010b4 <PWM_Change_Tone+0x16c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b08      	cmp	r3, #8
 8000f96:	d105      	bne.n	8000fa4 <PWM_Change_Tone+0x5c>
 8000f98:	4b47      	ldr	r3, [pc, #284]	; (80010b8 <PWM_Change_Tone+0x170>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000fa2:	e083      	b.n	80010ac <PWM_Change_Tone+0x164>
 8000fa4:	4b43      	ldr	r3, [pc, #268]	; (80010b4 <PWM_Change_Tone+0x16c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b0c      	cmp	r3, #12
 8000faa:	d105      	bne.n	8000fb8 <PWM_Change_Tone+0x70>
 8000fac:	4b42      	ldr	r3, [pc, #264]	; (80010b8 <PWM_Change_Tone+0x170>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb6:	e079      	b.n	80010ac <PWM_Change_Tone+0x164>
 8000fb8:	4b3e      	ldr	r3, [pc, #248]	; (80010b4 <PWM_Change_Tone+0x16c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b10      	cmp	r3, #16
 8000fbe:	d105      	bne.n	8000fcc <PWM_Change_Tone+0x84>
 8000fc0:	4b3d      	ldr	r3, [pc, #244]	; (80010b8 <PWM_Change_Tone+0x170>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	6593      	str	r3, [r2, #88]	; 0x58
 8000fca:	e06f      	b.n	80010ac <PWM_Change_Tone+0x164>
 8000fcc:	4b3a      	ldr	r3, [pc, #232]	; (80010b8 <PWM_Change_Tone+0x170>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000fd6:	e069      	b.n	80010ac <PWM_Change_Tone+0x164>
    }
    else
    {
        const uint32_t internal_clock_freq = HAL_RCC_GetSysClockFreq();
 8000fd8:	f003 fb06 	bl	80045e8 <HAL_RCC_GetSysClockFreq>
 8000fdc:	61f8      	str	r0, [r7, #28]
        const uint16_t prescaler = 1 + internal_clock_freq / pwm_freq / 60000;
 8000fde:	88fb      	ldrh	r3, [r7, #6]
 8000fe0:	69fa      	ldr	r2, [r7, #28]
 8000fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe6:	4a35      	ldr	r2, [pc, #212]	; (80010bc <PWM_Change_Tone+0x174>)
 8000fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fec:	0b9b      	lsrs	r3, r3, #14
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	837b      	strh	r3, [r7, #26]
        const uint32_t timer_clock = internal_clock_freq / prescaler;
 8000ff4:	8b7b      	ldrh	r3, [r7, #26]
 8000ff6:	69fa      	ldr	r2, [r7, #28]
 8000ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffc:	617b      	str	r3, [r7, #20]
        const uint32_t period_cycles = timer_clock / pwm_freq;
 8000ffe:	88fb      	ldrh	r3, [r7, #6]
 8001000:	697a      	ldr	r2, [r7, #20]
 8001002:	fbb2 f3f3 	udiv	r3, r2, r3
 8001006:	613b      	str	r3, [r7, #16]
        const uint32_t pulse_width = volume * period_cycles / 1000 / 2;
 8001008:	88bb      	ldrh	r3, [r7, #4]
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	fb02 f303 	mul.w	r3, r2, r3
 8001010:	4a2b      	ldr	r2, [pc, #172]	; (80010c0 <PWM_Change_Tone+0x178>)
 8001012:	fba2 2303 	umull	r2, r3, r2, r3
 8001016:	09db      	lsrs	r3, r3, #7
 8001018:	60fb      	str	r3, [r7, #12]

        pwm_timer->Instance->PSC = prescaler - 1;
 800101a:	8b7b      	ldrh	r3, [r7, #26]
 800101c:	1e5a      	subs	r2, r3, #1
 800101e:	4b26      	ldr	r3, [pc, #152]	; (80010b8 <PWM_Change_Tone+0x170>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	629a      	str	r2, [r3, #40]	; 0x28
        pwm_timer->Instance->ARR = period_cycles - 1;
 8001026:	4b24      	ldr	r3, [pc, #144]	; (80010b8 <PWM_Change_Tone+0x170>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	3a01      	subs	r2, #1
 8001030:	62da      	str	r2, [r3, #44]	; 0x2c
        pwm_timer->Instance->EGR = TIM_EGR_UG;
 8001032:	4b21      	ldr	r3, [pc, #132]	; (80010b8 <PWM_Change_Tone+0x170>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2201      	movs	r2, #1
 800103a:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channe1, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 800103c:	4b1d      	ldr	r3, [pc, #116]	; (80010b4 <PWM_Change_Tone+0x16c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d105      	bne.n	8001050 <PWM_Change_Tone+0x108>
 8001044:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <PWM_Change_Tone+0x170>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	68fa      	ldr	r2, [r7, #12]
 800104c:	635a      	str	r2, [r3, #52]	; 0x34
    }
}
 800104e:	e02d      	b.n	80010ac <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channe1, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001050:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <PWM_Change_Tone+0x16c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b04      	cmp	r3, #4
 8001056:	d105      	bne.n	8001064 <PWM_Change_Tone+0x11c>
 8001058:	4b17      	ldr	r3, [pc, #92]	; (80010b8 <PWM_Change_Tone+0x170>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001062:	e023      	b.n	80010ac <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channe1, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001064:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <PWM_Change_Tone+0x16c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b08      	cmp	r3, #8
 800106a:	d105      	bne.n	8001078 <PWM_Change_Tone+0x130>
 800106c:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <PWM_Change_Tone+0x170>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001076:	e019      	b.n	80010ac <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channe1, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8001078:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <PWM_Change_Tone+0x16c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b0c      	cmp	r3, #12
 800107e:	d105      	bne.n	800108c <PWM_Change_Tone+0x144>
 8001080:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <PWM_Change_Tone+0x170>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	6413      	str	r3, [r2, #64]	; 0x40
}
 800108a:	e00f      	b.n	80010ac <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channe1, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 800108c:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <PWM_Change_Tone+0x16c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b10      	cmp	r3, #16
 8001092:	d105      	bne.n	80010a0 <PWM_Change_Tone+0x158>
 8001094:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <PWM_Change_Tone+0x170>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	6593      	str	r3, [r2, #88]	; 0x58
}
 800109e:	e005      	b.n	80010ac <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channe1, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 80010a0:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <PWM_Change_Tone+0x170>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 80010aa:	e7ff      	b.n	80010ac <PWM_Change_Tone+0x164>
 80010ac:	bf00      	nop
 80010ae:	3720      	adds	r7, #32
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	2000004c 	.word	0x2000004c
 80010b8:	20000000 	.word	0x20000000
 80010bc:	45e7b273 	.word	0x45e7b273
 80010c0:	10624dd3 	.word	0x10624dd3

080010c4 <Change_Melody>:

void Change_Melody(const Tone *melody, uint16_t tone_count)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	807b      	strh	r3, [r7, #2]
    melody_ptr = melody;
 80010d0:	4a07      	ldr	r2, [pc, #28]	; (80010f0 <Change_Melody+0x2c>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6013      	str	r3, [r2, #0]
    melody_tone_count = tone_count;
 80010d6:	4a07      	ldr	r2, [pc, #28]	; (80010f4 <Change_Melody+0x30>)
 80010d8:	887b      	ldrh	r3, [r7, #2]
 80010da:	8013      	strh	r3, [r2, #0]
    current_tone_number = 0;
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <Change_Melody+0x34>)
 80010de:	2200      	movs	r2, #0
 80010e0:	801a      	strh	r2, [r3, #0]
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	2000057c 	.word	0x2000057c
 80010f4:	20000580 	.word	0x20000580
 80010f8:	20000578 	.word	0x20000578

080010fc <Update_Melody>:

void Update_Melody()
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
    if( pause == 0 )
 8001102:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <Update_Melody+0x74>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d12e      	bne.n	8001168 <Update_Melody+0x6c>
    {
    	if ((HAL_GetTick() > current_tone_end) && (current_tone_number < melody_tone_count))
 800110a:	f000 f9e9 	bl	80014e0 <HAL_GetTick>
 800110e:	4602      	mov	r2, r0
 8001110:	4b18      	ldr	r3, [pc, #96]	; (8001174 <Update_Melody+0x78>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	429a      	cmp	r2, r3
 8001116:	d927      	bls.n	8001168 <Update_Melody+0x6c>
 8001118:	4b17      	ldr	r3, [pc, #92]	; (8001178 <Update_Melody+0x7c>)
 800111a:	881b      	ldrh	r3, [r3, #0]
 800111c:	b29a      	uxth	r2, r3
 800111e:	4b17      	ldr	r3, [pc, #92]	; (800117c <Update_Melody+0x80>)
 8001120:	881b      	ldrh	r3, [r3, #0]
 8001122:	b29b      	uxth	r3, r3
 8001124:	429a      	cmp	r2, r3
 8001126:	d21f      	bcs.n	8001168 <Update_Melody+0x6c>
    	    {
    	        const Tone active_tone = *(melody_ptr + current_tone_number);
 8001128:	4b15      	ldr	r3, [pc, #84]	; (8001180 <Update_Melody+0x84>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <Update_Melody+0x7c>)
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	b29b      	uxth	r3, r3
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	441a      	add	r2, r3
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	6810      	ldr	r0, [r2, #0]
 800113a:	6018      	str	r0, [r3, #0]
    	        PWM_Change_Tone(active_tone.frequency, volume);
 800113c:	88bb      	ldrh	r3, [r7, #4]
 800113e:	4a11      	ldr	r2, [pc, #68]	; (8001184 <Update_Melody+0x88>)
 8001140:	8812      	ldrh	r2, [r2, #0]
 8001142:	b292      	uxth	r2, r2
 8001144:	4611      	mov	r1, r2
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fefe 	bl	8000f48 <PWM_Change_Tone>
    	        current_tone_end = HAL_GetTick() + active_tone.duration;
 800114c:	f000 f9c8 	bl	80014e0 <HAL_GetTick>
 8001150:	4603      	mov	r3, r0
 8001152:	88fa      	ldrh	r2, [r7, #6]
 8001154:	4413      	add	r3, r2
 8001156:	4a07      	ldr	r2, [pc, #28]	; (8001174 <Update_Melody+0x78>)
 8001158:	6013      	str	r3, [r2, #0]
    	        current_tone_number++;
 800115a:	4b07      	ldr	r3, [pc, #28]	; (8001178 <Update_Melody+0x7c>)
 800115c:	881b      	ldrh	r3, [r3, #0]
 800115e:	b29b      	uxth	r3, r3
 8001160:	3301      	adds	r3, #1
 8001162:	b29a      	uxth	r2, r3
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <Update_Melody+0x7c>)
 8001166:	801a      	strh	r2, [r3, #0]
    	    }
    }
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000050 	.word	0x20000050
 8001174:	20000574 	.word	0x20000574
 8001178:	20000578 	.word	0x20000578
 800117c:	20000580 	.word	0x20000580
 8001180:	2000057c 	.word	0x2000057c
 8001184:	20000004 	.word	0x20000004

08001188 <warning>:

void warning() {
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	if( mTemp > 23 ) {
 800118c:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <warning+0x2c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b17      	cmp	r3, #23
 8001192:	dd06      	ble.n	80011a2 <warning+0x1a>
		warning_start();
 8001194:	f7ff feb8 	bl	8000f08 <warning_start>
		Change_Melody(biz, ARRAY_LENGTH(biz));
 8001198:	2109      	movs	r1, #9
 800119a:	4807      	ldr	r0, [pc, #28]	; (80011b8 <warning+0x30>)
 800119c:	f7ff ff92 	bl	80010c4 <Change_Melody>
	} else if ( mTemp < 23 ) {
		warning_stop();
	}
}
 80011a0:	e005      	b.n	80011ae <warning+0x26>
	} else if ( mTemp < 23 ) {
 80011a2:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <warning+0x2c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2b16      	cmp	r3, #22
 80011a8:	dc01      	bgt.n	80011ae <warning+0x26>
		warning_stop();
 80011aa:	f7ff febd 	bl	8000f28 <warning_stop>
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000040 	.word	0x20000040
 80011b8:	080061b4 	.word	0x080061b4

080011bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <NMI_Handler+0x4>

080011c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c6:	e7fe      	b.n	80011c6 <HardFault_Handler+0x4>

080011c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011cc:	e7fe      	b.n	80011cc <MemManage_Handler+0x4>

080011ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d2:	e7fe      	b.n	80011d2 <BusFault_Handler+0x4>

080011d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <UsageFault_Handler+0x4>

080011da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001208:	f000 f956 	bl	80014b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  Update_Melody();
 800120c:	f7ff ff76 	bl	80010fc <Update_Melody>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}

08001214 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800121a:	481e      	ldr	r0, [pc, #120]	; (8001294 <ADC1_2_IRQHandler+0x80>)
 800121c:	f000 fcdc 	bl	8001bd8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  	if( t1 == 5 )
 8001220:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <ADC1_2_IRQHandler+0x84>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b05      	cmp	r3, #5
 8001226:	d10f      	bne.n	8001248 <ADC1_2_IRQHandler+0x34>
  	{
  		mLight = mLight0 / 5;
 8001228:	4b1c      	ldr	r3, [pc, #112]	; (800129c <ADC1_2_IRQHandler+0x88>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a1c      	ldr	r2, [pc, #112]	; (80012a0 <ADC1_2_IRQHandler+0x8c>)
 800122e:	fb82 1203 	smull	r1, r2, r2, r3
 8001232:	1052      	asrs	r2, r2, #1
 8001234:	17db      	asrs	r3, r3, #31
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	4a1a      	ldr	r2, [pc, #104]	; (80012a4 <ADC1_2_IRQHandler+0x90>)
 800123a:	6013      	str	r3, [r2, #0]
  		mLight0 = 0;
 800123c:	4b17      	ldr	r3, [pc, #92]	; (800129c <ADC1_2_IRQHandler+0x88>)
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
  		t1 = 0;
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <ADC1_2_IRQHandler+0x84>)
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
  	}

	int light = HAL_ADC_GetValue(&hadc1);
 8001248:	4812      	ldr	r0, [pc, #72]	; (8001294 <ADC1_2_IRQHandler+0x80>)
 800124a:	f000 fcb7 	bl	8001bbc <HAL_ADC_GetValue>
 800124e:	4603      	mov	r3, r0
 8001250:	607b      	str	r3, [r7, #4]
	light = ( light * 100 / 4095);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2264      	movs	r2, #100	; 0x64
 8001256:	fb02 f303 	mul.w	r3, r2, r3
 800125a:	4a13      	ldr	r2, [pc, #76]	; (80012a8 <ADC1_2_IRQHandler+0x94>)
 800125c:	fb82 1203 	smull	r1, r2, r2, r3
 8001260:	441a      	add	r2, r3
 8001262:	12d2      	asrs	r2, r2, #11
 8001264:	17db      	asrs	r3, r3, #31
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	607b      	str	r3, [r7, #4]
	mLight0 += light;
 800126a:	4b0c      	ldr	r3, [pc, #48]	; (800129c <ADC1_2_IRQHandler+0x88>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4413      	add	r3, r2
 8001272:	4a0a      	ldr	r2, [pc, #40]	; (800129c <ADC1_2_IRQHandler+0x88>)
 8001274:	6013      	str	r3, [r2, #0]

	t1++;
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <ADC1_2_IRQHandler+0x84>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	3301      	adds	r3, #1
 800127c:	4a06      	ldr	r2, [pc, #24]	; (8001298 <ADC1_2_IRQHandler+0x84>)
 800127e:	6013      	str	r3, [r2, #0]
	HAL_Delay(10);
 8001280:	200a      	movs	r0, #10
 8001282:	f000 f939 	bl	80014f8 <HAL_Delay>
	HAL_ADC_Start_IT(&hadc1);
 8001286:	4803      	ldr	r0, [pc, #12]	; (8001294 <ADC1_2_IRQHandler+0x80>)
 8001288:	f000 fb58 	bl	800193c <HAL_ADC_Start_IT>

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000138 	.word	0x20000138
 8001298:	20000034 	.word	0x20000034
 800129c:	20000044 	.word	0x20000044
 80012a0:	66666667 	.word	0x66666667
 80012a4:	2000003c 	.word	0x2000003c
 80012a8:	80080081 	.word	0x80080081

080012ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012b0:	4802      	ldr	r0, [pc, #8]	; (80012bc <TIM2_IRQHandler+0x10>)
 80012b2:	f003 ff17 	bl	80050e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	2000023c 	.word	0x2000023c

080012c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	show(mLight, mTemp);
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <TIM3_IRQHandler+0x20>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a06      	ldr	r2, [pc, #24]	; (80012e4 <TIM3_IRQHandler+0x24>)
 80012ca:	6812      	ldr	r2, [r2, #0]
 80012cc:	4611      	mov	r1, r2
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7fe ffe8 	bl	80002a4 <show>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80012d4:	4804      	ldr	r0, [pc, #16]	; (80012e8 <TIM3_IRQHandler+0x28>)
 80012d6:	f003 ff05 	bl	80050e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	2000003c 	.word	0x2000003c
 80012e4:	20000040 	.word	0x20000040
 80012e8:	200000ec 	.word	0x200000ec

080012ec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80012f0:	4803      	ldr	r0, [pc, #12]	; (8001300 <TIM4_IRQHandler+0x14>)
 80012f2:	f003 fef7 	bl	80050e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  warning();
 80012f6:	f7ff ff47 	bl	8001188 <warning>
  /* USER CODE END TIM4_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000054 	.word	0x20000054

08001304 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 800130a:	4823      	ldr	r0, [pc, #140]	; (8001398 <ADC3_IRQHandler+0x94>)
 800130c:	f000 fc64 	bl	8001bd8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */
	if( t2 == 50 )
 8001310:	4b22      	ldr	r3, [pc, #136]	; (800139c <ADC3_IRQHandler+0x98>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b32      	cmp	r3, #50	; 0x32
 8001316:	d10f      	bne.n	8001338 <ADC3_IRQHandler+0x34>
	{
		mTemp = mTemp0 / 50;
 8001318:	4b21      	ldr	r3, [pc, #132]	; (80013a0 <ADC3_IRQHandler+0x9c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a21      	ldr	r2, [pc, #132]	; (80013a4 <ADC3_IRQHandler+0xa0>)
 800131e:	fb82 1203 	smull	r1, r2, r2, r3
 8001322:	1112      	asrs	r2, r2, #4
 8001324:	17db      	asrs	r3, r3, #31
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	4a1f      	ldr	r2, [pc, #124]	; (80013a8 <ADC3_IRQHandler+0xa4>)
 800132a:	6013      	str	r3, [r2, #0]
		mTemp0 = 0;
 800132c:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <ADC3_IRQHandler+0x9c>)
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
		t2 = 0;
 8001332:	4b1a      	ldr	r3, [pc, #104]	; (800139c <ADC3_IRQHandler+0x98>)
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
	}

	int raw_value = HAL_ADC_GetValue(&hadc3);
 8001338:	4817      	ldr	r0, [pc, #92]	; (8001398 <ADC3_IRQHandler+0x94>)
 800133a:	f000 fc3f 	bl	8001bbc <HAL_ADC_GetValue>
 800133e:	4603      	mov	r3, r0
 8001340:	60fb      	str	r3, [r7, #12]
	int Voltage_mv = raw_value * 3300 / 4095;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f640 42e4 	movw	r2, #3300	; 0xce4
 8001348:	fb02 f303 	mul.w	r3, r2, r3
 800134c:	4a17      	ldr	r2, [pc, #92]	; (80013ac <ADC3_IRQHandler+0xa8>)
 800134e:	fb82 1203 	smull	r1, r2, r2, r3
 8001352:	441a      	add	r2, r3
 8001354:	12d2      	asrs	r2, r2, #11
 8001356:	17db      	asrs	r3, r3, #31
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	60bb      	str	r3, [r7, #8]
	int Temperature_c = Voltage_mv / 10;
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	4a14      	ldr	r2, [pc, #80]	; (80013b0 <ADC3_IRQHandler+0xac>)
 8001360:	fb82 1203 	smull	r1, r2, r2, r3
 8001364:	1092      	asrs	r2, r2, #2
 8001366:	17db      	asrs	r3, r3, #31
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	607b      	str	r3, [r7, #4]
	mTemp0 += Temperature_c;
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <ADC3_IRQHandler+0x9c>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4413      	add	r3, r2
 8001374:	4a0a      	ldr	r2, [pc, #40]	; (80013a0 <ADC3_IRQHandler+0x9c>)
 8001376:	6013      	str	r3, [r2, #0]

	t2++;
 8001378:	4b08      	ldr	r3, [pc, #32]	; (800139c <ADC3_IRQHandler+0x98>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	3301      	adds	r3, #1
 800137e:	4a07      	ldr	r2, [pc, #28]	; (800139c <ADC3_IRQHandler+0x98>)
 8001380:	6013      	str	r3, [r2, #0]
	HAL_Delay(5);
 8001382:	2005      	movs	r0, #5
 8001384:	f000 f8b8 	bl	80014f8 <HAL_Delay>
	HAL_ADC_Start_IT(&hadc3);
 8001388:	4803      	ldr	r0, [pc, #12]	; (8001398 <ADC3_IRQHandler+0x94>)
 800138a:	f000 fad7 	bl	800193c <HAL_ADC_Start_IT>
  /* USER CODE END ADC3_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000188 	.word	0x20000188
 800139c:	20000038 	.word	0x20000038
 80013a0:	20000048 	.word	0x20000048
 80013a4:	51eb851f 	.word	0x51eb851f
 80013a8:	20000040 	.word	0x20000040
 80013ac:	80080081 	.word	0x80080081
 80013b0:	66666667 	.word	0x66666667

080013b4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <SystemInit+0x20>)
 80013ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013be:	4a05      	ldr	r2, [pc, #20]	; (80013d4 <SystemInit+0x20>)
 80013c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001410 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013dc:	480d      	ldr	r0, [pc, #52]	; (8001414 <LoopForever+0x6>)
  ldr r1, =_edata
 80013de:	490e      	ldr	r1, [pc, #56]	; (8001418 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013e0:	4a0e      	ldr	r2, [pc, #56]	; (800141c <LoopForever+0xe>)
  movs r3, #0
 80013e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e4:	e002      	b.n	80013ec <LoopCopyDataInit>

080013e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ea:	3304      	adds	r3, #4

080013ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f0:	d3f9      	bcc.n	80013e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f2:	4a0b      	ldr	r2, [pc, #44]	; (8001420 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013f4:	4c0b      	ldr	r4, [pc, #44]	; (8001424 <LoopForever+0x16>)
  movs r3, #0
 80013f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f8:	e001      	b.n	80013fe <LoopFillZerobss>

080013fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013fc:	3204      	adds	r2, #4

080013fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001400:	d3fb      	bcc.n	80013fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001402:	f7ff ffd7 	bl	80013b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001406:	f004 fe9d 	bl	8006144 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800140a:	f7fe ffd3 	bl	80003b4 <main>

0800140e <LoopForever>:

LoopForever:
    b LoopForever
 800140e:	e7fe      	b.n	800140e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001410:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001418:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800141c:	08006210 	.word	0x08006210
  ldr r2, =_sbss
 8001420:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001424:	2000058c 	.word	0x2000058c

08001428 <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001428:	e7fe      	b.n	8001428 <ADC4_IRQHandler>
	...

0800142c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <HAL_Init+0x28>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a07      	ldr	r2, [pc, #28]	; (8001454 <HAL_Init+0x28>)
 8001436:	f043 0310 	orr.w	r3, r3, #16
 800143a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800143c:	2003      	movs	r0, #3
 800143e:	f001 fc77 	bl	8002d30 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001442:	2000      	movs	r0, #0
 8001444:	f000 f808 	bl	8001458 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001448:	f7ff fb64 	bl	8000b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40022000 	.word	0x40022000

08001458 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001460:	4b12      	ldr	r3, [pc, #72]	; (80014ac <HAL_InitTick+0x54>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <HAL_InitTick+0x58>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	4619      	mov	r1, r3
 800146a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800146e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001472:	fbb2 f3f3 	udiv	r3, r2, r3
 8001476:	4618      	mov	r0, r3
 8001478:	f001 fc8f 	bl	8002d9a <HAL_SYSTICK_Config>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e00e      	b.n	80014a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b0f      	cmp	r3, #15
 800148a:	d80a      	bhi.n	80014a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800148c:	2200      	movs	r2, #0
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	f04f 30ff 	mov.w	r0, #4294967295
 8001494:	f001 fc57 	bl	8002d46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001498:	4a06      	ldr	r2, [pc, #24]	; (80014b4 <HAL_InitTick+0x5c>)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800149e:	2300      	movs	r3, #0
 80014a0:	e000      	b.n	80014a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000008 	.word	0x20000008
 80014b0:	20000010 	.word	0x20000010
 80014b4:	2000000c 	.word	0x2000000c

080014b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_IncTick+0x20>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <HAL_IncTick+0x24>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4413      	add	r3, r2
 80014c8:	4a04      	ldr	r2, [pc, #16]	; (80014dc <HAL_IncTick+0x24>)
 80014ca:	6013      	str	r3, [r2, #0]
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	20000010 	.word	0x20000010
 80014dc:	20000588 	.word	0x20000588

080014e0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return uwTick;  
 80014e4:	4b03      	ldr	r3, [pc, #12]	; (80014f4 <HAL_GetTick+0x14>)
 80014e6:	681b      	ldr	r3, [r3, #0]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	20000588 	.word	0x20000588

080014f8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001500:	f7ff ffee 	bl	80014e0 <HAL_GetTick>
 8001504:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001510:	d005      	beq.n	800151e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001512:	4b0a      	ldr	r3, [pc, #40]	; (800153c <HAL_Delay+0x44>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	461a      	mov	r2, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4413      	add	r3, r2
 800151c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800151e:	bf00      	nop
 8001520:	f7ff ffde 	bl	80014e0 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	429a      	cmp	r2, r3
 800152e:	d8f7      	bhi.n	8001520 <HAL_Delay+0x28>
  {
  }
}
 8001530:	bf00      	nop
 8001532:	bf00      	nop
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000010 	.word	0x20000010

08001540 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b09a      	sub	sp, #104	; 0x68
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001584:	2300      	movs	r3, #0
 8001586:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800158a:	2300      	movs	r3, #0
 800158c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800158e:	2300      	movs	r3, #0
 8001590:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d101      	bne.n	800159c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e1c9      	b.n	8001930 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	691b      	ldr	r3, [r3, #16]
 80015a0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	f003 0310 	and.w	r3, r3, #16
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d176      	bne.n	800169c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d152      	bne.n	800165c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff fac3 	bl	8000b5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d13b      	bne.n	800165c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f001 fa6d 	bl	8002ac4 <ADC_Disable>
 80015ea:	4603      	mov	r3, r0
 80015ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	f003 0310 	and.w	r3, r3, #16
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d12f      	bne.n	800165c <HAL_ADC_Init+0xe0>
 80015fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001600:	2b00      	cmp	r3, #0
 8001602:	d12b      	bne.n	800165c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800160c:	f023 0302 	bic.w	r3, r3, #2
 8001610:	f043 0202 	orr.w	r2, r3, #2
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	689a      	ldr	r2, [r3, #8]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001626:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	689a      	ldr	r2, [r3, #8]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001636:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001638:	4b86      	ldr	r3, [pc, #536]	; (8001854 <HAL_ADC_Init+0x2d8>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a86      	ldr	r2, [pc, #536]	; (8001858 <HAL_ADC_Init+0x2dc>)
 800163e:	fba2 2303 	umull	r2, r3, r2, r3
 8001642:	0c9a      	lsrs	r2, r3, #18
 8001644:	4613      	mov	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4413      	add	r3, r2
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800164e:	e002      	b.n	8001656 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	3b01      	subs	r3, #1
 8001654:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d1f9      	bne.n	8001650 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d007      	beq.n	800167a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001674:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001678:	d110      	bne.n	800169c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	f023 0312 	bic.w	r3, r3, #18
 8001682:	f043 0210 	orr.w	r2, r3, #16
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	f043 0201 	orr.w	r2, r3, #1
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a0:	f003 0310 	and.w	r3, r3, #16
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f040 8136 	bne.w	8001916 <HAL_ADC_Init+0x39a>
 80016aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f040 8131 	bne.w	8001916 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f040 8129 	bne.w	8001916 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80016cc:	f043 0202 	orr.w	r2, r3, #2
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016dc:	d004      	beq.n	80016e8 <HAL_ADC_Init+0x16c>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a5e      	ldr	r2, [pc, #376]	; (800185c <HAL_ADC_Init+0x2e0>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d101      	bne.n	80016ec <HAL_ADC_Init+0x170>
 80016e8:	4b5d      	ldr	r3, [pc, #372]	; (8001860 <HAL_ADC_Init+0x2e4>)
 80016ea:	e000      	b.n	80016ee <HAL_ADC_Init+0x172>
 80016ec:	4b5d      	ldr	r3, [pc, #372]	; (8001864 <HAL_ADC_Init+0x2e8>)
 80016ee:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016f8:	d102      	bne.n	8001700 <HAL_ADC_Init+0x184>
 80016fa:	4b58      	ldr	r3, [pc, #352]	; (800185c <HAL_ADC_Init+0x2e0>)
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	e01a      	b.n	8001736 <HAL_ADC_Init+0x1ba>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a55      	ldr	r2, [pc, #340]	; (800185c <HAL_ADC_Init+0x2e0>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d103      	bne.n	8001712 <HAL_ADC_Init+0x196>
 800170a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	e011      	b.n	8001736 <HAL_ADC_Init+0x1ba>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a54      	ldr	r2, [pc, #336]	; (8001868 <HAL_ADC_Init+0x2ec>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d102      	bne.n	8001722 <HAL_ADC_Init+0x1a6>
 800171c:	4b53      	ldr	r3, [pc, #332]	; (800186c <HAL_ADC_Init+0x2f0>)
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	e009      	b.n	8001736 <HAL_ADC_Init+0x1ba>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a51      	ldr	r2, [pc, #324]	; (800186c <HAL_ADC_Init+0x2f0>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d102      	bne.n	8001732 <HAL_ADC_Init+0x1b6>
 800172c:	4b4e      	ldr	r3, [pc, #312]	; (8001868 <HAL_ADC_Init+0x2ec>)
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	e001      	b.n	8001736 <HAL_ADC_Init+0x1ba>
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f003 0303 	and.w	r3, r3, #3
 8001740:	2b01      	cmp	r3, #1
 8001742:	d108      	bne.n	8001756 <HAL_ADC_Init+0x1da>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b01      	cmp	r3, #1
 8001750:	d101      	bne.n	8001756 <HAL_ADC_Init+0x1da>
 8001752:	2301      	movs	r3, #1
 8001754:	e000      	b.n	8001758 <HAL_ADC_Init+0x1dc>
 8001756:	2300      	movs	r3, #0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d11c      	bne.n	8001796 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800175c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800175e:	2b00      	cmp	r3, #0
 8001760:	d010      	beq.n	8001784 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	2b01      	cmp	r3, #1
 800176c:	d107      	bne.n	800177e <HAL_ADC_Init+0x202>
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	2b01      	cmp	r3, #1
 8001778:	d101      	bne.n	800177e <HAL_ADC_Init+0x202>
 800177a:	2301      	movs	r3, #1
 800177c:	e000      	b.n	8001780 <HAL_ADC_Init+0x204>
 800177e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001780:	2b00      	cmp	r3, #0
 8001782:	d108      	bne.n	8001796 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001784:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	431a      	orrs	r2, r3
 8001792:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001794:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	7e5b      	ldrb	r3, [r3, #25]
 800179a:	035b      	lsls	r3, r3, #13
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017a0:	2a01      	cmp	r2, #1
 80017a2:	d002      	beq.n	80017aa <HAL_ADC_Init+0x22e>
 80017a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017a8:	e000      	b.n	80017ac <HAL_ADC_Init+0x230>
 80017aa:	2200      	movs	r2, #0
 80017ac:	431a      	orrs	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	431a      	orrs	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017bc:	4313      	orrs	r3, r2
 80017be:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d11b      	bne.n	8001802 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	7e5b      	ldrb	r3, [r3, #25]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d109      	bne.n	80017e6 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d6:	3b01      	subs	r3, #1
 80017d8:	045a      	lsls	r2, r3, #17
 80017da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017dc:	4313      	orrs	r3, r2
 80017de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e2:	663b      	str	r3, [r7, #96]	; 0x60
 80017e4:	e00d      	b.n	8001802 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80017ee:	f043 0220 	orr.w	r2, r3, #32
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	f043 0201 	orr.w	r2, r3, #1
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001806:	2b01      	cmp	r3, #1
 8001808:	d03a      	beq.n	8001880 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a16      	ldr	r2, [pc, #88]	; (8001868 <HAL_ADC_Init+0x2ec>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d004      	beq.n	800181e <HAL_ADC_Init+0x2a2>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a14      	ldr	r2, [pc, #80]	; (800186c <HAL_ADC_Init+0x2f0>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d128      	bne.n	8001870 <HAL_ADC_Init+0x2f4>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001822:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001826:	d012      	beq.n	800184e <HAL_ADC_Init+0x2d2>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001830:	d00a      	beq.n	8001848 <HAL_ADC_Init+0x2cc>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001836:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800183a:	d002      	beq.n	8001842 <HAL_ADC_Init+0x2c6>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001840:	e018      	b.n	8001874 <HAL_ADC_Init+0x2f8>
 8001842:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001846:	e015      	b.n	8001874 <HAL_ADC_Init+0x2f8>
 8001848:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800184c:	e012      	b.n	8001874 <HAL_ADC_Init+0x2f8>
 800184e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001852:	e00f      	b.n	8001874 <HAL_ADC_Init+0x2f8>
 8001854:	20000008 	.word	0x20000008
 8001858:	431bde83 	.word	0x431bde83
 800185c:	50000100 	.word	0x50000100
 8001860:	50000300 	.word	0x50000300
 8001864:	50000700 	.word	0x50000700
 8001868:	50000400 	.word	0x50000400
 800186c:	50000500 	.word	0x50000500
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001878:	4313      	orrs	r3, r2
 800187a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800187c:	4313      	orrs	r3, r2
 800187e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f003 030c 	and.w	r3, r3, #12
 800188a:	2b00      	cmp	r3, #0
 800188c:	d114      	bne.n	80018b8 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6812      	ldr	r2, [r2, #0]
 8001898:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800189c:	f023 0302 	bic.w	r3, r3, #2
 80018a0:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	7e1b      	ldrb	r3, [r3, #24]
 80018a6:	039a      	lsls	r2, r3, #14
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	4313      	orrs	r3, r2
 80018b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018b4:	4313      	orrs	r3, r2
 80018b6:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	68da      	ldr	r2, [r3, #12]
 80018be:	4b1e      	ldr	r3, [pc, #120]	; (8001938 <HAL_ADC_Init+0x3bc>)
 80018c0:	4013      	ands	r3, r2
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	6812      	ldr	r2, [r2, #0]
 80018c6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80018c8:	430b      	orrs	r3, r1
 80018ca:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d10c      	bne.n	80018ee <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f023 010f 	bic.w	r1, r3, #15
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	1e5a      	subs	r2, r3, #1
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	631a      	str	r2, [r3, #48]	; 0x30
 80018ec:	e007      	b.n	80018fe <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 020f 	bic.w	r2, r2, #15
 80018fc:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001908:	f023 0303 	bic.w	r3, r3, #3
 800190c:	f043 0201 	orr.w	r2, r3, #1
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	641a      	str	r2, [r3, #64]	; 0x40
 8001914:	e00a      	b.n	800192c <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	f023 0312 	bic.w	r3, r3, #18
 800191e:	f043 0210 	orr.w	r2, r3, #16
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001926:	2301      	movs	r3, #1
 8001928:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800192c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001930:	4618      	mov	r0, r3
 8001932:	3768      	adds	r7, #104	; 0x68
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	fff0c007 	.word	0xfff0c007

0800193c <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001944:	2300      	movs	r3, #0
 8001946:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f003 0304 	and.w	r3, r3, #4
 8001952:	2b00      	cmp	r3, #0
 8001954:	f040 8123 	bne.w	8001b9e <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800195e:	2b01      	cmp	r3, #1
 8001960:	d101      	bne.n	8001966 <HAL_ADC_Start_IT+0x2a>
 8001962:	2302      	movs	r3, #2
 8001964:	e11e      	b.n	8001ba4 <HAL_ADC_Start_IT+0x268>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f001 f844 	bl	80029fc <ADC_Enable>
 8001974:	4603      	mov	r3, r0
 8001976:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001978:	7bfb      	ldrb	r3, [r7, #15]
 800197a:	2b00      	cmp	r3, #0
 800197c:	f040 810a 	bne.w	8001b94 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001988:	f023 0301 	bic.w	r3, r3, #1
 800198c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800199c:	d004      	beq.n	80019a8 <HAL_ADC_Start_IT+0x6c>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a82      	ldr	r2, [pc, #520]	; (8001bac <HAL_ADC_Start_IT+0x270>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d106      	bne.n	80019b6 <HAL_ADC_Start_IT+0x7a>
 80019a8:	4b81      	ldr	r3, [pc, #516]	; (8001bb0 <HAL_ADC_Start_IT+0x274>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f003 031f 	and.w	r3, r3, #31
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d010      	beq.n	80019d6 <HAL_ADC_Start_IT+0x9a>
 80019b4:	e005      	b.n	80019c2 <HAL_ADC_Start_IT+0x86>
 80019b6:	4b7f      	ldr	r3, [pc, #508]	; (8001bb4 <HAL_ADC_Start_IT+0x278>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 031f 	and.w	r3, r3, #31
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d009      	beq.n	80019d6 <HAL_ADC_Start_IT+0x9a>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019ca:	d004      	beq.n	80019d6 <HAL_ADC_Start_IT+0x9a>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a79      	ldr	r2, [pc, #484]	; (8001bb8 <HAL_ADC_Start_IT+0x27c>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d115      	bne.n	8001a02 <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d036      	beq.n	8001a5e <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019f8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001a00:	e02d      	b.n	8001a5e <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a16:	d004      	beq.n	8001a22 <HAL_ADC_Start_IT+0xe6>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a63      	ldr	r2, [pc, #396]	; (8001bac <HAL_ADC_Start_IT+0x270>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d10a      	bne.n	8001a38 <HAL_ADC_Start_IT+0xfc>
 8001a22:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	bf14      	ite	ne
 8001a30:	2301      	movne	r3, #1
 8001a32:	2300      	moveq	r3, #0
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	e008      	b.n	8001a4a <HAL_ADC_Start_IT+0x10e>
 8001a38:	4b5f      	ldr	r3, [pc, #380]	; (8001bb8 <HAL_ADC_Start_IT+0x27c>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	bf14      	ite	ne
 8001a44:	2301      	movne	r3, #1
 8001a46:	2300      	moveq	r3, #0
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d007      	beq.n	8001a5e <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a56:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a6a:	d106      	bne.n	8001a7a <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a70:	f023 0206 	bic.w	r2, r3, #6
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	645a      	str	r2, [r3, #68]	; 0x44
 8001a78:	e002      	b.n	8001a80 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	221c      	movs	r2, #28
 8001a8e:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	695b      	ldr	r3, [r3, #20]
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	d110      	bne.n	8001aba <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f022 0204 	bic.w	r2, r2, #4
 8001aa6:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f042 0208 	orr.w	r2, r2, #8
 8001ab6:	605a      	str	r2, [r3, #4]
          break;
 8001ab8:	e008      	b.n	8001acc <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f042 020c 	orr.w	r2, r2, #12
 8001ac8:	605a      	str	r2, [r3, #4]
          break;
 8001aca:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d107      	bne.n	8001ae4 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	685a      	ldr	r2, [r3, #4]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 0210 	bic.w	r2, r2, #16
 8001ae2:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001aec:	d004      	beq.n	8001af8 <HAL_ADC_Start_IT+0x1bc>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a2e      	ldr	r2, [pc, #184]	; (8001bac <HAL_ADC_Start_IT+0x270>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d106      	bne.n	8001b06 <HAL_ADC_Start_IT+0x1ca>
 8001af8:	4b2d      	ldr	r3, [pc, #180]	; (8001bb0 <HAL_ADC_Start_IT+0x274>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f003 031f 	and.w	r3, r3, #31
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d03e      	beq.n	8001b82 <HAL_ADC_Start_IT+0x246>
 8001b04:	e005      	b.n	8001b12 <HAL_ADC_Start_IT+0x1d6>
 8001b06:	4b2b      	ldr	r3, [pc, #172]	; (8001bb4 <HAL_ADC_Start_IT+0x278>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 031f 	and.w	r3, r3, #31
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d037      	beq.n	8001b82 <HAL_ADC_Start_IT+0x246>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b1a:	d004      	beq.n	8001b26 <HAL_ADC_Start_IT+0x1ea>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a22      	ldr	r2, [pc, #136]	; (8001bac <HAL_ADC_Start_IT+0x270>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d106      	bne.n	8001b34 <HAL_ADC_Start_IT+0x1f8>
 8001b26:	4b22      	ldr	r3, [pc, #136]	; (8001bb0 <HAL_ADC_Start_IT+0x274>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 031f 	and.w	r3, r3, #31
 8001b2e:	2b05      	cmp	r3, #5
 8001b30:	d027      	beq.n	8001b82 <HAL_ADC_Start_IT+0x246>
 8001b32:	e005      	b.n	8001b40 <HAL_ADC_Start_IT+0x204>
 8001b34:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <HAL_ADC_Start_IT+0x278>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 031f 	and.w	r3, r3, #31
 8001b3c:	2b05      	cmp	r3, #5
 8001b3e:	d020      	beq.n	8001b82 <HAL_ADC_Start_IT+0x246>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b48:	d004      	beq.n	8001b54 <HAL_ADC_Start_IT+0x218>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a17      	ldr	r2, [pc, #92]	; (8001bac <HAL_ADC_Start_IT+0x270>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d106      	bne.n	8001b62 <HAL_ADC_Start_IT+0x226>
 8001b54:	4b16      	ldr	r3, [pc, #88]	; (8001bb0 <HAL_ADC_Start_IT+0x274>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 031f 	and.w	r3, r3, #31
 8001b5c:	2b09      	cmp	r3, #9
 8001b5e:	d010      	beq.n	8001b82 <HAL_ADC_Start_IT+0x246>
 8001b60:	e005      	b.n	8001b6e <HAL_ADC_Start_IT+0x232>
 8001b62:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <HAL_ADC_Start_IT+0x278>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 031f 	and.w	r3, r3, #31
 8001b6a:	2b09      	cmp	r3, #9
 8001b6c:	d009      	beq.n	8001b82 <HAL_ADC_Start_IT+0x246>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b76:	d004      	beq.n	8001b82 <HAL_ADC_Start_IT+0x246>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a0e      	ldr	r2, [pc, #56]	; (8001bb8 <HAL_ADC_Start_IT+0x27c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d10f      	bne.n	8001ba2 <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f042 0204 	orr.w	r2, r2, #4
 8001b90:	609a      	str	r2, [r3, #8]
 8001b92:	e006      	b.n	8001ba2 <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001b9c:	e001      	b.n	8001ba2 <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	50000100 	.word	0x50000100
 8001bb0:	50000300 	.word	0x50000300
 8001bb4:	50000700 	.word	0x50000700
 8001bb8:	50000400 	.word	0x50000400

08001bbc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
	...

08001bd8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0304 	and.w	r3, r3, #4
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	d106      	bne.n	8001c08 <HAL_ADC_IRQHandler+0x30>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d00f      	beq.n	8001c28 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001c12:	2b08      	cmp	r3, #8
 8001c14:	f040 80c0 	bne.w	8001d98 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f003 0308 	and.w	r3, r3, #8
 8001c22:	2b08      	cmp	r3, #8
 8001c24:	f040 80b8 	bne.w	8001d98 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	f003 0310 	and.w	r3, r3, #16
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d105      	bne.n	8001c40 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c38:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c48:	d004      	beq.n	8001c54 <HAL_ADC_IRQHandler+0x7c>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a95      	ldr	r2, [pc, #596]	; (8001ea4 <HAL_ADC_IRQHandler+0x2cc>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d106      	bne.n	8001c62 <HAL_ADC_IRQHandler+0x8a>
 8001c54:	4b94      	ldr	r3, [pc, #592]	; (8001ea8 <HAL_ADC_IRQHandler+0x2d0>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 031f 	and.w	r3, r3, #31
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d03e      	beq.n	8001cde <HAL_ADC_IRQHandler+0x106>
 8001c60:	e005      	b.n	8001c6e <HAL_ADC_IRQHandler+0x96>
 8001c62:	4b92      	ldr	r3, [pc, #584]	; (8001eac <HAL_ADC_IRQHandler+0x2d4>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 031f 	and.w	r3, r3, #31
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d037      	beq.n	8001cde <HAL_ADC_IRQHandler+0x106>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c76:	d004      	beq.n	8001c82 <HAL_ADC_IRQHandler+0xaa>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a89      	ldr	r2, [pc, #548]	; (8001ea4 <HAL_ADC_IRQHandler+0x2cc>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d106      	bne.n	8001c90 <HAL_ADC_IRQHandler+0xb8>
 8001c82:	4b89      	ldr	r3, [pc, #548]	; (8001ea8 <HAL_ADC_IRQHandler+0x2d0>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 031f 	and.w	r3, r3, #31
 8001c8a:	2b05      	cmp	r3, #5
 8001c8c:	d027      	beq.n	8001cde <HAL_ADC_IRQHandler+0x106>
 8001c8e:	e005      	b.n	8001c9c <HAL_ADC_IRQHandler+0xc4>
 8001c90:	4b86      	ldr	r3, [pc, #536]	; (8001eac <HAL_ADC_IRQHandler+0x2d4>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 031f 	and.w	r3, r3, #31
 8001c98:	2b05      	cmp	r3, #5
 8001c9a:	d020      	beq.n	8001cde <HAL_ADC_IRQHandler+0x106>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ca4:	d004      	beq.n	8001cb0 <HAL_ADC_IRQHandler+0xd8>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a7e      	ldr	r2, [pc, #504]	; (8001ea4 <HAL_ADC_IRQHandler+0x2cc>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d106      	bne.n	8001cbe <HAL_ADC_IRQHandler+0xe6>
 8001cb0:	4b7d      	ldr	r3, [pc, #500]	; (8001ea8 <HAL_ADC_IRQHandler+0x2d0>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f003 031f 	and.w	r3, r3, #31
 8001cb8:	2b09      	cmp	r3, #9
 8001cba:	d010      	beq.n	8001cde <HAL_ADC_IRQHandler+0x106>
 8001cbc:	e005      	b.n	8001cca <HAL_ADC_IRQHandler+0xf2>
 8001cbe:	4b7b      	ldr	r3, [pc, #492]	; (8001eac <HAL_ADC_IRQHandler+0x2d4>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 031f 	and.w	r3, r3, #31
 8001cc6:	2b09      	cmp	r3, #9
 8001cc8:	d009      	beq.n	8001cde <HAL_ADC_IRQHandler+0x106>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cd2:	d004      	beq.n	8001cde <HAL_ADC_IRQHandler+0x106>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a75      	ldr	r2, [pc, #468]	; (8001eb0 <HAL_ADC_IRQHandler+0x2d8>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d104      	bne.n	8001ce8 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	e00f      	b.n	8001d08 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cf0:	d004      	beq.n	8001cfc <HAL_ADC_IRQHandler+0x124>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a6b      	ldr	r2, [pc, #428]	; (8001ea4 <HAL_ADC_IRQHandler+0x2cc>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d102      	bne.n	8001d02 <HAL_ADC_IRQHandler+0x12a>
 8001cfc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d00:	e000      	b.n	8001d04 <HAL_ADC_IRQHandler+0x12c>
 8001d02:	4b6b      	ldr	r3, [pc, #428]	; (8001eb0 <HAL_ADC_IRQHandler+0x2d8>)
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d139      	bne.n	8001d8a <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d134      	bne.n	8001d8a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b08      	cmp	r3, #8
 8001d2c:	d12d      	bne.n	8001d8a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d11a      	bne.n	8001d72 <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 020c 	bic.w	r2, r2, #12
 8001d4a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d112      	bne.n	8001d8a <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d68:	f043 0201 	orr.w	r2, r3, #1
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	641a      	str	r2, [r3, #64]	; 0x40
 8001d70:	e00b      	b.n	8001d8a <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	f043 0210 	orr.w	r2, r3, #16
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d82:	f043 0201 	orr.w	r2, r3, #1
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff fbd8 	bl	8001540 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	220c      	movs	r2, #12
 8001d96:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0320 	and.w	r3, r3, #32
 8001da2:	2b20      	cmp	r3, #32
 8001da4:	d106      	bne.n	8001db4 <HAL_ADC_IRQHandler+0x1dc>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 0320 	and.w	r3, r3, #32
 8001db0:	2b20      	cmp	r3, #32
 8001db2:	d00f      	beq.n	8001dd4 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001dbe:	2b40      	cmp	r3, #64	; 0x40
 8001dc0:	f040 813c 	bne.w	800203c <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dce:	2b40      	cmp	r3, #64	; 0x40
 8001dd0:	f040 8134 	bne.w	800203c <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001de8:	d004      	beq.n	8001df4 <HAL_ADC_IRQHandler+0x21c>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a2d      	ldr	r2, [pc, #180]	; (8001ea4 <HAL_ADC_IRQHandler+0x2cc>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d106      	bne.n	8001e02 <HAL_ADC_IRQHandler+0x22a>
 8001df4:	4b2c      	ldr	r3, [pc, #176]	; (8001ea8 <HAL_ADC_IRQHandler+0x2d0>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 031f 	and.w	r3, r3, #31
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d03e      	beq.n	8001e7e <HAL_ADC_IRQHandler+0x2a6>
 8001e00:	e005      	b.n	8001e0e <HAL_ADC_IRQHandler+0x236>
 8001e02:	4b2a      	ldr	r3, [pc, #168]	; (8001eac <HAL_ADC_IRQHandler+0x2d4>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 031f 	and.w	r3, r3, #31
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d037      	beq.n	8001e7e <HAL_ADC_IRQHandler+0x2a6>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e16:	d004      	beq.n	8001e22 <HAL_ADC_IRQHandler+0x24a>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a21      	ldr	r2, [pc, #132]	; (8001ea4 <HAL_ADC_IRQHandler+0x2cc>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d106      	bne.n	8001e30 <HAL_ADC_IRQHandler+0x258>
 8001e22:	4b21      	ldr	r3, [pc, #132]	; (8001ea8 <HAL_ADC_IRQHandler+0x2d0>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 031f 	and.w	r3, r3, #31
 8001e2a:	2b05      	cmp	r3, #5
 8001e2c:	d027      	beq.n	8001e7e <HAL_ADC_IRQHandler+0x2a6>
 8001e2e:	e005      	b.n	8001e3c <HAL_ADC_IRQHandler+0x264>
 8001e30:	4b1e      	ldr	r3, [pc, #120]	; (8001eac <HAL_ADC_IRQHandler+0x2d4>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 031f 	and.w	r3, r3, #31
 8001e38:	2b05      	cmp	r3, #5
 8001e3a:	d020      	beq.n	8001e7e <HAL_ADC_IRQHandler+0x2a6>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e44:	d004      	beq.n	8001e50 <HAL_ADC_IRQHandler+0x278>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a16      	ldr	r2, [pc, #88]	; (8001ea4 <HAL_ADC_IRQHandler+0x2cc>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d106      	bne.n	8001e5e <HAL_ADC_IRQHandler+0x286>
 8001e50:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <HAL_ADC_IRQHandler+0x2d0>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 031f 	and.w	r3, r3, #31
 8001e58:	2b09      	cmp	r3, #9
 8001e5a:	d010      	beq.n	8001e7e <HAL_ADC_IRQHandler+0x2a6>
 8001e5c:	e005      	b.n	8001e6a <HAL_ADC_IRQHandler+0x292>
 8001e5e:	4b13      	ldr	r3, [pc, #76]	; (8001eac <HAL_ADC_IRQHandler+0x2d4>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 031f 	and.w	r3, r3, #31
 8001e66:	2b09      	cmp	r3, #9
 8001e68:	d009      	beq.n	8001e7e <HAL_ADC_IRQHandler+0x2a6>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e72:	d004      	beq.n	8001e7e <HAL_ADC_IRQHandler+0x2a6>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a0d      	ldr	r2, [pc, #52]	; (8001eb0 <HAL_ADC_IRQHandler+0x2d8>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d104      	bne.n	8001e88 <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	613b      	str	r3, [r7, #16]
 8001e86:	e018      	b.n	8001eba <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e90:	d004      	beq.n	8001e9c <HAL_ADC_IRQHandler+0x2c4>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a03      	ldr	r2, [pc, #12]	; (8001ea4 <HAL_ADC_IRQHandler+0x2cc>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d10b      	bne.n	8001eb4 <HAL_ADC_IRQHandler+0x2dc>
 8001e9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ea0:	e009      	b.n	8001eb6 <HAL_ADC_IRQHandler+0x2de>
 8001ea2:	bf00      	nop
 8001ea4:	50000100 	.word	0x50000100
 8001ea8:	50000300 	.word	0x50000300
 8001eac:	50000700 	.word	0x50000700
 8001eb0:	50000400 	.word	0x50000400
 8001eb4:	4b9d      	ldr	r3, [pc, #628]	; (800212c <HAL_ADC_IRQHandler+0x554>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f040 80b2 	bne.w	800202e <HAL_ADC_IRQHandler+0x456>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00d      	beq.n	8001ef0 <HAL_ADC_IRQHandler+0x318>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f040 80a5 	bne.w	800202e <HAL_ADC_IRQHandler+0x456>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f040 809f 	bne.w	800202e <HAL_ADC_IRQHandler+0x456>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001efa:	2b40      	cmp	r3, #64	; 0x40
 8001efc:	f040 8097 	bne.w	800202e <HAL_ADC_IRQHandler+0x456>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f08:	d004      	beq.n	8001f14 <HAL_ADC_IRQHandler+0x33c>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a88      	ldr	r2, [pc, #544]	; (8002130 <HAL_ADC_IRQHandler+0x558>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d106      	bne.n	8001f22 <HAL_ADC_IRQHandler+0x34a>
 8001f14:	4b87      	ldr	r3, [pc, #540]	; (8002134 <HAL_ADC_IRQHandler+0x55c>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 031f 	and.w	r3, r3, #31
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d03e      	beq.n	8001f9e <HAL_ADC_IRQHandler+0x3c6>
 8001f20:	e005      	b.n	8001f2e <HAL_ADC_IRQHandler+0x356>
 8001f22:	4b85      	ldr	r3, [pc, #532]	; (8002138 <HAL_ADC_IRQHandler+0x560>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f003 031f 	and.w	r3, r3, #31
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d037      	beq.n	8001f9e <HAL_ADC_IRQHandler+0x3c6>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f36:	d004      	beq.n	8001f42 <HAL_ADC_IRQHandler+0x36a>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a7c      	ldr	r2, [pc, #496]	; (8002130 <HAL_ADC_IRQHandler+0x558>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d106      	bne.n	8001f50 <HAL_ADC_IRQHandler+0x378>
 8001f42:	4b7c      	ldr	r3, [pc, #496]	; (8002134 <HAL_ADC_IRQHandler+0x55c>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 031f 	and.w	r3, r3, #31
 8001f4a:	2b06      	cmp	r3, #6
 8001f4c:	d027      	beq.n	8001f9e <HAL_ADC_IRQHandler+0x3c6>
 8001f4e:	e005      	b.n	8001f5c <HAL_ADC_IRQHandler+0x384>
 8001f50:	4b79      	ldr	r3, [pc, #484]	; (8002138 <HAL_ADC_IRQHandler+0x560>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f003 031f 	and.w	r3, r3, #31
 8001f58:	2b06      	cmp	r3, #6
 8001f5a:	d020      	beq.n	8001f9e <HAL_ADC_IRQHandler+0x3c6>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f64:	d004      	beq.n	8001f70 <HAL_ADC_IRQHandler+0x398>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a71      	ldr	r2, [pc, #452]	; (8002130 <HAL_ADC_IRQHandler+0x558>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d106      	bne.n	8001f7e <HAL_ADC_IRQHandler+0x3a6>
 8001f70:	4b70      	ldr	r3, [pc, #448]	; (8002134 <HAL_ADC_IRQHandler+0x55c>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f003 031f 	and.w	r3, r3, #31
 8001f78:	2b07      	cmp	r3, #7
 8001f7a:	d010      	beq.n	8001f9e <HAL_ADC_IRQHandler+0x3c6>
 8001f7c:	e005      	b.n	8001f8a <HAL_ADC_IRQHandler+0x3b2>
 8001f7e:	4b6e      	ldr	r3, [pc, #440]	; (8002138 <HAL_ADC_IRQHandler+0x560>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 031f 	and.w	r3, r3, #31
 8001f86:	2b07      	cmp	r3, #7
 8001f88:	d009      	beq.n	8001f9e <HAL_ADC_IRQHandler+0x3c6>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f92:	d004      	beq.n	8001f9e <HAL_ADC_IRQHandler+0x3c6>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a64      	ldr	r2, [pc, #400]	; (800212c <HAL_ADC_IRQHandler+0x554>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d104      	bne.n	8001fa8 <HAL_ADC_IRQHandler+0x3d0>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	e00f      	b.n	8001fc8 <HAL_ADC_IRQHandler+0x3f0>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fb0:	d004      	beq.n	8001fbc <HAL_ADC_IRQHandler+0x3e4>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a5e      	ldr	r2, [pc, #376]	; (8002130 <HAL_ADC_IRQHandler+0x558>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d102      	bne.n	8001fc2 <HAL_ADC_IRQHandler+0x3ea>
 8001fbc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001fc0:	e000      	b.n	8001fc4 <HAL_ADC_IRQHandler+0x3ec>
 8001fc2:	4b5a      	ldr	r3, [pc, #360]	; (800212c <HAL_ADC_IRQHandler+0x554>)
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d12d      	bne.n	800202e <HAL_ADC_IRQHandler+0x456>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 0308 	and.w	r3, r3, #8
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d11a      	bne.n	8002016 <HAL_ADC_IRQHandler+0x43e>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001fee:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002004:	2b00      	cmp	r3, #0
 8002006:	d112      	bne.n	800202e <HAL_ADC_IRQHandler+0x456>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	f043 0201 	orr.w	r2, r3, #1
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	641a      	str	r2, [r3, #64]	; 0x40
 8002014:	e00b      	b.n	800202e <HAL_ADC_IRQHandler+0x456>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	f043 0210 	orr.w	r2, r3, #16
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	f043 0201 	orr.w	r2, r3, #1
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f8de 	bl	80021f0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2260      	movs	r2, #96	; 0x60
 800203a:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002046:	2b80      	cmp	r3, #128	; 0x80
 8002048:	d113      	bne.n	8002072 <HAL_ADC_IRQHandler+0x49a>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002054:	2b80      	cmp	r3, #128	; 0x80
 8002056:	d10c      	bne.n	8002072 <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff fa75 	bl	8001554 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2280      	movs	r2, #128	; 0x80
 8002070:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002080:	d115      	bne.n	80020ae <HAL_ADC_IRQHandler+0x4d6>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002090:	d10d      	bne.n	80020ae <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f8ba 	bl	8002218 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020ac:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020bc:	d115      	bne.n	80020ea <HAL_ADC_IRQHandler+0x512>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020cc:	d10d      	bne.n	80020ea <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f8a6 	bl	800222c <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020e8:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0310 	and.w	r3, r3, #16
 80020f4:	2b10      	cmp	r3, #16
 80020f6:	d151      	bne.n	800219c <HAL_ADC_IRQHandler+0x5c4>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f003 0310 	and.w	r3, r3, #16
 8002102:	2b10      	cmp	r3, #16
 8002104:	d14a      	bne.n	800219c <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800210a:	2b01      	cmp	r3, #1
 800210c:	d102      	bne.n	8002114 <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 800210e:	2301      	movs	r3, #1
 8002110:	617b      	str	r3, [r7, #20]
 8002112:	e02d      	b.n	8002170 <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800211c:	d004      	beq.n	8002128 <HAL_ADC_IRQHandler+0x550>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a03      	ldr	r2, [pc, #12]	; (8002130 <HAL_ADC_IRQHandler+0x558>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d109      	bne.n	800213c <HAL_ADC_IRQHandler+0x564>
 8002128:	4b02      	ldr	r3, [pc, #8]	; (8002134 <HAL_ADC_IRQHandler+0x55c>)
 800212a:	e008      	b.n	800213e <HAL_ADC_IRQHandler+0x566>
 800212c:	50000400 	.word	0x50000400
 8002130:	50000100 	.word	0x50000100
 8002134:	50000300 	.word	0x50000300
 8002138:	50000700 	.word	0x50000700
 800213c:	4b2b      	ldr	r3, [pc, #172]	; (80021ec <HAL_ADC_IRQHandler+0x614>)
 800213e:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 031f 	and.w	r3, r3, #31
 8002148:	2b00      	cmp	r3, #0
 800214a:	d109      	bne.n	8002160 <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b01      	cmp	r3, #1
 8002158:	d10a      	bne.n	8002170 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 800215a:	2301      	movs	r3, #1
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	e007      	b.n	8002170 <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 800216c:	2301      	movs	r3, #1
 800216e:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d10e      	bne.n	8002194 <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002186:	f043 0202 	orr.w	r2, r3, #2
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff f9ea 	bl	8001568 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2210      	movs	r2, #16
 800219a:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021aa:	d11b      	bne.n	80021e4 <HAL_ADC_IRQHandler+0x60c>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ba:	d113      	bne.n	80021e4 <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c0:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021cc:	f043 0208 	orr.w	r2, r3, #8
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021dc:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 f810 	bl	8002204 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 80021e4:	bf00      	nop
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	50000700 	.word	0x50000700

080021f0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002240:	b480      	push	{r7}
 8002242:	b09b      	sub	sp, #108	; 0x6c
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800224a:	2300      	movs	r3, #0
 800224c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800225a:	2b01      	cmp	r3, #1
 800225c:	d101      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x22>
 800225e:	2302      	movs	r3, #2
 8002260:	e2cb      	b.n	80027fa <HAL_ADC_ConfigChannel+0x5ba>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	2b00      	cmp	r3, #0
 8002276:	f040 82af 	bne.w	80027d8 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b04      	cmp	r3, #4
 8002280:	d81c      	bhi.n	80022bc <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	4613      	mov	r3, r2
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	4413      	add	r3, r2
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	461a      	mov	r2, r3
 8002296:	231f      	movs	r3, #31
 8002298:	4093      	lsls	r3, r2
 800229a:	43db      	mvns	r3, r3
 800229c:	4019      	ands	r1, r3
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	6818      	ldr	r0, [r3, #0]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	4413      	add	r3, r2
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	fa00 f203 	lsl.w	r2, r0, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	631a      	str	r2, [r3, #48]	; 0x30
 80022ba:	e063      	b.n	8002384 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b09      	cmp	r3, #9
 80022c2:	d81e      	bhi.n	8002302 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	4413      	add	r3, r2
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	3b1e      	subs	r3, #30
 80022d8:	221f      	movs	r2, #31
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	43db      	mvns	r3, r3
 80022e0:	4019      	ands	r1, r3
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	6818      	ldr	r0, [r3, #0]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	4413      	add	r3, r2
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	3b1e      	subs	r3, #30
 80022f4:	fa00 f203 	lsl.w	r2, r0, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	430a      	orrs	r2, r1
 80022fe:	635a      	str	r2, [r3, #52]	; 0x34
 8002300:	e040      	b.n	8002384 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b0e      	cmp	r3, #14
 8002308:	d81e      	bhi.n	8002348 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	4613      	mov	r3, r2
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	4413      	add	r3, r2
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	3b3c      	subs	r3, #60	; 0x3c
 800231e:	221f      	movs	r2, #31
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	4019      	ands	r1, r3
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	6818      	ldr	r0, [r3, #0]
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	4613      	mov	r3, r2
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	4413      	add	r3, r2
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	3b3c      	subs	r3, #60	; 0x3c
 800233a:	fa00 f203 	lsl.w	r2, r0, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	430a      	orrs	r2, r1
 8002344:	639a      	str	r2, [r3, #56]	; 0x38
 8002346:	e01d      	b.n	8002384 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	4413      	add	r3, r2
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	3b5a      	subs	r3, #90	; 0x5a
 800235c:	221f      	movs	r2, #31
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	43db      	mvns	r3, r3
 8002364:	4019      	ands	r1, r3
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	6818      	ldr	r0, [r3, #0]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	4413      	add	r3, r2
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	3b5a      	subs	r3, #90	; 0x5a
 8002378:	fa00 f203 	lsl.w	r2, r0, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	430a      	orrs	r2, r1
 8002382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 030c 	and.w	r3, r3, #12
 800238e:	2b00      	cmp	r3, #0
 8002390:	f040 80e5 	bne.w	800255e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b09      	cmp	r3, #9
 800239a:	d91c      	bls.n	80023d6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6999      	ldr	r1, [r3, #24]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	4613      	mov	r3, r2
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	4413      	add	r3, r2
 80023ac:	3b1e      	subs	r3, #30
 80023ae:	2207      	movs	r2, #7
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	4019      	ands	r1, r3
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	6898      	ldr	r0, [r3, #8]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	4613      	mov	r3, r2
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	4413      	add	r3, r2
 80023c6:	3b1e      	subs	r3, #30
 80023c8:	fa00 f203 	lsl.w	r2, r0, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	619a      	str	r2, [r3, #24]
 80023d4:	e019      	b.n	800240a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6959      	ldr	r1, [r3, #20]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	4613      	mov	r3, r2
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	4413      	add	r3, r2
 80023e6:	2207      	movs	r2, #7
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	4019      	ands	r1, r3
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	6898      	ldr	r0, [r3, #8]
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4613      	mov	r3, r2
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	4413      	add	r3, r2
 80023fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	430a      	orrs	r2, r1
 8002408:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	695a      	ldr	r2, [r3, #20]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	08db      	lsrs	r3, r3, #3
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	3b01      	subs	r3, #1
 8002428:	2b03      	cmp	r3, #3
 800242a:	d84f      	bhi.n	80024cc <HAL_ADC_ConfigChannel+0x28c>
 800242c:	a201      	add	r2, pc, #4	; (adr r2, 8002434 <HAL_ADC_ConfigChannel+0x1f4>)
 800242e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002432:	bf00      	nop
 8002434:	08002445 	.word	0x08002445
 8002438:	08002467 	.word	0x08002467
 800243c:	08002489 	.word	0x08002489
 8002440:	080024ab 	.word	0x080024ab
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800244a:	4b9f      	ldr	r3, [pc, #636]	; (80026c8 <HAL_ADC_ConfigChannel+0x488>)
 800244c:	4013      	ands	r3, r2
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	6812      	ldr	r2, [r2, #0]
 8002452:	0691      	lsls	r1, r2, #26
 8002454:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002456:	430a      	orrs	r2, r1
 8002458:	431a      	orrs	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002462:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002464:	e07e      	b.n	8002564 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800246c:	4b96      	ldr	r3, [pc, #600]	; (80026c8 <HAL_ADC_ConfigChannel+0x488>)
 800246e:	4013      	ands	r3, r2
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	6812      	ldr	r2, [r2, #0]
 8002474:	0691      	lsls	r1, r2, #26
 8002476:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002478:	430a      	orrs	r2, r1
 800247a:	431a      	orrs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002484:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002486:	e06d      	b.n	8002564 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800248e:	4b8e      	ldr	r3, [pc, #568]	; (80026c8 <HAL_ADC_ConfigChannel+0x488>)
 8002490:	4013      	ands	r3, r2
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	6812      	ldr	r2, [r2, #0]
 8002496:	0691      	lsls	r1, r2, #26
 8002498:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800249a:	430a      	orrs	r2, r1
 800249c:	431a      	orrs	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80024a6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80024a8:	e05c      	b.n	8002564 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80024b0:	4b85      	ldr	r3, [pc, #532]	; (80026c8 <HAL_ADC_ConfigChannel+0x488>)
 80024b2:	4013      	ands	r3, r2
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	6812      	ldr	r2, [r2, #0]
 80024b8:	0691      	lsls	r1, r2, #26
 80024ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80024bc:	430a      	orrs	r2, r1
 80024be:	431a      	orrs	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80024c8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80024ca:	e04b      	b.n	8002564 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	069b      	lsls	r3, r3, #26
 80024dc:	429a      	cmp	r2, r3
 80024de:	d107      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024ee:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	069b      	lsls	r3, r3, #26
 8002500:	429a      	cmp	r2, r3
 8002502:	d107      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002512:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800251a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	069b      	lsls	r3, r3, #26
 8002524:	429a      	cmp	r2, r3
 8002526:	d107      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002536:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800253e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	069b      	lsls	r3, r3, #26
 8002548:	429a      	cmp	r2, r3
 800254a:	d10a      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800255a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800255c:	e001      	b.n	8002562 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800255e:	bf00      	nop
 8002560:	e000      	b.n	8002564 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002562:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	2b01      	cmp	r3, #1
 8002570:	d108      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x344>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b01      	cmp	r3, #1
 800257e:	d101      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x344>
 8002580:	2301      	movs	r3, #1
 8002582:	e000      	b.n	8002586 <HAL_ADC_ConfigChannel+0x346>
 8002584:	2300      	movs	r3, #0
 8002586:	2b00      	cmp	r3, #0
 8002588:	f040 8131 	bne.w	80027ee <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d00f      	beq.n	80025b4 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2201      	movs	r2, #1
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43da      	mvns	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	400a      	ands	r2, r1
 80025ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80025b2:	e049      	b.n	8002648 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2201      	movs	r2, #1
 80025c2:	409a      	lsls	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2b09      	cmp	r3, #9
 80025d4:	d91c      	bls.n	8002610 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6999      	ldr	r1, [r3, #24]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	4613      	mov	r3, r2
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	4413      	add	r3, r2
 80025e6:	3b1b      	subs	r3, #27
 80025e8:	2207      	movs	r2, #7
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43db      	mvns	r3, r3
 80025f0:	4019      	ands	r1, r3
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	6898      	ldr	r0, [r3, #8]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	4613      	mov	r3, r2
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	4413      	add	r3, r2
 8002600:	3b1b      	subs	r3, #27
 8002602:	fa00 f203 	lsl.w	r2, r0, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	430a      	orrs	r2, r1
 800260c:	619a      	str	r2, [r3, #24]
 800260e:	e01b      	b.n	8002648 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6959      	ldr	r1, [r3, #20]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	1c5a      	adds	r2, r3, #1
 800261c:	4613      	mov	r3, r2
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	4413      	add	r3, r2
 8002622:	2207      	movs	r2, #7
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43db      	mvns	r3, r3
 800262a:	4019      	ands	r1, r3
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	6898      	ldr	r0, [r3, #8]
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	1c5a      	adds	r2, r3, #1
 8002636:	4613      	mov	r3, r2
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	4413      	add	r3, r2
 800263c:	fa00 f203 	lsl.w	r2, r0, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	430a      	orrs	r2, r1
 8002646:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002650:	d004      	beq.n	800265c <HAL_ADC_ConfigChannel+0x41c>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a1d      	ldr	r2, [pc, #116]	; (80026cc <HAL_ADC_ConfigChannel+0x48c>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d101      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x420>
 800265c:	4b1c      	ldr	r3, [pc, #112]	; (80026d0 <HAL_ADC_ConfigChannel+0x490>)
 800265e:	e000      	b.n	8002662 <HAL_ADC_ConfigChannel+0x422>
 8002660:	4b1c      	ldr	r3, [pc, #112]	; (80026d4 <HAL_ADC_ConfigChannel+0x494>)
 8002662:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2b10      	cmp	r3, #16
 800266a:	d105      	bne.n	8002678 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800266c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002674:	2b00      	cmp	r3, #0
 8002676:	d015      	beq.n	80026a4 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800267c:	2b11      	cmp	r3, #17
 800267e:	d105      	bne.n	800268c <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002680:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00b      	beq.n	80026a4 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002690:	2b12      	cmp	r3, #18
 8002692:	f040 80ac 	bne.w	80027ee <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002696:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f040 80a5 	bne.w	80027ee <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026ac:	d102      	bne.n	80026b4 <HAL_ADC_ConfigChannel+0x474>
 80026ae:	4b07      	ldr	r3, [pc, #28]	; (80026cc <HAL_ADC_ConfigChannel+0x48c>)
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	e023      	b.n	80026fc <HAL_ADC_ConfigChannel+0x4bc>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a04      	ldr	r2, [pc, #16]	; (80026cc <HAL_ADC_ConfigChannel+0x48c>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d10c      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x498>
 80026be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	e01a      	b.n	80026fc <HAL_ADC_ConfigChannel+0x4bc>
 80026c6:	bf00      	nop
 80026c8:	83fff000 	.word	0x83fff000
 80026cc:	50000100 	.word	0x50000100
 80026d0:	50000300 	.word	0x50000300
 80026d4:	50000700 	.word	0x50000700
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a4a      	ldr	r2, [pc, #296]	; (8002808 <HAL_ADC_ConfigChannel+0x5c8>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d102      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x4a8>
 80026e2:	4b4a      	ldr	r3, [pc, #296]	; (800280c <HAL_ADC_ConfigChannel+0x5cc>)
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	e009      	b.n	80026fc <HAL_ADC_ConfigChannel+0x4bc>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a47      	ldr	r2, [pc, #284]	; (800280c <HAL_ADC_ConfigChannel+0x5cc>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d102      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0x4b8>
 80026f2:	4b45      	ldr	r3, [pc, #276]	; (8002808 <HAL_ADC_ConfigChannel+0x5c8>)
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	e001      	b.n	80026fc <HAL_ADC_ConfigChannel+0x4bc>
 80026f8:	2300      	movs	r3, #0
 80026fa:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 0303 	and.w	r3, r3, #3
 8002706:	2b01      	cmp	r3, #1
 8002708:	d108      	bne.n	800271c <HAL_ADC_ConfigChannel+0x4dc>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b01      	cmp	r3, #1
 8002716:	d101      	bne.n	800271c <HAL_ADC_ConfigChannel+0x4dc>
 8002718:	2301      	movs	r3, #1
 800271a:	e000      	b.n	800271e <HAL_ADC_ConfigChannel+0x4de>
 800271c:	2300      	movs	r3, #0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d150      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002722:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002724:	2b00      	cmp	r3, #0
 8002726:	d010      	beq.n	800274a <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 0303 	and.w	r3, r3, #3
 8002730:	2b01      	cmp	r3, #1
 8002732:	d107      	bne.n	8002744 <HAL_ADC_ConfigChannel+0x504>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	2b01      	cmp	r3, #1
 800273e:	d101      	bne.n	8002744 <HAL_ADC_ConfigChannel+0x504>
 8002740:	2301      	movs	r3, #1
 8002742:	e000      	b.n	8002746 <HAL_ADC_ConfigChannel+0x506>
 8002744:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002746:	2b00      	cmp	r3, #0
 8002748:	d13c      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2b10      	cmp	r3, #16
 8002750:	d11d      	bne.n	800278e <HAL_ADC_ConfigChannel+0x54e>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800275a:	d118      	bne.n	800278e <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800275c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002764:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002766:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002768:	4b29      	ldr	r3, [pc, #164]	; (8002810 <HAL_ADC_ConfigChannel+0x5d0>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a29      	ldr	r2, [pc, #164]	; (8002814 <HAL_ADC_ConfigChannel+0x5d4>)
 800276e:	fba2 2303 	umull	r2, r3, r2, r3
 8002772:	0c9a      	lsrs	r2, r3, #18
 8002774:	4613      	mov	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800277e:	e002      	b.n	8002786 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	3b01      	subs	r3, #1
 8002784:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1f9      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800278c:	e02e      	b.n	80027ec <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2b11      	cmp	r3, #17
 8002794:	d10b      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x56e>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800279e:	d106      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80027a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80027a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027aa:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80027ac:	e01e      	b.n	80027ec <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2b12      	cmp	r3, #18
 80027b4:	d11a      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80027b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80027be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027c0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80027c2:	e013      	b.n	80027ec <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	f043 0220 	orr.w	r2, r3, #32
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80027d6:	e00a      	b.n	80027ee <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027dc:	f043 0220 	orr.w	r2, r3, #32
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80027ea:	e000      	b.n	80027ee <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80027ec:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80027f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	376c      	adds	r7, #108	; 0x6c
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	50000400 	.word	0x50000400
 800280c:	50000500 	.word	0x50000500
 8002810:	20000008 	.word	0x20000008
 8002814:	431bde83 	.word	0x431bde83

08002818 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002818:	b480      	push	{r7}
 800281a:	b099      	sub	sp, #100	; 0x64
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002822:	2300      	movs	r3, #0
 8002824:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002830:	d102      	bne.n	8002838 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002832:	4b6d      	ldr	r3, [pc, #436]	; (80029e8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002834:	60bb      	str	r3, [r7, #8]
 8002836:	e01a      	b.n	800286e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a6a      	ldr	r2, [pc, #424]	; (80029e8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d103      	bne.n	800284a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002842:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002846:	60bb      	str	r3, [r7, #8]
 8002848:	e011      	b.n	800286e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a67      	ldr	r2, [pc, #412]	; (80029ec <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d102      	bne.n	800285a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002854:	4b66      	ldr	r3, [pc, #408]	; (80029f0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002856:	60bb      	str	r3, [r7, #8]
 8002858:	e009      	b.n	800286e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a64      	ldr	r2, [pc, #400]	; (80029f0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d102      	bne.n	800286a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002864:	4b61      	ldr	r3, [pc, #388]	; (80029ec <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002866:	60bb      	str	r3, [r7, #8]
 8002868:	e001      	b.n	800286e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800286a:	2300      	movs	r3, #0
 800286c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e0b0      	b.n	80029da <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800287e:	2b01      	cmp	r3, #1
 8002880:	d101      	bne.n	8002886 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002882:	2302      	movs	r3, #2
 8002884:	e0a9      	b.n	80029da <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b00      	cmp	r3, #0
 800289a:	f040 808d 	bne.w	80029b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f040 8086 	bne.w	80029b8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028b4:	d004      	beq.n	80028c0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a4b      	ldr	r2, [pc, #300]	; (80029e8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d101      	bne.n	80028c4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80028c0:	4b4c      	ldr	r3, [pc, #304]	; (80029f4 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80028c2:	e000      	b.n	80028c6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80028c4:	4b4c      	ldr	r3, [pc, #304]	; (80029f8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80028c6:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d040      	beq.n	8002952 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80028d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	6859      	ldr	r1, [r3, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028e2:	035b      	lsls	r3, r3, #13
 80028e4:	430b      	orrs	r3, r1
 80028e6:	431a      	orrs	r2, r3
 80028e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028ea:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d108      	bne.n	800290c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b01      	cmp	r3, #1
 8002906:	d101      	bne.n	800290c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002908:	2301      	movs	r3, #1
 800290a:	e000      	b.n	800290e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 800290c:	2300      	movs	r3, #0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d15c      	bne.n	80029cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	2b01      	cmp	r3, #1
 800291c:	d107      	bne.n	800292e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b01      	cmp	r3, #1
 8002928:	d101      	bne.n	800292e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800292a:	2301      	movs	r3, #1
 800292c:	e000      	b.n	8002930 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800292e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002930:	2b00      	cmp	r3, #0
 8002932:	d14b      	bne.n	80029cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002934:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800293c:	f023 030f 	bic.w	r3, r3, #15
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	6811      	ldr	r1, [r2, #0]
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	6892      	ldr	r2, [r2, #8]
 8002948:	430a      	orrs	r2, r1
 800294a:	431a      	orrs	r2, r3
 800294c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800294e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002950:	e03c      	b.n	80029cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002952:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800295a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800295c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f003 0303 	and.w	r3, r3, #3
 8002968:	2b01      	cmp	r3, #1
 800296a:	d108      	bne.n	800297e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b01      	cmp	r3, #1
 8002978:	d101      	bne.n	800297e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800297a:	2301      	movs	r3, #1
 800297c:	e000      	b.n	8002980 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800297e:	2300      	movs	r3, #0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d123      	bne.n	80029cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f003 0303 	and.w	r3, r3, #3
 800298c:	2b01      	cmp	r3, #1
 800298e:	d107      	bne.n	80029a0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800299c:	2301      	movs	r3, #1
 800299e:	e000      	b.n	80029a2 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80029a0:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d112      	bne.n	80029cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80029a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80029ae:	f023 030f 	bic.w	r3, r3, #15
 80029b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029b4:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80029b6:	e009      	b.n	80029cc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	f043 0220 	orr.w	r2, r3, #32
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80029ca:	e000      	b.n	80029ce <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80029cc:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80029d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80029da:	4618      	mov	r0, r3
 80029dc:	3764      	adds	r7, #100	; 0x64
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	50000100 	.word	0x50000100
 80029ec:	50000400 	.word	0x50000400
 80029f0:	50000500 	.word	0x50000500
 80029f4:	50000300 	.word	0x50000300
 80029f8:	50000700 	.word	0x50000700

080029fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a04:	2300      	movs	r3, #0
 8002a06:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 0303 	and.w	r3, r3, #3
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d108      	bne.n	8002a28 <ADC_Enable+0x2c>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d101      	bne.n	8002a28 <ADC_Enable+0x2c>
 8002a24:	2301      	movs	r3, #1
 8002a26:	e000      	b.n	8002a2a <ADC_Enable+0x2e>
 8002a28:	2300      	movs	r3, #0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d143      	bne.n	8002ab6 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	4b22      	ldr	r3, [pc, #136]	; (8002ac0 <ADC_Enable+0xc4>)
 8002a36:	4013      	ands	r3, r2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00d      	beq.n	8002a58 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a40:	f043 0210 	orr.w	r2, r3, #16
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4c:	f043 0201 	orr.w	r2, r3, #1
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e02f      	b.n	8002ab8 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689a      	ldr	r2, [r3, #8]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f042 0201 	orr.w	r2, r2, #1
 8002a66:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002a68:	f7fe fd3a 	bl	80014e0 <HAL_GetTick>
 8002a6c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002a6e:	e01b      	b.n	8002aa8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a70:	f7fe fd36 	bl	80014e0 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d914      	bls.n	8002aa8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d00d      	beq.n	8002aa8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	f043 0210 	orr.w	r2, r3, #16
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9c:	f043 0201 	orr.w	r2, r3, #1
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e007      	b.n	8002ab8 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d1dc      	bne.n	8002a70 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	8000003f 	.word	0x8000003f

08002ac4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d108      	bne.n	8002af0 <ADC_Disable+0x2c>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d101      	bne.n	8002af0 <ADC_Disable+0x2c>
 8002aec:	2301      	movs	r3, #1
 8002aee:	e000      	b.n	8002af2 <ADC_Disable+0x2e>
 8002af0:	2300      	movs	r3, #0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d047      	beq.n	8002b86 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 030d 	and.w	r3, r3, #13
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d10f      	bne.n	8002b24 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 0202 	orr.w	r2, r2, #2
 8002b12:	609a      	str	r2, [r3, #8]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2203      	movs	r2, #3
 8002b1a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002b1c:	f7fe fce0 	bl	80014e0 <HAL_GetTick>
 8002b20:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002b22:	e029      	b.n	8002b78 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	f043 0210 	orr.w	r2, r3, #16
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b34:	f043 0201 	orr.w	r2, r3, #1
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e023      	b.n	8002b88 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b40:	f7fe fcce 	bl	80014e0 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d914      	bls.n	8002b78 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d10d      	bne.n	8002b78 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	f043 0210 	orr.w	r2, r3, #16
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6c:	f043 0201 	orr.w	r2, r3, #1
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e007      	b.n	8002b88 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d0dc      	beq.n	8002b40 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ba0:	4b0c      	ldr	r3, [pc, #48]	; (8002bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bac:	4013      	ands	r3, r2
 8002bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bc2:	4a04      	ldr	r2, [pc, #16]	; (8002bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	60d3      	str	r3, [r2, #12]
}
 8002bc8:	bf00      	nop
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	e000ed00 	.word	0xe000ed00

08002bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bdc:	4b04      	ldr	r3, [pc, #16]	; (8002bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	0a1b      	lsrs	r3, r3, #8
 8002be2:	f003 0307 	and.w	r3, r3, #7
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	e000ed00 	.word	0xe000ed00

08002bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	db0b      	blt.n	8002c1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c06:	79fb      	ldrb	r3, [r7, #7]
 8002c08:	f003 021f 	and.w	r2, r3, #31
 8002c0c:	4907      	ldr	r1, [pc, #28]	; (8002c2c <__NVIC_EnableIRQ+0x38>)
 8002c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c12:	095b      	lsrs	r3, r3, #5
 8002c14:	2001      	movs	r0, #1
 8002c16:	fa00 f202 	lsl.w	r2, r0, r2
 8002c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	e000e100 	.word	0xe000e100

08002c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	4603      	mov	r3, r0
 8002c38:	6039      	str	r1, [r7, #0]
 8002c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	db0a      	blt.n	8002c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	490c      	ldr	r1, [pc, #48]	; (8002c7c <__NVIC_SetPriority+0x4c>)
 8002c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4e:	0112      	lsls	r2, r2, #4
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	440b      	add	r3, r1
 8002c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c58:	e00a      	b.n	8002c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	4908      	ldr	r1, [pc, #32]	; (8002c80 <__NVIC_SetPriority+0x50>)
 8002c60:	79fb      	ldrb	r3, [r7, #7]
 8002c62:	f003 030f 	and.w	r3, r3, #15
 8002c66:	3b04      	subs	r3, #4
 8002c68:	0112      	lsls	r2, r2, #4
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	761a      	strb	r2, [r3, #24]
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr
 8002c7c:	e000e100 	.word	0xe000e100
 8002c80:	e000ed00 	.word	0xe000ed00

08002c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b089      	sub	sp, #36	; 0x24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f003 0307 	and.w	r3, r3, #7
 8002c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	f1c3 0307 	rsb	r3, r3, #7
 8002c9e:	2b04      	cmp	r3, #4
 8002ca0:	bf28      	it	cs
 8002ca2:	2304      	movcs	r3, #4
 8002ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	3304      	adds	r3, #4
 8002caa:	2b06      	cmp	r3, #6
 8002cac:	d902      	bls.n	8002cb4 <NVIC_EncodePriority+0x30>
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	3b03      	subs	r3, #3
 8002cb2:	e000      	b.n	8002cb6 <NVIC_EncodePriority+0x32>
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	43da      	mvns	r2, r3
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd6:	43d9      	mvns	r1, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cdc:	4313      	orrs	r3, r2
         );
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3724      	adds	r7, #36	; 0x24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
	...

08002cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cfc:	d301      	bcc.n	8002d02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e00f      	b.n	8002d22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d02:	4a0a      	ldr	r2, [pc, #40]	; (8002d2c <SysTick_Config+0x40>)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3b01      	subs	r3, #1
 8002d08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d0a:	210f      	movs	r1, #15
 8002d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d10:	f7ff ff8e 	bl	8002c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d14:	4b05      	ldr	r3, [pc, #20]	; (8002d2c <SysTick_Config+0x40>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d1a:	4b04      	ldr	r3, [pc, #16]	; (8002d2c <SysTick_Config+0x40>)
 8002d1c:	2207      	movs	r2, #7
 8002d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	e000e010 	.word	0xe000e010

08002d30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f7ff ff29 	bl	8002b90 <__NVIC_SetPriorityGrouping>
}
 8002d3e:	bf00      	nop
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b086      	sub	sp, #24
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	60b9      	str	r1, [r7, #8]
 8002d50:	607a      	str	r2, [r7, #4]
 8002d52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d58:	f7ff ff3e 	bl	8002bd8 <__NVIC_GetPriorityGrouping>
 8002d5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	68b9      	ldr	r1, [r7, #8]
 8002d62:	6978      	ldr	r0, [r7, #20]
 8002d64:	f7ff ff8e 	bl	8002c84 <NVIC_EncodePriority>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d6e:	4611      	mov	r1, r2
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff ff5d 	bl	8002c30 <__NVIC_SetPriority>
}
 8002d76:	bf00      	nop
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b082      	sub	sp, #8
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	4603      	mov	r3, r0
 8002d86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff ff31 	bl	8002bf4 <__NVIC_EnableIRQ>
}
 8002d92:	bf00      	nop
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b082      	sub	sp, #8
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7ff ffa2 	bl	8002cec <SysTick_Config>
 8002da8:	4603      	mov	r3, r0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
	...

08002db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b087      	sub	sp, #28
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dc2:	e154      	b.n	800306e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	2101      	movs	r1, #1
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 8146 	beq.w	8003068 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f003 0303 	and.w	r3, r3, #3
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d005      	beq.n	8002df4 <HAL_GPIO_Init+0x40>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f003 0303 	and.w	r3, r3, #3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d130      	bne.n	8002e56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	2203      	movs	r2, #3
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	43db      	mvns	r3, r3
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	68da      	ldr	r2, [r3, #12]
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	43db      	mvns	r3, r3
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	4013      	ands	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	091b      	lsrs	r3, r3, #4
 8002e40:	f003 0201 	and.w	r2, r3, #1
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f003 0303 	and.w	r3, r3, #3
 8002e5e:	2b03      	cmp	r3, #3
 8002e60:	d017      	beq.n	8002e92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	2203      	movs	r2, #3
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	43db      	mvns	r3, r3
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	4013      	ands	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d123      	bne.n	8002ee6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	08da      	lsrs	r2, r3, #3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	3208      	adds	r2, #8
 8002ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	220f      	movs	r2, #15
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	691a      	ldr	r2, [r3, #16]
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f003 0307 	and.w	r3, r3, #7
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	08da      	lsrs	r2, r3, #3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3208      	adds	r2, #8
 8002ee0:	6939      	ldr	r1, [r7, #16]
 8002ee2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	2203      	movs	r2, #3
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	43db      	mvns	r3, r3
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	4013      	ands	r3, r2
 8002efc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f003 0203 	and.w	r2, r3, #3
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 80a0 	beq.w	8003068 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f28:	4b58      	ldr	r3, [pc, #352]	; (800308c <HAL_GPIO_Init+0x2d8>)
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	4a57      	ldr	r2, [pc, #348]	; (800308c <HAL_GPIO_Init+0x2d8>)
 8002f2e:	f043 0301 	orr.w	r3, r3, #1
 8002f32:	6193      	str	r3, [r2, #24]
 8002f34:	4b55      	ldr	r3, [pc, #340]	; (800308c <HAL_GPIO_Init+0x2d8>)
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	60bb      	str	r3, [r7, #8]
 8002f3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f40:	4a53      	ldr	r2, [pc, #332]	; (8003090 <HAL_GPIO_Init+0x2dc>)
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	089b      	lsrs	r3, r3, #2
 8002f46:	3302      	adds	r3, #2
 8002f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f003 0303 	and.w	r3, r3, #3
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	220f      	movs	r2, #15
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	4013      	ands	r3, r2
 8002f62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f6a:	d019      	beq.n	8002fa0 <HAL_GPIO_Init+0x1ec>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a49      	ldr	r2, [pc, #292]	; (8003094 <HAL_GPIO_Init+0x2e0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d013      	beq.n	8002f9c <HAL_GPIO_Init+0x1e8>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a48      	ldr	r2, [pc, #288]	; (8003098 <HAL_GPIO_Init+0x2e4>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d00d      	beq.n	8002f98 <HAL_GPIO_Init+0x1e4>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a47      	ldr	r2, [pc, #284]	; (800309c <HAL_GPIO_Init+0x2e8>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d007      	beq.n	8002f94 <HAL_GPIO_Init+0x1e0>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a46      	ldr	r2, [pc, #280]	; (80030a0 <HAL_GPIO_Init+0x2ec>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d101      	bne.n	8002f90 <HAL_GPIO_Init+0x1dc>
 8002f8c:	2304      	movs	r3, #4
 8002f8e:	e008      	b.n	8002fa2 <HAL_GPIO_Init+0x1ee>
 8002f90:	2305      	movs	r3, #5
 8002f92:	e006      	b.n	8002fa2 <HAL_GPIO_Init+0x1ee>
 8002f94:	2303      	movs	r3, #3
 8002f96:	e004      	b.n	8002fa2 <HAL_GPIO_Init+0x1ee>
 8002f98:	2302      	movs	r3, #2
 8002f9a:	e002      	b.n	8002fa2 <HAL_GPIO_Init+0x1ee>
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e000      	b.n	8002fa2 <HAL_GPIO_Init+0x1ee>
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	f002 0203 	and.w	r2, r2, #3
 8002fa8:	0092      	lsls	r2, r2, #2
 8002faa:	4093      	lsls	r3, r2
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002fb2:	4937      	ldr	r1, [pc, #220]	; (8003090 <HAL_GPIO_Init+0x2dc>)
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	089b      	lsrs	r3, r3, #2
 8002fb8:	3302      	adds	r3, #2
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fc0:	4b38      	ldr	r3, [pc, #224]	; (80030a4 <HAL_GPIO_Init+0x2f0>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d003      	beq.n	8002fe4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002fe4:	4a2f      	ldr	r2, [pc, #188]	; (80030a4 <HAL_GPIO_Init+0x2f0>)
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002fea:	4b2e      	ldr	r3, [pc, #184]	; (80030a4 <HAL_GPIO_Init+0x2f0>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4313      	orrs	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800300e:	4a25      	ldr	r2, [pc, #148]	; (80030a4 <HAL_GPIO_Init+0x2f0>)
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003014:	4b23      	ldr	r3, [pc, #140]	; (80030a4 <HAL_GPIO_Init+0x2f0>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	43db      	mvns	r3, r3
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	4013      	ands	r3, r2
 8003022:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	4313      	orrs	r3, r2
 8003036:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003038:	4a1a      	ldr	r2, [pc, #104]	; (80030a4 <HAL_GPIO_Init+0x2f0>)
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800303e:	4b19      	ldr	r3, [pc, #100]	; (80030a4 <HAL_GPIO_Init+0x2f0>)
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	43db      	mvns	r3, r3
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	4013      	ands	r3, r2
 800304c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4313      	orrs	r3, r2
 8003060:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003062:	4a10      	ldr	r2, [pc, #64]	; (80030a4 <HAL_GPIO_Init+0x2f0>)
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	3301      	adds	r3, #1
 800306c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	fa22 f303 	lsr.w	r3, r2, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	f47f aea3 	bne.w	8002dc4 <HAL_GPIO_Init+0x10>
  }
}
 800307e:	bf00      	nop
 8003080:	bf00      	nop
 8003082:	371c      	adds	r7, #28
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	40021000 	.word	0x40021000
 8003090:	40010000 	.word	0x40010000
 8003094:	48000400 	.word	0x48000400
 8003098:	48000800 	.word	0x48000800
 800309c:	48000c00 	.word	0x48000c00
 80030a0:	48001000 	.word	0x48001000
 80030a4:	40010400 	.word	0x40010400

080030a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	460b      	mov	r3, r1
 80030b2:	807b      	strh	r3, [r7, #2]
 80030b4:	4613      	mov	r3, r2
 80030b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030b8:	787b      	ldrb	r3, [r7, #1]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030be:	887a      	ldrh	r2, [r7, #2]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030c4:	e002      	b.n	80030cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030c6:	887a      	ldrh	r2, [r7, #2]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e081      	b.n	80031ee <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d106      	bne.n	8003104 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7fd fda6 	bl	8000c50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2224      	movs	r2, #36	; 0x24
 8003108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 0201 	bic.w	r2, r2, #1
 800311a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003128:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003138:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d107      	bne.n	8003152 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800314e:	609a      	str	r2, [r3, #8]
 8003150:	e006      	b.n	8003160 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	689a      	ldr	r2, [r3, #8]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800315e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	2b02      	cmp	r3, #2
 8003166:	d104      	bne.n	8003172 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003170:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6812      	ldr	r2, [r2, #0]
 800317c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003180:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003184:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68da      	ldr	r2, [r3, #12]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003194:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	691a      	ldr	r2, [r3, #16]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	69d9      	ldr	r1, [r3, #28]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a1a      	ldr	r2, [r3, #32]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	430a      	orrs	r2, r1
 80031be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 0201 	orr.w	r2, r2, #1
 80031ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2220      	movs	r2, #32
 80031da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
 80031fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b20      	cmp	r3, #32
 800320a:	d138      	bne.n	800327e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003212:	2b01      	cmp	r3, #1
 8003214:	d101      	bne.n	800321a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003216:	2302      	movs	r3, #2
 8003218:	e032      	b.n	8003280 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2224      	movs	r2, #36	; 0x24
 8003226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0201 	bic.w	r2, r2, #1
 8003238:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003248:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6819      	ldr	r1, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f042 0201 	orr.w	r2, r2, #1
 8003268:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2220      	movs	r2, #32
 800326e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800327a:	2300      	movs	r3, #0
 800327c:	e000      	b.n	8003280 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800327e:	2302      	movs	r3, #2
  }
}
 8003280:	4618      	mov	r0, r3
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b20      	cmp	r3, #32
 80032a0:	d139      	bne.n	8003316 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d101      	bne.n	80032b0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80032ac:	2302      	movs	r3, #2
 80032ae:	e033      	b.n	8003318 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2224      	movs	r2, #36	; 0x24
 80032bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0201 	bic.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032de:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	021b      	lsls	r3, r3, #8
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f042 0201 	orr.w	r2, r2, #1
 8003300:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2220      	movs	r2, #32
 8003306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003312:	2300      	movs	r3, #0
 8003314:	e000      	b.n	8003318 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003316:	2302      	movs	r3, #2
  }
}
 8003318:	4618      	mov	r0, r3
 800331a:	3714      	adds	r7, #20
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003326:	b08b      	sub	sp, #44	; 0x2c
 8003328:	af06      	add	r7, sp, #24
 800332a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e0d0      	b.n	80034d8 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d106      	bne.n	8003350 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7fd fd98 	bl	8000e80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2203      	movs	r2, #3
 8003354:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f002 feb5 	bl	80060cc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003362:	2300      	movs	r3, #0
 8003364:	73fb      	strb	r3, [r7, #15]
 8003366:	e04c      	b.n	8003402 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003368:	7bfb      	ldrb	r3, [r7, #15]
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	1c5a      	adds	r2, r3, #1
 800336e:	4613      	mov	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	440b      	add	r3, r1
 8003378:	3301      	adds	r3, #1
 800337a:	2201      	movs	r2, #1
 800337c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800337e:	7bfb      	ldrb	r3, [r7, #15]
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	1c5a      	adds	r2, r3, #1
 8003384:	4613      	mov	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	440b      	add	r3, r1
 800338e:	7bfa      	ldrb	r2, [r7, #15]
 8003390:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003392:	7bfa      	ldrb	r2, [r7, #15]
 8003394:	7bfb      	ldrb	r3, [r7, #15]
 8003396:	b298      	uxth	r0, r3
 8003398:	6879      	ldr	r1, [r7, #4]
 800339a:	4613      	mov	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	440b      	add	r3, r1
 80033a4:	3336      	adds	r3, #54	; 0x36
 80033a6:	4602      	mov	r2, r0
 80033a8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033aa:	7bfb      	ldrb	r3, [r7, #15]
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	1c5a      	adds	r2, r3, #1
 80033b0:	4613      	mov	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	440b      	add	r3, r1
 80033ba:	3303      	adds	r3, #3
 80033bc:	2200      	movs	r2, #0
 80033be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80033c0:	7bfa      	ldrb	r2, [r7, #15]
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	4613      	mov	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	440b      	add	r3, r1
 80033ce:	3338      	adds	r3, #56	; 0x38
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80033d4:	7bfa      	ldrb	r2, [r7, #15]
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	4613      	mov	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	440b      	add	r3, r1
 80033e2:	333c      	adds	r3, #60	; 0x3c
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80033e8:	7bfa      	ldrb	r2, [r7, #15]
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	440b      	add	r3, r1
 80033f6:	3340      	adds	r3, #64	; 0x40
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033fc:	7bfb      	ldrb	r3, [r7, #15]
 80033fe:	3301      	adds	r3, #1
 8003400:	73fb      	strb	r3, [r7, #15]
 8003402:	7bfa      	ldrb	r2, [r7, #15]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	429a      	cmp	r2, r3
 800340a:	d3ad      	bcc.n	8003368 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800340c:	2300      	movs	r3, #0
 800340e:	73fb      	strb	r3, [r7, #15]
 8003410:	e044      	b.n	800349c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003412:	7bfa      	ldrb	r2, [r7, #15]
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	4613      	mov	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	440b      	add	r3, r1
 8003420:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003424:	2200      	movs	r2, #0
 8003426:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003428:	7bfa      	ldrb	r2, [r7, #15]
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	4613      	mov	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	440b      	add	r3, r1
 8003436:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800343a:	7bfa      	ldrb	r2, [r7, #15]
 800343c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800343e:	7bfa      	ldrb	r2, [r7, #15]
 8003440:	6879      	ldr	r1, [r7, #4]
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	440b      	add	r3, r1
 800344c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003450:	2200      	movs	r2, #0
 8003452:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003454:	7bfa      	ldrb	r2, [r7, #15]
 8003456:	6879      	ldr	r1, [r7, #4]
 8003458:	4613      	mov	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	440b      	add	r3, r1
 8003462:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003466:	2200      	movs	r2, #0
 8003468:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800346a:	7bfa      	ldrb	r2, [r7, #15]
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	4613      	mov	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	440b      	add	r3, r1
 8003478:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003480:	7bfa      	ldrb	r2, [r7, #15]
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	4613      	mov	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	440b      	add	r3, r1
 800348e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003492:	2200      	movs	r2, #0
 8003494:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003496:	7bfb      	ldrb	r3, [r7, #15]
 8003498:	3301      	adds	r3, #1
 800349a:	73fb      	strb	r3, [r7, #15]
 800349c:	7bfa      	ldrb	r2, [r7, #15]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d3b5      	bcc.n	8003412 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	603b      	str	r3, [r7, #0]
 80034ac:	687e      	ldr	r6, [r7, #4]
 80034ae:	466d      	mov	r5, sp
 80034b0:	f106 0410 	add.w	r4, r6, #16
 80034b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034b8:	6823      	ldr	r3, [r4, #0]
 80034ba:	602b      	str	r3, [r5, #0]
 80034bc:	1d33      	adds	r3, r6, #4
 80034be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034c0:	6838      	ldr	r0, [r7, #0]
 80034c2:	f002 fe1e 	bl	8006102 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	1d3b      	adds	r3, r7, #4
 80034ea:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034ec:	1d3b      	adds	r3, r7, #4
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d102      	bne.n	80034fa <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	f000 bef4 	b.w	80042e2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034fa:	1d3b      	adds	r3, r7, #4
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 816a 	beq.w	80037de <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800350a:	4bb3      	ldr	r3, [pc, #716]	; (80037d8 <HAL_RCC_OscConfig+0x2f8>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f003 030c 	and.w	r3, r3, #12
 8003512:	2b04      	cmp	r3, #4
 8003514:	d00c      	beq.n	8003530 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003516:	4bb0      	ldr	r3, [pc, #704]	; (80037d8 <HAL_RCC_OscConfig+0x2f8>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f003 030c 	and.w	r3, r3, #12
 800351e:	2b08      	cmp	r3, #8
 8003520:	d159      	bne.n	80035d6 <HAL_RCC_OscConfig+0xf6>
 8003522:	4bad      	ldr	r3, [pc, #692]	; (80037d8 <HAL_RCC_OscConfig+0x2f8>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800352a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800352e:	d152      	bne.n	80035d6 <HAL_RCC_OscConfig+0xf6>
 8003530:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003534:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003538:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800353c:	fa93 f3a3 	rbit	r3, r3
 8003540:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003544:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003548:	fab3 f383 	clz	r3, r3
 800354c:	b2db      	uxtb	r3, r3
 800354e:	095b      	lsrs	r3, r3, #5
 8003550:	b2db      	uxtb	r3, r3
 8003552:	f043 0301 	orr.w	r3, r3, #1
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b01      	cmp	r3, #1
 800355a:	d102      	bne.n	8003562 <HAL_RCC_OscConfig+0x82>
 800355c:	4b9e      	ldr	r3, [pc, #632]	; (80037d8 <HAL_RCC_OscConfig+0x2f8>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	e015      	b.n	800358e <HAL_RCC_OscConfig+0xae>
 8003562:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003566:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800356e:	fa93 f3a3 	rbit	r3, r3
 8003572:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003576:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800357a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800357e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003582:	fa93 f3a3 	rbit	r3, r3
 8003586:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800358a:	4b93      	ldr	r3, [pc, #588]	; (80037d8 <HAL_RCC_OscConfig+0x2f8>)
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003592:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003596:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800359a:	fa92 f2a2 	rbit	r2, r2
 800359e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80035a2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80035a6:	fab2 f282 	clz	r2, r2
 80035aa:	b2d2      	uxtb	r2, r2
 80035ac:	f042 0220 	orr.w	r2, r2, #32
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	f002 021f 	and.w	r2, r2, #31
 80035b6:	2101      	movs	r1, #1
 80035b8:	fa01 f202 	lsl.w	r2, r1, r2
 80035bc:	4013      	ands	r3, r2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 810c 	beq.w	80037dc <HAL_RCC_OscConfig+0x2fc>
 80035c4:	1d3b      	adds	r3, r7, #4
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f040 8106 	bne.w	80037dc <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	f000 be86 	b.w	80042e2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035d6:	1d3b      	adds	r3, r7, #4
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035e0:	d106      	bne.n	80035f0 <HAL_RCC_OscConfig+0x110>
 80035e2:	4b7d      	ldr	r3, [pc, #500]	; (80037d8 <HAL_RCC_OscConfig+0x2f8>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a7c      	ldr	r2, [pc, #496]	; (80037d8 <HAL_RCC_OscConfig+0x2f8>)
 80035e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ec:	6013      	str	r3, [r2, #0]
 80035ee:	e030      	b.n	8003652 <HAL_RCC_OscConfig+0x172>
 80035f0:	1d3b      	adds	r3, r7, #4
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10c      	bne.n	8003614 <HAL_RCC_OscConfig+0x134>
 80035fa:	4b77      	ldr	r3, [pc, #476]	; (80037d8 <HAL_RCC_OscConfig+0x2f8>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a76      	ldr	r2, [pc, #472]	; (80037d8 <HAL_RCC_OscConfig+0x2f8>)
 8003600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003604:	6013      	str	r3, [r2, #0]
 8003606:	4b74      	ldr	r3, [pc, #464]	; (80037d8 <HAL_RCC_OscConfig+0x2f8>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a73      	ldr	r2, [pc, #460]	; (80037d8 <HAL_RCC_OscConfig+0x2f8>)
 800360c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	e01e      	b.n	8003652 <HAL_RCC_OscConfig+0x172>
 8003614:	1d3b      	adds	r3, r7, #4
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800361e:	d10c      	bne.n	800363a <HAL_RCC_OscConfig+0x15a>
 8003620:	4b6d      	ldr	r3, [pc, #436]	; (80037d8 <HAL_RCC_OscConfig+0x2f8>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a6c      	ldr	r2, [pc, #432]	; (80037d8 <HAL_RCC_OscConfig+0x2f8>)
 8003626:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800362a:	6013      	str	r3, [r2, #0]
 800362c:	4b6a      	ldr	r3, [pc, #424]	; (80037d8 <HAL_RCC_OscConfig+0x2f8>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a69      	ldr	r2, [pc, #420]	; (80037d8 <HAL_RCC_OscConfig+0x2f8>)
 8003632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003636:	6013      	str	r3, [r2, #0]
 8003638:	e00b      	b.n	8003652 <HAL_RCC_OscConfig+0x172>
 800363a:	4b67      	ldr	r3, [pc, #412]	; (80037d8 <HAL_RCC_OscConfig+0x2f8>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a66      	ldr	r2, [pc, #408]	; (80037d8 <HAL_RCC_OscConfig+0x2f8>)
 8003640:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003644:	6013      	str	r3, [r2, #0]
 8003646:	4b64      	ldr	r3, [pc, #400]	; (80037d8 <HAL_RCC_OscConfig+0x2f8>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a63      	ldr	r2, [pc, #396]	; (80037d8 <HAL_RCC_OscConfig+0x2f8>)
 800364c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003650:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003652:	4b61      	ldr	r3, [pc, #388]	; (80037d8 <HAL_RCC_OscConfig+0x2f8>)
 8003654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003656:	f023 020f 	bic.w	r2, r3, #15
 800365a:	1d3b      	adds	r3, r7, #4
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	495d      	ldr	r1, [pc, #372]	; (80037d8 <HAL_RCC_OscConfig+0x2f8>)
 8003662:	4313      	orrs	r3, r2
 8003664:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003666:	1d3b      	adds	r3, r7, #4
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d059      	beq.n	8003724 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003670:	f7fd ff36 	bl	80014e0 <HAL_GetTick>
 8003674:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003678:	e00a      	b.n	8003690 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800367a:	f7fd ff31 	bl	80014e0 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b64      	cmp	r3, #100	; 0x64
 8003688:	d902      	bls.n	8003690 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	f000 be29 	b.w	80042e2 <HAL_RCC_OscConfig+0xe02>
 8003690:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003694:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003698:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800369c:	fa93 f3a3 	rbit	r3, r3
 80036a0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80036a4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036a8:	fab3 f383 	clz	r3, r3
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	095b      	lsrs	r3, r3, #5
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d102      	bne.n	80036c2 <HAL_RCC_OscConfig+0x1e2>
 80036bc:	4b46      	ldr	r3, [pc, #280]	; (80037d8 <HAL_RCC_OscConfig+0x2f8>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	e015      	b.n	80036ee <HAL_RCC_OscConfig+0x20e>
 80036c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036c6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ca:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80036ce:	fa93 f3a3 	rbit	r3, r3
 80036d2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80036d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036da:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80036de:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80036e2:	fa93 f3a3 	rbit	r3, r3
 80036e6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80036ea:	4b3b      	ldr	r3, [pc, #236]	; (80037d8 <HAL_RCC_OscConfig+0x2f8>)
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036f2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80036f6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80036fa:	fa92 f2a2 	rbit	r2, r2
 80036fe:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003702:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003706:	fab2 f282 	clz	r2, r2
 800370a:	b2d2      	uxtb	r2, r2
 800370c:	f042 0220 	orr.w	r2, r2, #32
 8003710:	b2d2      	uxtb	r2, r2
 8003712:	f002 021f 	and.w	r2, r2, #31
 8003716:	2101      	movs	r1, #1
 8003718:	fa01 f202 	lsl.w	r2, r1, r2
 800371c:	4013      	ands	r3, r2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0ab      	beq.n	800367a <HAL_RCC_OscConfig+0x19a>
 8003722:	e05c      	b.n	80037de <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003724:	f7fd fedc 	bl	80014e0 <HAL_GetTick>
 8003728:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800372c:	e00a      	b.n	8003744 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800372e:	f7fd fed7 	bl	80014e0 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b64      	cmp	r3, #100	; 0x64
 800373c:	d902      	bls.n	8003744 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	f000 bdcf 	b.w	80042e2 <HAL_RCC_OscConfig+0xe02>
 8003744:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003748:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003750:	fa93 f3a3 	rbit	r3, r3
 8003754:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003758:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800375c:	fab3 f383 	clz	r3, r3
 8003760:	b2db      	uxtb	r3, r3
 8003762:	095b      	lsrs	r3, r3, #5
 8003764:	b2db      	uxtb	r3, r3
 8003766:	f043 0301 	orr.w	r3, r3, #1
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b01      	cmp	r3, #1
 800376e:	d102      	bne.n	8003776 <HAL_RCC_OscConfig+0x296>
 8003770:	4b19      	ldr	r3, [pc, #100]	; (80037d8 <HAL_RCC_OscConfig+0x2f8>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	e015      	b.n	80037a2 <HAL_RCC_OscConfig+0x2c2>
 8003776:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800377a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003782:	fa93 f3a3 	rbit	r3, r3
 8003786:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800378a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800378e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003792:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003796:	fa93 f3a3 	rbit	r3, r3
 800379a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800379e:	4b0e      	ldr	r3, [pc, #56]	; (80037d8 <HAL_RCC_OscConfig+0x2f8>)
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037a6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80037aa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80037ae:	fa92 f2a2 	rbit	r2, r2
 80037b2:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80037b6:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80037ba:	fab2 f282 	clz	r2, r2
 80037be:	b2d2      	uxtb	r2, r2
 80037c0:	f042 0220 	orr.w	r2, r2, #32
 80037c4:	b2d2      	uxtb	r2, r2
 80037c6:	f002 021f 	and.w	r2, r2, #31
 80037ca:	2101      	movs	r1, #1
 80037cc:	fa01 f202 	lsl.w	r2, r1, r2
 80037d0:	4013      	ands	r3, r2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1ab      	bne.n	800372e <HAL_RCC_OscConfig+0x24e>
 80037d6:	e002      	b.n	80037de <HAL_RCC_OscConfig+0x2fe>
 80037d8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037de:	1d3b      	adds	r3, r7, #4
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 816f 	beq.w	8003acc <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80037ee:	4bd0      	ldr	r3, [pc, #832]	; (8003b30 <HAL_RCC_OscConfig+0x650>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f003 030c 	and.w	r3, r3, #12
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00b      	beq.n	8003812 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80037fa:	4bcd      	ldr	r3, [pc, #820]	; (8003b30 <HAL_RCC_OscConfig+0x650>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f003 030c 	and.w	r3, r3, #12
 8003802:	2b08      	cmp	r3, #8
 8003804:	d16c      	bne.n	80038e0 <HAL_RCC_OscConfig+0x400>
 8003806:	4bca      	ldr	r3, [pc, #808]	; (8003b30 <HAL_RCC_OscConfig+0x650>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d166      	bne.n	80038e0 <HAL_RCC_OscConfig+0x400>
 8003812:	2302      	movs	r3, #2
 8003814:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003818:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800381c:	fa93 f3a3 	rbit	r3, r3
 8003820:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003824:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003828:	fab3 f383 	clz	r3, r3
 800382c:	b2db      	uxtb	r3, r3
 800382e:	095b      	lsrs	r3, r3, #5
 8003830:	b2db      	uxtb	r3, r3
 8003832:	f043 0301 	orr.w	r3, r3, #1
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b01      	cmp	r3, #1
 800383a:	d102      	bne.n	8003842 <HAL_RCC_OscConfig+0x362>
 800383c:	4bbc      	ldr	r3, [pc, #752]	; (8003b30 <HAL_RCC_OscConfig+0x650>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	e013      	b.n	800386a <HAL_RCC_OscConfig+0x38a>
 8003842:	2302      	movs	r3, #2
 8003844:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003848:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800384c:	fa93 f3a3 	rbit	r3, r3
 8003850:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003854:	2302      	movs	r3, #2
 8003856:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800385a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800385e:	fa93 f3a3 	rbit	r3, r3
 8003862:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003866:	4bb2      	ldr	r3, [pc, #712]	; (8003b30 <HAL_RCC_OscConfig+0x650>)
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	2202      	movs	r2, #2
 800386c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003870:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003874:	fa92 f2a2 	rbit	r2, r2
 8003878:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800387c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003880:	fab2 f282 	clz	r2, r2
 8003884:	b2d2      	uxtb	r2, r2
 8003886:	f042 0220 	orr.w	r2, r2, #32
 800388a:	b2d2      	uxtb	r2, r2
 800388c:	f002 021f 	and.w	r2, r2, #31
 8003890:	2101      	movs	r1, #1
 8003892:	fa01 f202 	lsl.w	r2, r1, r2
 8003896:	4013      	ands	r3, r2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d007      	beq.n	80038ac <HAL_RCC_OscConfig+0x3cc>
 800389c:	1d3b      	adds	r3, r7, #4
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d002      	beq.n	80038ac <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	f000 bd1b 	b.w	80042e2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ac:	4ba0      	ldr	r3, [pc, #640]	; (8003b30 <HAL_RCC_OscConfig+0x650>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038b4:	1d3b      	adds	r3, r7, #4
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	21f8      	movs	r1, #248	; 0xf8
 80038bc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80038c4:	fa91 f1a1 	rbit	r1, r1
 80038c8:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80038cc:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80038d0:	fab1 f181 	clz	r1, r1
 80038d4:	b2c9      	uxtb	r1, r1
 80038d6:	408b      	lsls	r3, r1
 80038d8:	4995      	ldr	r1, [pc, #596]	; (8003b30 <HAL_RCC_OscConfig+0x650>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038de:	e0f5      	b.n	8003acc <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038e0:	1d3b      	adds	r3, r7, #4
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 8085 	beq.w	80039f6 <HAL_RCC_OscConfig+0x516>
 80038ec:	2301      	movs	r3, #1
 80038ee:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80038f6:	fa93 f3a3 	rbit	r3, r3
 80038fa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80038fe:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003902:	fab3 f383 	clz	r3, r3
 8003906:	b2db      	uxtb	r3, r3
 8003908:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800390c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	461a      	mov	r2, r3
 8003914:	2301      	movs	r3, #1
 8003916:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003918:	f7fd fde2 	bl	80014e0 <HAL_GetTick>
 800391c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003920:	e00a      	b.n	8003938 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003922:	f7fd fddd 	bl	80014e0 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d902      	bls.n	8003938 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	f000 bcd5 	b.w	80042e2 <HAL_RCC_OscConfig+0xe02>
 8003938:	2302      	movs	r3, #2
 800393a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003942:	fa93 f3a3 	rbit	r3, r3
 8003946:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800394a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800394e:	fab3 f383 	clz	r3, r3
 8003952:	b2db      	uxtb	r3, r3
 8003954:	095b      	lsrs	r3, r3, #5
 8003956:	b2db      	uxtb	r3, r3
 8003958:	f043 0301 	orr.w	r3, r3, #1
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b01      	cmp	r3, #1
 8003960:	d102      	bne.n	8003968 <HAL_RCC_OscConfig+0x488>
 8003962:	4b73      	ldr	r3, [pc, #460]	; (8003b30 <HAL_RCC_OscConfig+0x650>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	e013      	b.n	8003990 <HAL_RCC_OscConfig+0x4b0>
 8003968:	2302      	movs	r3, #2
 800396a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003972:	fa93 f3a3 	rbit	r3, r3
 8003976:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800397a:	2302      	movs	r3, #2
 800397c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003980:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003984:	fa93 f3a3 	rbit	r3, r3
 8003988:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800398c:	4b68      	ldr	r3, [pc, #416]	; (8003b30 <HAL_RCC_OscConfig+0x650>)
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	2202      	movs	r2, #2
 8003992:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003996:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800399a:	fa92 f2a2 	rbit	r2, r2
 800399e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80039a2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80039a6:	fab2 f282 	clz	r2, r2
 80039aa:	b2d2      	uxtb	r2, r2
 80039ac:	f042 0220 	orr.w	r2, r2, #32
 80039b0:	b2d2      	uxtb	r2, r2
 80039b2:	f002 021f 	and.w	r2, r2, #31
 80039b6:	2101      	movs	r1, #1
 80039b8:	fa01 f202 	lsl.w	r2, r1, r2
 80039bc:	4013      	ands	r3, r2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d0af      	beq.n	8003922 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c2:	4b5b      	ldr	r3, [pc, #364]	; (8003b30 <HAL_RCC_OscConfig+0x650>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039ca:	1d3b      	adds	r3, r7, #4
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	21f8      	movs	r1, #248	; 0xf8
 80039d2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80039da:	fa91 f1a1 	rbit	r1, r1
 80039de:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80039e2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80039e6:	fab1 f181 	clz	r1, r1
 80039ea:	b2c9      	uxtb	r1, r1
 80039ec:	408b      	lsls	r3, r1
 80039ee:	4950      	ldr	r1, [pc, #320]	; (8003b30 <HAL_RCC_OscConfig+0x650>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	600b      	str	r3, [r1, #0]
 80039f4:	e06a      	b.n	8003acc <HAL_RCC_OscConfig+0x5ec>
 80039f6:	2301      	movs	r3, #1
 80039f8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003a00:	fa93 f3a3 	rbit	r3, r3
 8003a04:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003a08:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a0c:	fab3 f383 	clz	r3, r3
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a16:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	2300      	movs	r3, #0
 8003a20:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a22:	f7fd fd5d 	bl	80014e0 <HAL_GetTick>
 8003a26:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a2a:	e00a      	b.n	8003a42 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a2c:	f7fd fd58 	bl	80014e0 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d902      	bls.n	8003a42 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	f000 bc50 	b.w	80042e2 <HAL_RCC_OscConfig+0xe02>
 8003a42:	2302      	movs	r3, #2
 8003a44:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a48:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003a4c:	fa93 f3a3 	rbit	r3, r3
 8003a50:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003a54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a58:	fab3 f383 	clz	r3, r3
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	095b      	lsrs	r3, r3, #5
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	f043 0301 	orr.w	r3, r3, #1
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d102      	bne.n	8003a72 <HAL_RCC_OscConfig+0x592>
 8003a6c:	4b30      	ldr	r3, [pc, #192]	; (8003b30 <HAL_RCC_OscConfig+0x650>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	e013      	b.n	8003a9a <HAL_RCC_OscConfig+0x5ba>
 8003a72:	2302      	movs	r3, #2
 8003a74:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003a7c:	fa93 f3a3 	rbit	r3, r3
 8003a80:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003a84:	2302      	movs	r3, #2
 8003a86:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003a8a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003a8e:	fa93 f3a3 	rbit	r3, r3
 8003a92:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003a96:	4b26      	ldr	r3, [pc, #152]	; (8003b30 <HAL_RCC_OscConfig+0x650>)
 8003a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003aa0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003aa4:	fa92 f2a2 	rbit	r2, r2
 8003aa8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003aac:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003ab0:	fab2 f282 	clz	r2, r2
 8003ab4:	b2d2      	uxtb	r2, r2
 8003ab6:	f042 0220 	orr.w	r2, r2, #32
 8003aba:	b2d2      	uxtb	r2, r2
 8003abc:	f002 021f 	and.w	r2, r2, #31
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1af      	bne.n	8003a2c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003acc:	1d3b      	adds	r3, r7, #4
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0308 	and.w	r3, r3, #8
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 80da 	beq.w	8003c90 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003adc:	1d3b      	adds	r3, r7, #4
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d069      	beq.n	8003bba <HAL_RCC_OscConfig+0x6da>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aec:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003af0:	fa93 f3a3 	rbit	r3, r3
 8003af4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003afc:	fab3 f383 	clz	r3, r3
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	461a      	mov	r2, r3
 8003b04:	4b0b      	ldr	r3, [pc, #44]	; (8003b34 <HAL_RCC_OscConfig+0x654>)
 8003b06:	4413      	add	r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b10:	f7fd fce6 	bl	80014e0 <HAL_GetTick>
 8003b14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b18:	e00e      	b.n	8003b38 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b1a:	f7fd fce1 	bl	80014e0 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d906      	bls.n	8003b38 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e3d9      	b.n	80042e2 <HAL_RCC_OscConfig+0xe02>
 8003b2e:	bf00      	nop
 8003b30:	40021000 	.word	0x40021000
 8003b34:	10908120 	.word	0x10908120
 8003b38:	2302      	movs	r3, #2
 8003b3a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003b42:	fa93 f3a3 	rbit	r3, r3
 8003b46:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003b4a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003b4e:	2202      	movs	r2, #2
 8003b50:	601a      	str	r2, [r3, #0]
 8003b52:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	fa93 f2a3 	rbit	r2, r3
 8003b5c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003b66:	2202      	movs	r2, #2
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	fa93 f2a3 	rbit	r2, r3
 8003b74:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003b78:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b7a:	4ba5      	ldr	r3, [pc, #660]	; (8003e10 <HAL_RCC_OscConfig+0x930>)
 8003b7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b7e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003b82:	2102      	movs	r1, #2
 8003b84:	6019      	str	r1, [r3, #0]
 8003b86:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	fa93 f1a3 	rbit	r1, r3
 8003b90:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003b94:	6019      	str	r1, [r3, #0]
  return result;
 8003b96:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	fab3 f383 	clz	r3, r3
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	f003 031f 	and.w	r3, r3, #31
 8003bac:	2101      	movs	r1, #1
 8003bae:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d0b0      	beq.n	8003b1a <HAL_RCC_OscConfig+0x63a>
 8003bb8:	e06a      	b.n	8003c90 <HAL_RCC_OscConfig+0x7b0>
 8003bba:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	fa93 f2a3 	rbit	r2, r3
 8003bcc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003bd0:	601a      	str	r2, [r3, #0]
  return result;
 8003bd2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003bd6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bd8:	fab3 f383 	clz	r3, r3
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	461a      	mov	r2, r3
 8003be0:	4b8c      	ldr	r3, [pc, #560]	; (8003e14 <HAL_RCC_OscConfig+0x934>)
 8003be2:	4413      	add	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	461a      	mov	r2, r3
 8003be8:	2300      	movs	r3, #0
 8003bea:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bec:	f7fd fc78 	bl	80014e0 <HAL_GetTick>
 8003bf0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bf4:	e009      	b.n	8003c0a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bf6:	f7fd fc73 	bl	80014e0 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e36b      	b.n	80042e2 <HAL_RCC_OscConfig+0xe02>
 8003c0a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003c0e:	2202      	movs	r2, #2
 8003c10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c12:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	fa93 f2a3 	rbit	r2, r3
 8003c1c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003c20:	601a      	str	r2, [r3, #0]
 8003c22:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003c26:	2202      	movs	r2, #2
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	fa93 f2a3 	rbit	r2, r3
 8003c34:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003c38:	601a      	str	r2, [r3, #0]
 8003c3a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003c3e:	2202      	movs	r2, #2
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	fa93 f2a3 	rbit	r2, r3
 8003c4c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003c50:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c52:	4b6f      	ldr	r3, [pc, #444]	; (8003e10 <HAL_RCC_OscConfig+0x930>)
 8003c54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c56:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003c5a:	2102      	movs	r1, #2
 8003c5c:	6019      	str	r1, [r3, #0]
 8003c5e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	fa93 f1a3 	rbit	r1, r3
 8003c68:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003c6c:	6019      	str	r1, [r3, #0]
  return result;
 8003c6e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	fab3 f383 	clz	r3, r3
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	f003 031f 	and.w	r3, r3, #31
 8003c84:	2101      	movs	r1, #1
 8003c86:	fa01 f303 	lsl.w	r3, r1, r3
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1b2      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c90:	1d3b      	adds	r3, r7, #4
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0304 	and.w	r3, r3, #4
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 8158 	beq.w	8003f50 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ca6:	4b5a      	ldr	r3, [pc, #360]	; (8003e10 <HAL_RCC_OscConfig+0x930>)
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d112      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cb2:	4b57      	ldr	r3, [pc, #348]	; (8003e10 <HAL_RCC_OscConfig+0x930>)
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	4a56      	ldr	r2, [pc, #344]	; (8003e10 <HAL_RCC_OscConfig+0x930>)
 8003cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cbc:	61d3      	str	r3, [r2, #28]
 8003cbe:	4b54      	ldr	r3, [pc, #336]	; (8003e10 <HAL_RCC_OscConfig+0x930>)
 8003cc0:	69db      	ldr	r3, [r3, #28]
 8003cc2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003cc6:	f107 0308 	add.w	r3, r7, #8
 8003cca:	601a      	str	r2, [r3, #0]
 8003ccc:	f107 0308 	add.w	r3, r7, #8
 8003cd0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd8:	4b4f      	ldr	r3, [pc, #316]	; (8003e18 <HAL_RCC_OscConfig+0x938>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d11a      	bne.n	8003d1a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ce4:	4b4c      	ldr	r3, [pc, #304]	; (8003e18 <HAL_RCC_OscConfig+0x938>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a4b      	ldr	r2, [pc, #300]	; (8003e18 <HAL_RCC_OscConfig+0x938>)
 8003cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cee:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cf0:	f7fd fbf6 	bl	80014e0 <HAL_GetTick>
 8003cf4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf8:	e009      	b.n	8003d0e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cfa:	f7fd fbf1 	bl	80014e0 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b64      	cmp	r3, #100	; 0x64
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e2e9      	b.n	80042e2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d0e:	4b42      	ldr	r3, [pc, #264]	; (8003e18 <HAL_RCC_OscConfig+0x938>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0ef      	beq.n	8003cfa <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d1a:	1d3b      	adds	r3, r7, #4
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d106      	bne.n	8003d32 <HAL_RCC_OscConfig+0x852>
 8003d24:	4b3a      	ldr	r3, [pc, #232]	; (8003e10 <HAL_RCC_OscConfig+0x930>)
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	4a39      	ldr	r2, [pc, #228]	; (8003e10 <HAL_RCC_OscConfig+0x930>)
 8003d2a:	f043 0301 	orr.w	r3, r3, #1
 8003d2e:	6213      	str	r3, [r2, #32]
 8003d30:	e02f      	b.n	8003d92 <HAL_RCC_OscConfig+0x8b2>
 8003d32:	1d3b      	adds	r3, r7, #4
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10c      	bne.n	8003d56 <HAL_RCC_OscConfig+0x876>
 8003d3c:	4b34      	ldr	r3, [pc, #208]	; (8003e10 <HAL_RCC_OscConfig+0x930>)
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	4a33      	ldr	r2, [pc, #204]	; (8003e10 <HAL_RCC_OscConfig+0x930>)
 8003d42:	f023 0301 	bic.w	r3, r3, #1
 8003d46:	6213      	str	r3, [r2, #32]
 8003d48:	4b31      	ldr	r3, [pc, #196]	; (8003e10 <HAL_RCC_OscConfig+0x930>)
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	4a30      	ldr	r2, [pc, #192]	; (8003e10 <HAL_RCC_OscConfig+0x930>)
 8003d4e:	f023 0304 	bic.w	r3, r3, #4
 8003d52:	6213      	str	r3, [r2, #32]
 8003d54:	e01d      	b.n	8003d92 <HAL_RCC_OscConfig+0x8b2>
 8003d56:	1d3b      	adds	r3, r7, #4
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	2b05      	cmp	r3, #5
 8003d5e:	d10c      	bne.n	8003d7a <HAL_RCC_OscConfig+0x89a>
 8003d60:	4b2b      	ldr	r3, [pc, #172]	; (8003e10 <HAL_RCC_OscConfig+0x930>)
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	4a2a      	ldr	r2, [pc, #168]	; (8003e10 <HAL_RCC_OscConfig+0x930>)
 8003d66:	f043 0304 	orr.w	r3, r3, #4
 8003d6a:	6213      	str	r3, [r2, #32]
 8003d6c:	4b28      	ldr	r3, [pc, #160]	; (8003e10 <HAL_RCC_OscConfig+0x930>)
 8003d6e:	6a1b      	ldr	r3, [r3, #32]
 8003d70:	4a27      	ldr	r2, [pc, #156]	; (8003e10 <HAL_RCC_OscConfig+0x930>)
 8003d72:	f043 0301 	orr.w	r3, r3, #1
 8003d76:	6213      	str	r3, [r2, #32]
 8003d78:	e00b      	b.n	8003d92 <HAL_RCC_OscConfig+0x8b2>
 8003d7a:	4b25      	ldr	r3, [pc, #148]	; (8003e10 <HAL_RCC_OscConfig+0x930>)
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	4a24      	ldr	r2, [pc, #144]	; (8003e10 <HAL_RCC_OscConfig+0x930>)
 8003d80:	f023 0301 	bic.w	r3, r3, #1
 8003d84:	6213      	str	r3, [r2, #32]
 8003d86:	4b22      	ldr	r3, [pc, #136]	; (8003e10 <HAL_RCC_OscConfig+0x930>)
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	4a21      	ldr	r2, [pc, #132]	; (8003e10 <HAL_RCC_OscConfig+0x930>)
 8003d8c:	f023 0304 	bic.w	r3, r3, #4
 8003d90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d92:	1d3b      	adds	r3, r7, #4
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d06b      	beq.n	8003e74 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d9c:	f7fd fba0 	bl	80014e0 <HAL_GetTick>
 8003da0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003da4:	e00b      	b.n	8003dbe <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003da6:	f7fd fb9b 	bl	80014e0 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e291      	b.n	80042e2 <HAL_RCC_OscConfig+0xe02>
 8003dbe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	fa93 f2a3 	rbit	r2, r3
 8003dd0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003dda:	2202      	movs	r2, #2
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	fa93 f2a3 	rbit	r2, r3
 8003de8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003dec:	601a      	str	r2, [r3, #0]
  return result;
 8003dee:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003df2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003df4:	fab3 f383 	clz	r3, r3
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	095b      	lsrs	r3, r3, #5
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	f043 0302 	orr.w	r3, r3, #2
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d109      	bne.n	8003e1c <HAL_RCC_OscConfig+0x93c>
 8003e08:	4b01      	ldr	r3, [pc, #4]	; (8003e10 <HAL_RCC_OscConfig+0x930>)
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	e014      	b.n	8003e38 <HAL_RCC_OscConfig+0x958>
 8003e0e:	bf00      	nop
 8003e10:	40021000 	.word	0x40021000
 8003e14:	10908120 	.word	0x10908120
 8003e18:	40007000 	.word	0x40007000
 8003e1c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003e20:	2202      	movs	r2, #2
 8003e22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e24:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	fa93 f2a3 	rbit	r2, r3
 8003e2e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	4bbb      	ldr	r3, [pc, #748]	; (8004124 <HAL_RCC_OscConfig+0xc44>)
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003e3c:	2102      	movs	r1, #2
 8003e3e:	6011      	str	r1, [r2, #0]
 8003e40:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003e44:	6812      	ldr	r2, [r2, #0]
 8003e46:	fa92 f1a2 	rbit	r1, r2
 8003e4a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003e4e:	6011      	str	r1, [r2, #0]
  return result;
 8003e50:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003e54:	6812      	ldr	r2, [r2, #0]
 8003e56:	fab2 f282 	clz	r2, r2
 8003e5a:	b2d2      	uxtb	r2, r2
 8003e5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e60:	b2d2      	uxtb	r2, r2
 8003e62:	f002 021f 	and.w	r2, r2, #31
 8003e66:	2101      	movs	r1, #1
 8003e68:	fa01 f202 	lsl.w	r2, r1, r2
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d099      	beq.n	8003da6 <HAL_RCC_OscConfig+0x8c6>
 8003e72:	e063      	b.n	8003f3c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e74:	f7fd fb34 	bl	80014e0 <HAL_GetTick>
 8003e78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e7c:	e00b      	b.n	8003e96 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e7e:	f7fd fb2f 	bl	80014e0 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e225      	b.n	80042e2 <HAL_RCC_OscConfig+0xe02>
 8003e96:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	fa93 f2a3 	rbit	r2, r3
 8003ea8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	fa93 f2a3 	rbit	r2, r3
 8003ec0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003ec4:	601a      	str	r2, [r3, #0]
  return result;
 8003ec6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003eca:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ecc:	fab3 f383 	clz	r3, r3
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	095b      	lsrs	r3, r3, #5
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	f043 0302 	orr.w	r3, r3, #2
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d102      	bne.n	8003ee6 <HAL_RCC_OscConfig+0xa06>
 8003ee0:	4b90      	ldr	r3, [pc, #576]	; (8004124 <HAL_RCC_OscConfig+0xc44>)
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
 8003ee4:	e00d      	b.n	8003f02 <HAL_RCC_OscConfig+0xa22>
 8003ee6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003eea:	2202      	movs	r2, #2
 8003eec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eee:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	fa93 f2a3 	rbit	r2, r3
 8003ef8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	4b89      	ldr	r3, [pc, #548]	; (8004124 <HAL_RCC_OscConfig+0xc44>)
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003f06:	2102      	movs	r1, #2
 8003f08:	6011      	str	r1, [r2, #0]
 8003f0a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003f0e:	6812      	ldr	r2, [r2, #0]
 8003f10:	fa92 f1a2 	rbit	r1, r2
 8003f14:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003f18:	6011      	str	r1, [r2, #0]
  return result;
 8003f1a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003f1e:	6812      	ldr	r2, [r2, #0]
 8003f20:	fab2 f282 	clz	r2, r2
 8003f24:	b2d2      	uxtb	r2, r2
 8003f26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f2a:	b2d2      	uxtb	r2, r2
 8003f2c:	f002 021f 	and.w	r2, r2, #31
 8003f30:	2101      	movs	r1, #1
 8003f32:	fa01 f202 	lsl.w	r2, r1, r2
 8003f36:	4013      	ands	r3, r2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1a0      	bne.n	8003e7e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f3c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d105      	bne.n	8003f50 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f44:	4b77      	ldr	r3, [pc, #476]	; (8004124 <HAL_RCC_OscConfig+0xc44>)
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	4a76      	ldr	r2, [pc, #472]	; (8004124 <HAL_RCC_OscConfig+0xc44>)
 8003f4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f4e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f50:	1d3b      	adds	r3, r7, #4
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f000 81c2 	beq.w	80042e0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f5c:	4b71      	ldr	r3, [pc, #452]	; (8004124 <HAL_RCC_OscConfig+0xc44>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f003 030c 	and.w	r3, r3, #12
 8003f64:	2b08      	cmp	r3, #8
 8003f66:	f000 819c 	beq.w	80042a2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f6a:	1d3b      	adds	r3, r7, #4
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	69db      	ldr	r3, [r3, #28]
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	f040 8114 	bne.w	800419e <HAL_RCC_OscConfig+0xcbe>
 8003f76:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003f7a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f80:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	fa93 f2a3 	rbit	r2, r3
 8003f8a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003f8e:	601a      	str	r2, [r3, #0]
  return result;
 8003f90:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003f94:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f96:	fab3 f383 	clz	r3, r3
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003fa0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	2300      	movs	r3, #0
 8003faa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fac:	f7fd fa98 	bl	80014e0 <HAL_GetTick>
 8003fb0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fb4:	e009      	b.n	8003fca <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fb6:	f7fd fa93 	bl	80014e0 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e18b      	b.n	80042e2 <HAL_RCC_OscConfig+0xe02>
 8003fca:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003fce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	fa93 f2a3 	rbit	r2, r3
 8003fde:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003fe2:	601a      	str	r2, [r3, #0]
  return result;
 8003fe4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003fe8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fea:	fab3 f383 	clz	r3, r3
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	095b      	lsrs	r3, r3, #5
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	f043 0301 	orr.w	r3, r3, #1
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d102      	bne.n	8004004 <HAL_RCC_OscConfig+0xb24>
 8003ffe:	4b49      	ldr	r3, [pc, #292]	; (8004124 <HAL_RCC_OscConfig+0xc44>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	e01b      	b.n	800403c <HAL_RCC_OscConfig+0xb5c>
 8004004:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004008:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800400c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800400e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	fa93 f2a3 	rbit	r2, r3
 8004018:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800401c:	601a      	str	r2, [r3, #0]
 800401e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004022:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	fa93 f2a3 	rbit	r2, r3
 8004032:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	4b3a      	ldr	r3, [pc, #232]	; (8004124 <HAL_RCC_OscConfig+0xc44>)
 800403a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004040:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004044:	6011      	str	r1, [r2, #0]
 8004046:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800404a:	6812      	ldr	r2, [r2, #0]
 800404c:	fa92 f1a2 	rbit	r1, r2
 8004050:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004054:	6011      	str	r1, [r2, #0]
  return result;
 8004056:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800405a:	6812      	ldr	r2, [r2, #0]
 800405c:	fab2 f282 	clz	r2, r2
 8004060:	b2d2      	uxtb	r2, r2
 8004062:	f042 0220 	orr.w	r2, r2, #32
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	f002 021f 	and.w	r2, r2, #31
 800406c:	2101      	movs	r1, #1
 800406e:	fa01 f202 	lsl.w	r2, r1, r2
 8004072:	4013      	ands	r3, r2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d19e      	bne.n	8003fb6 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004078:	4b2a      	ldr	r3, [pc, #168]	; (8004124 <HAL_RCC_OscConfig+0xc44>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004080:	1d3b      	adds	r3, r7, #4
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004086:	1d3b      	adds	r3, r7, #4
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	430b      	orrs	r3, r1
 800408e:	4925      	ldr	r1, [pc, #148]	; (8004124 <HAL_RCC_OscConfig+0xc44>)
 8004090:	4313      	orrs	r3, r2
 8004092:	604b      	str	r3, [r1, #4]
 8004094:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004098:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800409c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	fa93 f2a3 	rbit	r2, r3
 80040a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80040ac:	601a      	str	r2, [r3, #0]
  return result;
 80040ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80040b2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040b4:	fab3 f383 	clz	r3, r3
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80040be:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	461a      	mov	r2, r3
 80040c6:	2301      	movs	r3, #1
 80040c8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ca:	f7fd fa09 	bl	80014e0 <HAL_GetTick>
 80040ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040d2:	e009      	b.n	80040e8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040d4:	f7fd fa04 	bl	80014e0 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e0fc      	b.n	80042e2 <HAL_RCC_OscConfig+0xe02>
 80040e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80040ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	fa93 f2a3 	rbit	r2, r3
 80040fc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004100:	601a      	str	r2, [r3, #0]
  return result;
 8004102:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004106:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004108:	fab3 f383 	clz	r3, r3
 800410c:	b2db      	uxtb	r3, r3
 800410e:	095b      	lsrs	r3, r3, #5
 8004110:	b2db      	uxtb	r3, r3
 8004112:	f043 0301 	orr.w	r3, r3, #1
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b01      	cmp	r3, #1
 800411a:	d105      	bne.n	8004128 <HAL_RCC_OscConfig+0xc48>
 800411c:	4b01      	ldr	r3, [pc, #4]	; (8004124 <HAL_RCC_OscConfig+0xc44>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	e01e      	b.n	8004160 <HAL_RCC_OscConfig+0xc80>
 8004122:	bf00      	nop
 8004124:	40021000 	.word	0x40021000
 8004128:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800412c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004130:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004132:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	fa93 f2a3 	rbit	r2, r3
 800413c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004140:	601a      	str	r2, [r3, #0]
 8004142:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004146:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	fa93 f2a3 	rbit	r2, r3
 8004156:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	4b63      	ldr	r3, [pc, #396]	; (80042ec <HAL_RCC_OscConfig+0xe0c>)
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004164:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004168:	6011      	str	r1, [r2, #0]
 800416a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800416e:	6812      	ldr	r2, [r2, #0]
 8004170:	fa92 f1a2 	rbit	r1, r2
 8004174:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004178:	6011      	str	r1, [r2, #0]
  return result;
 800417a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800417e:	6812      	ldr	r2, [r2, #0]
 8004180:	fab2 f282 	clz	r2, r2
 8004184:	b2d2      	uxtb	r2, r2
 8004186:	f042 0220 	orr.w	r2, r2, #32
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	f002 021f 	and.w	r2, r2, #31
 8004190:	2101      	movs	r1, #1
 8004192:	fa01 f202 	lsl.w	r2, r1, r2
 8004196:	4013      	ands	r3, r2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d09b      	beq.n	80040d4 <HAL_RCC_OscConfig+0xbf4>
 800419c:	e0a0      	b.n	80042e0 <HAL_RCC_OscConfig+0xe00>
 800419e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80041a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	fa93 f2a3 	rbit	r2, r3
 80041b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041b6:	601a      	str	r2, [r3, #0]
  return result;
 80041b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041bc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041be:	fab3 f383 	clz	r3, r3
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80041c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	461a      	mov	r2, r3
 80041d0:	2300      	movs	r3, #0
 80041d2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d4:	f7fd f984 	bl	80014e0 <HAL_GetTick>
 80041d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041dc:	e009      	b.n	80041f2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041de:	f7fd f97f 	bl	80014e0 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e077      	b.n	80042e2 <HAL_RCC_OscConfig+0xe02>
 80041f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	fa93 f2a3 	rbit	r2, r3
 8004206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800420a:	601a      	str	r2, [r3, #0]
  return result;
 800420c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004210:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004212:	fab3 f383 	clz	r3, r3
 8004216:	b2db      	uxtb	r3, r3
 8004218:	095b      	lsrs	r3, r3, #5
 800421a:	b2db      	uxtb	r3, r3
 800421c:	f043 0301 	orr.w	r3, r3, #1
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b01      	cmp	r3, #1
 8004224:	d102      	bne.n	800422c <HAL_RCC_OscConfig+0xd4c>
 8004226:	4b31      	ldr	r3, [pc, #196]	; (80042ec <HAL_RCC_OscConfig+0xe0c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	e01b      	b.n	8004264 <HAL_RCC_OscConfig+0xd84>
 800422c:	f107 0320 	add.w	r3, r7, #32
 8004230:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004234:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004236:	f107 0320 	add.w	r3, r7, #32
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	fa93 f2a3 	rbit	r2, r3
 8004240:	f107 031c 	add.w	r3, r7, #28
 8004244:	601a      	str	r2, [r3, #0]
 8004246:	f107 0318 	add.w	r3, r7, #24
 800424a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800424e:	601a      	str	r2, [r3, #0]
 8004250:	f107 0318 	add.w	r3, r7, #24
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	fa93 f2a3 	rbit	r2, r3
 800425a:	f107 0314 	add.w	r3, r7, #20
 800425e:	601a      	str	r2, [r3, #0]
 8004260:	4b22      	ldr	r3, [pc, #136]	; (80042ec <HAL_RCC_OscConfig+0xe0c>)
 8004262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004264:	f107 0210 	add.w	r2, r7, #16
 8004268:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800426c:	6011      	str	r1, [r2, #0]
 800426e:	f107 0210 	add.w	r2, r7, #16
 8004272:	6812      	ldr	r2, [r2, #0]
 8004274:	fa92 f1a2 	rbit	r1, r2
 8004278:	f107 020c 	add.w	r2, r7, #12
 800427c:	6011      	str	r1, [r2, #0]
  return result;
 800427e:	f107 020c 	add.w	r2, r7, #12
 8004282:	6812      	ldr	r2, [r2, #0]
 8004284:	fab2 f282 	clz	r2, r2
 8004288:	b2d2      	uxtb	r2, r2
 800428a:	f042 0220 	orr.w	r2, r2, #32
 800428e:	b2d2      	uxtb	r2, r2
 8004290:	f002 021f 	and.w	r2, r2, #31
 8004294:	2101      	movs	r1, #1
 8004296:	fa01 f202 	lsl.w	r2, r1, r2
 800429a:	4013      	ands	r3, r2
 800429c:	2b00      	cmp	r3, #0
 800429e:	d19e      	bne.n	80041de <HAL_RCC_OscConfig+0xcfe>
 80042a0:	e01e      	b.n	80042e0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042a2:	1d3b      	adds	r3, r7, #4
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	69db      	ldr	r3, [r3, #28]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d101      	bne.n	80042b0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e018      	b.n	80042e2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80042b0:	4b0e      	ldr	r3, [pc, #56]	; (80042ec <HAL_RCC_OscConfig+0xe0c>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80042b8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80042bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80042c0:	1d3b      	adds	r3, r7, #4
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d108      	bne.n	80042dc <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80042ca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80042ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80042d2:	1d3b      	adds	r3, r7, #4
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80042d8:	429a      	cmp	r2, r3
 80042da:	d001      	beq.n	80042e0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e000      	b.n	80042e2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	40021000 	.word	0x40021000

080042f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b09e      	sub	sp, #120	; 0x78
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80042fa:	2300      	movs	r3, #0
 80042fc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e162      	b.n	80045ce <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004308:	4b90      	ldr	r3, [pc, #576]	; (800454c <HAL_RCC_ClockConfig+0x25c>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	429a      	cmp	r2, r3
 8004314:	d910      	bls.n	8004338 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004316:	4b8d      	ldr	r3, [pc, #564]	; (800454c <HAL_RCC_ClockConfig+0x25c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f023 0207 	bic.w	r2, r3, #7
 800431e:	498b      	ldr	r1, [pc, #556]	; (800454c <HAL_RCC_ClockConfig+0x25c>)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	4313      	orrs	r3, r2
 8004324:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004326:	4b89      	ldr	r3, [pc, #548]	; (800454c <HAL_RCC_ClockConfig+0x25c>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0307 	and.w	r3, r3, #7
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	429a      	cmp	r2, r3
 8004332:	d001      	beq.n	8004338 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e14a      	b.n	80045ce <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d008      	beq.n	8004356 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004344:	4b82      	ldr	r3, [pc, #520]	; (8004550 <HAL_RCC_ClockConfig+0x260>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	497f      	ldr	r1, [pc, #508]	; (8004550 <HAL_RCC_ClockConfig+0x260>)
 8004352:	4313      	orrs	r3, r2
 8004354:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	f000 80dc 	beq.w	800451c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d13c      	bne.n	80043e6 <HAL_RCC_ClockConfig+0xf6>
 800436c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004370:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004372:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004374:	fa93 f3a3 	rbit	r3, r3
 8004378:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800437a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800437c:	fab3 f383 	clz	r3, r3
 8004380:	b2db      	uxtb	r3, r3
 8004382:	095b      	lsrs	r3, r3, #5
 8004384:	b2db      	uxtb	r3, r3
 8004386:	f043 0301 	orr.w	r3, r3, #1
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b01      	cmp	r3, #1
 800438e:	d102      	bne.n	8004396 <HAL_RCC_ClockConfig+0xa6>
 8004390:	4b6f      	ldr	r3, [pc, #444]	; (8004550 <HAL_RCC_ClockConfig+0x260>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	e00f      	b.n	80043b6 <HAL_RCC_ClockConfig+0xc6>
 8004396:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800439a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800439c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800439e:	fa93 f3a3 	rbit	r3, r3
 80043a2:	667b      	str	r3, [r7, #100]	; 0x64
 80043a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043a8:	663b      	str	r3, [r7, #96]	; 0x60
 80043aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043ac:	fa93 f3a3 	rbit	r3, r3
 80043b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043b2:	4b67      	ldr	r3, [pc, #412]	; (8004550 <HAL_RCC_ClockConfig+0x260>)
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043ba:	65ba      	str	r2, [r7, #88]	; 0x58
 80043bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043be:	fa92 f2a2 	rbit	r2, r2
 80043c2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80043c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80043c6:	fab2 f282 	clz	r2, r2
 80043ca:	b2d2      	uxtb	r2, r2
 80043cc:	f042 0220 	orr.w	r2, r2, #32
 80043d0:	b2d2      	uxtb	r2, r2
 80043d2:	f002 021f 	and.w	r2, r2, #31
 80043d6:	2101      	movs	r1, #1
 80043d8:	fa01 f202 	lsl.w	r2, r1, r2
 80043dc:	4013      	ands	r3, r2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d17b      	bne.n	80044da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e0f3      	b.n	80045ce <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d13c      	bne.n	8004468 <HAL_RCC_ClockConfig+0x178>
 80043ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043f2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043f6:	fa93 f3a3 	rbit	r3, r3
 80043fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80043fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043fe:	fab3 f383 	clz	r3, r3
 8004402:	b2db      	uxtb	r3, r3
 8004404:	095b      	lsrs	r3, r3, #5
 8004406:	b2db      	uxtb	r3, r3
 8004408:	f043 0301 	orr.w	r3, r3, #1
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b01      	cmp	r3, #1
 8004410:	d102      	bne.n	8004418 <HAL_RCC_ClockConfig+0x128>
 8004412:	4b4f      	ldr	r3, [pc, #316]	; (8004550 <HAL_RCC_ClockConfig+0x260>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	e00f      	b.n	8004438 <HAL_RCC_ClockConfig+0x148>
 8004418:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800441c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800441e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004420:	fa93 f3a3 	rbit	r3, r3
 8004424:	647b      	str	r3, [r7, #68]	; 0x44
 8004426:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800442a:	643b      	str	r3, [r7, #64]	; 0x40
 800442c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800442e:	fa93 f3a3 	rbit	r3, r3
 8004432:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004434:	4b46      	ldr	r3, [pc, #280]	; (8004550 <HAL_RCC_ClockConfig+0x260>)
 8004436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004438:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800443c:	63ba      	str	r2, [r7, #56]	; 0x38
 800443e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004440:	fa92 f2a2 	rbit	r2, r2
 8004444:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004446:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004448:	fab2 f282 	clz	r2, r2
 800444c:	b2d2      	uxtb	r2, r2
 800444e:	f042 0220 	orr.w	r2, r2, #32
 8004452:	b2d2      	uxtb	r2, r2
 8004454:	f002 021f 	and.w	r2, r2, #31
 8004458:	2101      	movs	r1, #1
 800445a:	fa01 f202 	lsl.w	r2, r1, r2
 800445e:	4013      	ands	r3, r2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d13a      	bne.n	80044da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e0b2      	b.n	80045ce <HAL_RCC_ClockConfig+0x2de>
 8004468:	2302      	movs	r3, #2
 800446a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800446c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446e:	fa93 f3a3 	rbit	r3, r3
 8004472:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004476:	fab3 f383 	clz	r3, r3
 800447a:	b2db      	uxtb	r3, r3
 800447c:	095b      	lsrs	r3, r3, #5
 800447e:	b2db      	uxtb	r3, r3
 8004480:	f043 0301 	orr.w	r3, r3, #1
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b01      	cmp	r3, #1
 8004488:	d102      	bne.n	8004490 <HAL_RCC_ClockConfig+0x1a0>
 800448a:	4b31      	ldr	r3, [pc, #196]	; (8004550 <HAL_RCC_ClockConfig+0x260>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	e00d      	b.n	80044ac <HAL_RCC_ClockConfig+0x1bc>
 8004490:	2302      	movs	r3, #2
 8004492:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004496:	fa93 f3a3 	rbit	r3, r3
 800449a:	627b      	str	r3, [r7, #36]	; 0x24
 800449c:	2302      	movs	r3, #2
 800449e:	623b      	str	r3, [r7, #32]
 80044a0:	6a3b      	ldr	r3, [r7, #32]
 80044a2:	fa93 f3a3 	rbit	r3, r3
 80044a6:	61fb      	str	r3, [r7, #28]
 80044a8:	4b29      	ldr	r3, [pc, #164]	; (8004550 <HAL_RCC_ClockConfig+0x260>)
 80044aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ac:	2202      	movs	r2, #2
 80044ae:	61ba      	str	r2, [r7, #24]
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	fa92 f2a2 	rbit	r2, r2
 80044b6:	617a      	str	r2, [r7, #20]
  return result;
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	fab2 f282 	clz	r2, r2
 80044be:	b2d2      	uxtb	r2, r2
 80044c0:	f042 0220 	orr.w	r2, r2, #32
 80044c4:	b2d2      	uxtb	r2, r2
 80044c6:	f002 021f 	and.w	r2, r2, #31
 80044ca:	2101      	movs	r1, #1
 80044cc:	fa01 f202 	lsl.w	r2, r1, r2
 80044d0:	4013      	ands	r3, r2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e079      	b.n	80045ce <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044da:	4b1d      	ldr	r3, [pc, #116]	; (8004550 <HAL_RCC_ClockConfig+0x260>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f023 0203 	bic.w	r2, r3, #3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	491a      	ldr	r1, [pc, #104]	; (8004550 <HAL_RCC_ClockConfig+0x260>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044ec:	f7fc fff8 	bl	80014e0 <HAL_GetTick>
 80044f0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044f2:	e00a      	b.n	800450a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044f4:	f7fc fff4 	bl	80014e0 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004502:	4293      	cmp	r3, r2
 8004504:	d901      	bls.n	800450a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e061      	b.n	80045ce <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800450a:	4b11      	ldr	r3, [pc, #68]	; (8004550 <HAL_RCC_ClockConfig+0x260>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f003 020c 	and.w	r2, r3, #12
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	429a      	cmp	r2, r3
 800451a:	d1eb      	bne.n	80044f4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800451c:	4b0b      	ldr	r3, [pc, #44]	; (800454c <HAL_RCC_ClockConfig+0x25c>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0307 	and.w	r3, r3, #7
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	429a      	cmp	r2, r3
 8004528:	d214      	bcs.n	8004554 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800452a:	4b08      	ldr	r3, [pc, #32]	; (800454c <HAL_RCC_ClockConfig+0x25c>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f023 0207 	bic.w	r2, r3, #7
 8004532:	4906      	ldr	r1, [pc, #24]	; (800454c <HAL_RCC_ClockConfig+0x25c>)
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	4313      	orrs	r3, r2
 8004538:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800453a:	4b04      	ldr	r3, [pc, #16]	; (800454c <HAL_RCC_ClockConfig+0x25c>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0307 	and.w	r3, r3, #7
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	429a      	cmp	r2, r3
 8004546:	d005      	beq.n	8004554 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e040      	b.n	80045ce <HAL_RCC_ClockConfig+0x2de>
 800454c:	40022000 	.word	0x40022000
 8004550:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0304 	and.w	r3, r3, #4
 800455c:	2b00      	cmp	r3, #0
 800455e:	d008      	beq.n	8004572 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004560:	4b1d      	ldr	r3, [pc, #116]	; (80045d8 <HAL_RCC_ClockConfig+0x2e8>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	491a      	ldr	r1, [pc, #104]	; (80045d8 <HAL_RCC_ClockConfig+0x2e8>)
 800456e:	4313      	orrs	r3, r2
 8004570:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0308 	and.w	r3, r3, #8
 800457a:	2b00      	cmp	r3, #0
 800457c:	d009      	beq.n	8004592 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800457e:	4b16      	ldr	r3, [pc, #88]	; (80045d8 <HAL_RCC_ClockConfig+0x2e8>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	4912      	ldr	r1, [pc, #72]	; (80045d8 <HAL_RCC_ClockConfig+0x2e8>)
 800458e:	4313      	orrs	r3, r2
 8004590:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004592:	f000 f829 	bl	80045e8 <HAL_RCC_GetSysClockFreq>
 8004596:	4601      	mov	r1, r0
 8004598:	4b0f      	ldr	r3, [pc, #60]	; (80045d8 <HAL_RCC_ClockConfig+0x2e8>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045a0:	22f0      	movs	r2, #240	; 0xf0
 80045a2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	fa92 f2a2 	rbit	r2, r2
 80045aa:	60fa      	str	r2, [r7, #12]
  return result;
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	fab2 f282 	clz	r2, r2
 80045b2:	b2d2      	uxtb	r2, r2
 80045b4:	40d3      	lsrs	r3, r2
 80045b6:	4a09      	ldr	r2, [pc, #36]	; (80045dc <HAL_RCC_ClockConfig+0x2ec>)
 80045b8:	5cd3      	ldrb	r3, [r2, r3]
 80045ba:	fa21 f303 	lsr.w	r3, r1, r3
 80045be:	4a08      	ldr	r2, [pc, #32]	; (80045e0 <HAL_RCC_ClockConfig+0x2f0>)
 80045c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80045c2:	4b08      	ldr	r3, [pc, #32]	; (80045e4 <HAL_RCC_ClockConfig+0x2f4>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7fc ff46 	bl	8001458 <HAL_InitTick>
  
  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3778      	adds	r7, #120	; 0x78
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	40021000 	.word	0x40021000
 80045dc:	080061d8 	.word	0x080061d8
 80045e0:	20000008 	.word	0x20000008
 80045e4:	2000000c 	.word	0x2000000c

080045e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b08b      	sub	sp, #44	; 0x2c
 80045ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045ee:	2300      	movs	r3, #0
 80045f0:	61fb      	str	r3, [r7, #28]
 80045f2:	2300      	movs	r3, #0
 80045f4:	61bb      	str	r3, [r7, #24]
 80045f6:	2300      	movs	r3, #0
 80045f8:	627b      	str	r3, [r7, #36]	; 0x24
 80045fa:	2300      	movs	r3, #0
 80045fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80045fe:	2300      	movs	r3, #0
 8004600:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004602:	4b29      	ldr	r3, [pc, #164]	; (80046a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	f003 030c 	and.w	r3, r3, #12
 800460e:	2b04      	cmp	r3, #4
 8004610:	d002      	beq.n	8004618 <HAL_RCC_GetSysClockFreq+0x30>
 8004612:	2b08      	cmp	r3, #8
 8004614:	d003      	beq.n	800461e <HAL_RCC_GetSysClockFreq+0x36>
 8004616:	e03c      	b.n	8004692 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004618:	4b24      	ldr	r3, [pc, #144]	; (80046ac <HAL_RCC_GetSysClockFreq+0xc4>)
 800461a:	623b      	str	r3, [r7, #32]
      break;
 800461c:	e03c      	b.n	8004698 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004624:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004628:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	fa92 f2a2 	rbit	r2, r2
 8004630:	607a      	str	r2, [r7, #4]
  return result;
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	fab2 f282 	clz	r2, r2
 8004638:	b2d2      	uxtb	r2, r2
 800463a:	40d3      	lsrs	r3, r2
 800463c:	4a1c      	ldr	r2, [pc, #112]	; (80046b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800463e:	5cd3      	ldrb	r3, [r2, r3]
 8004640:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004642:	4b19      	ldr	r3, [pc, #100]	; (80046a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004646:	f003 030f 	and.w	r3, r3, #15
 800464a:	220f      	movs	r2, #15
 800464c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	fa92 f2a2 	rbit	r2, r2
 8004654:	60fa      	str	r2, [r7, #12]
  return result;
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	fab2 f282 	clz	r2, r2
 800465c:	b2d2      	uxtb	r2, r2
 800465e:	40d3      	lsrs	r3, r2
 8004660:	4a14      	ldr	r2, [pc, #80]	; (80046b4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004662:	5cd3      	ldrb	r3, [r2, r3]
 8004664:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d008      	beq.n	8004682 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004670:	4a0e      	ldr	r2, [pc, #56]	; (80046ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	fbb2 f2f3 	udiv	r2, r2, r3
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	fb02 f303 	mul.w	r3, r2, r3
 800467e:	627b      	str	r3, [r7, #36]	; 0x24
 8004680:	e004      	b.n	800468c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	4a0c      	ldr	r2, [pc, #48]	; (80046b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004686:	fb02 f303 	mul.w	r3, r2, r3
 800468a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800468c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468e:	623b      	str	r3, [r7, #32]
      break;
 8004690:	e002      	b.n	8004698 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004692:	4b06      	ldr	r3, [pc, #24]	; (80046ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8004694:	623b      	str	r3, [r7, #32]
      break;
 8004696:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004698:	6a3b      	ldr	r3, [r7, #32]
}
 800469a:	4618      	mov	r0, r3
 800469c:	372c      	adds	r7, #44	; 0x2c
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	40021000 	.word	0x40021000
 80046ac:	007a1200 	.word	0x007a1200
 80046b0:	080061e8 	.word	0x080061e8
 80046b4:	080061f8 	.word	0x080061f8
 80046b8:	003d0900 	.word	0x003d0900

080046bc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b092      	sub	sp, #72	; 0x48
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046c4:	2300      	movs	r3, #0
 80046c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80046cc:	2300      	movs	r3, #0
 80046ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 80d4 	beq.w	8004888 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046e0:	4b4e      	ldr	r3, [pc, #312]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046e2:	69db      	ldr	r3, [r3, #28]
 80046e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d10e      	bne.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046ec:	4b4b      	ldr	r3, [pc, #300]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ee:	69db      	ldr	r3, [r3, #28]
 80046f0:	4a4a      	ldr	r2, [pc, #296]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046f6:	61d3      	str	r3, [r2, #28]
 80046f8:	4b48      	ldr	r3, [pc, #288]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046fa:	69db      	ldr	r3, [r3, #28]
 80046fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004700:	60bb      	str	r3, [r7, #8]
 8004702:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004704:	2301      	movs	r3, #1
 8004706:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800470a:	4b45      	ldr	r3, [pc, #276]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004712:	2b00      	cmp	r3, #0
 8004714:	d118      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004716:	4b42      	ldr	r3, [pc, #264]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a41      	ldr	r2, [pc, #260]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800471c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004720:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004722:	f7fc fedd 	bl	80014e0 <HAL_GetTick>
 8004726:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004728:	e008      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800472a:	f7fc fed9 	bl	80014e0 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b64      	cmp	r3, #100	; 0x64
 8004736:	d901      	bls.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e169      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800473c:	4b38      	ldr	r3, [pc, #224]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004744:	2b00      	cmp	r3, #0
 8004746:	d0f0      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004748:	4b34      	ldr	r3, [pc, #208]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004750:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004754:	2b00      	cmp	r3, #0
 8004756:	f000 8084 	beq.w	8004862 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004762:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004764:	429a      	cmp	r2, r3
 8004766:	d07c      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004768:	4b2c      	ldr	r3, [pc, #176]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004770:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004772:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004776:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477a:	fa93 f3a3 	rbit	r3, r3
 800477e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004782:	fab3 f383 	clz	r3, r3
 8004786:	b2db      	uxtb	r3, r3
 8004788:	461a      	mov	r2, r3
 800478a:	4b26      	ldr	r3, [pc, #152]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800478c:	4413      	add	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	461a      	mov	r2, r3
 8004792:	2301      	movs	r3, #1
 8004794:	6013      	str	r3, [r2, #0]
 8004796:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800479a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800479c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800479e:	fa93 f3a3 	rbit	r3, r3
 80047a2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80047a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047a6:	fab3 f383 	clz	r3, r3
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	461a      	mov	r2, r3
 80047ae:	4b1d      	ldr	r3, [pc, #116]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047b0:	4413      	add	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	461a      	mov	r2, r3
 80047b6:	2300      	movs	r3, #0
 80047b8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80047ba:	4a18      	ldr	r2, [pc, #96]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047be:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80047c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d04b      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ca:	f7fc fe89 	bl	80014e0 <HAL_GetTick>
 80047ce:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047d0:	e00a      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d2:	f7fc fe85 	bl	80014e0 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e113      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80047e8:	2302      	movs	r3, #2
 80047ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ee:	fa93 f3a3 	rbit	r3, r3
 80047f2:	627b      	str	r3, [r7, #36]	; 0x24
 80047f4:	2302      	movs	r3, #2
 80047f6:	623b      	str	r3, [r7, #32]
 80047f8:	6a3b      	ldr	r3, [r7, #32]
 80047fa:	fa93 f3a3 	rbit	r3, r3
 80047fe:	61fb      	str	r3, [r7, #28]
  return result;
 8004800:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004802:	fab3 f383 	clz	r3, r3
 8004806:	b2db      	uxtb	r3, r3
 8004808:	095b      	lsrs	r3, r3, #5
 800480a:	b2db      	uxtb	r3, r3
 800480c:	f043 0302 	orr.w	r3, r3, #2
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b02      	cmp	r3, #2
 8004814:	d108      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004816:	4b01      	ldr	r3, [pc, #4]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	e00d      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800481c:	40021000 	.word	0x40021000
 8004820:	40007000 	.word	0x40007000
 8004824:	10908100 	.word	0x10908100
 8004828:	2302      	movs	r3, #2
 800482a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	fa93 f3a3 	rbit	r3, r3
 8004832:	617b      	str	r3, [r7, #20]
 8004834:	4b78      	ldr	r3, [pc, #480]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004838:	2202      	movs	r2, #2
 800483a:	613a      	str	r2, [r7, #16]
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	fa92 f2a2 	rbit	r2, r2
 8004842:	60fa      	str	r2, [r7, #12]
  return result;
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	fab2 f282 	clz	r2, r2
 800484a:	b2d2      	uxtb	r2, r2
 800484c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004850:	b2d2      	uxtb	r2, r2
 8004852:	f002 021f 	and.w	r2, r2, #31
 8004856:	2101      	movs	r1, #1
 8004858:	fa01 f202 	lsl.w	r2, r1, r2
 800485c:	4013      	ands	r3, r2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d0b7      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004862:	4b6d      	ldr	r3, [pc, #436]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	496a      	ldr	r1, [pc, #424]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004870:	4313      	orrs	r3, r2
 8004872:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004874:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004878:	2b01      	cmp	r3, #1
 800487a:	d105      	bne.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800487c:	4b66      	ldr	r3, [pc, #408]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800487e:	69db      	ldr	r3, [r3, #28]
 8004880:	4a65      	ldr	r2, [pc, #404]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004882:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004886:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	2b00      	cmp	r3, #0
 8004892:	d008      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004894:	4b60      	ldr	r3, [pc, #384]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004898:	f023 0203 	bic.w	r2, r3, #3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	495d      	ldr	r1, [pc, #372]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d008      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048b2:	4b59      	ldr	r3, [pc, #356]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	4956      	ldr	r1, [pc, #344]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0304 	and.w	r3, r3, #4
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d008      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048d0:	4b51      	ldr	r3, [pc, #324]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	494e      	ldr	r1, [pc, #312]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0320 	and.w	r3, r3, #32
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d008      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048ee:	4b4a      	ldr	r3, [pc, #296]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f2:	f023 0210 	bic.w	r2, r3, #16
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	4947      	ldr	r1, [pc, #284]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d008      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800490c:	4b42      	ldr	r3, [pc, #264]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004918:	493f      	ldr	r1, [pc, #252]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800491a:	4313      	orrs	r3, r2
 800491c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004926:	2b00      	cmp	r3, #0
 8004928:	d008      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800492a:	4b3b      	ldr	r3, [pc, #236]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800492c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492e:	f023 0220 	bic.w	r2, r3, #32
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	4938      	ldr	r1, [pc, #224]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004938:	4313      	orrs	r3, r2
 800493a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0308 	and.w	r3, r3, #8
 8004944:	2b00      	cmp	r3, #0
 8004946:	d008      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004948:	4b33      	ldr	r3, [pc, #204]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800494a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	4930      	ldr	r1, [pc, #192]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004956:	4313      	orrs	r3, r2
 8004958:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0310 	and.w	r3, r3, #16
 8004962:	2b00      	cmp	r3, #0
 8004964:	d008      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004966:	4b2c      	ldr	r3, [pc, #176]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	4929      	ldr	r1, [pc, #164]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004974:	4313      	orrs	r3, r2
 8004976:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004980:	2b00      	cmp	r3, #0
 8004982:	d008      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004984:	4b24      	ldr	r3, [pc, #144]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004990:	4921      	ldr	r1, [pc, #132]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004992:	4313      	orrs	r3, r2
 8004994:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d008      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80049a2:	4b1d      	ldr	r3, [pc, #116]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	491a      	ldr	r1, [pc, #104]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d008      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80049c0:	4b15      	ldr	r3, [pc, #84]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049cc:	4912      	ldr	r1, [pc, #72]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d008      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80049de:	4b0e      	ldr	r3, [pc, #56]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ea:	490b      	ldr	r1, [pc, #44]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d008      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80049fc:	4b06      	ldr	r3, [pc, #24]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a00:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a08:	4903      	ldr	r1, [pc, #12]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3748      	adds	r7, #72	; 0x48
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40021000 	.word	0x40021000

08004a1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e09d      	b.n	8004b6a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d108      	bne.n	8004a48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a3e:	d009      	beq.n	8004a54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	61da      	str	r2, [r3, #28]
 8004a46:	e005      	b.n	8004a54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d106      	bne.n	8004a74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7fc f932 	bl	8000cd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2202      	movs	r2, #2
 8004a78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a8a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a94:	d902      	bls.n	8004a9c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a96:	2300      	movs	r3, #0
 8004a98:	60fb      	str	r3, [r7, #12]
 8004a9a:	e002      	b.n	8004aa2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004a9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004aa0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004aaa:	d007      	beq.n	8004abc <HAL_SPI_Init+0xa0>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ab4:	d002      	beq.n	8004abc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004acc:	431a      	orrs	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	f003 0301 	and.w	r3, r3, #1
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aea:	431a      	orrs	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	69db      	ldr	r3, [r3, #28]
 8004af0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004af4:	431a      	orrs	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004afe:	ea42 0103 	orr.w	r1, r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b06:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	0c1b      	lsrs	r3, r3, #16
 8004b18:	f003 0204 	and.w	r2, r3, #4
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b20:	f003 0310 	and.w	r3, r3, #16
 8004b24:	431a      	orrs	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b2a:	f003 0308 	and.w	r3, r3, #8
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004b38:	ea42 0103 	orr.w	r1, r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	69da      	ldr	r2, [r3, #28]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b72:	b580      	push	{r7, lr}
 8004b74:	b082      	sub	sp, #8
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d101      	bne.n	8004b84 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e049      	b.n	8004c18 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d106      	bne.n	8004b9e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f7fc f8df 	bl	8000d5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2202      	movs	r2, #2
 8004ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	3304      	adds	r3, #4
 8004bae:	4619      	mov	r1, r3
 8004bb0:	4610      	mov	r0, r2
 8004bb2:	f000 fdc7 	bl	8005744 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2201      	movs	r2, #1
 8004c02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3708      	adds	r7, #8
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d001      	beq.n	8004c38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e04a      	b.n	8004cce <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68da      	ldr	r2, [r3, #12]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f042 0201 	orr.w	r2, r2, #1
 8004c4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a21      	ldr	r2, [pc, #132]	; (8004cdc <HAL_TIM_Base_Start_IT+0xbc>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d018      	beq.n	8004c8c <HAL_TIM_Base_Start_IT+0x6c>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c62:	d013      	beq.n	8004c8c <HAL_TIM_Base_Start_IT+0x6c>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a1d      	ldr	r2, [pc, #116]	; (8004ce0 <HAL_TIM_Base_Start_IT+0xc0>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d00e      	beq.n	8004c8c <HAL_TIM_Base_Start_IT+0x6c>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a1c      	ldr	r2, [pc, #112]	; (8004ce4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d009      	beq.n	8004c8c <HAL_TIM_Base_Start_IT+0x6c>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a1a      	ldr	r2, [pc, #104]	; (8004ce8 <HAL_TIM_Base_Start_IT+0xc8>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d004      	beq.n	8004c8c <HAL_TIM_Base_Start_IT+0x6c>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a19      	ldr	r2, [pc, #100]	; (8004cec <HAL_TIM_Base_Start_IT+0xcc>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d115      	bne.n	8004cb8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689a      	ldr	r2, [r3, #8]
 8004c92:	4b17      	ldr	r3, [pc, #92]	; (8004cf0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c94:	4013      	ands	r3, r2
 8004c96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2b06      	cmp	r3, #6
 8004c9c:	d015      	beq.n	8004cca <HAL_TIM_Base_Start_IT+0xaa>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ca4:	d011      	beq.n	8004cca <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f042 0201 	orr.w	r2, r2, #1
 8004cb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb6:	e008      	b.n	8004cca <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f042 0201 	orr.w	r2, r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]
 8004cc8:	e000      	b.n	8004ccc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	40012c00 	.word	0x40012c00
 8004ce0:	40000400 	.word	0x40000400
 8004ce4:	40000800 	.word	0x40000800
 8004ce8:	40013400 	.word	0x40013400
 8004cec:	40014000 	.word	0x40014000
 8004cf0:	00010007 	.word	0x00010007

08004cf4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e049      	b.n	8004d9a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d106      	bne.n	8004d20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f841 	bl	8004da2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2202      	movs	r2, #2
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	3304      	adds	r3, #4
 8004d30:	4619      	mov	r1, r3
 8004d32:	4610      	mov	r0, r2
 8004d34:	f000 fd06 	bl	8005744 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b083      	sub	sp, #12
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004daa:	bf00      	nop
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
	...

08004db8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d109      	bne.n	8004ddc <HAL_TIM_PWM_Start+0x24>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	bf14      	ite	ne
 8004dd4:	2301      	movne	r3, #1
 8004dd6:	2300      	moveq	r3, #0
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	e03c      	b.n	8004e56 <HAL_TIM_PWM_Start+0x9e>
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	2b04      	cmp	r3, #4
 8004de0:	d109      	bne.n	8004df6 <HAL_TIM_PWM_Start+0x3e>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	bf14      	ite	ne
 8004dee:	2301      	movne	r3, #1
 8004df0:	2300      	moveq	r3, #0
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	e02f      	b.n	8004e56 <HAL_TIM_PWM_Start+0x9e>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b08      	cmp	r3, #8
 8004dfa:	d109      	bne.n	8004e10 <HAL_TIM_PWM_Start+0x58>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	bf14      	ite	ne
 8004e08:	2301      	movne	r3, #1
 8004e0a:	2300      	moveq	r3, #0
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	e022      	b.n	8004e56 <HAL_TIM_PWM_Start+0x9e>
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	2b0c      	cmp	r3, #12
 8004e14:	d109      	bne.n	8004e2a <HAL_TIM_PWM_Start+0x72>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	bf14      	ite	ne
 8004e22:	2301      	movne	r3, #1
 8004e24:	2300      	moveq	r3, #0
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	e015      	b.n	8004e56 <HAL_TIM_PWM_Start+0x9e>
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2b10      	cmp	r3, #16
 8004e2e:	d109      	bne.n	8004e44 <HAL_TIM_PWM_Start+0x8c>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	bf14      	ite	ne
 8004e3c:	2301      	movne	r3, #1
 8004e3e:	2300      	moveq	r3, #0
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	e008      	b.n	8004e56 <HAL_TIM_PWM_Start+0x9e>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	bf14      	ite	ne
 8004e50:	2301      	movne	r3, #1
 8004e52:	2300      	moveq	r3, #0
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d001      	beq.n	8004e5e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e097      	b.n	8004f8e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d104      	bne.n	8004e6e <HAL_TIM_PWM_Start+0xb6>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2202      	movs	r2, #2
 8004e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e6c:	e023      	b.n	8004eb6 <HAL_TIM_PWM_Start+0xfe>
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	2b04      	cmp	r3, #4
 8004e72:	d104      	bne.n	8004e7e <HAL_TIM_PWM_Start+0xc6>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2202      	movs	r2, #2
 8004e78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e7c:	e01b      	b.n	8004eb6 <HAL_TIM_PWM_Start+0xfe>
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	2b08      	cmp	r3, #8
 8004e82:	d104      	bne.n	8004e8e <HAL_TIM_PWM_Start+0xd6>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2202      	movs	r2, #2
 8004e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e8c:	e013      	b.n	8004eb6 <HAL_TIM_PWM_Start+0xfe>
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	2b0c      	cmp	r3, #12
 8004e92:	d104      	bne.n	8004e9e <HAL_TIM_PWM_Start+0xe6>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2202      	movs	r2, #2
 8004e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e9c:	e00b      	b.n	8004eb6 <HAL_TIM_PWM_Start+0xfe>
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	2b10      	cmp	r3, #16
 8004ea2:	d104      	bne.n	8004eae <HAL_TIM_PWM_Start+0xf6>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004eac:	e003      	b.n	8004eb6 <HAL_TIM_PWM_Start+0xfe>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2202      	movs	r2, #2
 8004eb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	6839      	ldr	r1, [r7, #0]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f001 f840 	bl	8005f44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a33      	ldr	r2, [pc, #204]	; (8004f98 <HAL_TIM_PWM_Start+0x1e0>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d013      	beq.n	8004ef6 <HAL_TIM_PWM_Start+0x13e>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a32      	ldr	r2, [pc, #200]	; (8004f9c <HAL_TIM_PWM_Start+0x1e4>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d00e      	beq.n	8004ef6 <HAL_TIM_PWM_Start+0x13e>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a30      	ldr	r2, [pc, #192]	; (8004fa0 <HAL_TIM_PWM_Start+0x1e8>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d009      	beq.n	8004ef6 <HAL_TIM_PWM_Start+0x13e>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a2f      	ldr	r2, [pc, #188]	; (8004fa4 <HAL_TIM_PWM_Start+0x1ec>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d004      	beq.n	8004ef6 <HAL_TIM_PWM_Start+0x13e>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a2d      	ldr	r2, [pc, #180]	; (8004fa8 <HAL_TIM_PWM_Start+0x1f0>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d101      	bne.n	8004efa <HAL_TIM_PWM_Start+0x142>
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e000      	b.n	8004efc <HAL_TIM_PWM_Start+0x144>
 8004efa:	2300      	movs	r3, #0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d007      	beq.n	8004f10 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f0e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a20      	ldr	r2, [pc, #128]	; (8004f98 <HAL_TIM_PWM_Start+0x1e0>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d018      	beq.n	8004f4c <HAL_TIM_PWM_Start+0x194>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f22:	d013      	beq.n	8004f4c <HAL_TIM_PWM_Start+0x194>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a20      	ldr	r2, [pc, #128]	; (8004fac <HAL_TIM_PWM_Start+0x1f4>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d00e      	beq.n	8004f4c <HAL_TIM_PWM_Start+0x194>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a1f      	ldr	r2, [pc, #124]	; (8004fb0 <HAL_TIM_PWM_Start+0x1f8>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d009      	beq.n	8004f4c <HAL_TIM_PWM_Start+0x194>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a17      	ldr	r2, [pc, #92]	; (8004f9c <HAL_TIM_PWM_Start+0x1e4>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d004      	beq.n	8004f4c <HAL_TIM_PWM_Start+0x194>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a16      	ldr	r2, [pc, #88]	; (8004fa0 <HAL_TIM_PWM_Start+0x1e8>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d115      	bne.n	8004f78 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	689a      	ldr	r2, [r3, #8]
 8004f52:	4b18      	ldr	r3, [pc, #96]	; (8004fb4 <HAL_TIM_PWM_Start+0x1fc>)
 8004f54:	4013      	ands	r3, r2
 8004f56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2b06      	cmp	r3, #6
 8004f5c:	d015      	beq.n	8004f8a <HAL_TIM_PWM_Start+0x1d2>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f64:	d011      	beq.n	8004f8a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f042 0201 	orr.w	r2, r2, #1
 8004f74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f76:	e008      	b.n	8004f8a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f042 0201 	orr.w	r2, r2, #1
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	e000      	b.n	8004f8c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	40012c00 	.word	0x40012c00
 8004f9c:	40013400 	.word	0x40013400
 8004fa0:	40014000 	.word	0x40014000
 8004fa4:	40014400 	.word	0x40014400
 8004fa8:	40014800 	.word	0x40014800
 8004fac:	40000400 	.word	0x40000400
 8004fb0:	40000800 	.word	0x40000800
 8004fb4:	00010007 	.word	0x00010007

08004fb8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	6839      	ldr	r1, [r7, #0]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 ffba 	bl	8005f44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a3e      	ldr	r2, [pc, #248]	; (80050d0 <HAL_TIM_PWM_Stop+0x118>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d013      	beq.n	8005002 <HAL_TIM_PWM_Stop+0x4a>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a3d      	ldr	r2, [pc, #244]	; (80050d4 <HAL_TIM_PWM_Stop+0x11c>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d00e      	beq.n	8005002 <HAL_TIM_PWM_Stop+0x4a>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a3b      	ldr	r2, [pc, #236]	; (80050d8 <HAL_TIM_PWM_Stop+0x120>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d009      	beq.n	8005002 <HAL_TIM_PWM_Stop+0x4a>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a3a      	ldr	r2, [pc, #232]	; (80050dc <HAL_TIM_PWM_Stop+0x124>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d004      	beq.n	8005002 <HAL_TIM_PWM_Stop+0x4a>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a38      	ldr	r2, [pc, #224]	; (80050e0 <HAL_TIM_PWM_Stop+0x128>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d101      	bne.n	8005006 <HAL_TIM_PWM_Stop+0x4e>
 8005002:	2301      	movs	r3, #1
 8005004:	e000      	b.n	8005008 <HAL_TIM_PWM_Stop+0x50>
 8005006:	2300      	movs	r3, #0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d017      	beq.n	800503c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6a1a      	ldr	r2, [r3, #32]
 8005012:	f241 1311 	movw	r3, #4369	; 0x1111
 8005016:	4013      	ands	r3, r2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10f      	bne.n	800503c <HAL_TIM_PWM_Stop+0x84>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6a1a      	ldr	r2, [r3, #32]
 8005022:	f240 4344 	movw	r3, #1092	; 0x444
 8005026:	4013      	ands	r3, r2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d107      	bne.n	800503c <HAL_TIM_PWM_Stop+0x84>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800503a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6a1a      	ldr	r2, [r3, #32]
 8005042:	f241 1311 	movw	r3, #4369	; 0x1111
 8005046:	4013      	ands	r3, r2
 8005048:	2b00      	cmp	r3, #0
 800504a:	d10f      	bne.n	800506c <HAL_TIM_PWM_Stop+0xb4>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6a1a      	ldr	r2, [r3, #32]
 8005052:	f240 4344 	movw	r3, #1092	; 0x444
 8005056:	4013      	ands	r3, r2
 8005058:	2b00      	cmp	r3, #0
 800505a:	d107      	bne.n	800506c <HAL_TIM_PWM_Stop+0xb4>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f022 0201 	bic.w	r2, r2, #1
 800506a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d104      	bne.n	800507c <HAL_TIM_PWM_Stop+0xc4>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800507a:	e023      	b.n	80050c4 <HAL_TIM_PWM_Stop+0x10c>
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	2b04      	cmp	r3, #4
 8005080:	d104      	bne.n	800508c <HAL_TIM_PWM_Stop+0xd4>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800508a:	e01b      	b.n	80050c4 <HAL_TIM_PWM_Stop+0x10c>
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	2b08      	cmp	r3, #8
 8005090:	d104      	bne.n	800509c <HAL_TIM_PWM_Stop+0xe4>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800509a:	e013      	b.n	80050c4 <HAL_TIM_PWM_Stop+0x10c>
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	2b0c      	cmp	r3, #12
 80050a0:	d104      	bne.n	80050ac <HAL_TIM_PWM_Stop+0xf4>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050aa:	e00b      	b.n	80050c4 <HAL_TIM_PWM_Stop+0x10c>
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	2b10      	cmp	r3, #16
 80050b0:	d104      	bne.n	80050bc <HAL_TIM_PWM_Stop+0x104>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050ba:	e003      	b.n	80050c4 <HAL_TIM_PWM_Stop+0x10c>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3708      	adds	r7, #8
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	40012c00 	.word	0x40012c00
 80050d4:	40013400 	.word	0x40013400
 80050d8:	40014000 	.word	0x40014000
 80050dc:	40014400 	.word	0x40014400
 80050e0:	40014800 	.word	0x40014800

080050e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d122      	bne.n	8005140 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	2b02      	cmp	r3, #2
 8005106:	d11b      	bne.n	8005140 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f06f 0202 	mvn.w	r2, #2
 8005110:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	f003 0303 	and.w	r3, r3, #3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d003      	beq.n	800512e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 faed 	bl	8005706 <HAL_TIM_IC_CaptureCallback>
 800512c:	e005      	b.n	800513a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 fadf 	bl	80056f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 faf0 	bl	800571a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	f003 0304 	and.w	r3, r3, #4
 800514a:	2b04      	cmp	r3, #4
 800514c:	d122      	bne.n	8005194 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f003 0304 	and.w	r3, r3, #4
 8005158:	2b04      	cmp	r3, #4
 800515a:	d11b      	bne.n	8005194 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f06f 0204 	mvn.w	r2, #4
 8005164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2202      	movs	r2, #2
 800516a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005176:	2b00      	cmp	r3, #0
 8005178:	d003      	beq.n	8005182 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 fac3 	bl	8005706 <HAL_TIM_IC_CaptureCallback>
 8005180:	e005      	b.n	800518e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 fab5 	bl	80056f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 fac6 	bl	800571a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	f003 0308 	and.w	r3, r3, #8
 800519e:	2b08      	cmp	r3, #8
 80051a0:	d122      	bne.n	80051e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	f003 0308 	and.w	r3, r3, #8
 80051ac:	2b08      	cmp	r3, #8
 80051ae:	d11b      	bne.n	80051e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f06f 0208 	mvn.w	r2, #8
 80051b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2204      	movs	r2, #4
 80051be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	f003 0303 	and.w	r3, r3, #3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d003      	beq.n	80051d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 fa99 	bl	8005706 <HAL_TIM_IC_CaptureCallback>
 80051d4:	e005      	b.n	80051e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 fa8b 	bl	80056f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 fa9c 	bl	800571a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	f003 0310 	and.w	r3, r3, #16
 80051f2:	2b10      	cmp	r3, #16
 80051f4:	d122      	bne.n	800523c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	f003 0310 	and.w	r3, r3, #16
 8005200:	2b10      	cmp	r3, #16
 8005202:	d11b      	bne.n	800523c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f06f 0210 	mvn.w	r2, #16
 800520c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2208      	movs	r2, #8
 8005212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	69db      	ldr	r3, [r3, #28]
 800521a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 fa6f 	bl	8005706 <HAL_TIM_IC_CaptureCallback>
 8005228:	e005      	b.n	8005236 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 fa61 	bl	80056f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 fa72 	bl	800571a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	2b01      	cmp	r3, #1
 8005248:	d10e      	bne.n	8005268 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	2b01      	cmp	r3, #1
 8005256:	d107      	bne.n	8005268 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f06f 0201 	mvn.w	r2, #1
 8005260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 fa3b 	bl	80056de <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005272:	2b80      	cmp	r3, #128	; 0x80
 8005274:	d10e      	bne.n	8005294 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005280:	2b80      	cmp	r3, #128	; 0x80
 8005282:	d107      	bne.n	8005294 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800528c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 ff08 	bl	80060a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800529e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052a2:	d10e      	bne.n	80052c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ae:	2b80      	cmp	r3, #128	; 0x80
 80052b0:	d107      	bne.n	80052c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80052ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 fefb 	bl	80060b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052cc:	2b40      	cmp	r3, #64	; 0x40
 80052ce:	d10e      	bne.n	80052ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052da:	2b40      	cmp	r3, #64	; 0x40
 80052dc:	d107      	bne.n	80052ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 fa20 	bl	800572e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	f003 0320 	and.w	r3, r3, #32
 80052f8:	2b20      	cmp	r3, #32
 80052fa:	d10e      	bne.n	800531a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	f003 0320 	and.w	r3, r3, #32
 8005306:	2b20      	cmp	r3, #32
 8005308:	d107      	bne.n	800531a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f06f 0220 	mvn.w	r2, #32
 8005312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 febb 	bl	8006090 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800531a:	bf00      	nop
 800531c:	3708      	adds	r7, #8
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
	...

08005324 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005330:	2300      	movs	r3, #0
 8005332:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800533a:	2b01      	cmp	r3, #1
 800533c:	d101      	bne.n	8005342 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800533e:	2302      	movs	r3, #2
 8005340:	e0ff      	b.n	8005542 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b14      	cmp	r3, #20
 800534e:	f200 80f0 	bhi.w	8005532 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005352:	a201      	add	r2, pc, #4	; (adr r2, 8005358 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005358:	080053ad 	.word	0x080053ad
 800535c:	08005533 	.word	0x08005533
 8005360:	08005533 	.word	0x08005533
 8005364:	08005533 	.word	0x08005533
 8005368:	080053ed 	.word	0x080053ed
 800536c:	08005533 	.word	0x08005533
 8005370:	08005533 	.word	0x08005533
 8005374:	08005533 	.word	0x08005533
 8005378:	0800542f 	.word	0x0800542f
 800537c:	08005533 	.word	0x08005533
 8005380:	08005533 	.word	0x08005533
 8005384:	08005533 	.word	0x08005533
 8005388:	0800546f 	.word	0x0800546f
 800538c:	08005533 	.word	0x08005533
 8005390:	08005533 	.word	0x08005533
 8005394:	08005533 	.word	0x08005533
 8005398:	080054b1 	.word	0x080054b1
 800539c:	08005533 	.word	0x08005533
 80053a0:	08005533 	.word	0x08005533
 80053a4:	08005533 	.word	0x08005533
 80053a8:	080054f1 	.word	0x080054f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68b9      	ldr	r1, [r7, #8]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 fa56 	bl	8005864 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	699a      	ldr	r2, [r3, #24]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f042 0208 	orr.w	r2, r2, #8
 80053c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	699a      	ldr	r2, [r3, #24]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f022 0204 	bic.w	r2, r2, #4
 80053d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6999      	ldr	r1, [r3, #24]
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	691a      	ldr	r2, [r3, #16]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	619a      	str	r2, [r3, #24]
      break;
 80053ea:	e0a5      	b.n	8005538 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68b9      	ldr	r1, [r7, #8]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 fac6 	bl	8005984 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	699a      	ldr	r2, [r3, #24]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005406:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	699a      	ldr	r2, [r3, #24]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005416:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6999      	ldr	r1, [r3, #24]
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	021a      	lsls	r2, r3, #8
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	430a      	orrs	r2, r1
 800542a:	619a      	str	r2, [r3, #24]
      break;
 800542c:	e084      	b.n	8005538 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68b9      	ldr	r1, [r7, #8]
 8005434:	4618      	mov	r0, r3
 8005436:	f000 fb2f 	bl	8005a98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	69da      	ldr	r2, [r3, #28]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f042 0208 	orr.w	r2, r2, #8
 8005448:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	69da      	ldr	r2, [r3, #28]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f022 0204 	bic.w	r2, r2, #4
 8005458:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	69d9      	ldr	r1, [r3, #28]
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	691a      	ldr	r2, [r3, #16]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	430a      	orrs	r2, r1
 800546a:	61da      	str	r2, [r3, #28]
      break;
 800546c:	e064      	b.n	8005538 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68b9      	ldr	r1, [r7, #8]
 8005474:	4618      	mov	r0, r3
 8005476:	f000 fb97 	bl	8005ba8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	69da      	ldr	r2, [r3, #28]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005488:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	69da      	ldr	r2, [r3, #28]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005498:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	69d9      	ldr	r1, [r3, #28]
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	021a      	lsls	r2, r3, #8
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	430a      	orrs	r2, r1
 80054ac:	61da      	str	r2, [r3, #28]
      break;
 80054ae:	e043      	b.n	8005538 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68b9      	ldr	r1, [r7, #8]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f000 fbe0 	bl	8005c7c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f042 0208 	orr.w	r2, r2, #8
 80054ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f022 0204 	bic.w	r2, r2, #4
 80054da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	691a      	ldr	r2, [r3, #16]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	430a      	orrs	r2, r1
 80054ec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80054ee:	e023      	b.n	8005538 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68b9      	ldr	r1, [r7, #8]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 fc24 	bl	8005d44 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800550a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800551a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	021a      	lsls	r2, r3, #8
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	430a      	orrs	r2, r1
 800552e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005530:	e002      	b.n	8005538 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	75fb      	strb	r3, [r7, #23]
      break;
 8005536:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005540:	7dfb      	ldrb	r3, [r7, #23]
}
 8005542:	4618      	mov	r0, r3
 8005544:	3718      	adds	r7, #24
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop

0800554c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005556:	2300      	movs	r3, #0
 8005558:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005560:	2b01      	cmp	r3, #1
 8005562:	d101      	bne.n	8005568 <HAL_TIM_ConfigClockSource+0x1c>
 8005564:	2302      	movs	r3, #2
 8005566:	e0b6      	b.n	80056d6 <HAL_TIM_ConfigClockSource+0x18a>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005586:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800558a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005592:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68ba      	ldr	r2, [r7, #8]
 800559a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055a4:	d03e      	beq.n	8005624 <HAL_TIM_ConfigClockSource+0xd8>
 80055a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055aa:	f200 8087 	bhi.w	80056bc <HAL_TIM_ConfigClockSource+0x170>
 80055ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055b2:	f000 8086 	beq.w	80056c2 <HAL_TIM_ConfigClockSource+0x176>
 80055b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ba:	d87f      	bhi.n	80056bc <HAL_TIM_ConfigClockSource+0x170>
 80055bc:	2b70      	cmp	r3, #112	; 0x70
 80055be:	d01a      	beq.n	80055f6 <HAL_TIM_ConfigClockSource+0xaa>
 80055c0:	2b70      	cmp	r3, #112	; 0x70
 80055c2:	d87b      	bhi.n	80056bc <HAL_TIM_ConfigClockSource+0x170>
 80055c4:	2b60      	cmp	r3, #96	; 0x60
 80055c6:	d050      	beq.n	800566a <HAL_TIM_ConfigClockSource+0x11e>
 80055c8:	2b60      	cmp	r3, #96	; 0x60
 80055ca:	d877      	bhi.n	80056bc <HAL_TIM_ConfigClockSource+0x170>
 80055cc:	2b50      	cmp	r3, #80	; 0x50
 80055ce:	d03c      	beq.n	800564a <HAL_TIM_ConfigClockSource+0xfe>
 80055d0:	2b50      	cmp	r3, #80	; 0x50
 80055d2:	d873      	bhi.n	80056bc <HAL_TIM_ConfigClockSource+0x170>
 80055d4:	2b40      	cmp	r3, #64	; 0x40
 80055d6:	d058      	beq.n	800568a <HAL_TIM_ConfigClockSource+0x13e>
 80055d8:	2b40      	cmp	r3, #64	; 0x40
 80055da:	d86f      	bhi.n	80056bc <HAL_TIM_ConfigClockSource+0x170>
 80055dc:	2b30      	cmp	r3, #48	; 0x30
 80055de:	d064      	beq.n	80056aa <HAL_TIM_ConfigClockSource+0x15e>
 80055e0:	2b30      	cmp	r3, #48	; 0x30
 80055e2:	d86b      	bhi.n	80056bc <HAL_TIM_ConfigClockSource+0x170>
 80055e4:	2b20      	cmp	r3, #32
 80055e6:	d060      	beq.n	80056aa <HAL_TIM_ConfigClockSource+0x15e>
 80055e8:	2b20      	cmp	r3, #32
 80055ea:	d867      	bhi.n	80056bc <HAL_TIM_ConfigClockSource+0x170>
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d05c      	beq.n	80056aa <HAL_TIM_ConfigClockSource+0x15e>
 80055f0:	2b10      	cmp	r3, #16
 80055f2:	d05a      	beq.n	80056aa <HAL_TIM_ConfigClockSource+0x15e>
 80055f4:	e062      	b.n	80056bc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6818      	ldr	r0, [r3, #0]
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	6899      	ldr	r1, [r3, #8]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	f000 fc7d 	bl	8005f04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005618:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	609a      	str	r2, [r3, #8]
      break;
 8005622:	e04f      	b.n	80056c4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6818      	ldr	r0, [r3, #0]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	6899      	ldr	r1, [r3, #8]
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	f000 fc66 	bl	8005f04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	689a      	ldr	r2, [r3, #8]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005646:	609a      	str	r2, [r3, #8]
      break;
 8005648:	e03c      	b.n	80056c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6818      	ldr	r0, [r3, #0]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	6859      	ldr	r1, [r3, #4]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	461a      	mov	r2, r3
 8005658:	f000 fbda 	bl	8005e10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2150      	movs	r1, #80	; 0x50
 8005662:	4618      	mov	r0, r3
 8005664:	f000 fc33 	bl	8005ece <TIM_ITRx_SetConfig>
      break;
 8005668:	e02c      	b.n	80056c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6818      	ldr	r0, [r3, #0]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	6859      	ldr	r1, [r3, #4]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	461a      	mov	r2, r3
 8005678:	f000 fbf9 	bl	8005e6e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2160      	movs	r1, #96	; 0x60
 8005682:	4618      	mov	r0, r3
 8005684:	f000 fc23 	bl	8005ece <TIM_ITRx_SetConfig>
      break;
 8005688:	e01c      	b.n	80056c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6818      	ldr	r0, [r3, #0]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	6859      	ldr	r1, [r3, #4]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	461a      	mov	r2, r3
 8005698:	f000 fbba 	bl	8005e10 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2140      	movs	r1, #64	; 0x40
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 fc13 	bl	8005ece <TIM_ITRx_SetConfig>
      break;
 80056a8:	e00c      	b.n	80056c4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4619      	mov	r1, r3
 80056b4:	4610      	mov	r0, r2
 80056b6:	f000 fc0a 	bl	8005ece <TIM_ITRx_SetConfig>
      break;
 80056ba:	e003      	b.n	80056c4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	73fb      	strb	r3, [r7, #15]
      break;
 80056c0:	e000      	b.n	80056c4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80056c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3710      	adds	r7, #16
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}

080056de <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056de:	b480      	push	{r7}
 80056e0:	b083      	sub	sp, #12
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80056e6:	bf00      	nop
 80056e8:	370c      	adds	r7, #12
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056f2:	b480      	push	{r7}
 80056f4:	b083      	sub	sp, #12
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056fa:	bf00      	nop
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr

08005706 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005706:	b480      	push	{r7}
 8005708:	b083      	sub	sp, #12
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800570e:	bf00      	nop
 8005710:	370c      	adds	r7, #12
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800571a:	b480      	push	{r7}
 800571c:	b083      	sub	sp, #12
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005722:	bf00      	nop
 8005724:	370c      	adds	r7, #12
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr

0800572e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800572e:	b480      	push	{r7}
 8005730:	b083      	sub	sp, #12
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005736:	bf00      	nop
 8005738:	370c      	adds	r7, #12
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
	...

08005744 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a3c      	ldr	r2, [pc, #240]	; (8005848 <TIM_Base_SetConfig+0x104>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d00f      	beq.n	800577c <TIM_Base_SetConfig+0x38>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005762:	d00b      	beq.n	800577c <TIM_Base_SetConfig+0x38>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a39      	ldr	r2, [pc, #228]	; (800584c <TIM_Base_SetConfig+0x108>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d007      	beq.n	800577c <TIM_Base_SetConfig+0x38>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a38      	ldr	r2, [pc, #224]	; (8005850 <TIM_Base_SetConfig+0x10c>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d003      	beq.n	800577c <TIM_Base_SetConfig+0x38>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a37      	ldr	r2, [pc, #220]	; (8005854 <TIM_Base_SetConfig+0x110>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d108      	bne.n	800578e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005782:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	4313      	orrs	r3, r2
 800578c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a2d      	ldr	r2, [pc, #180]	; (8005848 <TIM_Base_SetConfig+0x104>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d01b      	beq.n	80057ce <TIM_Base_SetConfig+0x8a>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800579c:	d017      	beq.n	80057ce <TIM_Base_SetConfig+0x8a>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a2a      	ldr	r2, [pc, #168]	; (800584c <TIM_Base_SetConfig+0x108>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d013      	beq.n	80057ce <TIM_Base_SetConfig+0x8a>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a29      	ldr	r2, [pc, #164]	; (8005850 <TIM_Base_SetConfig+0x10c>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d00f      	beq.n	80057ce <TIM_Base_SetConfig+0x8a>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a28      	ldr	r2, [pc, #160]	; (8005854 <TIM_Base_SetConfig+0x110>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d00b      	beq.n	80057ce <TIM_Base_SetConfig+0x8a>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a27      	ldr	r2, [pc, #156]	; (8005858 <TIM_Base_SetConfig+0x114>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d007      	beq.n	80057ce <TIM_Base_SetConfig+0x8a>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a26      	ldr	r2, [pc, #152]	; (800585c <TIM_Base_SetConfig+0x118>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d003      	beq.n	80057ce <TIM_Base_SetConfig+0x8a>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a25      	ldr	r2, [pc, #148]	; (8005860 <TIM_Base_SetConfig+0x11c>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d108      	bne.n	80057e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	4313      	orrs	r3, r2
 80057de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	689a      	ldr	r2, [r3, #8]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a10      	ldr	r2, [pc, #64]	; (8005848 <TIM_Base_SetConfig+0x104>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d00f      	beq.n	800582c <TIM_Base_SetConfig+0xe8>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a11      	ldr	r2, [pc, #68]	; (8005854 <TIM_Base_SetConfig+0x110>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d00b      	beq.n	800582c <TIM_Base_SetConfig+0xe8>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a10      	ldr	r2, [pc, #64]	; (8005858 <TIM_Base_SetConfig+0x114>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d007      	beq.n	800582c <TIM_Base_SetConfig+0xe8>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a0f      	ldr	r2, [pc, #60]	; (800585c <TIM_Base_SetConfig+0x118>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d003      	beq.n	800582c <TIM_Base_SetConfig+0xe8>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a0e      	ldr	r2, [pc, #56]	; (8005860 <TIM_Base_SetConfig+0x11c>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d103      	bne.n	8005834 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	691a      	ldr	r2, [r3, #16]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	615a      	str	r2, [r3, #20]
}
 800583a:	bf00      	nop
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	40012c00 	.word	0x40012c00
 800584c:	40000400 	.word	0x40000400
 8005850:	40000800 	.word	0x40000800
 8005854:	40013400 	.word	0x40013400
 8005858:	40014000 	.word	0x40014000
 800585c:	40014400 	.word	0x40014400
 8005860:	40014800 	.word	0x40014800

08005864 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005864:	b480      	push	{r7}
 8005866:	b087      	sub	sp, #28
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	f023 0201 	bic.w	r2, r3, #1
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f023 0303 	bic.w	r3, r3, #3
 800589e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	f023 0302 	bic.w	r3, r3, #2
 80058b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a2c      	ldr	r2, [pc, #176]	; (8005970 <TIM_OC1_SetConfig+0x10c>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d00f      	beq.n	80058e4 <TIM_OC1_SetConfig+0x80>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a2b      	ldr	r2, [pc, #172]	; (8005974 <TIM_OC1_SetConfig+0x110>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d00b      	beq.n	80058e4 <TIM_OC1_SetConfig+0x80>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a2a      	ldr	r2, [pc, #168]	; (8005978 <TIM_OC1_SetConfig+0x114>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d007      	beq.n	80058e4 <TIM_OC1_SetConfig+0x80>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a29      	ldr	r2, [pc, #164]	; (800597c <TIM_OC1_SetConfig+0x118>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d003      	beq.n	80058e4 <TIM_OC1_SetConfig+0x80>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a28      	ldr	r2, [pc, #160]	; (8005980 <TIM_OC1_SetConfig+0x11c>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d10c      	bne.n	80058fe <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	f023 0308 	bic.w	r3, r3, #8
 80058ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	f023 0304 	bic.w	r3, r3, #4
 80058fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a1b      	ldr	r2, [pc, #108]	; (8005970 <TIM_OC1_SetConfig+0x10c>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d00f      	beq.n	8005926 <TIM_OC1_SetConfig+0xc2>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a1a      	ldr	r2, [pc, #104]	; (8005974 <TIM_OC1_SetConfig+0x110>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d00b      	beq.n	8005926 <TIM_OC1_SetConfig+0xc2>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a19      	ldr	r2, [pc, #100]	; (8005978 <TIM_OC1_SetConfig+0x114>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d007      	beq.n	8005926 <TIM_OC1_SetConfig+0xc2>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a18      	ldr	r2, [pc, #96]	; (800597c <TIM_OC1_SetConfig+0x118>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d003      	beq.n	8005926 <TIM_OC1_SetConfig+0xc2>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a17      	ldr	r2, [pc, #92]	; (8005980 <TIM_OC1_SetConfig+0x11c>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d111      	bne.n	800594a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800592c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005934:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	4313      	orrs	r3, r2
 800593e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	4313      	orrs	r3, r2
 8005948:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	685a      	ldr	r2, [r3, #4]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	621a      	str	r2, [r3, #32]
}
 8005964:	bf00      	nop
 8005966:	371c      	adds	r7, #28
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr
 8005970:	40012c00 	.word	0x40012c00
 8005974:	40013400 	.word	0x40013400
 8005978:	40014000 	.word	0x40014000
 800597c:	40014400 	.word	0x40014400
 8005980:	40014800 	.word	0x40014800

08005984 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005984:	b480      	push	{r7}
 8005986:	b087      	sub	sp, #28
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	f023 0210 	bic.w	r2, r3, #16
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	021b      	lsls	r3, r3, #8
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	f023 0320 	bic.w	r3, r3, #32
 80059d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	011b      	lsls	r3, r3, #4
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	4313      	orrs	r3, r2
 80059de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a28      	ldr	r2, [pc, #160]	; (8005a84 <TIM_OC2_SetConfig+0x100>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d003      	beq.n	80059f0 <TIM_OC2_SetConfig+0x6c>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a27      	ldr	r2, [pc, #156]	; (8005a88 <TIM_OC2_SetConfig+0x104>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d10d      	bne.n	8005a0c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	011b      	lsls	r3, r3, #4
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a0a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a1d      	ldr	r2, [pc, #116]	; (8005a84 <TIM_OC2_SetConfig+0x100>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d00f      	beq.n	8005a34 <TIM_OC2_SetConfig+0xb0>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a1c      	ldr	r2, [pc, #112]	; (8005a88 <TIM_OC2_SetConfig+0x104>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d00b      	beq.n	8005a34 <TIM_OC2_SetConfig+0xb0>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a1b      	ldr	r2, [pc, #108]	; (8005a8c <TIM_OC2_SetConfig+0x108>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d007      	beq.n	8005a34 <TIM_OC2_SetConfig+0xb0>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a1a      	ldr	r2, [pc, #104]	; (8005a90 <TIM_OC2_SetConfig+0x10c>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d003      	beq.n	8005a34 <TIM_OC2_SetConfig+0xb0>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a19      	ldr	r2, [pc, #100]	; (8005a94 <TIM_OC2_SetConfig+0x110>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d113      	bne.n	8005a5c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a3a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a42:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	695b      	ldr	r3, [r3, #20]
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	693a      	ldr	r2, [r7, #16]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	685a      	ldr	r2, [r3, #4]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	621a      	str	r2, [r3, #32]
}
 8005a76:	bf00      	nop
 8005a78:	371c      	adds	r7, #28
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	40012c00 	.word	0x40012c00
 8005a88:	40013400 	.word	0x40013400
 8005a8c:	40014000 	.word	0x40014000
 8005a90:	40014400 	.word	0x40014400
 8005a94:	40014800 	.word	0x40014800

08005a98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b087      	sub	sp, #28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
 8005ab2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f023 0303 	bic.w	r3, r3, #3
 8005ad2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ae4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	021b      	lsls	r3, r3, #8
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a27      	ldr	r2, [pc, #156]	; (8005b94 <TIM_OC3_SetConfig+0xfc>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d003      	beq.n	8005b02 <TIM_OC3_SetConfig+0x6a>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a26      	ldr	r2, [pc, #152]	; (8005b98 <TIM_OC3_SetConfig+0x100>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d10d      	bne.n	8005b1e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	021b      	lsls	r3, r3, #8
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b1c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a1c      	ldr	r2, [pc, #112]	; (8005b94 <TIM_OC3_SetConfig+0xfc>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d00f      	beq.n	8005b46 <TIM_OC3_SetConfig+0xae>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a1b      	ldr	r2, [pc, #108]	; (8005b98 <TIM_OC3_SetConfig+0x100>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d00b      	beq.n	8005b46 <TIM_OC3_SetConfig+0xae>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a1a      	ldr	r2, [pc, #104]	; (8005b9c <TIM_OC3_SetConfig+0x104>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d007      	beq.n	8005b46 <TIM_OC3_SetConfig+0xae>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a19      	ldr	r2, [pc, #100]	; (8005ba0 <TIM_OC3_SetConfig+0x108>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d003      	beq.n	8005b46 <TIM_OC3_SetConfig+0xae>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a18      	ldr	r2, [pc, #96]	; (8005ba4 <TIM_OC3_SetConfig+0x10c>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d113      	bne.n	8005b6e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	011b      	lsls	r3, r3, #4
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	011b      	lsls	r3, r3, #4
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	685a      	ldr	r2, [r3, #4]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	621a      	str	r2, [r3, #32]
}
 8005b88:	bf00      	nop
 8005b8a:	371c      	adds	r7, #28
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr
 8005b94:	40012c00 	.word	0x40012c00
 8005b98:	40013400 	.word	0x40013400
 8005b9c:	40014000 	.word	0x40014000
 8005ba0:	40014400 	.word	0x40014400
 8005ba4:	40014800 	.word	0x40014800

08005ba8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b087      	sub	sp, #28
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a1b      	ldr	r3, [r3, #32]
 8005bb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	69db      	ldr	r3, [r3, #28]
 8005bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005be2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	021b      	lsls	r3, r3, #8
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bf6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	031b      	lsls	r3, r3, #12
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a18      	ldr	r2, [pc, #96]	; (8005c68 <TIM_OC4_SetConfig+0xc0>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d00f      	beq.n	8005c2c <TIM_OC4_SetConfig+0x84>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a17      	ldr	r2, [pc, #92]	; (8005c6c <TIM_OC4_SetConfig+0xc4>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d00b      	beq.n	8005c2c <TIM_OC4_SetConfig+0x84>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a16      	ldr	r2, [pc, #88]	; (8005c70 <TIM_OC4_SetConfig+0xc8>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d007      	beq.n	8005c2c <TIM_OC4_SetConfig+0x84>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a15      	ldr	r2, [pc, #84]	; (8005c74 <TIM_OC4_SetConfig+0xcc>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d003      	beq.n	8005c2c <TIM_OC4_SetConfig+0x84>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a14      	ldr	r2, [pc, #80]	; (8005c78 <TIM_OC4_SetConfig+0xd0>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d109      	bne.n	8005c40 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	019b      	lsls	r3, r3, #6
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	685a      	ldr	r2, [r3, #4]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	621a      	str	r2, [r3, #32]
}
 8005c5a:	bf00      	nop
 8005c5c:	371c      	adds	r7, #28
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	40012c00 	.word	0x40012c00
 8005c6c:	40013400 	.word	0x40013400
 8005c70:	40014000 	.word	0x40014000
 8005c74:	40014400 	.word	0x40014400
 8005c78:	40014800 	.word	0x40014800

08005c7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b087      	sub	sp, #28
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005cc0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	041b      	lsls	r3, r3, #16
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a17      	ldr	r2, [pc, #92]	; (8005d30 <TIM_OC5_SetConfig+0xb4>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d00f      	beq.n	8005cf6 <TIM_OC5_SetConfig+0x7a>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a16      	ldr	r2, [pc, #88]	; (8005d34 <TIM_OC5_SetConfig+0xb8>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d00b      	beq.n	8005cf6 <TIM_OC5_SetConfig+0x7a>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a15      	ldr	r2, [pc, #84]	; (8005d38 <TIM_OC5_SetConfig+0xbc>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d007      	beq.n	8005cf6 <TIM_OC5_SetConfig+0x7a>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a14      	ldr	r2, [pc, #80]	; (8005d3c <TIM_OC5_SetConfig+0xc0>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d003      	beq.n	8005cf6 <TIM_OC5_SetConfig+0x7a>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a13      	ldr	r2, [pc, #76]	; (8005d40 <TIM_OC5_SetConfig+0xc4>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d109      	bne.n	8005d0a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cfc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	021b      	lsls	r3, r3, #8
 8005d04:	697a      	ldr	r2, [r7, #20]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	685a      	ldr	r2, [r3, #4]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	621a      	str	r2, [r3, #32]
}
 8005d24:	bf00      	nop
 8005d26:	371c      	adds	r7, #28
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr
 8005d30:	40012c00 	.word	0x40012c00
 8005d34:	40013400 	.word	0x40013400
 8005d38:	40014000 	.word	0x40014000
 8005d3c:	40014400 	.word	0x40014400
 8005d40:	40014800 	.word	0x40014800

08005d44 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b087      	sub	sp, #28
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	021b      	lsls	r3, r3, #8
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	051b      	lsls	r3, r3, #20
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a18      	ldr	r2, [pc, #96]	; (8005dfc <TIM_OC6_SetConfig+0xb8>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d00f      	beq.n	8005dc0 <TIM_OC6_SetConfig+0x7c>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a17      	ldr	r2, [pc, #92]	; (8005e00 <TIM_OC6_SetConfig+0xbc>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d00b      	beq.n	8005dc0 <TIM_OC6_SetConfig+0x7c>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a16      	ldr	r2, [pc, #88]	; (8005e04 <TIM_OC6_SetConfig+0xc0>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d007      	beq.n	8005dc0 <TIM_OC6_SetConfig+0x7c>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a15      	ldr	r2, [pc, #84]	; (8005e08 <TIM_OC6_SetConfig+0xc4>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d003      	beq.n	8005dc0 <TIM_OC6_SetConfig+0x7c>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a14      	ldr	r2, [pc, #80]	; (8005e0c <TIM_OC6_SetConfig+0xc8>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d109      	bne.n	8005dd4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dc6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	695b      	ldr	r3, [r3, #20]
 8005dcc:	029b      	lsls	r3, r3, #10
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	685a      	ldr	r2, [r3, #4]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	621a      	str	r2, [r3, #32]
}
 8005dee:	bf00      	nop
 8005df0:	371c      	adds	r7, #28
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	40012c00 	.word	0x40012c00
 8005e00:	40013400 	.word	0x40013400
 8005e04:	40014000 	.word	0x40014000
 8005e08:	40014400 	.word	0x40014400
 8005e0c:	40014800 	.word	0x40014800

08005e10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b087      	sub	sp, #28
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6a1b      	ldr	r3, [r3, #32]
 8005e20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	f023 0201 	bic.w	r2, r3, #1
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	011b      	lsls	r3, r3, #4
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	f023 030a 	bic.w	r3, r3, #10
 8005e4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	621a      	str	r2, [r3, #32]
}
 8005e62:	bf00      	nop
 8005e64:	371c      	adds	r7, #28
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr

08005e6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e6e:	b480      	push	{r7}
 8005e70:	b087      	sub	sp, #28
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	60f8      	str	r0, [r7, #12]
 8005e76:	60b9      	str	r1, [r7, #8]
 8005e78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	f023 0210 	bic.w	r2, r3, #16
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6a1b      	ldr	r3, [r3, #32]
 8005e90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	031b      	lsls	r3, r3, #12
 8005e9e:	697a      	ldr	r2, [r7, #20]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005eaa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	011b      	lsls	r3, r3, #4
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	621a      	str	r2, [r3, #32]
}
 8005ec2:	bf00      	nop
 8005ec4:	371c      	adds	r7, #28
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr

08005ece <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ece:	b480      	push	{r7}
 8005ed0:	b085      	sub	sp, #20
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
 8005ed6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ee6:	683a      	ldr	r2, [r7, #0]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	f043 0307 	orr.w	r3, r3, #7
 8005ef0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	609a      	str	r2, [r3, #8]
}
 8005ef8:	bf00      	nop
 8005efa:	3714      	adds	r7, #20
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b087      	sub	sp, #28
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
 8005f10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	021a      	lsls	r2, r3, #8
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	431a      	orrs	r2, r3
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	697a      	ldr	r2, [r7, #20]
 8005f36:	609a      	str	r2, [r3, #8]
}
 8005f38:	bf00      	nop
 8005f3a:	371c      	adds	r7, #28
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b087      	sub	sp, #28
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	f003 031f 	and.w	r3, r3, #31
 8005f56:	2201      	movs	r2, #1
 8005f58:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6a1a      	ldr	r2, [r3, #32]
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	43db      	mvns	r3, r3
 8005f66:	401a      	ands	r2, r3
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6a1a      	ldr	r2, [r3, #32]
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	f003 031f 	and.w	r3, r3, #31
 8005f76:	6879      	ldr	r1, [r7, #4]
 8005f78:	fa01 f303 	lsl.w	r3, r1, r3
 8005f7c:	431a      	orrs	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	621a      	str	r2, [r3, #32]
}
 8005f82:	bf00      	nop
 8005f84:	371c      	adds	r7, #28
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
	...

08005f90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d101      	bne.n	8005fa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fa4:	2302      	movs	r3, #2
 8005fa6:	e063      	b.n	8006070 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2202      	movs	r2, #2
 8005fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a2b      	ldr	r2, [pc, #172]	; (800607c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d004      	beq.n	8005fdc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a2a      	ldr	r2, [pc, #168]	; (8006080 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d108      	bne.n	8005fee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005fe2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a1b      	ldr	r2, [pc, #108]	; (800607c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d018      	beq.n	8006044 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800601a:	d013      	beq.n	8006044 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a18      	ldr	r2, [pc, #96]	; (8006084 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d00e      	beq.n	8006044 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a17      	ldr	r2, [pc, #92]	; (8006088 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d009      	beq.n	8006044 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a12      	ldr	r2, [pc, #72]	; (8006080 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d004      	beq.n	8006044 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a13      	ldr	r2, [pc, #76]	; (800608c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d10c      	bne.n	800605e <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800604a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	4313      	orrs	r3, r2
 8006054:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68ba      	ldr	r2, [r7, #8]
 800605c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2201      	movs	r2, #1
 8006062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	3714      	adds	r7, #20
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr
 800607c:	40012c00 	.word	0x40012c00
 8006080:	40013400 	.word	0x40013400
 8006084:	40000400 	.word	0x40000400
 8006088:	40000800 	.word	0x40000800
 800608c:	40014000 	.word	0x40014000

08006090 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006098:	bf00      	nop
 800609a:	370c      	adds	r7, #12
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060ac:	bf00      	nop
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80060d4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80060d8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	43db      	mvns	r3, r3
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	4013      	ands	r3, r2
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006102:	b084      	sub	sp, #16
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	f107 0014 	add.w	r0, r7, #20
 8006110:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	b004      	add	sp, #16
 8006142:	4770      	bx	lr

08006144 <__libc_init_array>:
 8006144:	b570      	push	{r4, r5, r6, lr}
 8006146:	4d0d      	ldr	r5, [pc, #52]	; (800617c <__libc_init_array+0x38>)
 8006148:	4c0d      	ldr	r4, [pc, #52]	; (8006180 <__libc_init_array+0x3c>)
 800614a:	1b64      	subs	r4, r4, r5
 800614c:	10a4      	asrs	r4, r4, #2
 800614e:	2600      	movs	r6, #0
 8006150:	42a6      	cmp	r6, r4
 8006152:	d109      	bne.n	8006168 <__libc_init_array+0x24>
 8006154:	4d0b      	ldr	r5, [pc, #44]	; (8006184 <__libc_init_array+0x40>)
 8006156:	4c0c      	ldr	r4, [pc, #48]	; (8006188 <__libc_init_array+0x44>)
 8006158:	f000 f820 	bl	800619c <_init>
 800615c:	1b64      	subs	r4, r4, r5
 800615e:	10a4      	asrs	r4, r4, #2
 8006160:	2600      	movs	r6, #0
 8006162:	42a6      	cmp	r6, r4
 8006164:	d105      	bne.n	8006172 <__libc_init_array+0x2e>
 8006166:	bd70      	pop	{r4, r5, r6, pc}
 8006168:	f855 3b04 	ldr.w	r3, [r5], #4
 800616c:	4798      	blx	r3
 800616e:	3601      	adds	r6, #1
 8006170:	e7ee      	b.n	8006150 <__libc_init_array+0xc>
 8006172:	f855 3b04 	ldr.w	r3, [r5], #4
 8006176:	4798      	blx	r3
 8006178:	3601      	adds	r6, #1
 800617a:	e7f2      	b.n	8006162 <__libc_init_array+0x1e>
 800617c:	08006208 	.word	0x08006208
 8006180:	08006208 	.word	0x08006208
 8006184:	08006208 	.word	0x08006208
 8006188:	0800620c 	.word	0x0800620c

0800618c <memset>:
 800618c:	4402      	add	r2, r0
 800618e:	4603      	mov	r3, r0
 8006190:	4293      	cmp	r3, r2
 8006192:	d100      	bne.n	8006196 <memset+0xa>
 8006194:	4770      	bx	lr
 8006196:	f803 1b01 	strb.w	r1, [r3], #1
 800619a:	e7f9      	b.n	8006190 <memset+0x4>

0800619c <_init>:
 800619c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800619e:	bf00      	nop
 80061a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061a2:	bc08      	pop	{r3}
 80061a4:	469e      	mov	lr, r3
 80061a6:	4770      	bx	lr

080061a8 <_fini>:
 80061a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061aa:	bf00      	nop
 80061ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ae:	bc08      	pop	{r3}
 80061b0:	469e      	mov	lr, r3
 80061b2:	4770      	bx	lr
