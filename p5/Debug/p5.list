
p5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c08  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08004d90  08004d90  00014d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e4c  08004e4c  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08004e4c  08004e4c  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e4c  08004e4c  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e4c  08004e4c  00014e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e50  08004e50  00014e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08004e54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020038  2**0
                  CONTENTS
 10 .bss          0000044c  20000038  20000038  00020038  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000484  20000484  00020038  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   000123b3  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026a4  00000000  00000000  0003241b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e70  00000000  00000000  00034ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d58  00000000  00000000  00035930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e9b0  00000000  00000000  00036688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012387  00000000  00000000  00055038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b800c  00000000  00000000  000673bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0011f3cb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003bd8  00000000  00000000  0011f420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000038 	.word	0x20000038
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004d78 	.word	0x08004d78

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000003c 	.word	0x2000003c
 80001c4:	08004d78 	.word	0x08004d78

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b08e      	sub	sp, #56	; 0x38
 80001dc:	af0a      	add	r7, sp, #40	; 0x28
 80001de:	60f8      	str	r0, [r7, #12]
 80001e0:	4608      	mov	r0, r1
 80001e2:	4611      	mov	r1, r2
 80001e4:	461a      	mov	r2, r3
 80001e6:	4603      	mov	r3, r0
 80001e8:	817b      	strh	r3, [r7, #10]
 80001ea:	460b      	mov	r3, r1
 80001ec:	813b      	strh	r3, [r7, #8]
 80001ee:	4613      	mov	r3, r2
 80001f0:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 80001f2:	4b1d      	ldr	r3, [pc, #116]	; (8000268 <LiquidCrystal+0x90>)
 80001f4:	781b      	ldrb	r3, [r3, #0]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d019      	beq.n	800022e <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80001fa:	8939      	ldrh	r1, [r7, #8]
 80001fc:	897a      	ldrh	r2, [r7, #10]
 80001fe:	2300      	movs	r3, #0
 8000200:	9308      	str	r3, [sp, #32]
 8000202:	2300      	movs	r3, #0
 8000204:	9307      	str	r3, [sp, #28]
 8000206:	2300      	movs	r3, #0
 8000208:	9306      	str	r3, [sp, #24]
 800020a:	2300      	movs	r3, #0
 800020c:	9305      	str	r3, [sp, #20]
 800020e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000210:	9304      	str	r3, [sp, #16]
 8000212:	8c3b      	ldrh	r3, [r7, #32]
 8000214:	9303      	str	r3, [sp, #12]
 8000216:	8bbb      	ldrh	r3, [r7, #28]
 8000218:	9302      	str	r3, [sp, #8]
 800021a:	8b3b      	ldrh	r3, [r7, #24]
 800021c:	9301      	str	r3, [sp, #4]
 800021e:	88fb      	ldrh	r3, [r7, #6]
 8000220:	9300      	str	r3, [sp, #0]
 8000222:	460b      	mov	r3, r1
 8000224:	68f9      	ldr	r1, [r7, #12]
 8000226:	2001      	movs	r0, #1
 8000228:	f000 f820 	bl	800026c <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 800022c:	e018      	b.n	8000260 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 800022e:	8939      	ldrh	r1, [r7, #8]
 8000230:	897a      	ldrh	r2, [r7, #10]
 8000232:	2300      	movs	r3, #0
 8000234:	9308      	str	r3, [sp, #32]
 8000236:	2300      	movs	r3, #0
 8000238:	9307      	str	r3, [sp, #28]
 800023a:	2300      	movs	r3, #0
 800023c:	9306      	str	r3, [sp, #24]
 800023e:	2300      	movs	r3, #0
 8000240:	9305      	str	r3, [sp, #20]
 8000242:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000244:	9304      	str	r3, [sp, #16]
 8000246:	8c3b      	ldrh	r3, [r7, #32]
 8000248:	9303      	str	r3, [sp, #12]
 800024a:	8bbb      	ldrh	r3, [r7, #28]
 800024c:	9302      	str	r3, [sp, #8]
 800024e:	8b3b      	ldrh	r3, [r7, #24]
 8000250:	9301      	str	r3, [sp, #4]
 8000252:	88fb      	ldrh	r3, [r7, #6]
 8000254:	9300      	str	r3, [sp, #0]
 8000256:	460b      	mov	r3, r1
 8000258:	68f9      	ldr	r1, [r7, #12]
 800025a:	2000      	movs	r0, #0
 800025c:	f000 f806 	bl	800026c <init>
}
 8000260:	bf00      	nop
 8000262:	3710      	adds	r7, #16
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	20000000 	.word	0x20000000

0800026c <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0
 8000272:	60b9      	str	r1, [r7, #8]
 8000274:	4611      	mov	r1, r2
 8000276:	461a      	mov	r2, r3
 8000278:	4603      	mov	r3, r0
 800027a:	73fb      	strb	r3, [r7, #15]
 800027c:	460b      	mov	r3, r1
 800027e:	81bb      	strh	r3, [r7, #12]
 8000280:	4613      	mov	r3, r2
 8000282:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 8000284:	4a1a      	ldr	r2, [pc, #104]	; (80002f0 <init+0x84>)
 8000286:	89bb      	ldrh	r3, [r7, #12]
 8000288:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 800028a:	4a1a      	ldr	r2, [pc, #104]	; (80002f4 <init+0x88>)
 800028c:	88fb      	ldrh	r3, [r7, #6]
 800028e:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000290:	4a19      	ldr	r2, [pc, #100]	; (80002f8 <init+0x8c>)
 8000292:	8b3b      	ldrh	r3, [r7, #24]
 8000294:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 8000296:	4a19      	ldr	r2, [pc, #100]	; (80002fc <init+0x90>)
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	6013      	str	r3, [r2, #0]
  
  _data_pins[0] = d0;
 800029c:	4a18      	ldr	r2, [pc, #96]	; (8000300 <init+0x94>)
 800029e:	8bbb      	ldrh	r3, [r7, #28]
 80002a0:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 80002a2:	4a17      	ldr	r2, [pc, #92]	; (8000300 <init+0x94>)
 80002a4:	8c3b      	ldrh	r3, [r7, #32]
 80002a6:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 80002a8:	4a15      	ldr	r2, [pc, #84]	; (8000300 <init+0x94>)
 80002aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002ac:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3; 
 80002ae:	4a14      	ldr	r2, [pc, #80]	; (8000300 <init+0x94>)
 80002b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80002b2:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 80002b4:	4a12      	ldr	r2, [pc, #72]	; (8000300 <init+0x94>)
 80002b6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80002b8:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 80002ba:	4a11      	ldr	r2, [pc, #68]	; (8000300 <init+0x94>)
 80002bc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80002be:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 80002c0:	4a0f      	ldr	r2, [pc, #60]	; (8000300 <init+0x94>)
 80002c2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80002c4:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 80002c6:	4a0e      	ldr	r2, [pc, #56]	; (8000300 <init+0x94>)
 80002c8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80002ca:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 80002cc:	7bfb      	ldrb	r3, [r7, #15]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d003      	beq.n	80002da <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80002d2:	4b0c      	ldr	r3, [pc, #48]	; (8000304 <init+0x98>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	701a      	strb	r2, [r3, #0]
 80002d8:	e002      	b.n	80002e0 <init+0x74>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80002da:	4b0a      	ldr	r3, [pc, #40]	; (8000304 <init+0x98>)
 80002dc:	2210      	movs	r2, #16
 80002de:	701a      	strb	r2, [r3, #0]
  
  begin(16, 2);
 80002e0:	2102      	movs	r1, #2
 80002e2:	2010      	movs	r0, #16
 80002e4:	f000 f810 	bl	8000308 <begin>
}
 80002e8:	bf00      	nop
 80002ea:	3710      	adds	r7, #16
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000090 	.word	0x20000090
 80002f4:	20000070 	.word	0x20000070
 80002f8:	2000008e 	.word	0x2000008e
 80002fc:	20000074 	.word	0x20000074
 8000300:	2000007c 	.word	0x2000007c
 8000304:	2000008d 	.word	0x2000008d

08000308 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 8000308:	b580      	push	{r7, lr}
 800030a:	b088      	sub	sp, #32
 800030c:	af00      	add	r7, sp, #0
 800030e:	4603      	mov	r3, r0
 8000310:	460a      	mov	r2, r1
 8000312:	71fb      	strb	r3, [r7, #7]
 8000314:	4613      	mov	r3, r2
 8000316:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 8000318:	79bb      	ldrb	r3, [r7, #6]
 800031a:	2b01      	cmp	r3, #1
 800031c:	d906      	bls.n	800032c <begin+0x24>
    _displayfunction |= LCD_2LINE;
 800031e:	4b77      	ldr	r3, [pc, #476]	; (80004fc <begin+0x1f4>)
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	f043 0308 	orr.w	r3, r3, #8
 8000326:	b2da      	uxtb	r2, r3
 8000328:	4b74      	ldr	r3, [pc, #464]	; (80004fc <begin+0x1f4>)
 800032a:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 800032c:	4a74      	ldr	r2, [pc, #464]	; (8000500 <begin+0x1f8>)
 800032e:	79bb      	ldrb	r3, [r7, #6]
 8000330:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
 8000332:	79fa      	ldrb	r2, [r7, #7]
 8000334:	79fb      	ldrb	r3, [r7, #7]
 8000336:	3340      	adds	r3, #64	; 0x40
 8000338:	2140      	movs	r1, #64	; 0x40
 800033a:	2000      	movs	r0, #0
 800033c:	f000 f988 	bl	8000650 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8000340:	4b70      	ldr	r3, [pc, #448]	; (8000504 <begin+0x1fc>)
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	2b00      	cmp	r3, #0
 8000346:	d009      	beq.n	800035c <begin+0x54>
 8000348:	79bb      	ldrb	r3, [r7, #6]
 800034a:	2b01      	cmp	r3, #1
 800034c:	d106      	bne.n	800035c <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 800034e:	4b6b      	ldr	r3, [pc, #428]	; (80004fc <begin+0x1f4>)
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	f043 0304 	orr.w	r3, r3, #4
 8000356:	b2da      	uxtb	r2, r3
 8000358:	4b68      	ldr	r3, [pc, #416]	; (80004fc <begin+0x1f4>)
 800035a:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 800035c:	f000 f8e4 	bl	8000528 <enableClock>
  
  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000360:	2303      	movs	r3, #3
 8000362:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 8000364:	2301      	movs	r3, #1
 8000366:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8000368:	4b67      	ldr	r3, [pc, #412]	; (8000508 <begin+0x200>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d01b      	beq.n	80003a8 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000370:	4b66      	ldr	r3, [pc, #408]	; (800050c <begin+0x204>)
 8000372:	881a      	ldrh	r2, [r3, #0]
 8000374:	4b66      	ldr	r3, [pc, #408]	; (8000510 <begin+0x208>)
 8000376:	881b      	ldrh	r3, [r3, #0]
 8000378:	4313      	orrs	r3, r2
 800037a:	b29a      	uxth	r2, r3
 800037c:	4b65      	ldr	r3, [pc, #404]	; (8000514 <begin+0x20c>)
 800037e:	881b      	ldrh	r3, [r3, #0]
 8000380:	4313      	orrs	r3, r2
 8000382:	b29a      	uxth	r2, r3
 8000384:	4b64      	ldr	r3, [pc, #400]	; (8000518 <begin+0x210>)
 8000386:	881b      	ldrh	r3, [r3, #0]
 8000388:	4313      	orrs	r3, r2
 800038a:	b29a      	uxth	r2, r3
 800038c:	4b62      	ldr	r3, [pc, #392]	; (8000518 <begin+0x210>)
 800038e:	885b      	ldrh	r3, [r3, #2]
 8000390:	4313      	orrs	r3, r2
 8000392:	b29a      	uxth	r2, r3
 8000394:	4b60      	ldr	r3, [pc, #384]	; (8000518 <begin+0x210>)
 8000396:	889b      	ldrh	r3, [r3, #4]
 8000398:	4313      	orrs	r3, r2
 800039a:	b29a      	uxth	r2, r3
 800039c:	4b5e      	ldr	r3, [pc, #376]	; (8000518 <begin+0x210>)
 800039e:	88db      	ldrh	r3, [r3, #6]
 80003a0:	4313      	orrs	r3, r2
 80003a2:	b29b      	uxth	r3, r3
 80003a4:	60fb      	str	r3, [r7, #12]
 80003a6:	e02a      	b.n	80003fe <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80003a8:	4b58      	ldr	r3, [pc, #352]	; (800050c <begin+0x204>)
 80003aa:	881a      	ldrh	r2, [r3, #0]
 80003ac:	4b58      	ldr	r3, [pc, #352]	; (8000510 <begin+0x208>)
 80003ae:	881b      	ldrh	r3, [r3, #0]
 80003b0:	4313      	orrs	r3, r2
 80003b2:	b29a      	uxth	r2, r3
 80003b4:	4b57      	ldr	r3, [pc, #348]	; (8000514 <begin+0x20c>)
 80003b6:	881b      	ldrh	r3, [r3, #0]
 80003b8:	4313      	orrs	r3, r2
 80003ba:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80003bc:	4b56      	ldr	r3, [pc, #344]	; (8000518 <begin+0x210>)
 80003be:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80003c0:	4313      	orrs	r3, r2
 80003c2:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80003c4:	4b54      	ldr	r3, [pc, #336]	; (8000518 <begin+0x210>)
 80003c6:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80003c8:	4313      	orrs	r3, r2
 80003ca:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80003cc:	4b52      	ldr	r3, [pc, #328]	; (8000518 <begin+0x210>)
 80003ce:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80003d0:	4313      	orrs	r3, r2
 80003d2:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80003d4:	4b50      	ldr	r3, [pc, #320]	; (8000518 <begin+0x210>)
 80003d6:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 80003d8:	4313      	orrs	r3, r2
 80003da:	b29a      	uxth	r2, r3
 80003dc:	4b4e      	ldr	r3, [pc, #312]	; (8000518 <begin+0x210>)
 80003de:	891b      	ldrh	r3, [r3, #8]
 80003e0:	4313      	orrs	r3, r2
 80003e2:	b29a      	uxth	r2, r3
 80003e4:	4b4c      	ldr	r3, [pc, #304]	; (8000518 <begin+0x210>)
 80003e6:	895b      	ldrh	r3, [r3, #10]
 80003e8:	4313      	orrs	r3, r2
 80003ea:	b29a      	uxth	r2, r3
 80003ec:	4b4a      	ldr	r3, [pc, #296]	; (8000518 <begin+0x210>)
 80003ee:	899b      	ldrh	r3, [r3, #12]
 80003f0:	4313      	orrs	r3, r2
 80003f2:	b29a      	uxth	r2, r3
 80003f4:	4b48      	ldr	r3, [pc, #288]	; (8000518 <begin+0x210>)
 80003f6:	89db      	ldrh	r3, [r3, #14]
 80003f8:	4313      	orrs	r3, r2
 80003fa:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80003fc:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 80003fe:	4b47      	ldr	r3, [pc, #284]	; (800051c <begin+0x214>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	f107 020c 	add.w	r2, r7, #12
 8000406:	4611      	mov	r1, r2
 8000408:	4618      	mov	r0, r3
 800040a:	f002 fd31 	bl	8002e70 <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50); 
 800040e:	2032      	movs	r0, #50	; 0x32
 8000410:	f001 f8d0 	bl	80015b4 <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 8000414:	4b41      	ldr	r3, [pc, #260]	; (800051c <begin+0x214>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a3c      	ldr	r2, [pc, #240]	; (800050c <begin+0x204>)
 800041a:	8811      	ldrh	r1, [r2, #0]
 800041c:	2200      	movs	r2, #0
 800041e:	4618      	mov	r0, r3
 8000420:	f002 feb8 	bl	8003194 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000424:	4b3d      	ldr	r3, [pc, #244]	; (800051c <begin+0x214>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a3a      	ldr	r2, [pc, #232]	; (8000514 <begin+0x20c>)
 800042a:	8811      	ldrh	r1, [r2, #0]
 800042c:	2200      	movs	r2, #0
 800042e:	4618      	mov	r0, r3
 8000430:	f002 feb0 	bl	8003194 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) { 
 8000434:	4b36      	ldr	r3, [pc, #216]	; (8000510 <begin+0x208>)
 8000436:	881b      	ldrh	r3, [r3, #0]
 8000438:	2bff      	cmp	r3, #255	; 0xff
 800043a:	d007      	beq.n	800044c <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 800043c:	4b37      	ldr	r3, [pc, #220]	; (800051c <begin+0x214>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a33      	ldr	r2, [pc, #204]	; (8000510 <begin+0x208>)
 8000442:	8811      	ldrh	r1, [r2, #0]
 8000444:	2200      	movs	r2, #0
 8000446:	4618      	mov	r0, r3
 8000448:	f002 fea4 	bl	8003194 <HAL_GPIO_WritePin>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 800044c:	4b2b      	ldr	r3, [pc, #172]	; (80004fc <begin+0x1f4>)
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	f003 0310 	and.w	r3, r3, #16
 8000454:	2b00      	cmp	r3, #0
 8000456:	d115      	bne.n	8000484 <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000458:	2003      	movs	r0, #3
 800045a:	f000 fa45 	bl	80008e8 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 800045e:	2005      	movs	r0, #5
 8000460:	f001 f8a8 	bl	80015b4 <HAL_Delay>

    // second try
    write4bits(0x03);
 8000464:	2003      	movs	r0, #3
 8000466:	f000 fa3f 	bl	80008e8 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 800046a:	2005      	movs	r0, #5
 800046c:	f001 f8a2 	bl	80015b4 <HAL_Delay>
    
    // third go!
    write4bits(0x03); 
 8000470:	2003      	movs	r0, #3
 8000472:	f000 fa39 	bl	80008e8 <write4bits>
    HAL_Delay(1);
 8000476:	2001      	movs	r0, #1
 8000478:	f001 f89c 	bl	80015b4 <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02); 
 800047c:	2002      	movs	r0, #2
 800047e:	f000 fa33 	bl	80008e8 <write4bits>
 8000482:	e01d      	b.n	80004c0 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 8000484:	4b1d      	ldr	r3, [pc, #116]	; (80004fc <begin+0x1f4>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	f043 0320 	orr.w	r3, r3, #32
 800048c:	b2db      	uxtb	r3, r3
 800048e:	4618      	mov	r0, r3
 8000490:	f000 f9a4 	bl	80007dc <command>
    HAL_Delay(5);  // wait more than 4.1ms
 8000494:	2005      	movs	r0, #5
 8000496:	f001 f88d 	bl	80015b4 <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 800049a:	4b18      	ldr	r3, [pc, #96]	; (80004fc <begin+0x1f4>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	f043 0320 	orr.w	r3, r3, #32
 80004a2:	b2db      	uxtb	r3, r3
 80004a4:	4618      	mov	r0, r3
 80004a6:	f000 f999 	bl	80007dc <command>
    HAL_Delay(1);
 80004aa:	2001      	movs	r0, #1
 80004ac:	f001 f882 	bl	80015b4 <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 80004b0:	4b12      	ldr	r3, [pc, #72]	; (80004fc <begin+0x1f4>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	f043 0320 	orr.w	r3, r3, #32
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	4618      	mov	r0, r3
 80004bc:	f000 f98e 	bl	80007dc <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
 80004c0:	4b0e      	ldr	r3, [pc, #56]	; (80004fc <begin+0x1f4>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	f043 0320 	orr.w	r3, r3, #32
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	4618      	mov	r0, r3
 80004cc:	f000 f986 	bl	80007dc <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 80004d0:	4b13      	ldr	r3, [pc, #76]	; (8000520 <begin+0x218>)
 80004d2:	2204      	movs	r2, #4
 80004d4:	701a      	strb	r2, [r3, #0]
  display();
 80004d6:	f000 f917 	bl	8000708 <display>

  // clear it off
  clear();
 80004da:	f000 f8d9 	bl	8000690 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80004de:	4b11      	ldr	r3, [pc, #68]	; (8000524 <begin+0x21c>)
 80004e0:	2202      	movs	r2, #2
 80004e2:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 80004e4:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <begin+0x21c>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	f043 0304 	orr.w	r3, r3, #4
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	4618      	mov	r0, r3
 80004f0:	f000 f974 	bl	80007dc <command>

}
 80004f4:	bf00      	nop
 80004f6:	3720      	adds	r7, #32
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	2000008d 	.word	0x2000008d
 8000500:	20000079 	.word	0x20000079
 8000504:	20000054 	.word	0x20000054
 8000508:	20000000 	.word	0x20000000
 800050c:	20000090 	.word	0x20000090
 8000510:	20000070 	.word	0x20000070
 8000514:	2000008e 	.word	0x2000008e
 8000518:	2000007c 	.word	0x2000007c
 800051c:	20000074 	.word	0x20000074
 8000520:	20000078 	.word	0x20000078
 8000524:	2000008c 	.word	0x2000008c

08000528 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{  
 8000528:	b480      	push	{r7}
 800052a:	b089      	sub	sp, #36	; 0x24
 800052c:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 800052e:	4b41      	ldr	r3, [pc, #260]	; (8000634 <enableClock+0x10c>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000536:	d10c      	bne.n	8000552 <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000538:	4b3f      	ldr	r3, [pc, #252]	; (8000638 <enableClock+0x110>)
 800053a:	695b      	ldr	r3, [r3, #20]
 800053c:	4a3e      	ldr	r2, [pc, #248]	; (8000638 <enableClock+0x110>)
 800053e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000542:	6153      	str	r3, [r2, #20]
 8000544:	4b3c      	ldr	r3, [pc, #240]	; (8000638 <enableClock+0x110>)
 8000546:	695b      	ldr	r3, [r3, #20]
 8000548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800054c:	61fb      	str	r3, [r7, #28]
 800054e:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 8000550:	e06a      	b.n	8000628 <enableClock+0x100>
  else if(_port == GPIOB)
 8000552:	4b38      	ldr	r3, [pc, #224]	; (8000634 <enableClock+0x10c>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a39      	ldr	r2, [pc, #228]	; (800063c <enableClock+0x114>)
 8000558:	4293      	cmp	r3, r2
 800055a:	d10c      	bne.n	8000576 <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800055c:	4b36      	ldr	r3, [pc, #216]	; (8000638 <enableClock+0x110>)
 800055e:	695b      	ldr	r3, [r3, #20]
 8000560:	4a35      	ldr	r2, [pc, #212]	; (8000638 <enableClock+0x110>)
 8000562:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000566:	6153      	str	r3, [r2, #20]
 8000568:	4b33      	ldr	r3, [pc, #204]	; (8000638 <enableClock+0x110>)
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000570:	61bb      	str	r3, [r7, #24]
 8000572:	69bb      	ldr	r3, [r7, #24]
}
 8000574:	e058      	b.n	8000628 <enableClock+0x100>
  else if(_port == GPIOB)
 8000576:	4b2f      	ldr	r3, [pc, #188]	; (8000634 <enableClock+0x10c>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a30      	ldr	r2, [pc, #192]	; (800063c <enableClock+0x114>)
 800057c:	4293      	cmp	r3, r2
 800057e:	d10c      	bne.n	800059a <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000580:	4b2d      	ldr	r3, [pc, #180]	; (8000638 <enableClock+0x110>)
 8000582:	695b      	ldr	r3, [r3, #20]
 8000584:	4a2c      	ldr	r2, [pc, #176]	; (8000638 <enableClock+0x110>)
 8000586:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800058a:	6153      	str	r3, [r2, #20]
 800058c:	4b2a      	ldr	r3, [pc, #168]	; (8000638 <enableClock+0x110>)
 800058e:	695b      	ldr	r3, [r3, #20]
 8000590:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000594:	617b      	str	r3, [r7, #20]
 8000596:	697b      	ldr	r3, [r7, #20]
}
 8000598:	e046      	b.n	8000628 <enableClock+0x100>
	else if(_port == GPIOC)
 800059a:	4b26      	ldr	r3, [pc, #152]	; (8000634 <enableClock+0x10c>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a28      	ldr	r2, [pc, #160]	; (8000640 <enableClock+0x118>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d10c      	bne.n	80005be <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80005a4:	4b24      	ldr	r3, [pc, #144]	; (8000638 <enableClock+0x110>)
 80005a6:	695b      	ldr	r3, [r3, #20]
 80005a8:	4a23      	ldr	r2, [pc, #140]	; (8000638 <enableClock+0x110>)
 80005aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005ae:	6153      	str	r3, [r2, #20]
 80005b0:	4b21      	ldr	r3, [pc, #132]	; (8000638 <enableClock+0x110>)
 80005b2:	695b      	ldr	r3, [r3, #20]
 80005b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005b8:	613b      	str	r3, [r7, #16]
 80005ba:	693b      	ldr	r3, [r7, #16]
}
 80005bc:	e034      	b.n	8000628 <enableClock+0x100>
	else if(_port == GPIOD)
 80005be:	4b1d      	ldr	r3, [pc, #116]	; (8000634 <enableClock+0x10c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a20      	ldr	r2, [pc, #128]	; (8000644 <enableClock+0x11c>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d10c      	bne.n	80005e2 <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80005c8:	4b1b      	ldr	r3, [pc, #108]	; (8000638 <enableClock+0x110>)
 80005ca:	695b      	ldr	r3, [r3, #20]
 80005cc:	4a1a      	ldr	r2, [pc, #104]	; (8000638 <enableClock+0x110>)
 80005ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d2:	6153      	str	r3, [r2, #20]
 80005d4:	4b18      	ldr	r3, [pc, #96]	; (8000638 <enableClock+0x110>)
 80005d6:	695b      	ldr	r3, [r3, #20]
 80005d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	68fb      	ldr	r3, [r7, #12]
}
 80005e0:	e022      	b.n	8000628 <enableClock+0x100>
	else if(_port == GPIOE)
 80005e2:	4b14      	ldr	r3, [pc, #80]	; (8000634 <enableClock+0x10c>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a18      	ldr	r2, [pc, #96]	; (8000648 <enableClock+0x120>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d10c      	bne.n	8000606 <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 80005ec:	4b12      	ldr	r3, [pc, #72]	; (8000638 <enableClock+0x110>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	4a11      	ldr	r2, [pc, #68]	; (8000638 <enableClock+0x110>)
 80005f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005f6:	6153      	str	r3, [r2, #20]
 80005f8:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <enableClock+0x110>)
 80005fa:	695b      	ldr	r3, [r3, #20]
 80005fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
}
 8000604:	e010      	b.n	8000628 <enableClock+0x100>
	else if(_port == GPIOF)
 8000606:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <enableClock+0x10c>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a10      	ldr	r2, [pc, #64]	; (800064c <enableClock+0x124>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d10b      	bne.n	8000628 <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8000610:	4b09      	ldr	r3, [pc, #36]	; (8000638 <enableClock+0x110>)
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	4a08      	ldr	r2, [pc, #32]	; (8000638 <enableClock+0x110>)
 8000616:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800061a:	6153      	str	r3, [r2, #20]
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <enableClock+0x110>)
 800061e:	695b      	ldr	r3, [r3, #20]
 8000620:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
}
 8000628:	bf00      	nop
 800062a:	3724      	adds	r7, #36	; 0x24
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	20000074 	.word	0x20000074
 8000638:	40021000 	.word	0x40021000
 800063c:	48000400 	.word	0x48000400
 8000640:	48000800 	.word	0x48000800
 8000644:	48000c00 	.word	0x48000c00
 8000648:	48001000 	.word	0x48001000
 800064c:	48001400 	.word	0x48001400

08000650 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	60b9      	str	r1, [r7, #8]
 800065a:	607a      	str	r2, [r7, #4]
 800065c:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	b2da      	uxtb	r2, r3
 8000662:	4b0a      	ldr	r3, [pc, #40]	; (800068c <setRowOffsets+0x3c>)
 8000664:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	b2da      	uxtb	r2, r3
 800066a:	4b08      	ldr	r3, [pc, #32]	; (800068c <setRowOffsets+0x3c>)
 800066c:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	b2da      	uxtb	r2, r3
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <setRowOffsets+0x3c>)
 8000674:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4b04      	ldr	r3, [pc, #16]	; (800068c <setRowOffsets+0x3c>)
 800067c:	70da      	strb	r2, [r3, #3]
}
 800067e:	bf00      	nop
 8000680:	3714      	adds	r7, #20
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	2000006c 	.word	0x2000006c

08000690 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 8000694:	2001      	movs	r0, #1
 8000696:	f000 f8a1 	bl	80007dc <command>
  HAL_Delay(2);  // this command takes a long time!
 800069a:	2002      	movs	r0, #2
 800069c:	f000 ff8a 	bl	80015b4 <HAL_Delay>
}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	460a      	mov	r2, r1
 80006ae:	71fb      	strb	r3, [r7, #7]
 80006b0:	4613      	mov	r3, r2
 80006b2:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 80006b4:	2304      	movs	r3, #4
 80006b6:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 80006b8:	79bb      	ldrb	r3, [r7, #6]
 80006ba:	68fa      	ldr	r2, [r7, #12]
 80006bc:	429a      	cmp	r2, r3
 80006be:	d803      	bhi.n	80006c8 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	3b01      	subs	r3, #1
 80006c6:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 80006c8:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <setCursor+0x5c>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	79ba      	ldrb	r2, [r7, #6]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	d303      	bcc.n	80006da <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <setCursor+0x5c>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	3b01      	subs	r3, #1
 80006d8:	71bb      	strb	r3, [r7, #6]
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 80006da:	79bb      	ldrb	r3, [r7, #6]
 80006dc:	4a09      	ldr	r2, [pc, #36]	; (8000704 <setCursor+0x60>)
 80006de:	5cd2      	ldrb	r2, [r2, r3]
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	4413      	add	r3, r2
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	b25b      	sxtb	r3, r3
 80006e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006ec:	b25b      	sxtb	r3, r3
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 f873 	bl	80007dc <command>
}
 80006f6:	bf00      	nop
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000079 	.word	0x20000079
 8000704:	2000006c 	.word	0x2000006c

08000708 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 800070c:	4b08      	ldr	r3, [pc, #32]	; (8000730 <display+0x28>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	f043 0304 	orr.w	r3, r3, #4
 8000714:	b2da      	uxtb	r2, r3
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <display+0x28>)
 8000718:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 800071a:	4b05      	ldr	r3, [pc, #20]	; (8000730 <display+0x28>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	f043 0308 	orr.w	r3, r3, #8
 8000722:	b2db      	uxtb	r3, r3
 8000724:	4618      	mov	r0, r3
 8000726:	f000 f859 	bl	80007dc <command>
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000078 	.word	0x20000078

08000734 <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d101      	bne.n	8000746 <print+0x12>
 8000742:	2300      	movs	r3, #0
 8000744:	e01d      	b.n	8000782 <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f7ff fd3c 	bl	80001c8 <strlen>
 8000750:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]

  while (size--) {
 8000756:	e00c      	b.n	8000772 <print+0x3e>
    if (write(*buffer++)) n++;
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	1c5a      	adds	r2, r3, #1
 800075c:	617a      	str	r2, [r7, #20]
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	4618      	mov	r0, r3
 8000762:	f000 f849 	bl	80007f8 <write>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d008      	beq.n	800077e <print+0x4a>
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	3301      	adds	r3, #1
 8000770:	60fb      	str	r3, [r7, #12]
  while (size--) {
 8000772:	693b      	ldr	r3, [r7, #16]
 8000774:	1e5a      	subs	r2, r3, #1
 8000776:	613a      	str	r2, [r7, #16]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d1ed      	bne.n	8000758 <print+0x24>
 800077c:	e000      	b.n	8000780 <print+0x4c>
    else break;
 800077e:	bf00      	nop
  }
  return n;
 8000780:	68fb      	ldr	r3, [r7, #12]
}
 8000782:	4618      	mov	r0, r3
 8000784:	3718      	adds	r7, #24
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <createChar>:

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void createChar(uint8_t location, uint8_t charmap[]) {
 800078a:	b580      	push	{r7, lr}
 800078c:	b084      	sub	sp, #16
 800078e:	af00      	add	r7, sp, #0
 8000790:	4603      	mov	r3, r0
 8000792:	6039      	str	r1, [r7, #0]
 8000794:	71fb      	strb	r3, [r7, #7]
  location &= 0x7; // we only have 8 locations 0-7
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	f003 0307 	and.w	r3, r3, #7
 800079c:	71fb      	strb	r3, [r7, #7]
  command(LCD_SETCGRAMADDR | (location << 3));
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	00db      	lsls	r3, r3, #3
 80007a2:	b25b      	sxtb	r3, r3
 80007a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007a8:	b25b      	sxtb	r3, r3
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 f815 	bl	80007dc <command>
  for (int i=0; i<8; i++) {
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	e009      	b.n	80007cc <createChar+0x42>
    write(charmap[i]);
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	683a      	ldr	r2, [r7, #0]
 80007bc:	4413      	add	r3, r2
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 f819 	bl	80007f8 <write>
  for (int i=0; i<8; i++) {
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	3301      	adds	r3, #1
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	2b07      	cmp	r3, #7
 80007d0:	ddf2      	ble.n	80007b8 <createChar+0x2e>
  }
}
 80007d2:	bf00      	nop
 80007d4:	bf00      	nop
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <command>:

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 f814 	bl	8000818 <send>
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <write>:

inline size_t write(uint8_t value) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	2101      	movs	r1, #1
 8000806:	4618      	mov	r0, r3
 8000808:	f000 f806 	bl	8000818 <send>
  return 1; // assume sucess
 800080c:	2301      	movs	r3, #1
}
 800080e:	4618      	mov	r0, r3
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	460a      	mov	r2, r1
 8000822:	71fb      	strb	r3, [r7, #7]
 8000824:	4613      	mov	r3, r2
 8000826:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 8000828:	4b16      	ldr	r3, [pc, #88]	; (8000884 <send+0x6c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a16      	ldr	r2, [pc, #88]	; (8000888 <send+0x70>)
 800082e:	8811      	ldrh	r1, [r2, #0]
 8000830:	79ba      	ldrb	r2, [r7, #6]
 8000832:	4618      	mov	r0, r3
 8000834:	f002 fcae 	bl	8003194 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 8000838:	4b14      	ldr	r3, [pc, #80]	; (800088c <send+0x74>)
 800083a:	881b      	ldrh	r3, [r3, #0]
 800083c:	2bff      	cmp	r3, #255	; 0xff
 800083e:	d007      	beq.n	8000850 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8000840:	4b10      	ldr	r3, [pc, #64]	; (8000884 <send+0x6c>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a11      	ldr	r2, [pc, #68]	; (800088c <send+0x74>)
 8000846:	8811      	ldrh	r1, [r2, #0]
 8000848:	2200      	movs	r2, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f002 fca2 	bl	8003194 <HAL_GPIO_WritePin>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <send+0x78>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	f003 0310 	and.w	r3, r3, #16
 8000858:	2b00      	cmp	r3, #0
 800085a:	d004      	beq.n	8000866 <send+0x4e>
    write8bits(value); 
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	4618      	mov	r0, r3
 8000860:	f000 f86c 	bl	800093c <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 8000864:	e009      	b.n	800087a <send+0x62>
    write4bits(value>>4);
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	091b      	lsrs	r3, r3, #4
 800086a:	b2db      	uxtb	r3, r3
 800086c:	4618      	mov	r0, r3
 800086e:	f000 f83b 	bl	80008e8 <write4bits>
    write4bits(value);
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	4618      	mov	r0, r3
 8000876:	f000 f837 	bl	80008e8 <write4bits>
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000074 	.word	0x20000074
 8000888:	20000090 	.word	0x20000090
 800088c:	20000070 	.word	0x20000070
 8000890:	2000008d 	.word	0x2000008d

08000894 <pulseEnable>:

void pulseEnable(void) {
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000898:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <pulseEnable+0x4c>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a11      	ldr	r2, [pc, #68]	; (80008e4 <pulseEnable+0x50>)
 800089e:	8811      	ldrh	r1, [r2, #0]
 80008a0:	2200      	movs	r2, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f002 fc76 	bl	8003194 <HAL_GPIO_WritePin>
  HAL_Delay(1);    
 80008a8:	2001      	movs	r0, #1
 80008aa:	f000 fe83 	bl	80015b4 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <pulseEnable+0x4c>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a0c      	ldr	r2, [pc, #48]	; (80008e4 <pulseEnable+0x50>)
 80008b4:	8811      	ldrh	r1, [r2, #0]
 80008b6:	2201      	movs	r2, #1
 80008b8:	4618      	mov	r0, r3
 80008ba:	f002 fc6b 	bl	8003194 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 80008be:	2001      	movs	r0, #1
 80008c0:	f000 fe78 	bl	80015b4 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <pulseEnable+0x4c>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a06      	ldr	r2, [pc, #24]	; (80008e4 <pulseEnable+0x50>)
 80008ca:	8811      	ldrh	r1, [r2, #0]
 80008cc:	2200      	movs	r2, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f002 fc60 	bl	8003194 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 80008d4:	2001      	movs	r0, #1
 80008d6:	f000 fe6d 	bl	80015b4 <HAL_Delay>
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000074 	.word	0x20000074
 80008e4:	2000008e 	.word	0x2000008e

080008e8 <write4bits>:

void write4bits(uint8_t value) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	e013      	b.n	8000920 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80008f8:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <write4bits+0x4c>)
 80008fa:	6818      	ldr	r0, [r3, #0]
 80008fc:	4a0e      	ldr	r2, [pc, #56]	; (8000938 <write4bits+0x50>)
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000904:	79fa      	ldrb	r2, [r7, #7]
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	fa42 f303 	asr.w	r3, r2, r3
 800090c:	b2db      	uxtb	r3, r3
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	b2db      	uxtb	r3, r3
 8000914:	461a      	mov	r2, r3
 8000916:	f002 fc3d 	bl	8003194 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	3301      	adds	r3, #1
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	2b03      	cmp	r3, #3
 8000924:	dde8      	ble.n	80008f8 <write4bits+0x10>
  }

  pulseEnable();
 8000926:	f7ff ffb5 	bl	8000894 <pulseEnable>
}
 800092a:	bf00      	nop
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000074 	.word	0x20000074
 8000938:	2000007c 	.word	0x2000007c

0800093c <write8bits>:

void write8bits(uint8_t value) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	e013      	b.n	8000974 <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800094c:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <write8bits+0x4c>)
 800094e:	6818      	ldr	r0, [r3, #0]
 8000950:	4a0e      	ldr	r2, [pc, #56]	; (800098c <write8bits+0x50>)
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000958:	79fa      	ldrb	r2, [r7, #7]
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	fa42 f303 	asr.w	r3, r2, r3
 8000960:	b2db      	uxtb	r3, r3
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	b2db      	uxtb	r3, r3
 8000968:	461a      	mov	r2, r3
 800096a:	f002 fc13 	bl	8003194 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	3301      	adds	r3, #1
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	2b07      	cmp	r3, #7
 8000978:	dde8      	ble.n	800094c <write8bits+0x10>
  }
  
  pulseEnable();
 800097a:	f7ff ff8b 	bl	8000894 <pulseEnable>
}
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000074 	.word	0x20000074
 800098c:	2000007c 	.word	0x2000007c

08000990 <start_page>:
  0x1F,
  0x1F,
  0x00
};

void start_page() {
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af04      	add	r7, sp, #16
	LiquidCrystal(GPIOD, GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11, GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14);
 8000996:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800099a:	9303      	str	r3, [sp, #12]
 800099c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a0:	9302      	str	r3, [sp, #8]
 80009a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a6:	9301      	str	r3, [sp, #4]
 80009a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009ac:	9300      	str	r3, [sp, #0]
 80009ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ba:	4829      	ldr	r0, [pc, #164]	; (8000a60 <start_page+0xd0>)
 80009bc:	f7ff fc0c 	bl	80001d8 <LiquidCrystal>
	setCursor(0,0);
 80009c0:	2100      	movs	r1, #0
 80009c2:	2000      	movs	r0, #0
 80009c4:	f7ff fe6e 	bl	80006a4 <setCursor>
	print("     Start Page           Safe Box");
 80009c8:	4826      	ldr	r0, [pc, #152]	; (8000a64 <start_page+0xd4>)
 80009ca:	f7ff feb3 	bl	8000734 <print>

	createChar(0, customCharLock);
 80009ce:	4926      	ldr	r1, [pc, #152]	; (8000a68 <start_page+0xd8>)
 80009d0:	2000      	movs	r0, #0
 80009d2:	f7ff feda 	bl	800078a <createChar>
	createChar(1, nothing);
 80009d6:	4925      	ldr	r1, [pc, #148]	; (8000a6c <start_page+0xdc>)
 80009d8:	2001      	movs	r0, #1
 80009da:	f7ff fed6 	bl	800078a <createChar>
	setCursor(0,1);
 80009de:	2101      	movs	r1, #1
 80009e0:	2000      	movs	r0, #0
 80009e2:	f7ff fe5f 	bl	80006a4 <setCursor>
	write(0);
 80009e6:	2000      	movs	r0, #0
 80009e8:	f7ff ff06 	bl	80007f8 <write>
	write(1);
 80009ec:	2001      	movs	r0, #1
 80009ee:	f7ff ff03 	bl	80007f8 <write>
	write(0);
 80009f2:	2000      	movs	r0, #0
 80009f4:	f7ff ff00 	bl	80007f8 <write>
	write(1);
 80009f8:	2001      	movs	r0, #1
 80009fa:	f7ff fefd 	bl	80007f8 <write>
	write(0);
 80009fe:	2000      	movs	r0, #0
 8000a00:	f7ff fefa 	bl	80007f8 <write>
	write(1);
 8000a04:	2001      	movs	r0, #1
 8000a06:	f7ff fef7 	bl	80007f8 <write>
	write(0);
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	f7ff fef4 	bl	80007f8 <write>
	write(1);
 8000a10:	2001      	movs	r0, #1
 8000a12:	f7ff fef1 	bl	80007f8 <write>
	write(0);
 8000a16:	2000      	movs	r0, #0
 8000a18:	f7ff feee 	bl	80007f8 <write>
	write(1);
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	f7ff feeb 	bl	80007f8 <write>
	write(0);
 8000a22:	2000      	movs	r0, #0
 8000a24:	f7ff fee8 	bl	80007f8 <write>
	write(1);
 8000a28:	2001      	movs	r0, #1
 8000a2a:	f7ff fee5 	bl	80007f8 <write>
	write(0);
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f7ff fee2 	bl	80007f8 <write>
	write(1);
 8000a34:	2001      	movs	r0, #1
 8000a36:	f7ff fedf 	bl	80007f8 <write>
	write(0);
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f7ff fedc 	bl	80007f8 <write>
	write(1);
 8000a40:	2001      	movs	r0, #1
 8000a42:	f7ff fed9 	bl	80007f8 <write>
	write(0);
 8000a46:	2000      	movs	r0, #0
 8000a48:	f7ff fed6 	bl	80007f8 <write>
	write(1);
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	f7ff fed3 	bl	80007f8 <write>
	write(0);
 8000a52:	2000      	movs	r0, #0
 8000a54:	f7ff fed0 	bl	80007f8 <write>
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	48000c00 	.word	0x48000c00
 8000a64:	08004d90 	.word	0x08004d90
 8000a68:	20000004 	.word	0x20000004
 8000a6c:	20000058 	.word	0x20000058

08000a70 <password_page>:


void password_page() {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	clear();
 8000a74:	f7ff fe0c 	bl	8000690 <clear>
	setCursor(0,0);
 8000a78:	2100      	movs	r1, #0
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f7ff fe12 	bl	80006a4 <setCursor>
	print("   Enter 4 degree      of the Password");
 8000a80:	4816      	ldr	r0, [pc, #88]	; (8000adc <password_page+0x6c>)
 8000a82:	f7ff fe57 	bl	8000734 <print>

	setCursor(0,1);
 8000a86:	2101      	movs	r1, #1
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f7ff fe0b 	bl	80006a4 <setCursor>
	write(1);
 8000a8e:	2001      	movs	r0, #1
 8000a90:	f7ff feb2 	bl	80007f8 <write>
	write(1);
 8000a94:	2001      	movs	r0, #1
 8000a96:	f7ff feaf 	bl	80007f8 <write>
	write(1);
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f7ff feac 	bl	80007f8 <write>
	write(1);
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	f7ff fea9 	bl	80007f8 <write>
	write(1);
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f7ff fea6 	bl	80007f8 <write>
	write(1);
 8000aac:	2001      	movs	r0, #1
 8000aae:	f7ff fea3 	bl	80007f8 <write>
	write(1);
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	f7ff fea0 	bl	80007f8 <write>
	write(1);
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f7ff fe9d 	bl	80007f8 <write>
	write(0);
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f7ff fe9a 	bl	80007f8 <write>
	write(0);
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	f7ff fe97 	bl	80007f8 <write>
	write(0);
 8000aca:	2000      	movs	r0, #0
 8000acc:	f7ff fe94 	bl	80007f8 <write>
	write(0);
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f7ff fe91 	bl	80007f8 <write>

}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	08004db4 	.word	0x08004db4

08000ae0 <correct>:

void correct() {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
	clear();
 8000ae4:	f7ff fdd4 	bl	8000690 <clear>
	createChar(2, true);
 8000ae8:	490f      	ldr	r1, [pc, #60]	; (8000b28 <correct+0x48>)
 8000aea:	2002      	movs	r0, #2
 8000aec:	f7ff fe4d 	bl	800078a <createChar>
	setCursor(0,1);
 8000af0:	2101      	movs	r1, #1
 8000af2:	2000      	movs	r0, #0
 8000af4:	f7ff fdd6 	bl	80006a4 <setCursor>
	write(1);
 8000af8:	2001      	movs	r0, #1
 8000afa:	f7ff fe7d 	bl	80007f8 <write>
	write(1);
 8000afe:	2001      	movs	r0, #1
 8000b00:	f7ff fe7a 	bl	80007f8 <write>
	write(1);
 8000b04:	2001      	movs	r0, #1
 8000b06:	f7ff fe77 	bl	80007f8 <write>
	write(1);
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	f7ff fe74 	bl	80007f8 <write>
	write(2);
 8000b10:	2002      	movs	r0, #2
 8000b12:	f7ff fe71 	bl	80007f8 <write>
	print("  correct  ");
 8000b16:	4805      	ldr	r0, [pc, #20]	; (8000b2c <correct+0x4c>)
 8000b18:	f7ff fe0c 	bl	8000734 <print>
	write(2);
 8000b1c:	2002      	movs	r0, #2
 8000b1e:	f7ff fe6b 	bl	80007f8 <write>
	//print(data);
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	2000000c 	.word	0x2000000c
 8000b2c:	08004ddc 	.word	0x08004ddc

08000b30 <false0>:

void false0() {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
	clear();
 8000b34:	f7ff fdac 	bl	8000690 <clear>
	createChar(3, false);
 8000b38:	4912      	ldr	r1, [pc, #72]	; (8000b84 <false0+0x54>)
 8000b3a:	2003      	movs	r0, #3
 8000b3c:	f7ff fe25 	bl	800078a <createChar>
	setCursor(0,1);
 8000b40:	2101      	movs	r1, #1
 8000b42:	2000      	movs	r0, #0
 8000b44:	f7ff fdae 	bl	80006a4 <setCursor>
	write(1);
 8000b48:	2001      	movs	r0, #1
 8000b4a:	f7ff fe55 	bl	80007f8 <write>
	write(1);
 8000b4e:	2001      	movs	r0, #1
 8000b50:	f7ff fe52 	bl	80007f8 <write>
	write(1);
 8000b54:	2001      	movs	r0, #1
 8000b56:	f7ff fe4f 	bl	80007f8 <write>
	write(1);
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	f7ff fe4c 	bl	80007f8 <write>
	write(1);
 8000b60:	2001      	movs	r0, #1
 8000b62:	f7ff fe49 	bl	80007f8 <write>
	write(3);
 8000b66:	2003      	movs	r0, #3
 8000b68:	f7ff fe46 	bl	80007f8 <write>
	print("  false  ");
 8000b6c:	4806      	ldr	r0, [pc, #24]	; (8000b88 <false0+0x58>)
 8000b6e:	f7ff fde1 	bl	8000734 <print>
	write(3);
 8000b72:	2003      	movs	r0, #3
 8000b74:	f7ff fe40 	bl	80007f8 <write>
	//print(data);
	print("          try again");
 8000b78:	4804      	ldr	r0, [pc, #16]	; (8000b8c <false0+0x5c>)
 8000b7a:	f7ff fddb 	bl	8000734 <print>
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000014 	.word	0x20000014
 8000b88:	08004de8 	.word	0x08004de8
 8000b8c:	08004df4 	.word	0x08004df4

08000b90 <safe_box>:

void safe_box() {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	clear();
 8000b94:	f7ff fd7c 	bl	8000690 <clear>
	setCursor(0,0);
 8000b98:	2100      	movs	r1, #0
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f7ff fd82 	bl	80006a4 <setCursor>
	print("welcome to safe box");
 8000ba0:	481b      	ldr	r0, [pc, #108]	; (8000c10 <safe_box+0x80>)
 8000ba2:	f7ff fdc7 	bl	8000734 <print>
	createChar(4, smile);
 8000ba6:	491b      	ldr	r1, [pc, #108]	; (8000c14 <safe_box+0x84>)
 8000ba8:	2004      	movs	r0, #4
 8000baa:	f7ff fdee 	bl	800078a <createChar>
	createChar(5, unLock);
 8000bae:	491a      	ldr	r1, [pc, #104]	; (8000c18 <safe_box+0x88>)
 8000bb0:	2005      	movs	r0, #5
 8000bb2:	f7ff fdea 	bl	800078a <createChar>
	setCursor(0,2);
 8000bb6:	2102      	movs	r1, #2
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f7ff fd73 	bl	80006a4 <setCursor>
	write(1);
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	f7ff fe1a 	bl	80007f8 <write>
	write(1);
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	f7ff fe17 	bl	80007f8 <write>
	write(1);
 8000bca:	2001      	movs	r0, #1
 8000bcc:	f7ff fe14 	bl	80007f8 <write>
	write(1);
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	f7ff fe11 	bl	80007f8 <write>
	write(1);
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	f7ff fe0e 	bl	80007f8 <write>
	write(1);
 8000bdc:	2001      	movs	r0, #1
 8000bde:	f7ff fe0b 	bl	80007f8 <write>
	write(1);
 8000be2:	2001      	movs	r0, #1
 8000be4:	f7ff fe08 	bl	80007f8 <write>
	write(4);
 8000be8:	2004      	movs	r0, #4
 8000bea:	f7ff fe05 	bl	80007f8 <write>
	write(5);
 8000bee:	2005      	movs	r0, #5
 8000bf0:	f7ff fe02 	bl	80007f8 <write>
	write(5);
 8000bf4:	2005      	movs	r0, #5
 8000bf6:	f7ff fdff 	bl	80007f8 <write>
	write(5);
 8000bfa:	2005      	movs	r0, #5
 8000bfc:	f7ff fdfc 	bl	80007f8 <write>
	write(5);
 8000c00:	2005      	movs	r0, #5
 8000c02:	f7ff fdf9 	bl	80007f8 <write>
	write(4);
 8000c06:	2004      	movs	r0, #4
 8000c08:	f7ff fdf6 	bl	80007f8 <write>

}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	08004e08 	.word	0x08004e08
 8000c14:	2000001c 	.word	0x2000001c
 8000c18:	20000024 	.word	0x20000024

08000c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c20:	f000 fc62 	bl	80014e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c24:	f000 f810 	bl	8000c48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c28:	f000 f982 	bl	8000f30 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c2c:	f000 f8e0 	bl	8000df0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000c30:	f000 f91e 	bl	8000e70 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000c34:	f000 f95a 	bl	8000eec <MX_USB_PCD_Init>
  MX_ADC1_Init();
 8000c38:	f000 f86a 	bl	8000d10 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_IT(&hadc1);
 8000c3c:	4801      	ldr	r0, [pc, #4]	; (8000c44 <main+0x28>)
 8000c3e:	f000 fedb 	bl	80019f8 <HAL_ADC_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <main+0x26>
 8000c44:	200000e0 	.word	0x200000e0

08000c48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b09e      	sub	sp, #120	; 0x78
 8000c4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c4e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c52:	2228      	movs	r2, #40	; 0x28
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f004 f886 	bl	8004d68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c5c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c6c:	463b      	mov	r3, r7
 8000c6e:	223c      	movs	r2, #60	; 0x3c
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f004 f878 	bl	8004d68 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c7c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c80:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c82:	2300      	movs	r3, #0
 8000c84:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c86:	2301      	movs	r3, #1
 8000c88:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c8a:	2310      	movs	r3, #16
 8000c8c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c96:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000c98:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c9c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c9e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f002 fcb6 	bl	8003614 <HAL_RCC_OscConfig>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000cae:	f000 f9c7 	bl	8001040 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb2:	230f      	movs	r3, #15
 8000cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000cc8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ccc:	2101      	movs	r1, #1
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f003 fba8 	bl	8004424 <HAL_RCC_ClockConfig>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000cda:	f000 f9b1 	bl	8001040 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 8000cde:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <SystemClock_Config+0xc4>)
 8000ce0:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000ce2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000cec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cf0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cf2:	463b      	mov	r3, r7
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f003 fd7b 	bl	80047f0 <HAL_RCCEx_PeriphCLKConfig>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000d00:	f000 f99e 	bl	8001040 <Error_Handler>
  }
}
 8000d04:	bf00      	nop
 8000d06:	3778      	adds	r7, #120	; 0x78
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	000200a0 	.word	0x000200a0

08000d10 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08a      	sub	sp, #40	; 0x28
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d16:	f107 031c 	add.w	r3, r7, #28
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
 8000d30:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d32:	4b2e      	ldr	r3, [pc, #184]	; (8000dec <MX_ADC1_Init+0xdc>)
 8000d34:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d38:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d3a:	4b2c      	ldr	r3, [pc, #176]	; (8000dec <MX_ADC1_Init+0xdc>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d40:	4b2a      	ldr	r3, [pc, #168]	; (8000dec <MX_ADC1_Init+0xdc>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d46:	4b29      	ldr	r3, [pc, #164]	; (8000dec <MX_ADC1_Init+0xdc>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d4c:	4b27      	ldr	r3, [pc, #156]	; (8000dec <MX_ADC1_Init+0xdc>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d52:	4b26      	ldr	r3, [pc, #152]	; (8000dec <MX_ADC1_Init+0xdc>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d5a:	4b24      	ldr	r3, [pc, #144]	; (8000dec <MX_ADC1_Init+0xdc>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d60:	4b22      	ldr	r3, [pc, #136]	; (8000dec <MX_ADC1_Init+0xdc>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d66:	4b21      	ldr	r3, [pc, #132]	; (8000dec <MX_ADC1_Init+0xdc>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d6c:	4b1f      	ldr	r3, [pc, #124]	; (8000dec <MX_ADC1_Init+0xdc>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d72:	4b1e      	ldr	r3, [pc, #120]	; (8000dec <MX_ADC1_Init+0xdc>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d7a:	4b1c      	ldr	r3, [pc, #112]	; (8000dec <MX_ADC1_Init+0xdc>)
 8000d7c:	2204      	movs	r2, #4
 8000d7e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d80:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <MX_ADC1_Init+0xdc>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d86:	4b19      	ldr	r3, [pc, #100]	; (8000dec <MX_ADC1_Init+0xdc>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d8c:	4817      	ldr	r0, [pc, #92]	; (8000dec <MX_ADC1_Init+0xdc>)
 8000d8e:	f000 fc53 	bl	8001638 <HAL_ADC_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000d98:	f000 f952 	bl	8001040 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000da0:	f107 031c 	add.w	r3, r7, #28
 8000da4:	4619      	mov	r1, r3
 8000da6:	4811      	ldr	r0, [pc, #68]	; (8000dec <MX_ADC1_Init+0xdc>)
 8000da8:	f001 fd94 	bl	80028d4 <HAL_ADCEx_MultiModeConfigChannel>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000db2:	f000 f945 	bl	8001040 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000db6:	2302      	movs	r3, #2
 8000db8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000dc2:	2307      	movs	r3, #7
 8000dc4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4806      	ldr	r0, [pc, #24]	; (8000dec <MX_ADC1_Init+0xdc>)
 8000dd4:	f001 fa92 	bl	80022fc <HAL_ADC_ConfigChannel>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000dde:	f000 f92f 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000de2:	bf00      	nop
 8000de4:	3728      	adds	r7, #40	; 0x28
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	200000e0 	.word	0x200000e0

08000df0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000df4:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <MX_I2C1_Init+0x74>)
 8000df6:	4a1c      	ldr	r2, [pc, #112]	; (8000e68 <MX_I2C1_Init+0x78>)
 8000df8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000dfa:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <MX_I2C1_Init+0x74>)
 8000dfc:	4a1b      	ldr	r2, [pc, #108]	; (8000e6c <MX_I2C1_Init+0x7c>)
 8000dfe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e00:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <MX_I2C1_Init+0x74>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e06:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <MX_I2C1_Init+0x74>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e0c:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <MX_I2C1_Init+0x74>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e12:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <MX_I2C1_Init+0x74>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e18:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <MX_I2C1_Init+0x74>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <MX_I2C1_Init+0x74>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e24:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <MX_I2C1_Init+0x74>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e2a:	480e      	ldr	r0, [pc, #56]	; (8000e64 <MX_I2C1_Init+0x74>)
 8000e2c:	f002 f9ed 	bl	800320a <HAL_I2C_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e36:	f000 f903 	bl	8001040 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4809      	ldr	r0, [pc, #36]	; (8000e64 <MX_I2C1_Init+0x74>)
 8000e3e:	f002 fa73 	bl	8003328 <HAL_I2CEx_ConfigAnalogFilter>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e48:	f000 f8fa 	bl	8001040 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4805      	ldr	r0, [pc, #20]	; (8000e64 <MX_I2C1_Init+0x74>)
 8000e50:	f002 fab5 	bl	80033be <HAL_I2CEx_ConfigDigitalFilter>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e5a:	f000 f8f1 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000094 	.word	0x20000094
 8000e68:	40005400 	.word	0x40005400
 8000e6c:	2000090e 	.word	0x2000090e

08000e70 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e74:	4b1b      	ldr	r3, [pc, #108]	; (8000ee4 <MX_SPI1_Init+0x74>)
 8000e76:	4a1c      	ldr	r2, [pc, #112]	; (8000ee8 <MX_SPI1_Init+0x78>)
 8000e78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <MX_SPI1_Init+0x74>)
 8000e7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e82:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <MX_SPI1_Init+0x74>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e88:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <MX_SPI1_Init+0x74>)
 8000e8a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e8e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e90:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <MX_SPI1_Init+0x74>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e96:	4b13      	ldr	r3, [pc, #76]	; (8000ee4 <MX_SPI1_Init+0x74>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e9c:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <MX_SPI1_Init+0x74>)
 8000e9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ea2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <MX_SPI1_Init+0x74>)
 8000ea6:	2208      	movs	r2, #8
 8000ea8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <MX_SPI1_Init+0x74>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <MX_SPI1_Init+0x74>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <MX_SPI1_Init+0x74>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ebc:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <MX_SPI1_Init+0x74>)
 8000ebe:	2207      	movs	r2, #7
 8000ec0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ec2:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <MX_SPI1_Init+0x74>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <MX_SPI1_Init+0x74>)
 8000eca:	2208      	movs	r2, #8
 8000ecc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ece:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <MX_SPI1_Init+0x74>)
 8000ed0:	f003 fe3e 	bl	8004b50 <HAL_SPI_Init>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000eda:	f000 f8b1 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000130 	.word	0x20000130
 8000ee8:	40013000 	.word	0x40013000

08000eec <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000ef0:	4b0d      	ldr	r3, [pc, #52]	; (8000f28 <MX_USB_PCD_Init+0x3c>)
 8000ef2:	4a0e      	ldr	r2, [pc, #56]	; (8000f2c <MX_USB_PCD_Init+0x40>)
 8000ef4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <MX_USB_PCD_Init+0x3c>)
 8000ef8:	2208      	movs	r2, #8
 8000efa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000efc:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <MX_USB_PCD_Init+0x3c>)
 8000efe:	2202      	movs	r2, #2
 8000f00:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <MX_USB_PCD_Init+0x3c>)
 8000f04:	2202      	movs	r2, #2
 8000f06:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000f08:	4b07      	ldr	r3, [pc, #28]	; (8000f28 <MX_USB_PCD_Init+0x3c>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <MX_USB_PCD_Init+0x3c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000f14:	4804      	ldr	r0, [pc, #16]	; (8000f28 <MX_USB_PCD_Init+0x3c>)
 8000f16:	f002 fa9e 	bl	8003456 <HAL_PCD_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000f20:	f000 f88e 	bl	8001040 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000194 	.word	0x20000194
 8000f2c:	40005c00 	.word	0x40005c00

08000f30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	; 0x28
 8000f34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
 8000f44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f46:	4b3c      	ldr	r3, [pc, #240]	; (8001038 <MX_GPIO_Init+0x108>)
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	4a3b      	ldr	r2, [pc, #236]	; (8001038 <MX_GPIO_Init+0x108>)
 8000f4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f50:	6153      	str	r3, [r2, #20]
 8000f52:	4b39      	ldr	r3, [pc, #228]	; (8001038 <MX_GPIO_Init+0x108>)
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f5a:	613b      	str	r3, [r7, #16]
 8000f5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5e:	4b36      	ldr	r3, [pc, #216]	; (8001038 <MX_GPIO_Init+0x108>)
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	4a35      	ldr	r2, [pc, #212]	; (8001038 <MX_GPIO_Init+0x108>)
 8000f64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f68:	6153      	str	r3, [r2, #20]
 8000f6a:	4b33      	ldr	r3, [pc, #204]	; (8001038 <MX_GPIO_Init+0x108>)
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f76:	4b30      	ldr	r3, [pc, #192]	; (8001038 <MX_GPIO_Init+0x108>)
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	4a2f      	ldr	r2, [pc, #188]	; (8001038 <MX_GPIO_Init+0x108>)
 8000f7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f80:	6153      	str	r3, [r2, #20]
 8000f82:	4b2d      	ldr	r3, [pc, #180]	; (8001038 <MX_GPIO_Init+0x108>)
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	4b2a      	ldr	r3, [pc, #168]	; (8001038 <MX_GPIO_Init+0x108>)
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	4a29      	ldr	r2, [pc, #164]	; (8001038 <MX_GPIO_Init+0x108>)
 8000f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f98:	6153      	str	r3, [r2, #20]
 8000f9a:	4b27      	ldr	r3, [pc, #156]	; (8001038 <MX_GPIO_Init+0x108>)
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa6:	4b24      	ldr	r3, [pc, #144]	; (8001038 <MX_GPIO_Init+0x108>)
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	4a23      	ldr	r2, [pc, #140]	; (8001038 <MX_GPIO_Init+0x108>)
 8000fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fb0:	6153      	str	r3, [r2, #20]
 8000fb2:	4b21      	ldr	r3, [pc, #132]	; (8001038 <MX_GPIO_Init+0x108>)
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fba:	603b      	str	r3, [r7, #0]
 8000fbc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000fc4:	481d      	ldr	r0, [pc, #116]	; (800103c <MX_GPIO_Init+0x10c>)
 8000fc6:	f002 f8e5 	bl	8003194 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT2_Pin;
 8000fca:	2336      	movs	r3, #54	; 0x36
 8000fcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000fce:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000fd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4817      	ldr	r0, [pc, #92]	; (800103c <MX_GPIO_Init+0x10c>)
 8000fe0:	f001 ff46 	bl	8002e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000fe4:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000fe8:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fea:	2301      	movs	r3, #1
 8000fec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	480f      	ldr	r0, [pc, #60]	; (800103c <MX_GPIO_Init+0x10c>)
 8000ffe:	f001 ff37 	bl	8002e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001002:	2301      	movs	r3, #1
 8001004:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001006:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800100a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800100c:	2302      	movs	r3, #2
 800100e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	4619      	mov	r1, r3
 8001016:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800101a:	f001 ff29 	bl	8002e70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 800101e:	2200      	movs	r2, #0
 8001020:	2101      	movs	r1, #1
 8001022:	2006      	movs	r0, #6
 8001024:	f001 feed 	bl	8002e02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001028:	2006      	movs	r0, #6
 800102a:	f001 ff06 	bl	8002e3a <HAL_NVIC_EnableIRQ>

}
 800102e:	bf00      	nop
 8001030:	3728      	adds	r7, #40	; 0x28
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40021000 	.word	0x40021000
 800103c:	48001000 	.word	0x48001000

08001040 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001044:	b672      	cpsid	i
}
 8001046:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001048:	e7fe      	b.n	8001048 <Error_Handler+0x8>
	...

0800104c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <HAL_MspInit+0x44>)
 8001054:	699b      	ldr	r3, [r3, #24]
 8001056:	4a0e      	ldr	r2, [pc, #56]	; (8001090 <HAL_MspInit+0x44>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	6193      	str	r3, [r2, #24]
 800105e:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <HAL_MspInit+0x44>)
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <HAL_MspInit+0x44>)
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	4a08      	ldr	r2, [pc, #32]	; (8001090 <HAL_MspInit+0x44>)
 8001070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001074:	61d3      	str	r3, [r2, #28]
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_MspInit+0x44>)
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107e:	603b      	str	r3, [r7, #0]
 8001080:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8001082:	2006      	movs	r0, #6
 8001084:	f001 feb2 	bl	8002dec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40021000 	.word	0x40021000

08001094 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	; 0x28
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010b4:	d12c      	bne.n	8001110 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80010b6:	4b18      	ldr	r3, [pc, #96]	; (8001118 <HAL_ADC_MspInit+0x84>)
 80010b8:	695b      	ldr	r3, [r3, #20]
 80010ba:	4a17      	ldr	r2, [pc, #92]	; (8001118 <HAL_ADC_MspInit+0x84>)
 80010bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c0:	6153      	str	r3, [r2, #20]
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <HAL_ADC_MspInit+0x84>)
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	4b12      	ldr	r3, [pc, #72]	; (8001118 <HAL_ADC_MspInit+0x84>)
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	4a11      	ldr	r2, [pc, #68]	; (8001118 <HAL_ADC_MspInit+0x84>)
 80010d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d8:	6153      	str	r3, [r2, #20]
 80010da:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <HAL_ADC_MspInit+0x84>)
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010e6:	2302      	movs	r3, #2
 80010e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ea:	2303      	movs	r3, #3
 80010ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4619      	mov	r1, r3
 80010f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010fc:	f001 feb8 	bl	8002e70 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001100:	2200      	movs	r2, #0
 8001102:	2100      	movs	r1, #0
 8001104:	2012      	movs	r0, #18
 8001106:	f001 fe7c 	bl	8002e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800110a:	2012      	movs	r0, #18
 800110c:	f001 fe95 	bl	8002e3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001110:	bf00      	nop
 8001112:	3728      	adds	r7, #40	; 0x28
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40021000 	.word	0x40021000

0800111c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a17      	ldr	r2, [pc, #92]	; (8001198 <HAL_I2C_MspInit+0x7c>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d127      	bne.n	800118e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800113e:	4b17      	ldr	r3, [pc, #92]	; (800119c <HAL_I2C_MspInit+0x80>)
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	4a16      	ldr	r2, [pc, #88]	; (800119c <HAL_I2C_MspInit+0x80>)
 8001144:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001148:	6153      	str	r3, [r2, #20]
 800114a:	4b14      	ldr	r3, [pc, #80]	; (800119c <HAL_I2C_MspInit+0x80>)
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001156:	23c0      	movs	r3, #192	; 0xc0
 8001158:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800115a:	2312      	movs	r3, #18
 800115c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800115e:	2301      	movs	r3, #1
 8001160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001162:	2303      	movs	r3, #3
 8001164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001166:	2304      	movs	r3, #4
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	480b      	ldr	r0, [pc, #44]	; (80011a0 <HAL_I2C_MspInit+0x84>)
 8001172:	f001 fe7d 	bl	8002e70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <HAL_I2C_MspInit+0x80>)
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	4a08      	ldr	r2, [pc, #32]	; (800119c <HAL_I2C_MspInit+0x80>)
 800117c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001180:	61d3      	str	r3, [r2, #28]
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_I2C_MspInit+0x80>)
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800118e:	bf00      	nop
 8001190:	3728      	adds	r7, #40	; 0x28
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40005400 	.word	0x40005400
 800119c:	40021000 	.word	0x40021000
 80011a0:	48000400 	.word	0x48000400

080011a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	; 0x28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a17      	ldr	r2, [pc, #92]	; (8001220 <HAL_SPI_MspInit+0x7c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d128      	bne.n	8001218 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011c6:	4b17      	ldr	r3, [pc, #92]	; (8001224 <HAL_SPI_MspInit+0x80>)
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	4a16      	ldr	r2, [pc, #88]	; (8001224 <HAL_SPI_MspInit+0x80>)
 80011cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011d0:	6193      	str	r3, [r2, #24]
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <HAL_SPI_MspInit+0x80>)
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <HAL_SPI_MspInit+0x80>)
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	4a10      	ldr	r2, [pc, #64]	; (8001224 <HAL_SPI_MspInit+0x80>)
 80011e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e8:	6153      	str	r3, [r2, #20]
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <HAL_SPI_MspInit+0x80>)
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80011f6:	23e0      	movs	r3, #224	; 0xe0
 80011f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001202:	2303      	movs	r3, #3
 8001204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001206:	2305      	movs	r3, #5
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	4619      	mov	r1, r3
 8001210:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001214:	f001 fe2c 	bl	8002e70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001218:	bf00      	nop
 800121a:	3728      	adds	r7, #40	; 0x28
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40013000 	.word	0x40013000
 8001224:	40021000 	.word	0x40021000

08001228 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08a      	sub	sp, #40	; 0x28
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a18      	ldr	r2, [pc, #96]	; (80012a8 <HAL_PCD_MspInit+0x80>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d129      	bne.n	800129e <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	4b18      	ldr	r3, [pc, #96]	; (80012ac <HAL_PCD_MspInit+0x84>)
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	4a17      	ldr	r2, [pc, #92]	; (80012ac <HAL_PCD_MspInit+0x84>)
 8001250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001254:	6153      	str	r3, [r2, #20]
 8001256:	4b15      	ldr	r3, [pc, #84]	; (80012ac <HAL_PCD_MspInit+0x84>)
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001262:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001266:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	2302      	movs	r3, #2
 800126a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001270:	2303      	movs	r3, #3
 8001272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001274:	230e      	movs	r3, #14
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	4619      	mov	r1, r3
 800127e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001282:	f001 fdf5 	bl	8002e70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <HAL_PCD_MspInit+0x84>)
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	4a08      	ldr	r2, [pc, #32]	; (80012ac <HAL_PCD_MspInit+0x84>)
 800128c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001290:	61d3      	str	r3, [r2, #28]
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HAL_PCD_MspInit+0x84>)
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800129e:	bf00      	nop
 80012a0:	3728      	adds	r7, #40	; 0x28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40005c00 	.word	0x40005c00
 80012ac:	40021000 	.word	0x40021000

080012b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <NMI_Handler+0x4>

080012b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ba:	e7fe      	b.n	80012ba <HardFault_Handler+0x4>

080012bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <MemManage_Handler+0x4>

080012c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c6:	e7fe      	b.n	80012c6 <BusFault_Handler+0x4>

080012c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012cc:	e7fe      	b.n	80012cc <UsageFault_Handler+0x4>

080012ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012fc:	f000 f93a 	bl	8001574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}

08001304 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001308:	2001      	movs	r0, #1
 800130a:	f001 ff5b 	bl	80031c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  HAL_ADC_Start_IT(&hadc1);
 800130e:	484b      	ldr	r0, [pc, #300]	; (800143c <EXTI0_IRQHandler+0x138>)
 8001310:	f000 fb72 	bl	80019f8 <HAL_ADC_Start_IT>
  HAL_Delay(5);
 8001314:	2005      	movs	r0, #5
 8001316:	f000 f94d 	bl	80015b4 <HAL_Delay>
  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 800131a:	2101      	movs	r1, #1
 800131c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001320:	f001 ff20 	bl	8003164 <HAL_GPIO_ReadPin>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	f000 8086 	beq.w	8001438 <EXTI0_IRQHandler+0x134>

	  //sprintf(data,"%d\n",degree);
	  if ( level == 0 ) {
 800132c:	4b44      	ldr	r3, [pc, #272]	; (8001440 <EXTI0_IRQHandler+0x13c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d101      	bne.n	8001338 <EXTI0_IRQHandler+0x34>
		  start_page();
 8001334:	f7ff fb2c 	bl	8000990 <start_page>
	  }
	  if ( level == 1 ) {
 8001338:	4b41      	ldr	r3, [pc, #260]	; (8001440 <EXTI0_IRQHandler+0x13c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d101      	bne.n	8001344 <EXTI0_IRQHandler+0x40>
		  password_page();
 8001340:	f7ff fb96 	bl	8000a70 <password_page>
	  }
	  if ( level == 2 ) {
 8001344:	4b3e      	ldr	r3, [pc, #248]	; (8001440 <EXTI0_IRQHandler+0x13c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b02      	cmp	r3, #2
 800134a:	d113      	bne.n	8001374 <EXTI0_IRQHandler+0x70>
		  if ( degree == 0 )
 800134c:	4b3d      	ldr	r3, [pc, #244]	; (8001444 <EXTI0_IRQHandler+0x140>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d107      	bne.n	8001364 <EXTI0_IRQHandler+0x60>
		  {
			  correct();
 8001354:	f7ff fbc4 	bl	8000ae0 <correct>
			  x++;
 8001358:	4b3b      	ldr	r3, [pc, #236]	; (8001448 <EXTI0_IRQHandler+0x144>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	3301      	adds	r3, #1
 800135e:	4a3a      	ldr	r2, [pc, #232]	; (8001448 <EXTI0_IRQHandler+0x144>)
 8001360:	6013      	str	r3, [r2, #0]
 8001362:	e007      	b.n	8001374 <EXTI0_IRQHandler+0x70>
		  } else {
			  false0();
 8001364:	f7ff fbe4 	bl	8000b30 <false0>
			  level = 0;
 8001368:	4b35      	ldr	r3, [pc, #212]	; (8001440 <EXTI0_IRQHandler+0x13c>)
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
			  x = 0;
 800136e:	4b36      	ldr	r3, [pc, #216]	; (8001448 <EXTI0_IRQHandler+0x144>)
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
		  }
	  }
	  if ( level == 3 ) {
 8001374:	4b32      	ldr	r3, [pc, #200]	; (8001440 <EXTI0_IRQHandler+0x13c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b03      	cmp	r3, #3
 800137a:	d11a      	bne.n	80013b2 <EXTI0_IRQHandler+0xae>
		  if ( degree > 600 && degree < 1300 )
 800137c:	4b31      	ldr	r3, [pc, #196]	; (8001444 <EXTI0_IRQHandler+0x140>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001384:	dd0d      	ble.n	80013a2 <EXTI0_IRQHandler+0x9e>
 8001386:	4b2f      	ldr	r3, [pc, #188]	; (8001444 <EXTI0_IRQHandler+0x140>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f240 5213 	movw	r2, #1299	; 0x513
 800138e:	4293      	cmp	r3, r2
 8001390:	dc07      	bgt.n	80013a2 <EXTI0_IRQHandler+0x9e>
		  {
			  correct();
 8001392:	f7ff fba5 	bl	8000ae0 <correct>
			  x++;
 8001396:	4b2c      	ldr	r3, [pc, #176]	; (8001448 <EXTI0_IRQHandler+0x144>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	3301      	adds	r3, #1
 800139c:	4a2a      	ldr	r2, [pc, #168]	; (8001448 <EXTI0_IRQHandler+0x144>)
 800139e:	6013      	str	r3, [r2, #0]
		  {
 80013a0:	e007      	b.n	80013b2 <EXTI0_IRQHandler+0xae>
		  } else {
			  false0();
 80013a2:	f7ff fbc5 	bl	8000b30 <false0>
			  level = 0;
 80013a6:	4b26      	ldr	r3, [pc, #152]	; (8001440 <EXTI0_IRQHandler+0x13c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
			  x = 0;
 80013ac:	4b26      	ldr	r3, [pc, #152]	; (8001448 <EXTI0_IRQHandler+0x144>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
		  }
	  }
	  if ( level == 4 ) {
 80013b2:	4b23      	ldr	r3, [pc, #140]	; (8001440 <EXTI0_IRQHandler+0x13c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2b04      	cmp	r3, #4
 80013b8:	d113      	bne.n	80013e2 <EXTI0_IRQHandler+0xde>
		  if ( degree == 0 )
 80013ba:	4b22      	ldr	r3, [pc, #136]	; (8001444 <EXTI0_IRQHandler+0x140>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d107      	bne.n	80013d2 <EXTI0_IRQHandler+0xce>
		  {
			  correct();
 80013c2:	f7ff fb8d 	bl	8000ae0 <correct>
			  x++;
 80013c6:	4b20      	ldr	r3, [pc, #128]	; (8001448 <EXTI0_IRQHandler+0x144>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	3301      	adds	r3, #1
 80013cc:	4a1e      	ldr	r2, [pc, #120]	; (8001448 <EXTI0_IRQHandler+0x144>)
 80013ce:	6013      	str	r3, [r2, #0]
 80013d0:	e007      	b.n	80013e2 <EXTI0_IRQHandler+0xde>
		  } else {
			  false0();
 80013d2:	f7ff fbad 	bl	8000b30 <false0>
			  level = 0;
 80013d6:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <EXTI0_IRQHandler+0x13c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
			  x = 0;
 80013dc:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <EXTI0_IRQHandler+0x144>)
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
		  }
	  }
	  if ( level == 5 ) {
 80013e2:	4b17      	ldr	r3, [pc, #92]	; (8001440 <EXTI0_IRQHandler+0x13c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2b05      	cmp	r3, #5
 80013e8:	d113      	bne.n	8001412 <EXTI0_IRQHandler+0x10e>
		  if ( degree == 0 )
 80013ea:	4b16      	ldr	r3, [pc, #88]	; (8001444 <EXTI0_IRQHandler+0x140>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d107      	bne.n	8001402 <EXTI0_IRQHandler+0xfe>
		  {
			  correct();
 80013f2:	f7ff fb75 	bl	8000ae0 <correct>
			  x++;
 80013f6:	4b14      	ldr	r3, [pc, #80]	; (8001448 <EXTI0_IRQHandler+0x144>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	3301      	adds	r3, #1
 80013fc:	4a12      	ldr	r2, [pc, #72]	; (8001448 <EXTI0_IRQHandler+0x144>)
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	e007      	b.n	8001412 <EXTI0_IRQHandler+0x10e>
		  } else {
			  false0();
 8001402:	f7ff fb95 	bl	8000b30 <false0>
			  level = 0;
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <EXTI0_IRQHandler+0x13c>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
			  x = 0;
 800140c:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <EXTI0_IRQHandler+0x144>)
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
		  }
	  }
	  if ( level == 6 && x == 4) {
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <EXTI0_IRQHandler+0x13c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b06      	cmp	r3, #6
 8001418:	d109      	bne.n	800142e <EXTI0_IRQHandler+0x12a>
 800141a:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <EXTI0_IRQHandler+0x144>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2b04      	cmp	r3, #4
 8001420:	d105      	bne.n	800142e <EXTI0_IRQHandler+0x12a>
		  safe_box();
 8001422:	f7ff fbb5 	bl	8000b90 <safe_box>
		  level = -1;
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <EXTI0_IRQHandler+0x13c>)
 8001428:	f04f 32ff 	mov.w	r2, #4294967295
 800142c:	601a      	str	r2, [r3, #0]
	  }
	  level++;
 800142e:	4b04      	ldr	r3, [pc, #16]	; (8001440 <EXTI0_IRQHandler+0x13c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	3301      	adds	r3, #1
 8001434:	4a02      	ldr	r2, [pc, #8]	; (8001440 <EXTI0_IRQHandler+0x13c>)
 8001436:	6013      	str	r3, [r2, #0]
  }

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	200000e0 	.word	0x200000e0
 8001440:	20000060 	.word	0x20000060
 8001444:	20000064 	.word	0x20000064
 8001448:	20000068 	.word	0x20000068

0800144c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001450:	4805      	ldr	r0, [pc, #20]	; (8001468 <ADC1_2_IRQHandler+0x1c>)
 8001452:	f000 fc1f 	bl	8001c94 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  degree = HAL_ADC_GetValue(&hadc1);
 8001456:	4804      	ldr	r0, [pc, #16]	; (8001468 <ADC1_2_IRQHandler+0x1c>)
 8001458:	f000 fc0e 	bl	8001c78 <HAL_ADC_GetValue>
 800145c:	4603      	mov	r3, r0
 800145e:	461a      	mov	r2, r3
 8001460:	4b02      	ldr	r3, [pc, #8]	; (800146c <ADC1_2_IRQHandler+0x20>)
 8001462:	601a      	str	r2, [r3, #0]

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	200000e0 	.word	0x200000e0
 800146c:	20000064 	.word	0x20000064

08001470 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001474:	4b06      	ldr	r3, [pc, #24]	; (8001490 <SystemInit+0x20>)
 8001476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800147a:	4a05      	ldr	r2, [pc, #20]	; (8001490 <SystemInit+0x20>)
 800147c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001480:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001494:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014cc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001498:	480d      	ldr	r0, [pc, #52]	; (80014d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800149a:	490e      	ldr	r1, [pc, #56]	; (80014d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800149c:	4a0e      	ldr	r2, [pc, #56]	; (80014d8 <LoopForever+0xe>)
  movs r3, #0
 800149e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a0:	e002      	b.n	80014a8 <LoopCopyDataInit>

080014a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014a6:	3304      	adds	r3, #4

080014a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014ac:	d3f9      	bcc.n	80014a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ae:	4a0b      	ldr	r2, [pc, #44]	; (80014dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80014b0:	4c0b      	ldr	r4, [pc, #44]	; (80014e0 <LoopForever+0x16>)
  movs r3, #0
 80014b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b4:	e001      	b.n	80014ba <LoopFillZerobss>

080014b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b8:	3204      	adds	r2, #4

080014ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014bc:	d3fb      	bcc.n	80014b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014be:	f7ff ffd7 	bl	8001470 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014c2:	f003 fc2d 	bl	8004d20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014c6:	f7ff fba9 	bl	8000c1c <main>

080014ca <LoopForever>:

LoopForever:
    b LoopForever
 80014ca:	e7fe      	b.n	80014ca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014cc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80014d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d4:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 80014d8:	08004e54 	.word	0x08004e54
  ldr r2, =_sbss
 80014dc:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 80014e0:	20000484 	.word	0x20000484

080014e4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014e4:	e7fe      	b.n	80014e4 <ADC3_IRQHandler>
	...

080014e8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014ec:	4b08      	ldr	r3, [pc, #32]	; (8001510 <HAL_Init+0x28>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a07      	ldr	r2, [pc, #28]	; (8001510 <HAL_Init+0x28>)
 80014f2:	f043 0310 	orr.w	r3, r3, #16
 80014f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014f8:	2003      	movs	r0, #3
 80014fa:	f001 fc77 	bl	8002dec <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014fe:	2000      	movs	r0, #0
 8001500:	f000 f808 	bl	8001514 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001504:	f7ff fda2 	bl	800104c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40022000 	.word	0x40022000

08001514 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <HAL_InitTick+0x54>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4b12      	ldr	r3, [pc, #72]	; (800156c <HAL_InitTick+0x58>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	4619      	mov	r1, r3
 8001526:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800152a:	fbb3 f3f1 	udiv	r3, r3, r1
 800152e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001532:	4618      	mov	r0, r3
 8001534:	f001 fc8f 	bl	8002e56 <HAL_SYSTICK_Config>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e00e      	b.n	8001560 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b0f      	cmp	r3, #15
 8001546:	d80a      	bhi.n	800155e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001548:	2200      	movs	r2, #0
 800154a:	6879      	ldr	r1, [r7, #4]
 800154c:	f04f 30ff 	mov.w	r0, #4294967295
 8001550:	f001 fc57 	bl	8002e02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001554:	4a06      	ldr	r2, [pc, #24]	; (8001570 <HAL_InitTick+0x5c>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800155a:	2300      	movs	r3, #0
 800155c:	e000      	b.n	8001560 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
}
 8001560:	4618      	mov	r0, r3
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	2000002c 	.word	0x2000002c
 800156c:	20000034 	.word	0x20000034
 8001570:	20000030 	.word	0x20000030

08001574 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_IncTick+0x20>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	461a      	mov	r2, r3
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <HAL_IncTick+0x24>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4413      	add	r3, r2
 8001584:	4a04      	ldr	r2, [pc, #16]	; (8001598 <HAL_IncTick+0x24>)
 8001586:	6013      	str	r3, [r2, #0]
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	20000034 	.word	0x20000034
 8001598:	20000480 	.word	0x20000480

0800159c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return uwTick;  
 80015a0:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <HAL_GetTick+0x14>)
 80015a2:	681b      	ldr	r3, [r3, #0]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	20000480 	.word	0x20000480

080015b4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015bc:	f7ff ffee 	bl	800159c <HAL_GetTick>
 80015c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015cc:	d005      	beq.n	80015da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ce:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <HAL_Delay+0x44>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	461a      	mov	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4413      	add	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80015da:	bf00      	nop
 80015dc:	f7ff ffde 	bl	800159c <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d8f7      	bhi.n	80015dc <HAL_Delay+0x28>
  {
  }
}
 80015ec:	bf00      	nop
 80015ee:	bf00      	nop
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000034 	.word	0x20000034

080015fc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b09a      	sub	sp, #104	; 0x68
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001640:	2300      	movs	r3, #0
 8001642:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001646:	2300      	movs	r3, #0
 8001648:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800164a:	2300      	movs	r3, #0
 800164c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d101      	bne.n	8001658 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e1c9      	b.n	80019ec <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	f003 0310 	and.w	r3, r3, #16
 8001666:	2b00      	cmp	r3, #0
 8001668:	d176      	bne.n	8001758 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	2b00      	cmp	r3, #0
 8001670:	d152      	bne.n	8001718 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff fd01 	bl	8001094 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d13b      	bne.n	8001718 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f001 fa6d 	bl	8002b80 <ADC_Disable>
 80016a6:	4603      	mov	r3, r0
 80016a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b0:	f003 0310 	and.w	r3, r3, #16
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d12f      	bne.n	8001718 <HAL_ADC_Init+0xe0>
 80016b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d12b      	bne.n	8001718 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016c8:	f023 0302 	bic.w	r3, r3, #2
 80016cc:	f043 0202 	orr.w	r2, r3, #2
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	689a      	ldr	r2, [r3, #8]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016e2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	689a      	ldr	r2, [r3, #8]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016f2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80016f4:	4b86      	ldr	r3, [pc, #536]	; (8001910 <HAL_ADC_Init+0x2d8>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a86      	ldr	r2, [pc, #536]	; (8001914 <HAL_ADC_Init+0x2dc>)
 80016fa:	fba2 2303 	umull	r2, r3, r2, r3
 80016fe:	0c9a      	lsrs	r2, r3, #18
 8001700:	4613      	mov	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	4413      	add	r3, r2
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800170a:	e002      	b.n	8001712 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	3b01      	subs	r3, #1
 8001710:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1f9      	bne.n	800170c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d007      	beq.n	8001736 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001730:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001734:	d110      	bne.n	8001758 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	f023 0312 	bic.w	r3, r3, #18
 800173e:	f043 0210 	orr.w	r2, r3, #16
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174a:	f043 0201 	orr.w	r2, r3, #1
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175c:	f003 0310 	and.w	r3, r3, #16
 8001760:	2b00      	cmp	r3, #0
 8001762:	f040 8136 	bne.w	80019d2 <HAL_ADC_Init+0x39a>
 8001766:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800176a:	2b00      	cmp	r3, #0
 800176c:	f040 8131 	bne.w	80019d2 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800177a:	2b00      	cmp	r3, #0
 800177c:	f040 8129 	bne.w	80019d2 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001788:	f043 0202 	orr.w	r2, r3, #2
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001798:	d004      	beq.n	80017a4 <HAL_ADC_Init+0x16c>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a5e      	ldr	r2, [pc, #376]	; (8001918 <HAL_ADC_Init+0x2e0>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d101      	bne.n	80017a8 <HAL_ADC_Init+0x170>
 80017a4:	4b5d      	ldr	r3, [pc, #372]	; (800191c <HAL_ADC_Init+0x2e4>)
 80017a6:	e000      	b.n	80017aa <HAL_ADC_Init+0x172>
 80017a8:	4b5d      	ldr	r3, [pc, #372]	; (8001920 <HAL_ADC_Init+0x2e8>)
 80017aa:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017b4:	d102      	bne.n	80017bc <HAL_ADC_Init+0x184>
 80017b6:	4b58      	ldr	r3, [pc, #352]	; (8001918 <HAL_ADC_Init+0x2e0>)
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	e01a      	b.n	80017f2 <HAL_ADC_Init+0x1ba>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a55      	ldr	r2, [pc, #340]	; (8001918 <HAL_ADC_Init+0x2e0>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d103      	bne.n	80017ce <HAL_ADC_Init+0x196>
 80017c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	e011      	b.n	80017f2 <HAL_ADC_Init+0x1ba>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a54      	ldr	r2, [pc, #336]	; (8001924 <HAL_ADC_Init+0x2ec>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d102      	bne.n	80017de <HAL_ADC_Init+0x1a6>
 80017d8:	4b53      	ldr	r3, [pc, #332]	; (8001928 <HAL_ADC_Init+0x2f0>)
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	e009      	b.n	80017f2 <HAL_ADC_Init+0x1ba>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a51      	ldr	r2, [pc, #324]	; (8001928 <HAL_ADC_Init+0x2f0>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d102      	bne.n	80017ee <HAL_ADC_Init+0x1b6>
 80017e8:	4b4e      	ldr	r3, [pc, #312]	; (8001924 <HAL_ADC_Init+0x2ec>)
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	e001      	b.n	80017f2 <HAL_ADC_Init+0x1ba>
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 0303 	and.w	r3, r3, #3
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d108      	bne.n	8001812 <HAL_ADC_Init+0x1da>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b01      	cmp	r3, #1
 800180c:	d101      	bne.n	8001812 <HAL_ADC_Init+0x1da>
 800180e:	2301      	movs	r3, #1
 8001810:	e000      	b.n	8001814 <HAL_ADC_Init+0x1dc>
 8001812:	2300      	movs	r3, #0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d11c      	bne.n	8001852 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001818:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800181a:	2b00      	cmp	r3, #0
 800181c:	d010      	beq.n	8001840 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 0303 	and.w	r3, r3, #3
 8001826:	2b01      	cmp	r3, #1
 8001828:	d107      	bne.n	800183a <HAL_ADC_Init+0x202>
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b01      	cmp	r3, #1
 8001834:	d101      	bne.n	800183a <HAL_ADC_Init+0x202>
 8001836:	2301      	movs	r3, #1
 8001838:	e000      	b.n	800183c <HAL_ADC_Init+0x204>
 800183a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800183c:	2b00      	cmp	r3, #0
 800183e:	d108      	bne.n	8001852 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001840:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	431a      	orrs	r2, r3
 800184e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001850:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	7e5b      	ldrb	r3, [r3, #25]
 8001856:	035b      	lsls	r3, r3, #13
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800185c:	2a01      	cmp	r2, #1
 800185e:	d002      	beq.n	8001866 <HAL_ADC_Init+0x22e>
 8001860:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001864:	e000      	b.n	8001868 <HAL_ADC_Init+0x230>
 8001866:	2200      	movs	r2, #0
 8001868:	431a      	orrs	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	431a      	orrs	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	4313      	orrs	r3, r2
 8001876:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001878:	4313      	orrs	r3, r2
 800187a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d11b      	bne.n	80018be <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	7e5b      	ldrb	r3, [r3, #25]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d109      	bne.n	80018a2 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001892:	3b01      	subs	r3, #1
 8001894:	045a      	lsls	r2, r3, #17
 8001896:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001898:	4313      	orrs	r3, r2
 800189a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800189e:	663b      	str	r3, [r7, #96]	; 0x60
 80018a0:	e00d      	b.n	80018be <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80018aa:	f043 0220 	orr.w	r2, r3, #32
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	f043 0201 	orr.w	r2, r3, #1
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d03a      	beq.n	800193c <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a16      	ldr	r2, [pc, #88]	; (8001924 <HAL_ADC_Init+0x2ec>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d004      	beq.n	80018da <HAL_ADC_Init+0x2a2>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a14      	ldr	r2, [pc, #80]	; (8001928 <HAL_ADC_Init+0x2f0>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d128      	bne.n	800192c <HAL_ADC_Init+0x2f4>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018de:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80018e2:	d012      	beq.n	800190a <HAL_ADC_Init+0x2d2>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018ec:	d00a      	beq.n	8001904 <HAL_ADC_Init+0x2cc>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f2:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80018f6:	d002      	beq.n	80018fe <HAL_ADC_Init+0x2c6>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fc:	e018      	b.n	8001930 <HAL_ADC_Init+0x2f8>
 80018fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001902:	e015      	b.n	8001930 <HAL_ADC_Init+0x2f8>
 8001904:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001908:	e012      	b.n	8001930 <HAL_ADC_Init+0x2f8>
 800190a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800190e:	e00f      	b.n	8001930 <HAL_ADC_Init+0x2f8>
 8001910:	2000002c 	.word	0x2000002c
 8001914:	431bde83 	.word	0x431bde83
 8001918:	50000100 	.word	0x50000100
 800191c:	50000300 	.word	0x50000300
 8001920:	50000700 	.word	0x50000700
 8001924:	50000400 	.word	0x50000400
 8001928:	50000500 	.word	0x50000500
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001934:	4313      	orrs	r3, r2
 8001936:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001938:	4313      	orrs	r3, r2
 800193a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 030c 	and.w	r3, r3, #12
 8001946:	2b00      	cmp	r3, #0
 8001948:	d114      	bne.n	8001974 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	6812      	ldr	r2, [r2, #0]
 8001954:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001958:	f023 0302 	bic.w	r3, r3, #2
 800195c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	7e1b      	ldrb	r3, [r3, #24]
 8001962:	039a      	lsls	r2, r3, #14
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	4313      	orrs	r3, r2
 800196e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001970:	4313      	orrs	r3, r2
 8001972:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	68da      	ldr	r2, [r3, #12]
 800197a:	4b1e      	ldr	r3, [pc, #120]	; (80019f4 <HAL_ADC_Init+0x3bc>)
 800197c:	4013      	ands	r3, r2
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	6812      	ldr	r2, [r2, #0]
 8001982:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001984:	430b      	orrs	r3, r1
 8001986:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d10c      	bne.n	80019aa <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	f023 010f 	bic.w	r1, r3, #15
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	1e5a      	subs	r2, r3, #1
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	430a      	orrs	r2, r1
 80019a6:	631a      	str	r2, [r3, #48]	; 0x30
 80019a8:	e007      	b.n	80019ba <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 020f 	bic.w	r2, r2, #15
 80019b8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c4:	f023 0303 	bic.w	r3, r3, #3
 80019c8:	f043 0201 	orr.w	r2, r3, #1
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	641a      	str	r2, [r3, #64]	; 0x40
 80019d0:	e00a      	b.n	80019e8 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	f023 0312 	bic.w	r3, r3, #18
 80019da:	f043 0210 	orr.w	r2, r3, #16
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80019e2:	2301      	movs	r3, #1
 80019e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80019e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3768      	adds	r7, #104	; 0x68
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	fff0c007 	.word	0xfff0c007

080019f8 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a00:	2300      	movs	r3, #0
 8001a02:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 0304 	and.w	r3, r3, #4
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	f040 8123 	bne.w	8001c5a <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d101      	bne.n	8001a22 <HAL_ADC_Start_IT+0x2a>
 8001a1e:	2302      	movs	r3, #2
 8001a20:	e11e      	b.n	8001c60 <HAL_ADC_Start_IT+0x268>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f001 f844 	bl	8002ab8 <ADC_Enable>
 8001a30:	4603      	mov	r3, r0
 8001a32:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a34:	7bfb      	ldrb	r3, [r7, #15]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f040 810a 	bne.w	8001c50 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a40:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a44:	f023 0301 	bic.w	r3, r3, #1
 8001a48:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a58:	d004      	beq.n	8001a64 <HAL_ADC_Start_IT+0x6c>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a82      	ldr	r2, [pc, #520]	; (8001c68 <HAL_ADC_Start_IT+0x270>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d106      	bne.n	8001a72 <HAL_ADC_Start_IT+0x7a>
 8001a64:	4b81      	ldr	r3, [pc, #516]	; (8001c6c <HAL_ADC_Start_IT+0x274>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 031f 	and.w	r3, r3, #31
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d010      	beq.n	8001a92 <HAL_ADC_Start_IT+0x9a>
 8001a70:	e005      	b.n	8001a7e <HAL_ADC_Start_IT+0x86>
 8001a72:	4b7f      	ldr	r3, [pc, #508]	; (8001c70 <HAL_ADC_Start_IT+0x278>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 031f 	and.w	r3, r3, #31
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d009      	beq.n	8001a92 <HAL_ADC_Start_IT+0x9a>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a86:	d004      	beq.n	8001a92 <HAL_ADC_Start_IT+0x9a>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a79      	ldr	r2, [pc, #484]	; (8001c74 <HAL_ADC_Start_IT+0x27c>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d115      	bne.n	8001abe <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d036      	beq.n	8001b1a <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ab4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001abc:	e02d      	b.n	8001b1a <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ad2:	d004      	beq.n	8001ade <HAL_ADC_Start_IT+0xe6>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a63      	ldr	r2, [pc, #396]	; (8001c68 <HAL_ADC_Start_IT+0x270>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d10a      	bne.n	8001af4 <HAL_ADC_Start_IT+0xfc>
 8001ade:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	bf14      	ite	ne
 8001aec:	2301      	movne	r3, #1
 8001aee:	2300      	moveq	r3, #0
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	e008      	b.n	8001b06 <HAL_ADC_Start_IT+0x10e>
 8001af4:	4b5f      	ldr	r3, [pc, #380]	; (8001c74 <HAL_ADC_Start_IT+0x27c>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	bf14      	ite	ne
 8001b00:	2301      	movne	r3, #1
 8001b02:	2300      	moveq	r3, #0
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d007      	beq.n	8001b1a <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b12:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b26:	d106      	bne.n	8001b36 <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2c:	f023 0206 	bic.w	r2, r3, #6
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	645a      	str	r2, [r3, #68]	; 0x44
 8001b34:	e002      	b.n	8001b3c <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	221c      	movs	r2, #28
 8001b4a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	695b      	ldr	r3, [r3, #20]
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	d110      	bne.n	8001b76 <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 0204 	bic.w	r2, r2, #4
 8001b62:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 0208 	orr.w	r2, r2, #8
 8001b72:	605a      	str	r2, [r3, #4]
          break;
 8001b74:	e008      	b.n	8001b88 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f042 020c 	orr.w	r2, r2, #12
 8001b84:	605a      	str	r2, [r3, #4]
          break;
 8001b86:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d107      	bne.n	8001ba0 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 0210 	bic.w	r2, r2, #16
 8001b9e:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ba8:	d004      	beq.n	8001bb4 <HAL_ADC_Start_IT+0x1bc>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a2e      	ldr	r2, [pc, #184]	; (8001c68 <HAL_ADC_Start_IT+0x270>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d106      	bne.n	8001bc2 <HAL_ADC_Start_IT+0x1ca>
 8001bb4:	4b2d      	ldr	r3, [pc, #180]	; (8001c6c <HAL_ADC_Start_IT+0x274>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f003 031f 	and.w	r3, r3, #31
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d03e      	beq.n	8001c3e <HAL_ADC_Start_IT+0x246>
 8001bc0:	e005      	b.n	8001bce <HAL_ADC_Start_IT+0x1d6>
 8001bc2:	4b2b      	ldr	r3, [pc, #172]	; (8001c70 <HAL_ADC_Start_IT+0x278>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f003 031f 	and.w	r3, r3, #31
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d037      	beq.n	8001c3e <HAL_ADC_Start_IT+0x246>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bd6:	d004      	beq.n	8001be2 <HAL_ADC_Start_IT+0x1ea>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a22      	ldr	r2, [pc, #136]	; (8001c68 <HAL_ADC_Start_IT+0x270>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d106      	bne.n	8001bf0 <HAL_ADC_Start_IT+0x1f8>
 8001be2:	4b22      	ldr	r3, [pc, #136]	; (8001c6c <HAL_ADC_Start_IT+0x274>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 031f 	and.w	r3, r3, #31
 8001bea:	2b05      	cmp	r3, #5
 8001bec:	d027      	beq.n	8001c3e <HAL_ADC_Start_IT+0x246>
 8001bee:	e005      	b.n	8001bfc <HAL_ADC_Start_IT+0x204>
 8001bf0:	4b1f      	ldr	r3, [pc, #124]	; (8001c70 <HAL_ADC_Start_IT+0x278>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 031f 	and.w	r3, r3, #31
 8001bf8:	2b05      	cmp	r3, #5
 8001bfa:	d020      	beq.n	8001c3e <HAL_ADC_Start_IT+0x246>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c04:	d004      	beq.n	8001c10 <HAL_ADC_Start_IT+0x218>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a17      	ldr	r2, [pc, #92]	; (8001c68 <HAL_ADC_Start_IT+0x270>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d106      	bne.n	8001c1e <HAL_ADC_Start_IT+0x226>
 8001c10:	4b16      	ldr	r3, [pc, #88]	; (8001c6c <HAL_ADC_Start_IT+0x274>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 031f 	and.w	r3, r3, #31
 8001c18:	2b09      	cmp	r3, #9
 8001c1a:	d010      	beq.n	8001c3e <HAL_ADC_Start_IT+0x246>
 8001c1c:	e005      	b.n	8001c2a <HAL_ADC_Start_IT+0x232>
 8001c1e:	4b14      	ldr	r3, [pc, #80]	; (8001c70 <HAL_ADC_Start_IT+0x278>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 031f 	and.w	r3, r3, #31
 8001c26:	2b09      	cmp	r3, #9
 8001c28:	d009      	beq.n	8001c3e <HAL_ADC_Start_IT+0x246>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c32:	d004      	beq.n	8001c3e <HAL_ADC_Start_IT+0x246>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a0e      	ldr	r2, [pc, #56]	; (8001c74 <HAL_ADC_Start_IT+0x27c>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d10f      	bne.n	8001c5e <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f042 0204 	orr.w	r2, r2, #4
 8001c4c:	609a      	str	r2, [r3, #8]
 8001c4e:	e006      	b.n	8001c5e <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001c58:	e001      	b.n	8001c5e <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	50000100 	.word	0x50000100
 8001c6c:	50000300 	.word	0x50000300
 8001c70:	50000700 	.word	0x50000700
 8001c74:	50000400 	.word	0x50000400

08001c78 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
	...

08001c94 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	d106      	bne.n	8001cc4 <HAL_ADC_IRQHandler+0x30>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b04      	cmp	r3, #4
 8001cc2:	d00f      	beq.n	8001ce4 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001cce:	2b08      	cmp	r3, #8
 8001cd0:	f040 80c0 	bne.w	8001e54 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	2b08      	cmp	r3, #8
 8001ce0:	f040 80b8 	bne.w	8001e54 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce8:	f003 0310 	and.w	r3, r3, #16
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d105      	bne.n	8001cfc <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d04:	d004      	beq.n	8001d10 <HAL_ADC_IRQHandler+0x7c>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a95      	ldr	r2, [pc, #596]	; (8001f60 <HAL_ADC_IRQHandler+0x2cc>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d106      	bne.n	8001d1e <HAL_ADC_IRQHandler+0x8a>
 8001d10:	4b94      	ldr	r3, [pc, #592]	; (8001f64 <HAL_ADC_IRQHandler+0x2d0>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 031f 	and.w	r3, r3, #31
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d03e      	beq.n	8001d9a <HAL_ADC_IRQHandler+0x106>
 8001d1c:	e005      	b.n	8001d2a <HAL_ADC_IRQHandler+0x96>
 8001d1e:	4b92      	ldr	r3, [pc, #584]	; (8001f68 <HAL_ADC_IRQHandler+0x2d4>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 031f 	and.w	r3, r3, #31
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d037      	beq.n	8001d9a <HAL_ADC_IRQHandler+0x106>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d32:	d004      	beq.n	8001d3e <HAL_ADC_IRQHandler+0xaa>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a89      	ldr	r2, [pc, #548]	; (8001f60 <HAL_ADC_IRQHandler+0x2cc>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d106      	bne.n	8001d4c <HAL_ADC_IRQHandler+0xb8>
 8001d3e:	4b89      	ldr	r3, [pc, #548]	; (8001f64 <HAL_ADC_IRQHandler+0x2d0>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 031f 	and.w	r3, r3, #31
 8001d46:	2b05      	cmp	r3, #5
 8001d48:	d027      	beq.n	8001d9a <HAL_ADC_IRQHandler+0x106>
 8001d4a:	e005      	b.n	8001d58 <HAL_ADC_IRQHandler+0xc4>
 8001d4c:	4b86      	ldr	r3, [pc, #536]	; (8001f68 <HAL_ADC_IRQHandler+0x2d4>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 031f 	and.w	r3, r3, #31
 8001d54:	2b05      	cmp	r3, #5
 8001d56:	d020      	beq.n	8001d9a <HAL_ADC_IRQHandler+0x106>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d60:	d004      	beq.n	8001d6c <HAL_ADC_IRQHandler+0xd8>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a7e      	ldr	r2, [pc, #504]	; (8001f60 <HAL_ADC_IRQHandler+0x2cc>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d106      	bne.n	8001d7a <HAL_ADC_IRQHandler+0xe6>
 8001d6c:	4b7d      	ldr	r3, [pc, #500]	; (8001f64 <HAL_ADC_IRQHandler+0x2d0>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 031f 	and.w	r3, r3, #31
 8001d74:	2b09      	cmp	r3, #9
 8001d76:	d010      	beq.n	8001d9a <HAL_ADC_IRQHandler+0x106>
 8001d78:	e005      	b.n	8001d86 <HAL_ADC_IRQHandler+0xf2>
 8001d7a:	4b7b      	ldr	r3, [pc, #492]	; (8001f68 <HAL_ADC_IRQHandler+0x2d4>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 031f 	and.w	r3, r3, #31
 8001d82:	2b09      	cmp	r3, #9
 8001d84:	d009      	beq.n	8001d9a <HAL_ADC_IRQHandler+0x106>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d8e:	d004      	beq.n	8001d9a <HAL_ADC_IRQHandler+0x106>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a75      	ldr	r2, [pc, #468]	; (8001f6c <HAL_ADC_IRQHandler+0x2d8>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d104      	bne.n	8001da4 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	613b      	str	r3, [r7, #16]
 8001da2:	e00f      	b.n	8001dc4 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dac:	d004      	beq.n	8001db8 <HAL_ADC_IRQHandler+0x124>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a6b      	ldr	r2, [pc, #428]	; (8001f60 <HAL_ADC_IRQHandler+0x2cc>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d102      	bne.n	8001dbe <HAL_ADC_IRQHandler+0x12a>
 8001db8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001dbc:	e000      	b.n	8001dc0 <HAL_ADC_IRQHandler+0x12c>
 8001dbe:	4b6b      	ldr	r3, [pc, #428]	; (8001f6c <HAL_ADC_IRQHandler+0x2d8>)
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d139      	bne.n	8001e46 <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d134      	bne.n	8001e46 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b08      	cmp	r3, #8
 8001de8:	d12d      	bne.n	8001e46 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d11a      	bne.n	8001e2e <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 020c 	bic.w	r2, r2, #12
 8001e06:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d112      	bne.n	8001e46 <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e24:	f043 0201 	orr.w	r2, r3, #1
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	641a      	str	r2, [r3, #64]	; 0x40
 8001e2c:	e00b      	b.n	8001e46 <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	f043 0210 	orr.w	r2, r3, #16
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	f043 0201 	orr.w	r2, r3, #1
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7ff fbd8 	bl	80015fc <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	220c      	movs	r2, #12
 8001e52:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0320 	and.w	r3, r3, #32
 8001e5e:	2b20      	cmp	r3, #32
 8001e60:	d106      	bne.n	8001e70 <HAL_ADC_IRQHandler+0x1dc>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 0320 	and.w	r3, r3, #32
 8001e6c:	2b20      	cmp	r3, #32
 8001e6e:	d00f      	beq.n	8001e90 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8001e7a:	2b40      	cmp	r3, #64	; 0x40
 8001e7c:	f040 813c 	bne.w	80020f8 <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e8a:	2b40      	cmp	r3, #64	; 0x40
 8001e8c:	f040 8134 	bne.w	80020f8 <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e94:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ea4:	d004      	beq.n	8001eb0 <HAL_ADC_IRQHandler+0x21c>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a2d      	ldr	r2, [pc, #180]	; (8001f60 <HAL_ADC_IRQHandler+0x2cc>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d106      	bne.n	8001ebe <HAL_ADC_IRQHandler+0x22a>
 8001eb0:	4b2c      	ldr	r3, [pc, #176]	; (8001f64 <HAL_ADC_IRQHandler+0x2d0>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 031f 	and.w	r3, r3, #31
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d03e      	beq.n	8001f3a <HAL_ADC_IRQHandler+0x2a6>
 8001ebc:	e005      	b.n	8001eca <HAL_ADC_IRQHandler+0x236>
 8001ebe:	4b2a      	ldr	r3, [pc, #168]	; (8001f68 <HAL_ADC_IRQHandler+0x2d4>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 031f 	and.w	r3, r3, #31
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d037      	beq.n	8001f3a <HAL_ADC_IRQHandler+0x2a6>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ed2:	d004      	beq.n	8001ede <HAL_ADC_IRQHandler+0x24a>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a21      	ldr	r2, [pc, #132]	; (8001f60 <HAL_ADC_IRQHandler+0x2cc>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d106      	bne.n	8001eec <HAL_ADC_IRQHandler+0x258>
 8001ede:	4b21      	ldr	r3, [pc, #132]	; (8001f64 <HAL_ADC_IRQHandler+0x2d0>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 031f 	and.w	r3, r3, #31
 8001ee6:	2b05      	cmp	r3, #5
 8001ee8:	d027      	beq.n	8001f3a <HAL_ADC_IRQHandler+0x2a6>
 8001eea:	e005      	b.n	8001ef8 <HAL_ADC_IRQHandler+0x264>
 8001eec:	4b1e      	ldr	r3, [pc, #120]	; (8001f68 <HAL_ADC_IRQHandler+0x2d4>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 031f 	and.w	r3, r3, #31
 8001ef4:	2b05      	cmp	r3, #5
 8001ef6:	d020      	beq.n	8001f3a <HAL_ADC_IRQHandler+0x2a6>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f00:	d004      	beq.n	8001f0c <HAL_ADC_IRQHandler+0x278>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a16      	ldr	r2, [pc, #88]	; (8001f60 <HAL_ADC_IRQHandler+0x2cc>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d106      	bne.n	8001f1a <HAL_ADC_IRQHandler+0x286>
 8001f0c:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <HAL_ADC_IRQHandler+0x2d0>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 031f 	and.w	r3, r3, #31
 8001f14:	2b09      	cmp	r3, #9
 8001f16:	d010      	beq.n	8001f3a <HAL_ADC_IRQHandler+0x2a6>
 8001f18:	e005      	b.n	8001f26 <HAL_ADC_IRQHandler+0x292>
 8001f1a:	4b13      	ldr	r3, [pc, #76]	; (8001f68 <HAL_ADC_IRQHandler+0x2d4>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 031f 	and.w	r3, r3, #31
 8001f22:	2b09      	cmp	r3, #9
 8001f24:	d009      	beq.n	8001f3a <HAL_ADC_IRQHandler+0x2a6>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f2e:	d004      	beq.n	8001f3a <HAL_ADC_IRQHandler+0x2a6>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a0d      	ldr	r2, [pc, #52]	; (8001f6c <HAL_ADC_IRQHandler+0x2d8>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d104      	bne.n	8001f44 <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	613b      	str	r3, [r7, #16]
 8001f42:	e018      	b.n	8001f76 <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f4c:	d004      	beq.n	8001f58 <HAL_ADC_IRQHandler+0x2c4>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a03      	ldr	r2, [pc, #12]	; (8001f60 <HAL_ADC_IRQHandler+0x2cc>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d10b      	bne.n	8001f70 <HAL_ADC_IRQHandler+0x2dc>
 8001f58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f5c:	e009      	b.n	8001f72 <HAL_ADC_IRQHandler+0x2de>
 8001f5e:	bf00      	nop
 8001f60:	50000100 	.word	0x50000100
 8001f64:	50000300 	.word	0x50000300
 8001f68:	50000700 	.word	0x50000700
 8001f6c:	50000400 	.word	0x50000400
 8001f70:	4b9d      	ldr	r3, [pc, #628]	; (80021e8 <HAL_ADC_IRQHandler+0x554>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f040 80b2 	bne.w	80020ea <HAL_ADC_IRQHandler+0x456>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00d      	beq.n	8001fac <HAL_ADC_IRQHandler+0x318>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f040 80a5 	bne.w	80020ea <HAL_ADC_IRQHandler+0x456>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f040 809f 	bne.w	80020ea <HAL_ADC_IRQHandler+0x456>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb6:	2b40      	cmp	r3, #64	; 0x40
 8001fb8:	f040 8097 	bne.w	80020ea <HAL_ADC_IRQHandler+0x456>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fc4:	d004      	beq.n	8001fd0 <HAL_ADC_IRQHandler+0x33c>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a88      	ldr	r2, [pc, #544]	; (80021ec <HAL_ADC_IRQHandler+0x558>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d106      	bne.n	8001fde <HAL_ADC_IRQHandler+0x34a>
 8001fd0:	4b87      	ldr	r3, [pc, #540]	; (80021f0 <HAL_ADC_IRQHandler+0x55c>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f003 031f 	and.w	r3, r3, #31
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d03e      	beq.n	800205a <HAL_ADC_IRQHandler+0x3c6>
 8001fdc:	e005      	b.n	8001fea <HAL_ADC_IRQHandler+0x356>
 8001fde:	4b85      	ldr	r3, [pc, #532]	; (80021f4 <HAL_ADC_IRQHandler+0x560>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 031f 	and.w	r3, r3, #31
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d037      	beq.n	800205a <HAL_ADC_IRQHandler+0x3c6>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ff2:	d004      	beq.n	8001ffe <HAL_ADC_IRQHandler+0x36a>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a7c      	ldr	r2, [pc, #496]	; (80021ec <HAL_ADC_IRQHandler+0x558>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d106      	bne.n	800200c <HAL_ADC_IRQHandler+0x378>
 8001ffe:	4b7c      	ldr	r3, [pc, #496]	; (80021f0 <HAL_ADC_IRQHandler+0x55c>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 031f 	and.w	r3, r3, #31
 8002006:	2b06      	cmp	r3, #6
 8002008:	d027      	beq.n	800205a <HAL_ADC_IRQHandler+0x3c6>
 800200a:	e005      	b.n	8002018 <HAL_ADC_IRQHandler+0x384>
 800200c:	4b79      	ldr	r3, [pc, #484]	; (80021f4 <HAL_ADC_IRQHandler+0x560>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 031f 	and.w	r3, r3, #31
 8002014:	2b06      	cmp	r3, #6
 8002016:	d020      	beq.n	800205a <HAL_ADC_IRQHandler+0x3c6>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002020:	d004      	beq.n	800202c <HAL_ADC_IRQHandler+0x398>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a71      	ldr	r2, [pc, #452]	; (80021ec <HAL_ADC_IRQHandler+0x558>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d106      	bne.n	800203a <HAL_ADC_IRQHandler+0x3a6>
 800202c:	4b70      	ldr	r3, [pc, #448]	; (80021f0 <HAL_ADC_IRQHandler+0x55c>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 031f 	and.w	r3, r3, #31
 8002034:	2b07      	cmp	r3, #7
 8002036:	d010      	beq.n	800205a <HAL_ADC_IRQHandler+0x3c6>
 8002038:	e005      	b.n	8002046 <HAL_ADC_IRQHandler+0x3b2>
 800203a:	4b6e      	ldr	r3, [pc, #440]	; (80021f4 <HAL_ADC_IRQHandler+0x560>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 031f 	and.w	r3, r3, #31
 8002042:	2b07      	cmp	r3, #7
 8002044:	d009      	beq.n	800205a <HAL_ADC_IRQHandler+0x3c6>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800204e:	d004      	beq.n	800205a <HAL_ADC_IRQHandler+0x3c6>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a64      	ldr	r2, [pc, #400]	; (80021e8 <HAL_ADC_IRQHandler+0x554>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d104      	bne.n	8002064 <HAL_ADC_IRQHandler+0x3d0>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	e00f      	b.n	8002084 <HAL_ADC_IRQHandler+0x3f0>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800206c:	d004      	beq.n	8002078 <HAL_ADC_IRQHandler+0x3e4>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a5e      	ldr	r2, [pc, #376]	; (80021ec <HAL_ADC_IRQHandler+0x558>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d102      	bne.n	800207e <HAL_ADC_IRQHandler+0x3ea>
 8002078:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800207c:	e000      	b.n	8002080 <HAL_ADC_IRQHandler+0x3ec>
 800207e:	4b5a      	ldr	r3, [pc, #360]	; (80021e8 <HAL_ADC_IRQHandler+0x554>)
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d12d      	bne.n	80020ea <HAL_ADC_IRQHandler+0x456>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 0308 	and.w	r3, r3, #8
 8002098:	2b00      	cmp	r3, #0
 800209a:	d11a      	bne.n	80020d2 <HAL_ADC_IRQHandler+0x43e>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80020aa:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d112      	bne.n	80020ea <HAL_ADC_IRQHandler+0x456>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c8:	f043 0201 	orr.w	r2, r3, #1
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	641a      	str	r2, [r3, #64]	; 0x40
 80020d0:	e00b      	b.n	80020ea <HAL_ADC_IRQHandler+0x456>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	f043 0210 	orr.w	r2, r3, #16
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e2:	f043 0201 	orr.w	r2, r3, #1
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f8de 	bl	80022ac <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2260      	movs	r2, #96	; 0x60
 80020f6:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002102:	2b80      	cmp	r3, #128	; 0x80
 8002104:	d113      	bne.n	800212e <HAL_ADC_IRQHandler+0x49a>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002110:	2b80      	cmp	r3, #128	; 0x80
 8002112:	d10c      	bne.n	800212e <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002118:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7ff fa75 	bl	8001610 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2280      	movs	r2, #128	; 0x80
 800212c:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800213c:	d115      	bne.n	800216a <HAL_ADC_IRQHandler+0x4d6>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002148:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800214c:	d10d      	bne.n	800216a <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f8ba 	bl	80022d4 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002168:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002178:	d115      	bne.n	80021a6 <HAL_ADC_IRQHandler+0x512>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002188:	d10d      	bne.n	80021a6 <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f8a6 	bl	80022e8 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021a4:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0310 	and.w	r3, r3, #16
 80021b0:	2b10      	cmp	r3, #16
 80021b2:	d151      	bne.n	8002258 <HAL_ADC_IRQHandler+0x5c4>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 0310 	and.w	r3, r3, #16
 80021be:	2b10      	cmp	r3, #16
 80021c0:	d14a      	bne.n	8002258 <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d102      	bne.n	80021d0 <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 80021ca:	2301      	movs	r3, #1
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	e02d      	b.n	800222c <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021d8:	d004      	beq.n	80021e4 <HAL_ADC_IRQHandler+0x550>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a03      	ldr	r2, [pc, #12]	; (80021ec <HAL_ADC_IRQHandler+0x558>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d109      	bne.n	80021f8 <HAL_ADC_IRQHandler+0x564>
 80021e4:	4b02      	ldr	r3, [pc, #8]	; (80021f0 <HAL_ADC_IRQHandler+0x55c>)
 80021e6:	e008      	b.n	80021fa <HAL_ADC_IRQHandler+0x566>
 80021e8:	50000400 	.word	0x50000400
 80021ec:	50000100 	.word	0x50000100
 80021f0:	50000300 	.word	0x50000300
 80021f4:	50000700 	.word	0x50000700
 80021f8:	4b2b      	ldr	r3, [pc, #172]	; (80022a8 <HAL_ADC_IRQHandler+0x614>)
 80021fa:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 031f 	and.w	r3, r3, #31
 8002204:	2b00      	cmp	r3, #0
 8002206:	d109      	bne.n	800221c <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b01      	cmp	r3, #1
 8002214:	d10a      	bne.n	800222c <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8002216:	2301      	movs	r3, #1
 8002218:	617b      	str	r3, [r7, #20]
 800221a:	e007      	b.n	800222c <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8002228:	2301      	movs	r3, #1
 800222a:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d10e      	bne.n	8002250 <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002242:	f043 0202 	orr.w	r2, r3, #2
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7ff f9ea 	bl	8001624 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2210      	movs	r2, #16
 8002256:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002266:	d11b      	bne.n	80022a0 <HAL_ADC_IRQHandler+0x60c>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002276:	d113      	bne.n	80022a0 <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002288:	f043 0208 	orr.w	r2, r3, #8
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002298:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f810 	bl	80022c0 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 80022a0:	bf00      	nop
 80022a2:	3718      	adds	r7, #24
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	50000700 	.word	0x50000700

080022ac <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b09b      	sub	sp, #108	; 0x6c
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002306:	2300      	movs	r3, #0
 8002308:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800230c:	2300      	movs	r3, #0
 800230e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002316:	2b01      	cmp	r3, #1
 8002318:	d101      	bne.n	800231e <HAL_ADC_ConfigChannel+0x22>
 800231a:	2302      	movs	r3, #2
 800231c:	e2cb      	b.n	80028b6 <HAL_ADC_ConfigChannel+0x5ba>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	2b00      	cmp	r3, #0
 8002332:	f040 82af 	bne.w	8002894 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b04      	cmp	r3, #4
 800233c:	d81c      	bhi.n	8002378 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	4613      	mov	r3, r2
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	4413      	add	r3, r2
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	461a      	mov	r2, r3
 8002352:	231f      	movs	r3, #31
 8002354:	4093      	lsls	r3, r2
 8002356:	43db      	mvns	r3, r3
 8002358:	4019      	ands	r1, r3
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	6818      	ldr	r0, [r3, #0]
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	4413      	add	r3, r2
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	fa00 f203 	lsl.w	r2, r0, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	430a      	orrs	r2, r1
 8002374:	631a      	str	r2, [r3, #48]	; 0x30
 8002376:	e063      	b.n	8002440 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2b09      	cmp	r3, #9
 800237e:	d81e      	bhi.n	80023be <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	4613      	mov	r3, r2
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	4413      	add	r3, r2
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	3b1e      	subs	r3, #30
 8002394:	221f      	movs	r2, #31
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	4019      	ands	r1, r3
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	6818      	ldr	r0, [r3, #0]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685a      	ldr	r2, [r3, #4]
 80023a6:	4613      	mov	r3, r2
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	4413      	add	r3, r2
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	3b1e      	subs	r3, #30
 80023b0:	fa00 f203 	lsl.w	r2, r0, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	635a      	str	r2, [r3, #52]	; 0x34
 80023bc:	e040      	b.n	8002440 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b0e      	cmp	r3, #14
 80023c4:	d81e      	bhi.n	8002404 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	4613      	mov	r3, r2
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	4413      	add	r3, r2
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	3b3c      	subs	r3, #60	; 0x3c
 80023da:	221f      	movs	r2, #31
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	4019      	ands	r1, r3
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	6818      	ldr	r0, [r3, #0]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	4613      	mov	r3, r2
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	4413      	add	r3, r2
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	3b3c      	subs	r3, #60	; 0x3c
 80023f6:	fa00 f203 	lsl.w	r2, r0, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	639a      	str	r2, [r3, #56]	; 0x38
 8002402:	e01d      	b.n	8002440 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	4413      	add	r3, r2
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	3b5a      	subs	r3, #90	; 0x5a
 8002418:	221f      	movs	r2, #31
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43db      	mvns	r3, r3
 8002420:	4019      	ands	r1, r3
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	6818      	ldr	r0, [r3, #0]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685a      	ldr	r2, [r3, #4]
 800242a:	4613      	mov	r3, r2
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	4413      	add	r3, r2
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	3b5a      	subs	r3, #90	; 0x5a
 8002434:	fa00 f203 	lsl.w	r2, r0, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	430a      	orrs	r2, r1
 800243e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 030c 	and.w	r3, r3, #12
 800244a:	2b00      	cmp	r3, #0
 800244c:	f040 80e5 	bne.w	800261a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b09      	cmp	r3, #9
 8002456:	d91c      	bls.n	8002492 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6999      	ldr	r1, [r3, #24]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	4613      	mov	r3, r2
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	4413      	add	r3, r2
 8002468:	3b1e      	subs	r3, #30
 800246a:	2207      	movs	r2, #7
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43db      	mvns	r3, r3
 8002472:	4019      	ands	r1, r3
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	6898      	ldr	r0, [r3, #8]
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	4613      	mov	r3, r2
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	4413      	add	r3, r2
 8002482:	3b1e      	subs	r3, #30
 8002484:	fa00 f203 	lsl.w	r2, r0, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	430a      	orrs	r2, r1
 800248e:	619a      	str	r2, [r3, #24]
 8002490:	e019      	b.n	80024c6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6959      	ldr	r1, [r3, #20]
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	4613      	mov	r3, r2
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	4413      	add	r3, r2
 80024a2:	2207      	movs	r2, #7
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	43db      	mvns	r3, r3
 80024aa:	4019      	ands	r1, r3
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	6898      	ldr	r0, [r3, #8]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	4613      	mov	r3, r2
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	4413      	add	r3, r2
 80024ba:	fa00 f203 	lsl.w	r2, r0, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	695a      	ldr	r2, [r3, #20]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	08db      	lsrs	r3, r3, #3
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	3b01      	subs	r3, #1
 80024e4:	2b03      	cmp	r3, #3
 80024e6:	d84f      	bhi.n	8002588 <HAL_ADC_ConfigChannel+0x28c>
 80024e8:	a201      	add	r2, pc, #4	; (adr r2, 80024f0 <HAL_ADC_ConfigChannel+0x1f4>)
 80024ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ee:	bf00      	nop
 80024f0:	08002501 	.word	0x08002501
 80024f4:	08002523 	.word	0x08002523
 80024f8:	08002545 	.word	0x08002545
 80024fc:	08002567 	.word	0x08002567
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002506:	4b9f      	ldr	r3, [pc, #636]	; (8002784 <HAL_ADC_ConfigChannel+0x488>)
 8002508:	4013      	ands	r3, r2
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	6812      	ldr	r2, [r2, #0]
 800250e:	0691      	lsls	r1, r2, #26
 8002510:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002512:	430a      	orrs	r2, r1
 8002514:	431a      	orrs	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800251e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002520:	e07e      	b.n	8002620 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002528:	4b96      	ldr	r3, [pc, #600]	; (8002784 <HAL_ADC_ConfigChannel+0x488>)
 800252a:	4013      	ands	r3, r2
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	6812      	ldr	r2, [r2, #0]
 8002530:	0691      	lsls	r1, r2, #26
 8002532:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002534:	430a      	orrs	r2, r1
 8002536:	431a      	orrs	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002540:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002542:	e06d      	b.n	8002620 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800254a:	4b8e      	ldr	r3, [pc, #568]	; (8002784 <HAL_ADC_ConfigChannel+0x488>)
 800254c:	4013      	ands	r3, r2
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	6812      	ldr	r2, [r2, #0]
 8002552:	0691      	lsls	r1, r2, #26
 8002554:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002556:	430a      	orrs	r2, r1
 8002558:	431a      	orrs	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002562:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002564:	e05c      	b.n	8002620 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800256c:	4b85      	ldr	r3, [pc, #532]	; (8002784 <HAL_ADC_ConfigChannel+0x488>)
 800256e:	4013      	ands	r3, r2
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	6812      	ldr	r2, [r2, #0]
 8002574:	0691      	lsls	r1, r2, #26
 8002576:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002578:	430a      	orrs	r2, r1
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002584:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002586:	e04b      	b.n	8002620 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800258e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	069b      	lsls	r3, r3, #26
 8002598:	429a      	cmp	r2, r3
 800259a:	d107      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80025aa:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	069b      	lsls	r3, r3, #26
 80025bc:	429a      	cmp	r2, r3
 80025be:	d107      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80025ce:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	069b      	lsls	r3, r3, #26
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d107      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80025f2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	069b      	lsls	r3, r3, #26
 8002604:	429a      	cmp	r2, r3
 8002606:	d10a      	bne.n	800261e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002616:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002618:	e001      	b.n	800261e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800261a:	bf00      	nop
 800261c:	e000      	b.n	8002620 <HAL_ADC_ConfigChannel+0x324>
      break;
 800261e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 0303 	and.w	r3, r3, #3
 800262a:	2b01      	cmp	r3, #1
 800262c:	d108      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x344>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b01      	cmp	r3, #1
 800263a:	d101      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x344>
 800263c:	2301      	movs	r3, #1
 800263e:	e000      	b.n	8002642 <HAL_ADC_ConfigChannel+0x346>
 8002640:	2300      	movs	r3, #0
 8002642:	2b00      	cmp	r3, #0
 8002644:	f040 8131 	bne.w	80028aa <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d00f      	beq.n	8002670 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2201      	movs	r2, #1
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43da      	mvns	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	400a      	ands	r2, r1
 800266a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800266e:	e049      	b.n	8002704 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2201      	movs	r2, #1
 800267e:	409a      	lsls	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2b09      	cmp	r3, #9
 8002690:	d91c      	bls.n	80026cc <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6999      	ldr	r1, [r3, #24]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	4613      	mov	r3, r2
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	4413      	add	r3, r2
 80026a2:	3b1b      	subs	r3, #27
 80026a4:	2207      	movs	r2, #7
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43db      	mvns	r3, r3
 80026ac:	4019      	ands	r1, r3
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	6898      	ldr	r0, [r3, #8]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	4613      	mov	r3, r2
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	4413      	add	r3, r2
 80026bc:	3b1b      	subs	r3, #27
 80026be:	fa00 f203 	lsl.w	r2, r0, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	619a      	str	r2, [r3, #24]
 80026ca:	e01b      	b.n	8002704 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6959      	ldr	r1, [r3, #20]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	1c5a      	adds	r2, r3, #1
 80026d8:	4613      	mov	r3, r2
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	4413      	add	r3, r2
 80026de:	2207      	movs	r2, #7
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	43db      	mvns	r3, r3
 80026e6:	4019      	ands	r1, r3
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	6898      	ldr	r0, [r3, #8]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	4613      	mov	r3, r2
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	4413      	add	r3, r2
 80026f8:	fa00 f203 	lsl.w	r2, r0, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800270c:	d004      	beq.n	8002718 <HAL_ADC_ConfigChannel+0x41c>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a1d      	ldr	r2, [pc, #116]	; (8002788 <HAL_ADC_ConfigChannel+0x48c>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d101      	bne.n	800271c <HAL_ADC_ConfigChannel+0x420>
 8002718:	4b1c      	ldr	r3, [pc, #112]	; (800278c <HAL_ADC_ConfigChannel+0x490>)
 800271a:	e000      	b.n	800271e <HAL_ADC_ConfigChannel+0x422>
 800271c:	4b1c      	ldr	r3, [pc, #112]	; (8002790 <HAL_ADC_ConfigChannel+0x494>)
 800271e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2b10      	cmp	r3, #16
 8002726:	d105      	bne.n	8002734 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002728:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002730:	2b00      	cmp	r3, #0
 8002732:	d015      	beq.n	8002760 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002738:	2b11      	cmp	r3, #17
 800273a:	d105      	bne.n	8002748 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800273c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00b      	beq.n	8002760 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800274c:	2b12      	cmp	r3, #18
 800274e:	f040 80ac 	bne.w	80028aa <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002752:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800275a:	2b00      	cmp	r3, #0
 800275c:	f040 80a5 	bne.w	80028aa <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002768:	d102      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x474>
 800276a:	4b07      	ldr	r3, [pc, #28]	; (8002788 <HAL_ADC_ConfigChannel+0x48c>)
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	e023      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x4bc>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a04      	ldr	r2, [pc, #16]	; (8002788 <HAL_ADC_ConfigChannel+0x48c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d10c      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x498>
 800277a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	e01a      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x4bc>
 8002782:	bf00      	nop
 8002784:	83fff000 	.word	0x83fff000
 8002788:	50000100 	.word	0x50000100
 800278c:	50000300 	.word	0x50000300
 8002790:	50000700 	.word	0x50000700
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a4a      	ldr	r2, [pc, #296]	; (80028c4 <HAL_ADC_ConfigChannel+0x5c8>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d102      	bne.n	80027a4 <HAL_ADC_ConfigChannel+0x4a8>
 800279e:	4b4a      	ldr	r3, [pc, #296]	; (80028c8 <HAL_ADC_ConfigChannel+0x5cc>)
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	e009      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x4bc>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a47      	ldr	r2, [pc, #284]	; (80028c8 <HAL_ADC_ConfigChannel+0x5cc>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d102      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x4b8>
 80027ae:	4b45      	ldr	r3, [pc, #276]	; (80028c4 <HAL_ADC_ConfigChannel+0x5c8>)
 80027b0:	60fb      	str	r3, [r7, #12]
 80027b2:	e001      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x4bc>
 80027b4:	2300      	movs	r3, #0
 80027b6:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d108      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x4dc>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d101      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x4dc>
 80027d4:	2301      	movs	r3, #1
 80027d6:	e000      	b.n	80027da <HAL_ADC_ConfigChannel+0x4de>
 80027d8:	2300      	movs	r3, #0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d150      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80027de:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d010      	beq.n	8002806 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 0303 	and.w	r3, r3, #3
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d107      	bne.n	8002800 <HAL_ADC_ConfigChannel+0x504>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d101      	bne.n	8002800 <HAL_ADC_ConfigChannel+0x504>
 80027fc:	2301      	movs	r3, #1
 80027fe:	e000      	b.n	8002802 <HAL_ADC_ConfigChannel+0x506>
 8002800:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002802:	2b00      	cmp	r3, #0
 8002804:	d13c      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2b10      	cmp	r3, #16
 800280c:	d11d      	bne.n	800284a <HAL_ADC_ConfigChannel+0x54e>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002816:	d118      	bne.n	800284a <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002818:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002820:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002822:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002824:	4b29      	ldr	r3, [pc, #164]	; (80028cc <HAL_ADC_ConfigChannel+0x5d0>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a29      	ldr	r2, [pc, #164]	; (80028d0 <HAL_ADC_ConfigChannel+0x5d4>)
 800282a:	fba2 2303 	umull	r2, r3, r2, r3
 800282e:	0c9a      	lsrs	r2, r3, #18
 8002830:	4613      	mov	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800283a:	e002      	b.n	8002842 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	3b01      	subs	r3, #1
 8002840:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1f9      	bne.n	800283c <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002848:	e02e      	b.n	80028a8 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2b11      	cmp	r3, #17
 8002850:	d10b      	bne.n	800286a <HAL_ADC_ConfigChannel+0x56e>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800285a:	d106      	bne.n	800286a <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800285c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002864:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002866:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002868:	e01e      	b.n	80028a8 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2b12      	cmp	r3, #18
 8002870:	d11a      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002872:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800287a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800287c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800287e:	e013      	b.n	80028a8 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002884:	f043 0220 	orr.w	r2, r3, #32
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002892:	e00a      	b.n	80028aa <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	f043 0220 	orr.w	r2, r3, #32
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80028a6:	e000      	b.n	80028aa <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80028a8:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80028b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	376c      	adds	r7, #108	; 0x6c
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	50000400 	.word	0x50000400
 80028c8:	50000500 	.word	0x50000500
 80028cc:	2000002c 	.word	0x2000002c
 80028d0:	431bde83 	.word	0x431bde83

080028d4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b099      	sub	sp, #100	; 0x64
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028de:	2300      	movs	r3, #0
 80028e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028ec:	d102      	bne.n	80028f4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80028ee:	4b6d      	ldr	r3, [pc, #436]	; (8002aa4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	e01a      	b.n	800292a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a6a      	ldr	r2, [pc, #424]	; (8002aa4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d103      	bne.n	8002906 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80028fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002902:	60bb      	str	r3, [r7, #8]
 8002904:	e011      	b.n	800292a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a67      	ldr	r2, [pc, #412]	; (8002aa8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d102      	bne.n	8002916 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002910:	4b66      	ldr	r3, [pc, #408]	; (8002aac <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002912:	60bb      	str	r3, [r7, #8]
 8002914:	e009      	b.n	800292a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a64      	ldr	r2, [pc, #400]	; (8002aac <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d102      	bne.n	8002926 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002920:	4b61      	ldr	r3, [pc, #388]	; (8002aa8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002922:	60bb      	str	r3, [r7, #8]
 8002924:	e001      	b.n	800292a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002926:	2300      	movs	r3, #0
 8002928:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e0b0      	b.n	8002a96 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800293a:	2b01      	cmp	r3, #1
 800293c:	d101      	bne.n	8002942 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800293e:	2302      	movs	r3, #2
 8002940:	e0a9      	b.n	8002a96 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b00      	cmp	r3, #0
 8002956:	f040 808d 	bne.w	8002a74 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 0304 	and.w	r3, r3, #4
 8002962:	2b00      	cmp	r3, #0
 8002964:	f040 8086 	bne.w	8002a74 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002970:	d004      	beq.n	800297c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a4b      	ldr	r2, [pc, #300]	; (8002aa4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d101      	bne.n	8002980 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800297c:	4b4c      	ldr	r3, [pc, #304]	; (8002ab0 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800297e:	e000      	b.n	8002982 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002980:	4b4c      	ldr	r3, [pc, #304]	; (8002ab4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002982:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d040      	beq.n	8002a0e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800298c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	6859      	ldr	r1, [r3, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800299e:	035b      	lsls	r3, r3, #13
 80029a0:	430b      	orrs	r3, r1
 80029a2:	431a      	orrs	r2, r3
 80029a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029a6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d108      	bne.n	80029c8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d101      	bne.n	80029c8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80029c4:	2301      	movs	r3, #1
 80029c6:	e000      	b.n	80029ca <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80029c8:	2300      	movs	r3, #0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d15c      	bne.n	8002a88 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 0303 	and.w	r3, r3, #3
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d107      	bne.n	80029ea <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d101      	bne.n	80029ea <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80029ea:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d14b      	bne.n	8002a88 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80029f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80029f8:	f023 030f 	bic.w	r3, r3, #15
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	6811      	ldr	r1, [r2, #0]
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	6892      	ldr	r2, [r2, #8]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	431a      	orrs	r2, r3
 8002a08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a0a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a0c:	e03c      	b.n	8002a88 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a18:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f003 0303 	and.w	r3, r3, #3
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d108      	bne.n	8002a3a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d101      	bne.n	8002a3a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d123      	bne.n	8002a88 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f003 0303 	and.w	r3, r3, #3
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d107      	bne.n	8002a5c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d101      	bne.n	8002a5c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e000      	b.n	8002a5e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002a5c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d112      	bne.n	8002a88 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002a62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a6a:	f023 030f 	bic.w	r3, r3, #15
 8002a6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a70:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a72:	e009      	b.n	8002a88 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a78:	f043 0220 	orr.w	r2, r3, #32
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002a86:	e000      	b.n	8002a8a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a88:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002a92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002a96:	4618      	mov	r0, r3
 8002a98:	3764      	adds	r7, #100	; 0x64
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	50000100 	.word	0x50000100
 8002aa8:	50000400 	.word	0x50000400
 8002aac:	50000500 	.word	0x50000500
 8002ab0:	50000300 	.word	0x50000300
 8002ab4:	50000700 	.word	0x50000700

08002ab8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d108      	bne.n	8002ae4 <ADC_Enable+0x2c>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d101      	bne.n	8002ae4 <ADC_Enable+0x2c>
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e000      	b.n	8002ae6 <ADC_Enable+0x2e>
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d143      	bne.n	8002b72 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	4b22      	ldr	r3, [pc, #136]	; (8002b7c <ADC_Enable+0xc4>)
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00d      	beq.n	8002b14 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afc:	f043 0210 	orr.w	r2, r3, #16
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b08:	f043 0201 	orr.w	r2, r3, #1
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e02f      	b.n	8002b74 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689a      	ldr	r2, [r3, #8]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0201 	orr.w	r2, r2, #1
 8002b22:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002b24:	f7fe fd3a 	bl	800159c <HAL_GetTick>
 8002b28:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002b2a:	e01b      	b.n	8002b64 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b2c:	f7fe fd36 	bl	800159c <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d914      	bls.n	8002b64 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d00d      	beq.n	8002b64 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4c:	f043 0210 	orr.w	r2, r3, #16
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b58:	f043 0201 	orr.w	r2, r3, #1
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e007      	b.n	8002b74 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d1dc      	bne.n	8002b2c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	8000003f 	.word	0x8000003f

08002b80 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d108      	bne.n	8002bac <ADC_Disable+0x2c>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d101      	bne.n	8002bac <ADC_Disable+0x2c>
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e000      	b.n	8002bae <ADC_Disable+0x2e>
 8002bac:	2300      	movs	r3, #0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d047      	beq.n	8002c42 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f003 030d 	and.w	r3, r3, #13
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d10f      	bne.n	8002be0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689a      	ldr	r2, [r3, #8]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0202 	orr.w	r2, r2, #2
 8002bce:	609a      	str	r2, [r3, #8]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2203      	movs	r2, #3
 8002bd6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002bd8:	f7fe fce0 	bl	800159c <HAL_GetTick>
 8002bdc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002bde:	e029      	b.n	8002c34 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	f043 0210 	orr.w	r2, r3, #16
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf0:	f043 0201 	orr.w	r2, r3, #1
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e023      	b.n	8002c44 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002bfc:	f7fe fcce 	bl	800159c <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d914      	bls.n	8002c34 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d10d      	bne.n	8002c34 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	f043 0210 	orr.w	r2, r3, #16
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c28:	f043 0201 	orr.w	r2, r3, #1
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e007      	b.n	8002c44 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d0dc      	beq.n	8002bfc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c5c:	4b0c      	ldr	r3, [pc, #48]	; (8002c90 <__NVIC_SetPriorityGrouping+0x44>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c68:	4013      	ands	r3, r2
 8002c6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c7e:	4a04      	ldr	r2, [pc, #16]	; (8002c90 <__NVIC_SetPriorityGrouping+0x44>)
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	60d3      	str	r3, [r2, #12]
}
 8002c84:	bf00      	nop
 8002c86:	3714      	adds	r7, #20
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	e000ed00 	.word	0xe000ed00

08002c94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c98:	4b04      	ldr	r3, [pc, #16]	; (8002cac <__NVIC_GetPriorityGrouping+0x18>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	0a1b      	lsrs	r3, r3, #8
 8002c9e:	f003 0307 	and.w	r3, r3, #7
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	e000ed00 	.word	0xe000ed00

08002cb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	db0b      	blt.n	8002cda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cc2:	79fb      	ldrb	r3, [r7, #7]
 8002cc4:	f003 021f 	and.w	r2, r3, #31
 8002cc8:	4907      	ldr	r1, [pc, #28]	; (8002ce8 <__NVIC_EnableIRQ+0x38>)
 8002cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cce:	095b      	lsrs	r3, r3, #5
 8002cd0:	2001      	movs	r0, #1
 8002cd2:	fa00 f202 	lsl.w	r2, r0, r2
 8002cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	e000e100 	.word	0xe000e100

08002cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	6039      	str	r1, [r7, #0]
 8002cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	db0a      	blt.n	8002d16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	b2da      	uxtb	r2, r3
 8002d04:	490c      	ldr	r1, [pc, #48]	; (8002d38 <__NVIC_SetPriority+0x4c>)
 8002d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0a:	0112      	lsls	r2, r2, #4
 8002d0c:	b2d2      	uxtb	r2, r2
 8002d0e:	440b      	add	r3, r1
 8002d10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d14:	e00a      	b.n	8002d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	b2da      	uxtb	r2, r3
 8002d1a:	4908      	ldr	r1, [pc, #32]	; (8002d3c <__NVIC_SetPriority+0x50>)
 8002d1c:	79fb      	ldrb	r3, [r7, #7]
 8002d1e:	f003 030f 	and.w	r3, r3, #15
 8002d22:	3b04      	subs	r3, #4
 8002d24:	0112      	lsls	r2, r2, #4
 8002d26:	b2d2      	uxtb	r2, r2
 8002d28:	440b      	add	r3, r1
 8002d2a:	761a      	strb	r2, [r3, #24]
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	e000e100 	.word	0xe000e100
 8002d3c:	e000ed00 	.word	0xe000ed00

08002d40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b089      	sub	sp, #36	; 0x24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	f1c3 0307 	rsb	r3, r3, #7
 8002d5a:	2b04      	cmp	r3, #4
 8002d5c:	bf28      	it	cs
 8002d5e:	2304      	movcs	r3, #4
 8002d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	3304      	adds	r3, #4
 8002d66:	2b06      	cmp	r3, #6
 8002d68:	d902      	bls.n	8002d70 <NVIC_EncodePriority+0x30>
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	3b03      	subs	r3, #3
 8002d6e:	e000      	b.n	8002d72 <NVIC_EncodePriority+0x32>
 8002d70:	2300      	movs	r3, #0
 8002d72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d74:	f04f 32ff 	mov.w	r2, #4294967295
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	43da      	mvns	r2, r3
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	401a      	ands	r2, r3
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d88:	f04f 31ff 	mov.w	r1, #4294967295
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d92:	43d9      	mvns	r1, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d98:	4313      	orrs	r3, r2
         );
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3724      	adds	r7, #36	; 0x24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
	...

08002da8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3b01      	subs	r3, #1
 8002db4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002db8:	d301      	bcc.n	8002dbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e00f      	b.n	8002dde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dbe:	4a0a      	ldr	r2, [pc, #40]	; (8002de8 <SysTick_Config+0x40>)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dc6:	210f      	movs	r1, #15
 8002dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dcc:	f7ff ff8e 	bl	8002cec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dd0:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <SysTick_Config+0x40>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dd6:	4b04      	ldr	r3, [pc, #16]	; (8002de8 <SysTick_Config+0x40>)
 8002dd8:	2207      	movs	r2, #7
 8002dda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	e000e010 	.word	0xe000e010

08002dec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7ff ff29 	bl	8002c4c <__NVIC_SetPriorityGrouping>
}
 8002dfa:	bf00      	nop
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b086      	sub	sp, #24
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	4603      	mov	r3, r0
 8002e0a:	60b9      	str	r1, [r7, #8]
 8002e0c:	607a      	str	r2, [r7, #4]
 8002e0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e14:	f7ff ff3e 	bl	8002c94 <__NVIC_GetPriorityGrouping>
 8002e18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	68b9      	ldr	r1, [r7, #8]
 8002e1e:	6978      	ldr	r0, [r7, #20]
 8002e20:	f7ff ff8e 	bl	8002d40 <NVIC_EncodePriority>
 8002e24:	4602      	mov	r2, r0
 8002e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff ff5d 	bl	8002cec <__NVIC_SetPriority>
}
 8002e32:	bf00      	nop
 8002e34:	3718      	adds	r7, #24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b082      	sub	sp, #8
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	4603      	mov	r3, r0
 8002e42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff ff31 	bl	8002cb0 <__NVIC_EnableIRQ>
}
 8002e4e:	bf00      	nop
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b082      	sub	sp, #8
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7ff ffa2 	bl	8002da8 <SysTick_Config>
 8002e64:	4603      	mov	r3, r0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b087      	sub	sp, #28
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e7e:	e154      	b.n	800312a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	2101      	movs	r1, #1
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 8146 	beq.w	8003124 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f003 0303 	and.w	r3, r3, #3
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d005      	beq.n	8002eb0 <HAL_GPIO_Init+0x40>
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f003 0303 	and.w	r3, r3, #3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d130      	bne.n	8002f12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	2203      	movs	r2, #3
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	68da      	ldr	r2, [r3, #12]
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	091b      	lsrs	r3, r3, #4
 8002efc:	f003 0201 	and.w	r2, r3, #1
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	2b03      	cmp	r3, #3
 8002f1c:	d017      	beq.n	8002f4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	2203      	movs	r2, #3
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	4013      	ands	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	689a      	ldr	r2, [r3, #8]
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f003 0303 	and.w	r3, r3, #3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d123      	bne.n	8002fa2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	08da      	lsrs	r2, r3, #3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	3208      	adds	r2, #8
 8002f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	220f      	movs	r2, #15
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	43db      	mvns	r3, r3
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	691a      	ldr	r2, [r3, #16]
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	08da      	lsrs	r2, r3, #3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3208      	adds	r2, #8
 8002f9c:	6939      	ldr	r1, [r7, #16]
 8002f9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	2203      	movs	r2, #3
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f003 0203 	and.w	r2, r3, #3
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 80a0 	beq.w	8003124 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fe4:	4b58      	ldr	r3, [pc, #352]	; (8003148 <HAL_GPIO_Init+0x2d8>)
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	4a57      	ldr	r2, [pc, #348]	; (8003148 <HAL_GPIO_Init+0x2d8>)
 8002fea:	f043 0301 	orr.w	r3, r3, #1
 8002fee:	6193      	str	r3, [r2, #24]
 8002ff0:	4b55      	ldr	r3, [pc, #340]	; (8003148 <HAL_GPIO_Init+0x2d8>)
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	60bb      	str	r3, [r7, #8]
 8002ffa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ffc:	4a53      	ldr	r2, [pc, #332]	; (800314c <HAL_GPIO_Init+0x2dc>)
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	089b      	lsrs	r3, r3, #2
 8003002:	3302      	adds	r3, #2
 8003004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003008:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f003 0303 	and.w	r3, r3, #3
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	220f      	movs	r2, #15
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	43db      	mvns	r3, r3
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	4013      	ands	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003026:	d019      	beq.n	800305c <HAL_GPIO_Init+0x1ec>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a49      	ldr	r2, [pc, #292]	; (8003150 <HAL_GPIO_Init+0x2e0>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d013      	beq.n	8003058 <HAL_GPIO_Init+0x1e8>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a48      	ldr	r2, [pc, #288]	; (8003154 <HAL_GPIO_Init+0x2e4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d00d      	beq.n	8003054 <HAL_GPIO_Init+0x1e4>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a47      	ldr	r2, [pc, #284]	; (8003158 <HAL_GPIO_Init+0x2e8>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d007      	beq.n	8003050 <HAL_GPIO_Init+0x1e0>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a46      	ldr	r2, [pc, #280]	; (800315c <HAL_GPIO_Init+0x2ec>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d101      	bne.n	800304c <HAL_GPIO_Init+0x1dc>
 8003048:	2304      	movs	r3, #4
 800304a:	e008      	b.n	800305e <HAL_GPIO_Init+0x1ee>
 800304c:	2305      	movs	r3, #5
 800304e:	e006      	b.n	800305e <HAL_GPIO_Init+0x1ee>
 8003050:	2303      	movs	r3, #3
 8003052:	e004      	b.n	800305e <HAL_GPIO_Init+0x1ee>
 8003054:	2302      	movs	r3, #2
 8003056:	e002      	b.n	800305e <HAL_GPIO_Init+0x1ee>
 8003058:	2301      	movs	r3, #1
 800305a:	e000      	b.n	800305e <HAL_GPIO_Init+0x1ee>
 800305c:	2300      	movs	r3, #0
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	f002 0203 	and.w	r2, r2, #3
 8003064:	0092      	lsls	r2, r2, #2
 8003066:	4093      	lsls	r3, r2
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	4313      	orrs	r3, r2
 800306c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800306e:	4937      	ldr	r1, [pc, #220]	; (800314c <HAL_GPIO_Init+0x2dc>)
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	089b      	lsrs	r3, r3, #2
 8003074:	3302      	adds	r3, #2
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800307c:	4b38      	ldr	r3, [pc, #224]	; (8003160 <HAL_GPIO_Init+0x2f0>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	43db      	mvns	r3, r3
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	4013      	ands	r3, r2
 800308a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d003      	beq.n	80030a0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	4313      	orrs	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80030a0:	4a2f      	ldr	r2, [pc, #188]	; (8003160 <HAL_GPIO_Init+0x2f0>)
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80030a6:	4b2e      	ldr	r3, [pc, #184]	; (8003160 <HAL_GPIO_Init+0x2f0>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	43db      	mvns	r3, r3
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	4013      	ands	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80030ca:	4a25      	ldr	r2, [pc, #148]	; (8003160 <HAL_GPIO_Init+0x2f0>)
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030d0:	4b23      	ldr	r3, [pc, #140]	; (8003160 <HAL_GPIO_Init+0x2f0>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	43db      	mvns	r3, r3
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	4013      	ands	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d003      	beq.n	80030f4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80030f4:	4a1a      	ldr	r2, [pc, #104]	; (8003160 <HAL_GPIO_Init+0x2f0>)
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030fa:	4b19      	ldr	r3, [pc, #100]	; (8003160 <HAL_GPIO_Init+0x2f0>)
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	43db      	mvns	r3, r3
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	4013      	ands	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4313      	orrs	r3, r2
 800311c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800311e:	4a10      	ldr	r2, [pc, #64]	; (8003160 <HAL_GPIO_Init+0x2f0>)
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	3301      	adds	r3, #1
 8003128:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	fa22 f303 	lsr.w	r3, r2, r3
 8003134:	2b00      	cmp	r3, #0
 8003136:	f47f aea3 	bne.w	8002e80 <HAL_GPIO_Init+0x10>
  }
}
 800313a:	bf00      	nop
 800313c:	bf00      	nop
 800313e:	371c      	adds	r7, #28
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	40021000 	.word	0x40021000
 800314c:	40010000 	.word	0x40010000
 8003150:	48000400 	.word	0x48000400
 8003154:	48000800 	.word	0x48000800
 8003158:	48000c00 	.word	0x48000c00
 800315c:	48001000 	.word	0x48001000
 8003160:	40010400 	.word	0x40010400

08003164 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	460b      	mov	r3, r1
 800316e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691a      	ldr	r2, [r3, #16]
 8003174:	887b      	ldrh	r3, [r7, #2]
 8003176:	4013      	ands	r3, r2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d002      	beq.n	8003182 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800317c:	2301      	movs	r3, #1
 800317e:	73fb      	strb	r3, [r7, #15]
 8003180:	e001      	b.n	8003186 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003182:	2300      	movs	r3, #0
 8003184:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003186:	7bfb      	ldrb	r3, [r7, #15]
}
 8003188:	4618      	mov	r0, r3
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	460b      	mov	r3, r1
 800319e:	807b      	strh	r3, [r7, #2]
 80031a0:	4613      	mov	r3, r2
 80031a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031a4:	787b      	ldrb	r3, [r7, #1]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031aa:	887a      	ldrh	r2, [r7, #2]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031b0:	e002      	b.n	80031b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031b2:	887a      	ldrh	r2, [r7, #2]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	4603      	mov	r3, r0
 80031cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80031ce:	4b08      	ldr	r3, [pc, #32]	; (80031f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031d0:	695a      	ldr	r2, [r3, #20]
 80031d2:	88fb      	ldrh	r3, [r7, #6]
 80031d4:	4013      	ands	r3, r2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d006      	beq.n	80031e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031da:	4a05      	ldr	r2, [pc, #20]	; (80031f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031dc:	88fb      	ldrh	r3, [r7, #6]
 80031de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031e0:	88fb      	ldrh	r3, [r7, #6]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 f806 	bl	80031f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80031e8:	bf00      	nop
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40010400 	.word	0x40010400

080031f4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	4603      	mov	r3, r0
 80031fc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b082      	sub	sp, #8
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e081      	b.n	8003320 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	d106      	bne.n	8003236 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f7fd ff73 	bl	800111c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2224      	movs	r2, #36	; 0x24
 800323a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 0201 	bic.w	r2, r2, #1
 800324c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800325a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689a      	ldr	r2, [r3, #8]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800326a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d107      	bne.n	8003284 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003280:	609a      	str	r2, [r3, #8]
 8003282:	e006      	b.n	8003292 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003290:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	2b02      	cmp	r3, #2
 8003298:	d104      	bne.n	80032a4 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032a2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6812      	ldr	r2, [r2, #0]
 80032ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032b6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68da      	ldr	r2, [r3, #12]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032c6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	691a      	ldr	r2, [r3, #16]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	69d9      	ldr	r1, [r3, #28]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1a      	ldr	r2, [r3, #32]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f042 0201 	orr.w	r2, r2, #1
 8003300:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2220      	movs	r2, #32
 800330c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b20      	cmp	r3, #32
 800333c:	d138      	bne.n	80033b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003344:	2b01      	cmp	r3, #1
 8003346:	d101      	bne.n	800334c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003348:	2302      	movs	r3, #2
 800334a:	e032      	b.n	80033b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2224      	movs	r2, #36	; 0x24
 8003358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 0201 	bic.w	r2, r2, #1
 800336a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800337a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6819      	ldr	r1, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	683a      	ldr	r2, [r7, #0]
 8003388:	430a      	orrs	r2, r1
 800338a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f042 0201 	orr.w	r2, r2, #1
 800339a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2220      	movs	r2, #32
 80033a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033ac:	2300      	movs	r3, #0
 80033ae:	e000      	b.n	80033b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033b0:	2302      	movs	r3, #2
  }
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033be:	b480      	push	{r7}
 80033c0:	b085      	sub	sp, #20
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
 80033c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b20      	cmp	r3, #32
 80033d2:	d139      	bne.n	8003448 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d101      	bne.n	80033e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033de:	2302      	movs	r3, #2
 80033e0:	e033      	b.n	800344a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2224      	movs	r2, #36	; 0x24
 80033ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 0201 	bic.w	r2, r2, #1
 8003400:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003410:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	021b      	lsls	r3, r3, #8
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	4313      	orrs	r3, r2
 800341a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0201 	orr.w	r2, r2, #1
 8003432:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2220      	movs	r2, #32
 8003438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003444:	2300      	movs	r3, #0
 8003446:	e000      	b.n	800344a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003448:	2302      	movs	r3, #2
  }
}
 800344a:	4618      	mov	r0, r3
 800344c:	3714      	adds	r7, #20
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003456:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003458:	b08b      	sub	sp, #44	; 0x2c
 800345a:	af06      	add	r7, sp, #24
 800345c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e0d0      	b.n	800360a <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	d106      	bne.n	8003482 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f7fd fed3 	bl	8001228 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2203      	movs	r2, #3
 8003486:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f001 fc09 	bl	8004ca6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003494:	2300      	movs	r3, #0
 8003496:	73fb      	strb	r3, [r7, #15]
 8003498:	e04c      	b.n	8003534 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800349a:	7bfb      	ldrb	r3, [r7, #15]
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	1c5a      	adds	r2, r3, #1
 80034a0:	4613      	mov	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	440b      	add	r3, r1
 80034aa:	3301      	adds	r3, #1
 80034ac:	2201      	movs	r2, #1
 80034ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034b0:	7bfb      	ldrb	r3, [r7, #15]
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	1c5a      	adds	r2, r3, #1
 80034b6:	4613      	mov	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	440b      	add	r3, r1
 80034c0:	7bfa      	ldrb	r2, [r7, #15]
 80034c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80034c4:	7bfa      	ldrb	r2, [r7, #15]
 80034c6:	7bfb      	ldrb	r3, [r7, #15]
 80034c8:	b298      	uxth	r0, r3
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	440b      	add	r3, r1
 80034d6:	3336      	adds	r3, #54	; 0x36
 80034d8:	4602      	mov	r2, r0
 80034da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	1c5a      	adds	r2, r3, #1
 80034e2:	4613      	mov	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4413      	add	r3, r2
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	440b      	add	r3, r1
 80034ec:	3303      	adds	r3, #3
 80034ee:	2200      	movs	r2, #0
 80034f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80034f2:	7bfa      	ldrb	r2, [r7, #15]
 80034f4:	6879      	ldr	r1, [r7, #4]
 80034f6:	4613      	mov	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	440b      	add	r3, r1
 8003500:	3338      	adds	r3, #56	; 0x38
 8003502:	2200      	movs	r2, #0
 8003504:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003506:	7bfa      	ldrb	r2, [r7, #15]
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	4613      	mov	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4413      	add	r3, r2
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	440b      	add	r3, r1
 8003514:	333c      	adds	r3, #60	; 0x3c
 8003516:	2200      	movs	r2, #0
 8003518:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800351a:	7bfa      	ldrb	r2, [r7, #15]
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	4613      	mov	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	440b      	add	r3, r1
 8003528:	3340      	adds	r3, #64	; 0x40
 800352a:	2200      	movs	r2, #0
 800352c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800352e:	7bfb      	ldrb	r3, [r7, #15]
 8003530:	3301      	adds	r3, #1
 8003532:	73fb      	strb	r3, [r7, #15]
 8003534:	7bfa      	ldrb	r2, [r7, #15]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	429a      	cmp	r2, r3
 800353c:	d3ad      	bcc.n	800349a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800353e:	2300      	movs	r3, #0
 8003540:	73fb      	strb	r3, [r7, #15]
 8003542:	e044      	b.n	80035ce <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003544:	7bfa      	ldrb	r2, [r7, #15]
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	4613      	mov	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	440b      	add	r3, r1
 8003552:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003556:	2200      	movs	r2, #0
 8003558:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800355a:	7bfa      	ldrb	r2, [r7, #15]
 800355c:	6879      	ldr	r1, [r7, #4]
 800355e:	4613      	mov	r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4413      	add	r3, r2
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	440b      	add	r3, r1
 8003568:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800356c:	7bfa      	ldrb	r2, [r7, #15]
 800356e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003570:	7bfa      	ldrb	r2, [r7, #15]
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	4613      	mov	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4413      	add	r3, r2
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	440b      	add	r3, r1
 800357e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003582:	2200      	movs	r2, #0
 8003584:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003586:	7bfa      	ldrb	r2, [r7, #15]
 8003588:	6879      	ldr	r1, [r7, #4]
 800358a:	4613      	mov	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4413      	add	r3, r2
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	440b      	add	r3, r1
 8003594:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800359c:	7bfa      	ldrb	r2, [r7, #15]
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	4613      	mov	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4413      	add	r3, r2
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	440b      	add	r3, r1
 80035aa:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80035ae:	2200      	movs	r2, #0
 80035b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035b2:	7bfa      	ldrb	r2, [r7, #15]
 80035b4:	6879      	ldr	r1, [r7, #4]
 80035b6:	4613      	mov	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4413      	add	r3, r2
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	440b      	add	r3, r1
 80035c0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
 80035ca:	3301      	adds	r3, #1
 80035cc:	73fb      	strb	r3, [r7, #15]
 80035ce:	7bfa      	ldrb	r2, [r7, #15]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d3b5      	bcc.n	8003544 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	603b      	str	r3, [r7, #0]
 80035de:	687e      	ldr	r6, [r7, #4]
 80035e0:	466d      	mov	r5, sp
 80035e2:	f106 0410 	add.w	r4, r6, #16
 80035e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035ea:	6823      	ldr	r3, [r4, #0]
 80035ec:	602b      	str	r3, [r5, #0]
 80035ee:	1d33      	adds	r3, r6, #4
 80035f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035f2:	6838      	ldr	r0, [r7, #0]
 80035f4:	f001 fb72 	bl	8004cdc <USB_DevInit>

  hpcd->USB_Address = 0U;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003614 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800361a:	af00      	add	r7, sp, #0
 800361c:	1d3b      	adds	r3, r7, #4
 800361e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003620:	1d3b      	adds	r3, r7, #4
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d102      	bne.n	800362e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	f000 bef4 	b.w	8004416 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800362e:	1d3b      	adds	r3, r7, #4
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 816a 	beq.w	8003912 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800363e:	4bb3      	ldr	r3, [pc, #716]	; (800390c <HAL_RCC_OscConfig+0x2f8>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f003 030c 	and.w	r3, r3, #12
 8003646:	2b04      	cmp	r3, #4
 8003648:	d00c      	beq.n	8003664 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800364a:	4bb0      	ldr	r3, [pc, #704]	; (800390c <HAL_RCC_OscConfig+0x2f8>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f003 030c 	and.w	r3, r3, #12
 8003652:	2b08      	cmp	r3, #8
 8003654:	d159      	bne.n	800370a <HAL_RCC_OscConfig+0xf6>
 8003656:	4bad      	ldr	r3, [pc, #692]	; (800390c <HAL_RCC_OscConfig+0x2f8>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800365e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003662:	d152      	bne.n	800370a <HAL_RCC_OscConfig+0xf6>
 8003664:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003668:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003670:	fa93 f3a3 	rbit	r3, r3
 8003674:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003678:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800367c:	fab3 f383 	clz	r3, r3
 8003680:	b2db      	uxtb	r3, r3
 8003682:	095b      	lsrs	r3, r3, #5
 8003684:	b2db      	uxtb	r3, r3
 8003686:	f043 0301 	orr.w	r3, r3, #1
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b01      	cmp	r3, #1
 800368e:	d102      	bne.n	8003696 <HAL_RCC_OscConfig+0x82>
 8003690:	4b9e      	ldr	r3, [pc, #632]	; (800390c <HAL_RCC_OscConfig+0x2f8>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	e015      	b.n	80036c2 <HAL_RCC_OscConfig+0xae>
 8003696:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800369a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80036a2:	fa93 f3a3 	rbit	r3, r3
 80036a6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80036aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036ae:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80036b2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80036b6:	fa93 f3a3 	rbit	r3, r3
 80036ba:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80036be:	4b93      	ldr	r3, [pc, #588]	; (800390c <HAL_RCC_OscConfig+0x2f8>)
 80036c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036c6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80036ca:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80036ce:	fa92 f2a2 	rbit	r2, r2
 80036d2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80036d6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80036da:	fab2 f282 	clz	r2, r2
 80036de:	b2d2      	uxtb	r2, r2
 80036e0:	f042 0220 	orr.w	r2, r2, #32
 80036e4:	b2d2      	uxtb	r2, r2
 80036e6:	f002 021f 	and.w	r2, r2, #31
 80036ea:	2101      	movs	r1, #1
 80036ec:	fa01 f202 	lsl.w	r2, r1, r2
 80036f0:	4013      	ands	r3, r2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 810c 	beq.w	8003910 <HAL_RCC_OscConfig+0x2fc>
 80036f8:	1d3b      	adds	r3, r7, #4
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f040 8106 	bne.w	8003910 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	f000 be86 	b.w	8004416 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800370a:	1d3b      	adds	r3, r7, #4
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003714:	d106      	bne.n	8003724 <HAL_RCC_OscConfig+0x110>
 8003716:	4b7d      	ldr	r3, [pc, #500]	; (800390c <HAL_RCC_OscConfig+0x2f8>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a7c      	ldr	r2, [pc, #496]	; (800390c <HAL_RCC_OscConfig+0x2f8>)
 800371c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003720:	6013      	str	r3, [r2, #0]
 8003722:	e030      	b.n	8003786 <HAL_RCC_OscConfig+0x172>
 8003724:	1d3b      	adds	r3, r7, #4
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10c      	bne.n	8003748 <HAL_RCC_OscConfig+0x134>
 800372e:	4b77      	ldr	r3, [pc, #476]	; (800390c <HAL_RCC_OscConfig+0x2f8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a76      	ldr	r2, [pc, #472]	; (800390c <HAL_RCC_OscConfig+0x2f8>)
 8003734:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003738:	6013      	str	r3, [r2, #0]
 800373a:	4b74      	ldr	r3, [pc, #464]	; (800390c <HAL_RCC_OscConfig+0x2f8>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a73      	ldr	r2, [pc, #460]	; (800390c <HAL_RCC_OscConfig+0x2f8>)
 8003740:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003744:	6013      	str	r3, [r2, #0]
 8003746:	e01e      	b.n	8003786 <HAL_RCC_OscConfig+0x172>
 8003748:	1d3b      	adds	r3, r7, #4
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003752:	d10c      	bne.n	800376e <HAL_RCC_OscConfig+0x15a>
 8003754:	4b6d      	ldr	r3, [pc, #436]	; (800390c <HAL_RCC_OscConfig+0x2f8>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a6c      	ldr	r2, [pc, #432]	; (800390c <HAL_RCC_OscConfig+0x2f8>)
 800375a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800375e:	6013      	str	r3, [r2, #0]
 8003760:	4b6a      	ldr	r3, [pc, #424]	; (800390c <HAL_RCC_OscConfig+0x2f8>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a69      	ldr	r2, [pc, #420]	; (800390c <HAL_RCC_OscConfig+0x2f8>)
 8003766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800376a:	6013      	str	r3, [r2, #0]
 800376c:	e00b      	b.n	8003786 <HAL_RCC_OscConfig+0x172>
 800376e:	4b67      	ldr	r3, [pc, #412]	; (800390c <HAL_RCC_OscConfig+0x2f8>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a66      	ldr	r2, [pc, #408]	; (800390c <HAL_RCC_OscConfig+0x2f8>)
 8003774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003778:	6013      	str	r3, [r2, #0]
 800377a:	4b64      	ldr	r3, [pc, #400]	; (800390c <HAL_RCC_OscConfig+0x2f8>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a63      	ldr	r2, [pc, #396]	; (800390c <HAL_RCC_OscConfig+0x2f8>)
 8003780:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003784:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003786:	4b61      	ldr	r3, [pc, #388]	; (800390c <HAL_RCC_OscConfig+0x2f8>)
 8003788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378a:	f023 020f 	bic.w	r2, r3, #15
 800378e:	1d3b      	adds	r3, r7, #4
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	495d      	ldr	r1, [pc, #372]	; (800390c <HAL_RCC_OscConfig+0x2f8>)
 8003796:	4313      	orrs	r3, r2
 8003798:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800379a:	1d3b      	adds	r3, r7, #4
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d059      	beq.n	8003858 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a4:	f7fd fefa 	bl	800159c <HAL_GetTick>
 80037a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ac:	e00a      	b.n	80037c4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037ae:	f7fd fef5 	bl	800159c <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b64      	cmp	r3, #100	; 0x64
 80037bc:	d902      	bls.n	80037c4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	f000 be29 	b.w	8004416 <HAL_RCC_OscConfig+0xe02>
 80037c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037c8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037cc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80037d0:	fa93 f3a3 	rbit	r3, r3
 80037d4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80037d8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037dc:	fab3 f383 	clz	r3, r3
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	095b      	lsrs	r3, r3, #5
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	f043 0301 	orr.w	r3, r3, #1
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d102      	bne.n	80037f6 <HAL_RCC_OscConfig+0x1e2>
 80037f0:	4b46      	ldr	r3, [pc, #280]	; (800390c <HAL_RCC_OscConfig+0x2f8>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	e015      	b.n	8003822 <HAL_RCC_OscConfig+0x20e>
 80037f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037fa:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fe:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003802:	fa93 f3a3 	rbit	r3, r3
 8003806:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800380a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800380e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003812:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003816:	fa93 f3a3 	rbit	r3, r3
 800381a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800381e:	4b3b      	ldr	r3, [pc, #236]	; (800390c <HAL_RCC_OscConfig+0x2f8>)
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003826:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800382a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800382e:	fa92 f2a2 	rbit	r2, r2
 8003832:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003836:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800383a:	fab2 f282 	clz	r2, r2
 800383e:	b2d2      	uxtb	r2, r2
 8003840:	f042 0220 	orr.w	r2, r2, #32
 8003844:	b2d2      	uxtb	r2, r2
 8003846:	f002 021f 	and.w	r2, r2, #31
 800384a:	2101      	movs	r1, #1
 800384c:	fa01 f202 	lsl.w	r2, r1, r2
 8003850:	4013      	ands	r3, r2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0ab      	beq.n	80037ae <HAL_RCC_OscConfig+0x19a>
 8003856:	e05c      	b.n	8003912 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003858:	f7fd fea0 	bl	800159c <HAL_GetTick>
 800385c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003860:	e00a      	b.n	8003878 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003862:	f7fd fe9b 	bl	800159c <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b64      	cmp	r3, #100	; 0x64
 8003870:	d902      	bls.n	8003878 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	f000 bdcf 	b.w	8004416 <HAL_RCC_OscConfig+0xe02>
 8003878:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800387c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003880:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003884:	fa93 f3a3 	rbit	r3, r3
 8003888:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800388c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003890:	fab3 f383 	clz	r3, r3
 8003894:	b2db      	uxtb	r3, r3
 8003896:	095b      	lsrs	r3, r3, #5
 8003898:	b2db      	uxtb	r3, r3
 800389a:	f043 0301 	orr.w	r3, r3, #1
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d102      	bne.n	80038aa <HAL_RCC_OscConfig+0x296>
 80038a4:	4b19      	ldr	r3, [pc, #100]	; (800390c <HAL_RCC_OscConfig+0x2f8>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	e015      	b.n	80038d6 <HAL_RCC_OscConfig+0x2c2>
 80038aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038ae:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80038b6:	fa93 f3a3 	rbit	r3, r3
 80038ba:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80038be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038c2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80038c6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80038ca:	fa93 f3a3 	rbit	r3, r3
 80038ce:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80038d2:	4b0e      	ldr	r3, [pc, #56]	; (800390c <HAL_RCC_OscConfig+0x2f8>)
 80038d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80038da:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80038de:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80038e2:	fa92 f2a2 	rbit	r2, r2
 80038e6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80038ea:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80038ee:	fab2 f282 	clz	r2, r2
 80038f2:	b2d2      	uxtb	r2, r2
 80038f4:	f042 0220 	orr.w	r2, r2, #32
 80038f8:	b2d2      	uxtb	r2, r2
 80038fa:	f002 021f 	and.w	r2, r2, #31
 80038fe:	2101      	movs	r1, #1
 8003900:	fa01 f202 	lsl.w	r2, r1, r2
 8003904:	4013      	ands	r3, r2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1ab      	bne.n	8003862 <HAL_RCC_OscConfig+0x24e>
 800390a:	e002      	b.n	8003912 <HAL_RCC_OscConfig+0x2fe>
 800390c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003912:	1d3b      	adds	r3, r7, #4
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 816f 	beq.w	8003c00 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003922:	4bd0      	ldr	r3, [pc, #832]	; (8003c64 <HAL_RCC_OscConfig+0x650>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f003 030c 	and.w	r3, r3, #12
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00b      	beq.n	8003946 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800392e:	4bcd      	ldr	r3, [pc, #820]	; (8003c64 <HAL_RCC_OscConfig+0x650>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f003 030c 	and.w	r3, r3, #12
 8003936:	2b08      	cmp	r3, #8
 8003938:	d16c      	bne.n	8003a14 <HAL_RCC_OscConfig+0x400>
 800393a:	4bca      	ldr	r3, [pc, #808]	; (8003c64 <HAL_RCC_OscConfig+0x650>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d166      	bne.n	8003a14 <HAL_RCC_OscConfig+0x400>
 8003946:	2302      	movs	r3, #2
 8003948:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003950:	fa93 f3a3 	rbit	r3, r3
 8003954:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003958:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800395c:	fab3 f383 	clz	r3, r3
 8003960:	b2db      	uxtb	r3, r3
 8003962:	095b      	lsrs	r3, r3, #5
 8003964:	b2db      	uxtb	r3, r3
 8003966:	f043 0301 	orr.w	r3, r3, #1
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b01      	cmp	r3, #1
 800396e:	d102      	bne.n	8003976 <HAL_RCC_OscConfig+0x362>
 8003970:	4bbc      	ldr	r3, [pc, #752]	; (8003c64 <HAL_RCC_OscConfig+0x650>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	e013      	b.n	800399e <HAL_RCC_OscConfig+0x38a>
 8003976:	2302      	movs	r3, #2
 8003978:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003980:	fa93 f3a3 	rbit	r3, r3
 8003984:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003988:	2302      	movs	r3, #2
 800398a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800398e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003992:	fa93 f3a3 	rbit	r3, r3
 8003996:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800399a:	4bb2      	ldr	r3, [pc, #712]	; (8003c64 <HAL_RCC_OscConfig+0x650>)
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399e:	2202      	movs	r2, #2
 80039a0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80039a4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80039a8:	fa92 f2a2 	rbit	r2, r2
 80039ac:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80039b0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80039b4:	fab2 f282 	clz	r2, r2
 80039b8:	b2d2      	uxtb	r2, r2
 80039ba:	f042 0220 	orr.w	r2, r2, #32
 80039be:	b2d2      	uxtb	r2, r2
 80039c0:	f002 021f 	and.w	r2, r2, #31
 80039c4:	2101      	movs	r1, #1
 80039c6:	fa01 f202 	lsl.w	r2, r1, r2
 80039ca:	4013      	ands	r3, r2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d007      	beq.n	80039e0 <HAL_RCC_OscConfig+0x3cc>
 80039d0:	1d3b      	adds	r3, r7, #4
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d002      	beq.n	80039e0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	f000 bd1b 	b.w	8004416 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039e0:	4ba0      	ldr	r3, [pc, #640]	; (8003c64 <HAL_RCC_OscConfig+0x650>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039e8:	1d3b      	adds	r3, r7, #4
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	21f8      	movs	r1, #248	; 0xf8
 80039f0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80039f8:	fa91 f1a1 	rbit	r1, r1
 80039fc:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003a00:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003a04:	fab1 f181 	clz	r1, r1
 8003a08:	b2c9      	uxtb	r1, r1
 8003a0a:	408b      	lsls	r3, r1
 8003a0c:	4995      	ldr	r1, [pc, #596]	; (8003c64 <HAL_RCC_OscConfig+0x650>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a12:	e0f5      	b.n	8003c00 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a14:	1d3b      	adds	r3, r7, #4
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 8085 	beq.w	8003b2a <HAL_RCC_OscConfig+0x516>
 8003a20:	2301      	movs	r3, #1
 8003a22:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a26:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003a2a:	fa93 f3a3 	rbit	r3, r3
 8003a2e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003a32:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a36:	fab3 f383 	clz	r3, r3
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	461a      	mov	r2, r3
 8003a48:	2301      	movs	r3, #1
 8003a4a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4c:	f7fd fda6 	bl	800159c <HAL_GetTick>
 8003a50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a54:	e00a      	b.n	8003a6c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a56:	f7fd fda1 	bl	800159c <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d902      	bls.n	8003a6c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	f000 bcd5 	b.w	8004416 <HAL_RCC_OscConfig+0xe02>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a72:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003a76:	fa93 f3a3 	rbit	r3, r3
 8003a7a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003a7e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a82:	fab3 f383 	clz	r3, r3
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	095b      	lsrs	r3, r3, #5
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	f043 0301 	orr.w	r3, r3, #1
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d102      	bne.n	8003a9c <HAL_RCC_OscConfig+0x488>
 8003a96:	4b73      	ldr	r3, [pc, #460]	; (8003c64 <HAL_RCC_OscConfig+0x650>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	e013      	b.n	8003ac4 <HAL_RCC_OscConfig+0x4b0>
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003aa6:	fa93 f3a3 	rbit	r3, r3
 8003aaa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003aae:	2302      	movs	r3, #2
 8003ab0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003ab4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003ab8:	fa93 f3a3 	rbit	r3, r3
 8003abc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003ac0:	4b68      	ldr	r3, [pc, #416]	; (8003c64 <HAL_RCC_OscConfig+0x650>)
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003aca:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003ace:	fa92 f2a2 	rbit	r2, r2
 8003ad2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003ad6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003ada:	fab2 f282 	clz	r2, r2
 8003ade:	b2d2      	uxtb	r2, r2
 8003ae0:	f042 0220 	orr.w	r2, r2, #32
 8003ae4:	b2d2      	uxtb	r2, r2
 8003ae6:	f002 021f 	and.w	r2, r2, #31
 8003aea:	2101      	movs	r1, #1
 8003aec:	fa01 f202 	lsl.w	r2, r1, r2
 8003af0:	4013      	ands	r3, r2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0af      	beq.n	8003a56 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af6:	4b5b      	ldr	r3, [pc, #364]	; (8003c64 <HAL_RCC_OscConfig+0x650>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003afe:	1d3b      	adds	r3, r7, #4
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	21f8      	movs	r1, #248	; 0xf8
 8003b06:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003b0e:	fa91 f1a1 	rbit	r1, r1
 8003b12:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003b16:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003b1a:	fab1 f181 	clz	r1, r1
 8003b1e:	b2c9      	uxtb	r1, r1
 8003b20:	408b      	lsls	r3, r1
 8003b22:	4950      	ldr	r1, [pc, #320]	; (8003c64 <HAL_RCC_OscConfig+0x650>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	600b      	str	r3, [r1, #0]
 8003b28:	e06a      	b.n	8003c00 <HAL_RCC_OscConfig+0x5ec>
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b30:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003b34:	fa93 f3a3 	rbit	r3, r3
 8003b38:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003b3c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b40:	fab3 f383 	clz	r3, r3
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b4a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	461a      	mov	r2, r3
 8003b52:	2300      	movs	r3, #0
 8003b54:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b56:	f7fd fd21 	bl	800159c <HAL_GetTick>
 8003b5a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b5e:	e00a      	b.n	8003b76 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b60:	f7fd fd1c 	bl	800159c <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d902      	bls.n	8003b76 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	f000 bc50 	b.w	8004416 <HAL_RCC_OscConfig+0xe02>
 8003b76:	2302      	movs	r3, #2
 8003b78:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003b80:	fa93 f3a3 	rbit	r3, r3
 8003b84:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003b88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b8c:	fab3 f383 	clz	r3, r3
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	095b      	lsrs	r3, r3, #5
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	f043 0301 	orr.w	r3, r3, #1
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d102      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x592>
 8003ba0:	4b30      	ldr	r3, [pc, #192]	; (8003c64 <HAL_RCC_OscConfig+0x650>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	e013      	b.n	8003bce <HAL_RCC_OscConfig+0x5ba>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003bb0:	fa93 f3a3 	rbit	r3, r3
 8003bb4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003bb8:	2302      	movs	r3, #2
 8003bba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003bbe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003bc2:	fa93 f3a3 	rbit	r3, r3
 8003bc6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003bca:	4b26      	ldr	r3, [pc, #152]	; (8003c64 <HAL_RCC_OscConfig+0x650>)
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bce:	2202      	movs	r2, #2
 8003bd0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003bd4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003bd8:	fa92 f2a2 	rbit	r2, r2
 8003bdc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003be0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003be4:	fab2 f282 	clz	r2, r2
 8003be8:	b2d2      	uxtb	r2, r2
 8003bea:	f042 0220 	orr.w	r2, r2, #32
 8003bee:	b2d2      	uxtb	r2, r2
 8003bf0:	f002 021f 	and.w	r2, r2, #31
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	fa01 f202 	lsl.w	r2, r1, r2
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1af      	bne.n	8003b60 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c00:	1d3b      	adds	r3, r7, #4
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0308 	and.w	r3, r3, #8
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f000 80da 	beq.w	8003dc4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c10:	1d3b      	adds	r3, r7, #4
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d069      	beq.n	8003cee <HAL_RCC_OscConfig+0x6da>
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c20:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003c24:	fa93 f3a3 	rbit	r3, r3
 8003c28:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003c2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c30:	fab3 f383 	clz	r3, r3
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	461a      	mov	r2, r3
 8003c38:	4b0b      	ldr	r3, [pc, #44]	; (8003c68 <HAL_RCC_OscConfig+0x654>)
 8003c3a:	4413      	add	r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	461a      	mov	r2, r3
 8003c40:	2301      	movs	r3, #1
 8003c42:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c44:	f7fd fcaa 	bl	800159c <HAL_GetTick>
 8003c48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c4c:	e00e      	b.n	8003c6c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c4e:	f7fd fca5 	bl	800159c <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d906      	bls.n	8003c6c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e3d9      	b.n	8004416 <HAL_RCC_OscConfig+0xe02>
 8003c62:	bf00      	nop
 8003c64:	40021000 	.word	0x40021000
 8003c68:	10908120 	.word	0x10908120
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c72:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003c76:	fa93 f3a3 	rbit	r3, r3
 8003c7a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003c7e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003c82:	2202      	movs	r2, #2
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	fa93 f2a3 	rbit	r2, r3
 8003c90:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003c94:	601a      	str	r2, [r3, #0]
 8003c96:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	fa93 f2a3 	rbit	r2, r3
 8003ca8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003cac:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cae:	4ba5      	ldr	r3, [pc, #660]	; (8003f44 <HAL_RCC_OscConfig+0x930>)
 8003cb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cb2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003cb6:	2102      	movs	r1, #2
 8003cb8:	6019      	str	r1, [r3, #0]
 8003cba:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	fa93 f1a3 	rbit	r1, r3
 8003cc4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003cc8:	6019      	str	r1, [r3, #0]
  return result;
 8003cca:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	fab3 f383 	clz	r3, r3
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	f003 031f 	and.w	r3, r3, #31
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d0b0      	beq.n	8003c4e <HAL_RCC_OscConfig+0x63a>
 8003cec:	e06a      	b.n	8003dc4 <HAL_RCC_OscConfig+0x7b0>
 8003cee:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	fa93 f2a3 	rbit	r2, r3
 8003d00:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003d04:	601a      	str	r2, [r3, #0]
  return result;
 8003d06:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003d0a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d0c:	fab3 f383 	clz	r3, r3
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	461a      	mov	r2, r3
 8003d14:	4b8c      	ldr	r3, [pc, #560]	; (8003f48 <HAL_RCC_OscConfig+0x934>)
 8003d16:	4413      	add	r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d20:	f7fd fc3c 	bl	800159c <HAL_GetTick>
 8003d24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d28:	e009      	b.n	8003d3e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d2a:	f7fd fc37 	bl	800159c <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e36b      	b.n	8004416 <HAL_RCC_OscConfig+0xe02>
 8003d3e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003d42:	2202      	movs	r2, #2
 8003d44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d46:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	fa93 f2a3 	rbit	r2, r3
 8003d50:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	601a      	str	r2, [r3, #0]
 8003d5e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	fa93 f2a3 	rbit	r2, r3
 8003d68:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003d72:	2202      	movs	r2, #2
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	fa93 f2a3 	rbit	r2, r3
 8003d80:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003d84:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d86:	4b6f      	ldr	r3, [pc, #444]	; (8003f44 <HAL_RCC_OscConfig+0x930>)
 8003d88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d8a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003d8e:	2102      	movs	r1, #2
 8003d90:	6019      	str	r1, [r3, #0]
 8003d92:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	fa93 f1a3 	rbit	r1, r3
 8003d9c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003da0:	6019      	str	r1, [r3, #0]
  return result;
 8003da2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	fab3 f383 	clz	r3, r3
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	f003 031f 	and.w	r3, r3, #31
 8003db8:	2101      	movs	r1, #1
 8003dba:	fa01 f303 	lsl.w	r3, r1, r3
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1b2      	bne.n	8003d2a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dc4:	1d3b      	adds	r3, r7, #4
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0304 	and.w	r3, r3, #4
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f000 8158 	beq.w	8004084 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dda:	4b5a      	ldr	r3, [pc, #360]	; (8003f44 <HAL_RCC_OscConfig+0x930>)
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d112      	bne.n	8003e0c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003de6:	4b57      	ldr	r3, [pc, #348]	; (8003f44 <HAL_RCC_OscConfig+0x930>)
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	4a56      	ldr	r2, [pc, #344]	; (8003f44 <HAL_RCC_OscConfig+0x930>)
 8003dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003df0:	61d3      	str	r3, [r2, #28]
 8003df2:	4b54      	ldr	r3, [pc, #336]	; (8003f44 <HAL_RCC_OscConfig+0x930>)
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003dfa:	f107 0308 	add.w	r3, r7, #8
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	f107 0308 	add.w	r3, r7, #8
 8003e04:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003e06:	2301      	movs	r3, #1
 8003e08:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e0c:	4b4f      	ldr	r3, [pc, #316]	; (8003f4c <HAL_RCC_OscConfig+0x938>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d11a      	bne.n	8003e4e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e18:	4b4c      	ldr	r3, [pc, #304]	; (8003f4c <HAL_RCC_OscConfig+0x938>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a4b      	ldr	r2, [pc, #300]	; (8003f4c <HAL_RCC_OscConfig+0x938>)
 8003e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e22:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e24:	f7fd fbba 	bl	800159c <HAL_GetTick>
 8003e28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e2c:	e009      	b.n	8003e42 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e2e:	f7fd fbb5 	bl	800159c <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b64      	cmp	r3, #100	; 0x64
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e2e9      	b.n	8004416 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e42:	4b42      	ldr	r3, [pc, #264]	; (8003f4c <HAL_RCC_OscConfig+0x938>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d0ef      	beq.n	8003e2e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e4e:	1d3b      	adds	r3, r7, #4
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d106      	bne.n	8003e66 <HAL_RCC_OscConfig+0x852>
 8003e58:	4b3a      	ldr	r3, [pc, #232]	; (8003f44 <HAL_RCC_OscConfig+0x930>)
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	4a39      	ldr	r2, [pc, #228]	; (8003f44 <HAL_RCC_OscConfig+0x930>)
 8003e5e:	f043 0301 	orr.w	r3, r3, #1
 8003e62:	6213      	str	r3, [r2, #32]
 8003e64:	e02f      	b.n	8003ec6 <HAL_RCC_OscConfig+0x8b2>
 8003e66:	1d3b      	adds	r3, r7, #4
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10c      	bne.n	8003e8a <HAL_RCC_OscConfig+0x876>
 8003e70:	4b34      	ldr	r3, [pc, #208]	; (8003f44 <HAL_RCC_OscConfig+0x930>)
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	4a33      	ldr	r2, [pc, #204]	; (8003f44 <HAL_RCC_OscConfig+0x930>)
 8003e76:	f023 0301 	bic.w	r3, r3, #1
 8003e7a:	6213      	str	r3, [r2, #32]
 8003e7c:	4b31      	ldr	r3, [pc, #196]	; (8003f44 <HAL_RCC_OscConfig+0x930>)
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	4a30      	ldr	r2, [pc, #192]	; (8003f44 <HAL_RCC_OscConfig+0x930>)
 8003e82:	f023 0304 	bic.w	r3, r3, #4
 8003e86:	6213      	str	r3, [r2, #32]
 8003e88:	e01d      	b.n	8003ec6 <HAL_RCC_OscConfig+0x8b2>
 8003e8a:	1d3b      	adds	r3, r7, #4
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	2b05      	cmp	r3, #5
 8003e92:	d10c      	bne.n	8003eae <HAL_RCC_OscConfig+0x89a>
 8003e94:	4b2b      	ldr	r3, [pc, #172]	; (8003f44 <HAL_RCC_OscConfig+0x930>)
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	4a2a      	ldr	r2, [pc, #168]	; (8003f44 <HAL_RCC_OscConfig+0x930>)
 8003e9a:	f043 0304 	orr.w	r3, r3, #4
 8003e9e:	6213      	str	r3, [r2, #32]
 8003ea0:	4b28      	ldr	r3, [pc, #160]	; (8003f44 <HAL_RCC_OscConfig+0x930>)
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	4a27      	ldr	r2, [pc, #156]	; (8003f44 <HAL_RCC_OscConfig+0x930>)
 8003ea6:	f043 0301 	orr.w	r3, r3, #1
 8003eaa:	6213      	str	r3, [r2, #32]
 8003eac:	e00b      	b.n	8003ec6 <HAL_RCC_OscConfig+0x8b2>
 8003eae:	4b25      	ldr	r3, [pc, #148]	; (8003f44 <HAL_RCC_OscConfig+0x930>)
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	4a24      	ldr	r2, [pc, #144]	; (8003f44 <HAL_RCC_OscConfig+0x930>)
 8003eb4:	f023 0301 	bic.w	r3, r3, #1
 8003eb8:	6213      	str	r3, [r2, #32]
 8003eba:	4b22      	ldr	r3, [pc, #136]	; (8003f44 <HAL_RCC_OscConfig+0x930>)
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	4a21      	ldr	r2, [pc, #132]	; (8003f44 <HAL_RCC_OscConfig+0x930>)
 8003ec0:	f023 0304 	bic.w	r3, r3, #4
 8003ec4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ec6:	1d3b      	adds	r3, r7, #4
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d06b      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ed0:	f7fd fb64 	bl	800159c <HAL_GetTick>
 8003ed4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed8:	e00b      	b.n	8003ef2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eda:	f7fd fb5f 	bl	800159c <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e291      	b.n	8004416 <HAL_RCC_OscConfig+0xe02>
 8003ef2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	fa93 f2a3 	rbit	r2, r3
 8003f04:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003f08:	601a      	str	r2, [r3, #0]
 8003f0a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003f0e:	2202      	movs	r2, #2
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	fa93 f2a3 	rbit	r2, r3
 8003f1c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003f20:	601a      	str	r2, [r3, #0]
  return result;
 8003f22:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003f26:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f28:	fab3 f383 	clz	r3, r3
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	095b      	lsrs	r3, r3, #5
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	f043 0302 	orr.w	r3, r3, #2
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d109      	bne.n	8003f50 <HAL_RCC_OscConfig+0x93c>
 8003f3c:	4b01      	ldr	r3, [pc, #4]	; (8003f44 <HAL_RCC_OscConfig+0x930>)
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	e014      	b.n	8003f6c <HAL_RCC_OscConfig+0x958>
 8003f42:	bf00      	nop
 8003f44:	40021000 	.word	0x40021000
 8003f48:	10908120 	.word	0x10908120
 8003f4c:	40007000 	.word	0x40007000
 8003f50:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003f54:	2202      	movs	r2, #2
 8003f56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f58:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	fa93 f2a3 	rbit	r2, r3
 8003f62:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	4bbb      	ldr	r3, [pc, #748]	; (8004258 <HAL_RCC_OscConfig+0xc44>)
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003f70:	2102      	movs	r1, #2
 8003f72:	6011      	str	r1, [r2, #0]
 8003f74:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003f78:	6812      	ldr	r2, [r2, #0]
 8003f7a:	fa92 f1a2 	rbit	r1, r2
 8003f7e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003f82:	6011      	str	r1, [r2, #0]
  return result;
 8003f84:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003f88:	6812      	ldr	r2, [r2, #0]
 8003f8a:	fab2 f282 	clz	r2, r2
 8003f8e:	b2d2      	uxtb	r2, r2
 8003f90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f94:	b2d2      	uxtb	r2, r2
 8003f96:	f002 021f 	and.w	r2, r2, #31
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d099      	beq.n	8003eda <HAL_RCC_OscConfig+0x8c6>
 8003fa6:	e063      	b.n	8004070 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fa8:	f7fd faf8 	bl	800159c <HAL_GetTick>
 8003fac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fb0:	e00b      	b.n	8003fca <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fb2:	f7fd faf3 	bl	800159c <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e225      	b.n	8004416 <HAL_RCC_OscConfig+0xe02>
 8003fca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003fce:	2202      	movs	r2, #2
 8003fd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	fa93 f2a3 	rbit	r2, r3
 8003fdc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	601a      	str	r2, [r3, #0]
 8003fea:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	fa93 f2a3 	rbit	r2, r3
 8003ff4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003ff8:	601a      	str	r2, [r3, #0]
  return result;
 8003ffa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003ffe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004000:	fab3 f383 	clz	r3, r3
 8004004:	b2db      	uxtb	r3, r3
 8004006:	095b      	lsrs	r3, r3, #5
 8004008:	b2db      	uxtb	r3, r3
 800400a:	f043 0302 	orr.w	r3, r3, #2
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b02      	cmp	r3, #2
 8004012:	d102      	bne.n	800401a <HAL_RCC_OscConfig+0xa06>
 8004014:	4b90      	ldr	r3, [pc, #576]	; (8004258 <HAL_RCC_OscConfig+0xc44>)
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	e00d      	b.n	8004036 <HAL_RCC_OscConfig+0xa22>
 800401a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800401e:	2202      	movs	r2, #2
 8004020:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004022:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	fa93 f2a3 	rbit	r2, r3
 800402c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	4b89      	ldr	r3, [pc, #548]	; (8004258 <HAL_RCC_OscConfig+0xc44>)
 8004034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004036:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800403a:	2102      	movs	r1, #2
 800403c:	6011      	str	r1, [r2, #0]
 800403e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004042:	6812      	ldr	r2, [r2, #0]
 8004044:	fa92 f1a2 	rbit	r1, r2
 8004048:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800404c:	6011      	str	r1, [r2, #0]
  return result;
 800404e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8004052:	6812      	ldr	r2, [r2, #0]
 8004054:	fab2 f282 	clz	r2, r2
 8004058:	b2d2      	uxtb	r2, r2
 800405a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800405e:	b2d2      	uxtb	r2, r2
 8004060:	f002 021f 	and.w	r2, r2, #31
 8004064:	2101      	movs	r1, #1
 8004066:	fa01 f202 	lsl.w	r2, r1, r2
 800406a:	4013      	ands	r3, r2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1a0      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004070:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004074:	2b01      	cmp	r3, #1
 8004076:	d105      	bne.n	8004084 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004078:	4b77      	ldr	r3, [pc, #476]	; (8004258 <HAL_RCC_OscConfig+0xc44>)
 800407a:	69db      	ldr	r3, [r3, #28]
 800407c:	4a76      	ldr	r2, [pc, #472]	; (8004258 <HAL_RCC_OscConfig+0xc44>)
 800407e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004082:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004084:	1d3b      	adds	r3, r7, #4
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	2b00      	cmp	r3, #0
 800408c:	f000 81c2 	beq.w	8004414 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004090:	4b71      	ldr	r3, [pc, #452]	; (8004258 <HAL_RCC_OscConfig+0xc44>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f003 030c 	and.w	r3, r3, #12
 8004098:	2b08      	cmp	r3, #8
 800409a:	f000 819c 	beq.w	80043d6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800409e:	1d3b      	adds	r3, r7, #4
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	69db      	ldr	r3, [r3, #28]
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	f040 8114 	bne.w	80042d2 <HAL_RCC_OscConfig+0xcbe>
 80040aa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80040ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	fa93 f2a3 	rbit	r2, r3
 80040be:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80040c2:	601a      	str	r2, [r3, #0]
  return result;
 80040c4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80040c8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ca:	fab3 f383 	clz	r3, r3
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80040d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	461a      	mov	r2, r3
 80040dc:	2300      	movs	r3, #0
 80040de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e0:	f7fd fa5c 	bl	800159c <HAL_GetTick>
 80040e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040e8:	e009      	b.n	80040fe <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ea:	f7fd fa57 	bl	800159c <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e18b      	b.n	8004416 <HAL_RCC_OscConfig+0xe02>
 80040fe:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004102:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004106:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004108:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	fa93 f2a3 	rbit	r2, r3
 8004112:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004116:	601a      	str	r2, [r3, #0]
  return result;
 8004118:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800411c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800411e:	fab3 f383 	clz	r3, r3
 8004122:	b2db      	uxtb	r3, r3
 8004124:	095b      	lsrs	r3, r3, #5
 8004126:	b2db      	uxtb	r3, r3
 8004128:	f043 0301 	orr.w	r3, r3, #1
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b01      	cmp	r3, #1
 8004130:	d102      	bne.n	8004138 <HAL_RCC_OscConfig+0xb24>
 8004132:	4b49      	ldr	r3, [pc, #292]	; (8004258 <HAL_RCC_OscConfig+0xc44>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	e01b      	b.n	8004170 <HAL_RCC_OscConfig+0xb5c>
 8004138:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800413c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004140:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004142:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	fa93 f2a3 	rbit	r2, r3
 800414c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004150:	601a      	str	r2, [r3, #0]
 8004152:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004156:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	fa93 f2a3 	rbit	r2, r3
 8004166:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	4b3a      	ldr	r3, [pc, #232]	; (8004258 <HAL_RCC_OscConfig+0xc44>)
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004174:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004178:	6011      	str	r1, [r2, #0]
 800417a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800417e:	6812      	ldr	r2, [r2, #0]
 8004180:	fa92 f1a2 	rbit	r1, r2
 8004184:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004188:	6011      	str	r1, [r2, #0]
  return result;
 800418a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800418e:	6812      	ldr	r2, [r2, #0]
 8004190:	fab2 f282 	clz	r2, r2
 8004194:	b2d2      	uxtb	r2, r2
 8004196:	f042 0220 	orr.w	r2, r2, #32
 800419a:	b2d2      	uxtb	r2, r2
 800419c:	f002 021f 	and.w	r2, r2, #31
 80041a0:	2101      	movs	r1, #1
 80041a2:	fa01 f202 	lsl.w	r2, r1, r2
 80041a6:	4013      	ands	r3, r2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d19e      	bne.n	80040ea <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041ac:	4b2a      	ldr	r3, [pc, #168]	; (8004258 <HAL_RCC_OscConfig+0xc44>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80041b4:	1d3b      	adds	r3, r7, #4
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80041ba:	1d3b      	adds	r3, r7, #4
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	430b      	orrs	r3, r1
 80041c2:	4925      	ldr	r1, [pc, #148]	; (8004258 <HAL_RCC_OscConfig+0xc44>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	604b      	str	r3, [r1, #4]
 80041c8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80041cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	fa93 f2a3 	rbit	r2, r3
 80041dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80041e0:	601a      	str	r2, [r3, #0]
  return result;
 80041e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80041e6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041e8:	fab3 f383 	clz	r3, r3
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80041f2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	461a      	mov	r2, r3
 80041fa:	2301      	movs	r3, #1
 80041fc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041fe:	f7fd f9cd 	bl	800159c <HAL_GetTick>
 8004202:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004206:	e009      	b.n	800421c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004208:	f7fd f9c8 	bl	800159c <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b02      	cmp	r3, #2
 8004216:	d901      	bls.n	800421c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e0fc      	b.n	8004416 <HAL_RCC_OscConfig+0xe02>
 800421c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004220:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004224:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004226:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	fa93 f2a3 	rbit	r2, r3
 8004230:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004234:	601a      	str	r2, [r3, #0]
  return result;
 8004236:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800423a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800423c:	fab3 f383 	clz	r3, r3
 8004240:	b2db      	uxtb	r3, r3
 8004242:	095b      	lsrs	r3, r3, #5
 8004244:	b2db      	uxtb	r3, r3
 8004246:	f043 0301 	orr.w	r3, r3, #1
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b01      	cmp	r3, #1
 800424e:	d105      	bne.n	800425c <HAL_RCC_OscConfig+0xc48>
 8004250:	4b01      	ldr	r3, [pc, #4]	; (8004258 <HAL_RCC_OscConfig+0xc44>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	e01e      	b.n	8004294 <HAL_RCC_OscConfig+0xc80>
 8004256:	bf00      	nop
 8004258:	40021000 	.word	0x40021000
 800425c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004260:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004264:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004266:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	fa93 f2a3 	rbit	r2, r3
 8004270:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800427a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	fa93 f2a3 	rbit	r2, r3
 800428a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800428e:	601a      	str	r2, [r3, #0]
 8004290:	4b63      	ldr	r3, [pc, #396]	; (8004420 <HAL_RCC_OscConfig+0xe0c>)
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004298:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800429c:	6011      	str	r1, [r2, #0]
 800429e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80042a2:	6812      	ldr	r2, [r2, #0]
 80042a4:	fa92 f1a2 	rbit	r1, r2
 80042a8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80042ac:	6011      	str	r1, [r2, #0]
  return result;
 80042ae:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80042b2:	6812      	ldr	r2, [r2, #0]
 80042b4:	fab2 f282 	clz	r2, r2
 80042b8:	b2d2      	uxtb	r2, r2
 80042ba:	f042 0220 	orr.w	r2, r2, #32
 80042be:	b2d2      	uxtb	r2, r2
 80042c0:	f002 021f 	and.w	r2, r2, #31
 80042c4:	2101      	movs	r1, #1
 80042c6:	fa01 f202 	lsl.w	r2, r1, r2
 80042ca:	4013      	ands	r3, r2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d09b      	beq.n	8004208 <HAL_RCC_OscConfig+0xbf4>
 80042d0:	e0a0      	b.n	8004414 <HAL_RCC_OscConfig+0xe00>
 80042d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80042d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80042da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	fa93 f2a3 	rbit	r2, r3
 80042e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042ea:	601a      	str	r2, [r3, #0]
  return result;
 80042ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042f0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042f2:	fab3 f383 	clz	r3, r3
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80042fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	461a      	mov	r2, r3
 8004304:	2300      	movs	r3, #0
 8004306:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004308:	f7fd f948 	bl	800159c <HAL_GetTick>
 800430c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004310:	e009      	b.n	8004326 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004312:	f7fd f943 	bl	800159c <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b02      	cmp	r3, #2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e077      	b.n	8004416 <HAL_RCC_OscConfig+0xe02>
 8004326:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800432a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800432e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004330:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	fa93 f2a3 	rbit	r2, r3
 800433a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800433e:	601a      	str	r2, [r3, #0]
  return result;
 8004340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004344:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004346:	fab3 f383 	clz	r3, r3
 800434a:	b2db      	uxtb	r3, r3
 800434c:	095b      	lsrs	r3, r3, #5
 800434e:	b2db      	uxtb	r3, r3
 8004350:	f043 0301 	orr.w	r3, r3, #1
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b01      	cmp	r3, #1
 8004358:	d102      	bne.n	8004360 <HAL_RCC_OscConfig+0xd4c>
 800435a:	4b31      	ldr	r3, [pc, #196]	; (8004420 <HAL_RCC_OscConfig+0xe0c>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	e01b      	b.n	8004398 <HAL_RCC_OscConfig+0xd84>
 8004360:	f107 0320 	add.w	r3, r7, #32
 8004364:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004368:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436a:	f107 0320 	add.w	r3, r7, #32
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	fa93 f2a3 	rbit	r2, r3
 8004374:	f107 031c 	add.w	r3, r7, #28
 8004378:	601a      	str	r2, [r3, #0]
 800437a:	f107 0318 	add.w	r3, r7, #24
 800437e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	f107 0318 	add.w	r3, r7, #24
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	fa93 f2a3 	rbit	r2, r3
 800438e:	f107 0314 	add.w	r3, r7, #20
 8004392:	601a      	str	r2, [r3, #0]
 8004394:	4b22      	ldr	r3, [pc, #136]	; (8004420 <HAL_RCC_OscConfig+0xe0c>)
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	f107 0210 	add.w	r2, r7, #16
 800439c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80043a0:	6011      	str	r1, [r2, #0]
 80043a2:	f107 0210 	add.w	r2, r7, #16
 80043a6:	6812      	ldr	r2, [r2, #0]
 80043a8:	fa92 f1a2 	rbit	r1, r2
 80043ac:	f107 020c 	add.w	r2, r7, #12
 80043b0:	6011      	str	r1, [r2, #0]
  return result;
 80043b2:	f107 020c 	add.w	r2, r7, #12
 80043b6:	6812      	ldr	r2, [r2, #0]
 80043b8:	fab2 f282 	clz	r2, r2
 80043bc:	b2d2      	uxtb	r2, r2
 80043be:	f042 0220 	orr.w	r2, r2, #32
 80043c2:	b2d2      	uxtb	r2, r2
 80043c4:	f002 021f 	and.w	r2, r2, #31
 80043c8:	2101      	movs	r1, #1
 80043ca:	fa01 f202 	lsl.w	r2, r1, r2
 80043ce:	4013      	ands	r3, r2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d19e      	bne.n	8004312 <HAL_RCC_OscConfig+0xcfe>
 80043d4:	e01e      	b.n	8004414 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043d6:	1d3b      	adds	r3, r7, #4
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	69db      	ldr	r3, [r3, #28]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d101      	bne.n	80043e4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e018      	b.n	8004416 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80043e4:	4b0e      	ldr	r3, [pc, #56]	; (8004420 <HAL_RCC_OscConfig+0xe0c>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80043ec:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80043f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80043f4:	1d3b      	adds	r3, r7, #4
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d108      	bne.n	8004410 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80043fe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004402:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004406:	1d3b      	adds	r3, r7, #4
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800440c:	429a      	cmp	r2, r3
 800440e:	d001      	beq.n	8004414 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e000      	b.n	8004416 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	40021000 	.word	0x40021000

08004424 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b09e      	sub	sp, #120	; 0x78
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800442e:	2300      	movs	r3, #0
 8004430:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e162      	b.n	8004702 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800443c:	4b90      	ldr	r3, [pc, #576]	; (8004680 <HAL_RCC_ClockConfig+0x25c>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0307 	and.w	r3, r3, #7
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	429a      	cmp	r2, r3
 8004448:	d910      	bls.n	800446c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800444a:	4b8d      	ldr	r3, [pc, #564]	; (8004680 <HAL_RCC_ClockConfig+0x25c>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f023 0207 	bic.w	r2, r3, #7
 8004452:	498b      	ldr	r1, [pc, #556]	; (8004680 <HAL_RCC_ClockConfig+0x25c>)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	4313      	orrs	r3, r2
 8004458:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800445a:	4b89      	ldr	r3, [pc, #548]	; (8004680 <HAL_RCC_ClockConfig+0x25c>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0307 	and.w	r3, r3, #7
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	429a      	cmp	r2, r3
 8004466:	d001      	beq.n	800446c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e14a      	b.n	8004702 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d008      	beq.n	800448a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004478:	4b82      	ldr	r3, [pc, #520]	; (8004684 <HAL_RCC_ClockConfig+0x260>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	497f      	ldr	r1, [pc, #508]	; (8004684 <HAL_RCC_ClockConfig+0x260>)
 8004486:	4313      	orrs	r3, r2
 8004488:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	2b00      	cmp	r3, #0
 8004494:	f000 80dc 	beq.w	8004650 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d13c      	bne.n	800451a <HAL_RCC_ClockConfig+0xf6>
 80044a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044a4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044a8:	fa93 f3a3 	rbit	r3, r3
 80044ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80044ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044b0:	fab3 f383 	clz	r3, r3
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	095b      	lsrs	r3, r3, #5
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	f043 0301 	orr.w	r3, r3, #1
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d102      	bne.n	80044ca <HAL_RCC_ClockConfig+0xa6>
 80044c4:	4b6f      	ldr	r3, [pc, #444]	; (8004684 <HAL_RCC_ClockConfig+0x260>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	e00f      	b.n	80044ea <HAL_RCC_ClockConfig+0xc6>
 80044ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044d2:	fa93 f3a3 	rbit	r3, r3
 80044d6:	667b      	str	r3, [r7, #100]	; 0x64
 80044d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044dc:	663b      	str	r3, [r7, #96]	; 0x60
 80044de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044e0:	fa93 f3a3 	rbit	r3, r3
 80044e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044e6:	4b67      	ldr	r3, [pc, #412]	; (8004684 <HAL_RCC_ClockConfig+0x260>)
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80044ee:	65ba      	str	r2, [r7, #88]	; 0x58
 80044f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044f2:	fa92 f2a2 	rbit	r2, r2
 80044f6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80044f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80044fa:	fab2 f282 	clz	r2, r2
 80044fe:	b2d2      	uxtb	r2, r2
 8004500:	f042 0220 	orr.w	r2, r2, #32
 8004504:	b2d2      	uxtb	r2, r2
 8004506:	f002 021f 	and.w	r2, r2, #31
 800450a:	2101      	movs	r1, #1
 800450c:	fa01 f202 	lsl.w	r2, r1, r2
 8004510:	4013      	ands	r3, r2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d17b      	bne.n	800460e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e0f3      	b.n	8004702 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	2b02      	cmp	r3, #2
 8004520:	d13c      	bne.n	800459c <HAL_RCC_ClockConfig+0x178>
 8004522:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004526:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004528:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800452a:	fa93 f3a3 	rbit	r3, r3
 800452e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004532:	fab3 f383 	clz	r3, r3
 8004536:	b2db      	uxtb	r3, r3
 8004538:	095b      	lsrs	r3, r3, #5
 800453a:	b2db      	uxtb	r3, r3
 800453c:	f043 0301 	orr.w	r3, r3, #1
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b01      	cmp	r3, #1
 8004544:	d102      	bne.n	800454c <HAL_RCC_ClockConfig+0x128>
 8004546:	4b4f      	ldr	r3, [pc, #316]	; (8004684 <HAL_RCC_ClockConfig+0x260>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	e00f      	b.n	800456c <HAL_RCC_ClockConfig+0x148>
 800454c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004550:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004554:	fa93 f3a3 	rbit	r3, r3
 8004558:	647b      	str	r3, [r7, #68]	; 0x44
 800455a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800455e:	643b      	str	r3, [r7, #64]	; 0x40
 8004560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004562:	fa93 f3a3 	rbit	r3, r3
 8004566:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004568:	4b46      	ldr	r3, [pc, #280]	; (8004684 <HAL_RCC_ClockConfig+0x260>)
 800456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004570:	63ba      	str	r2, [r7, #56]	; 0x38
 8004572:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004574:	fa92 f2a2 	rbit	r2, r2
 8004578:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800457a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800457c:	fab2 f282 	clz	r2, r2
 8004580:	b2d2      	uxtb	r2, r2
 8004582:	f042 0220 	orr.w	r2, r2, #32
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	f002 021f 	and.w	r2, r2, #31
 800458c:	2101      	movs	r1, #1
 800458e:	fa01 f202 	lsl.w	r2, r1, r2
 8004592:	4013      	ands	r3, r2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d13a      	bne.n	800460e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e0b2      	b.n	8004702 <HAL_RCC_ClockConfig+0x2de>
 800459c:	2302      	movs	r3, #2
 800459e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a2:	fa93 f3a3 	rbit	r3, r3
 80045a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80045a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045aa:	fab3 f383 	clz	r3, r3
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	095b      	lsrs	r3, r3, #5
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	f043 0301 	orr.w	r3, r3, #1
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d102      	bne.n	80045c4 <HAL_RCC_ClockConfig+0x1a0>
 80045be:	4b31      	ldr	r3, [pc, #196]	; (8004684 <HAL_RCC_ClockConfig+0x260>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	e00d      	b.n	80045e0 <HAL_RCC_ClockConfig+0x1bc>
 80045c4:	2302      	movs	r3, #2
 80045c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ca:	fa93 f3a3 	rbit	r3, r3
 80045ce:	627b      	str	r3, [r7, #36]	; 0x24
 80045d0:	2302      	movs	r3, #2
 80045d2:	623b      	str	r3, [r7, #32]
 80045d4:	6a3b      	ldr	r3, [r7, #32]
 80045d6:	fa93 f3a3 	rbit	r3, r3
 80045da:	61fb      	str	r3, [r7, #28]
 80045dc:	4b29      	ldr	r3, [pc, #164]	; (8004684 <HAL_RCC_ClockConfig+0x260>)
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	2202      	movs	r2, #2
 80045e2:	61ba      	str	r2, [r7, #24]
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	fa92 f2a2 	rbit	r2, r2
 80045ea:	617a      	str	r2, [r7, #20]
  return result;
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	fab2 f282 	clz	r2, r2
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	f042 0220 	orr.w	r2, r2, #32
 80045f8:	b2d2      	uxtb	r2, r2
 80045fa:	f002 021f 	and.w	r2, r2, #31
 80045fe:	2101      	movs	r1, #1
 8004600:	fa01 f202 	lsl.w	r2, r1, r2
 8004604:	4013      	ands	r3, r2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e079      	b.n	8004702 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800460e:	4b1d      	ldr	r3, [pc, #116]	; (8004684 <HAL_RCC_ClockConfig+0x260>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f023 0203 	bic.w	r2, r3, #3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	491a      	ldr	r1, [pc, #104]	; (8004684 <HAL_RCC_ClockConfig+0x260>)
 800461c:	4313      	orrs	r3, r2
 800461e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004620:	f7fc ffbc 	bl	800159c <HAL_GetTick>
 8004624:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004626:	e00a      	b.n	800463e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004628:	f7fc ffb8 	bl	800159c <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	f241 3288 	movw	r2, #5000	; 0x1388
 8004636:	4293      	cmp	r3, r2
 8004638:	d901      	bls.n	800463e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e061      	b.n	8004702 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800463e:	4b11      	ldr	r3, [pc, #68]	; (8004684 <HAL_RCC_ClockConfig+0x260>)
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f003 020c 	and.w	r2, r3, #12
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	429a      	cmp	r2, r3
 800464e:	d1eb      	bne.n	8004628 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004650:	4b0b      	ldr	r3, [pc, #44]	; (8004680 <HAL_RCC_ClockConfig+0x25c>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0307 	and.w	r3, r3, #7
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	429a      	cmp	r2, r3
 800465c:	d214      	bcs.n	8004688 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800465e:	4b08      	ldr	r3, [pc, #32]	; (8004680 <HAL_RCC_ClockConfig+0x25c>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f023 0207 	bic.w	r2, r3, #7
 8004666:	4906      	ldr	r1, [pc, #24]	; (8004680 <HAL_RCC_ClockConfig+0x25c>)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	4313      	orrs	r3, r2
 800466c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800466e:	4b04      	ldr	r3, [pc, #16]	; (8004680 <HAL_RCC_ClockConfig+0x25c>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0307 	and.w	r3, r3, #7
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	429a      	cmp	r2, r3
 800467a:	d005      	beq.n	8004688 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e040      	b.n	8004702 <HAL_RCC_ClockConfig+0x2de>
 8004680:	40022000 	.word	0x40022000
 8004684:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b00      	cmp	r3, #0
 8004692:	d008      	beq.n	80046a6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004694:	4b1d      	ldr	r3, [pc, #116]	; (800470c <HAL_RCC_ClockConfig+0x2e8>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	491a      	ldr	r1, [pc, #104]	; (800470c <HAL_RCC_ClockConfig+0x2e8>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0308 	and.w	r3, r3, #8
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d009      	beq.n	80046c6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046b2:	4b16      	ldr	r3, [pc, #88]	; (800470c <HAL_RCC_ClockConfig+0x2e8>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	4912      	ldr	r1, [pc, #72]	; (800470c <HAL_RCC_ClockConfig+0x2e8>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80046c6:	f000 f829 	bl	800471c <HAL_RCC_GetSysClockFreq>
 80046ca:	4601      	mov	r1, r0
 80046cc:	4b0f      	ldr	r3, [pc, #60]	; (800470c <HAL_RCC_ClockConfig+0x2e8>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046d4:	22f0      	movs	r2, #240	; 0xf0
 80046d6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	fa92 f2a2 	rbit	r2, r2
 80046de:	60fa      	str	r2, [r7, #12]
  return result;
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	fab2 f282 	clz	r2, r2
 80046e6:	b2d2      	uxtb	r2, r2
 80046e8:	40d3      	lsrs	r3, r2
 80046ea:	4a09      	ldr	r2, [pc, #36]	; (8004710 <HAL_RCC_ClockConfig+0x2ec>)
 80046ec:	5cd3      	ldrb	r3, [r2, r3]
 80046ee:	fa21 f303 	lsr.w	r3, r1, r3
 80046f2:	4a08      	ldr	r2, [pc, #32]	; (8004714 <HAL_RCC_ClockConfig+0x2f0>)
 80046f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80046f6:	4b08      	ldr	r3, [pc, #32]	; (8004718 <HAL_RCC_ClockConfig+0x2f4>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fc ff0a 	bl	8001514 <HAL_InitTick>
  
  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3778      	adds	r7, #120	; 0x78
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	40021000 	.word	0x40021000
 8004710:	08004e1c 	.word	0x08004e1c
 8004714:	2000002c 	.word	0x2000002c
 8004718:	20000030 	.word	0x20000030

0800471c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800471c:	b480      	push	{r7}
 800471e:	b08b      	sub	sp, #44	; 0x2c
 8004720:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004722:	2300      	movs	r3, #0
 8004724:	61fb      	str	r3, [r7, #28]
 8004726:	2300      	movs	r3, #0
 8004728:	61bb      	str	r3, [r7, #24]
 800472a:	2300      	movs	r3, #0
 800472c:	627b      	str	r3, [r7, #36]	; 0x24
 800472e:	2300      	movs	r3, #0
 8004730:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004732:	2300      	movs	r3, #0
 8004734:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004736:	4b29      	ldr	r3, [pc, #164]	; (80047dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	f003 030c 	and.w	r3, r3, #12
 8004742:	2b04      	cmp	r3, #4
 8004744:	d002      	beq.n	800474c <HAL_RCC_GetSysClockFreq+0x30>
 8004746:	2b08      	cmp	r3, #8
 8004748:	d003      	beq.n	8004752 <HAL_RCC_GetSysClockFreq+0x36>
 800474a:	e03c      	b.n	80047c6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800474c:	4b24      	ldr	r3, [pc, #144]	; (80047e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800474e:	623b      	str	r3, [r7, #32]
      break;
 8004750:	e03c      	b.n	80047cc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004758:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800475c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	fa92 f2a2 	rbit	r2, r2
 8004764:	607a      	str	r2, [r7, #4]
  return result;
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	fab2 f282 	clz	r2, r2
 800476c:	b2d2      	uxtb	r2, r2
 800476e:	40d3      	lsrs	r3, r2
 8004770:	4a1c      	ldr	r2, [pc, #112]	; (80047e4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004772:	5cd3      	ldrb	r3, [r2, r3]
 8004774:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004776:	4b19      	ldr	r3, [pc, #100]	; (80047dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477a:	f003 030f 	and.w	r3, r3, #15
 800477e:	220f      	movs	r2, #15
 8004780:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	fa92 f2a2 	rbit	r2, r2
 8004788:	60fa      	str	r2, [r7, #12]
  return result;
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	fab2 f282 	clz	r2, r2
 8004790:	b2d2      	uxtb	r2, r2
 8004792:	40d3      	lsrs	r3, r2
 8004794:	4a14      	ldr	r2, [pc, #80]	; (80047e8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004796:	5cd3      	ldrb	r3, [r2, r3]
 8004798:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d008      	beq.n	80047b6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80047a4:	4a0e      	ldr	r2, [pc, #56]	; (80047e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	fb02 f303 	mul.w	r3, r2, r3
 80047b2:	627b      	str	r3, [r7, #36]	; 0x24
 80047b4:	e004      	b.n	80047c0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	4a0c      	ldr	r2, [pc, #48]	; (80047ec <HAL_RCC_GetSysClockFreq+0xd0>)
 80047ba:	fb02 f303 	mul.w	r3, r2, r3
 80047be:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	623b      	str	r3, [r7, #32]
      break;
 80047c4:	e002      	b.n	80047cc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80047c6:	4b06      	ldr	r3, [pc, #24]	; (80047e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80047c8:	623b      	str	r3, [r7, #32]
      break;
 80047ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047cc:	6a3b      	ldr	r3, [r7, #32]
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	372c      	adds	r7, #44	; 0x2c
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	40021000 	.word	0x40021000
 80047e0:	007a1200 	.word	0x007a1200
 80047e4:	08004e2c 	.word	0x08004e2c
 80047e8:	08004e3c 	.word	0x08004e3c
 80047ec:	003d0900 	.word	0x003d0900

080047f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b092      	sub	sp, #72	; 0x48
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80047fc:	2300      	movs	r3, #0
 80047fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004800:	2300      	movs	r3, #0
 8004802:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800480e:	2b00      	cmp	r3, #0
 8004810:	f000 80d4 	beq.w	80049bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004814:	4b4e      	ldr	r3, [pc, #312]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004816:	69db      	ldr	r3, [r3, #28]
 8004818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10e      	bne.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004820:	4b4b      	ldr	r3, [pc, #300]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004822:	69db      	ldr	r3, [r3, #28]
 8004824:	4a4a      	ldr	r2, [pc, #296]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800482a:	61d3      	str	r3, [r2, #28]
 800482c:	4b48      	ldr	r3, [pc, #288]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800482e:	69db      	ldr	r3, [r3, #28]
 8004830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004834:	60bb      	str	r3, [r7, #8]
 8004836:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004838:	2301      	movs	r3, #1
 800483a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800483e:	4b45      	ldr	r3, [pc, #276]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004846:	2b00      	cmp	r3, #0
 8004848:	d118      	bne.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800484a:	4b42      	ldr	r3, [pc, #264]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a41      	ldr	r2, [pc, #260]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004854:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004856:	f7fc fea1 	bl	800159c <HAL_GetTick>
 800485a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800485c:	e008      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800485e:	f7fc fe9d 	bl	800159c <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	2b64      	cmp	r3, #100	; 0x64
 800486a:	d901      	bls.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e169      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004870:	4b38      	ldr	r3, [pc, #224]	; (8004954 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004878:	2b00      	cmp	r3, #0
 800487a:	d0f0      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800487c:	4b34      	ldr	r3, [pc, #208]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004884:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004888:	2b00      	cmp	r3, #0
 800488a:	f000 8084 	beq.w	8004996 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004896:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004898:	429a      	cmp	r2, r3
 800489a:	d07c      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800489c:	4b2c      	ldr	r3, [pc, #176]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ae:	fa93 f3a3 	rbit	r3, r3
 80048b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80048b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048b6:	fab3 f383 	clz	r3, r3
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	461a      	mov	r2, r3
 80048be:	4b26      	ldr	r3, [pc, #152]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80048c0:	4413      	add	r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	461a      	mov	r2, r3
 80048c6:	2301      	movs	r3, #1
 80048c8:	6013      	str	r3, [r2, #0]
 80048ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d2:	fa93 f3a3 	rbit	r3, r3
 80048d6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80048d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048da:	fab3 f383 	clz	r3, r3
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	461a      	mov	r2, r3
 80048e2:	4b1d      	ldr	r3, [pc, #116]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80048e4:	4413      	add	r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	461a      	mov	r2, r3
 80048ea:	2300      	movs	r3, #0
 80048ec:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80048ee:	4a18      	ldr	r2, [pc, #96]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048f2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80048f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048f6:	f003 0301 	and.w	r3, r3, #1
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d04b      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048fe:	f7fc fe4d 	bl	800159c <HAL_GetTick>
 8004902:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004904:	e00a      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004906:	f7fc fe49 	bl	800159c <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	f241 3288 	movw	r2, #5000	; 0x1388
 8004914:	4293      	cmp	r3, r2
 8004916:	d901      	bls.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e113      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800491c:	2302      	movs	r3, #2
 800491e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004922:	fa93 f3a3 	rbit	r3, r3
 8004926:	627b      	str	r3, [r7, #36]	; 0x24
 8004928:	2302      	movs	r3, #2
 800492a:	623b      	str	r3, [r7, #32]
 800492c:	6a3b      	ldr	r3, [r7, #32]
 800492e:	fa93 f3a3 	rbit	r3, r3
 8004932:	61fb      	str	r3, [r7, #28]
  return result;
 8004934:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004936:	fab3 f383 	clz	r3, r3
 800493a:	b2db      	uxtb	r3, r3
 800493c:	095b      	lsrs	r3, r3, #5
 800493e:	b2db      	uxtb	r3, r3
 8004940:	f043 0302 	orr.w	r3, r3, #2
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d108      	bne.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800494a:	4b01      	ldr	r3, [pc, #4]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	e00d      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004950:	40021000 	.word	0x40021000
 8004954:	40007000 	.word	0x40007000
 8004958:	10908100 	.word	0x10908100
 800495c:	2302      	movs	r3, #2
 800495e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	fa93 f3a3 	rbit	r3, r3
 8004966:	617b      	str	r3, [r7, #20]
 8004968:	4b78      	ldr	r3, [pc, #480]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800496a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496c:	2202      	movs	r2, #2
 800496e:	613a      	str	r2, [r7, #16]
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	fa92 f2a2 	rbit	r2, r2
 8004976:	60fa      	str	r2, [r7, #12]
  return result;
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	fab2 f282 	clz	r2, r2
 800497e:	b2d2      	uxtb	r2, r2
 8004980:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004984:	b2d2      	uxtb	r2, r2
 8004986:	f002 021f 	and.w	r2, r2, #31
 800498a:	2101      	movs	r1, #1
 800498c:	fa01 f202 	lsl.w	r2, r1, r2
 8004990:	4013      	ands	r3, r2
 8004992:	2b00      	cmp	r3, #0
 8004994:	d0b7      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004996:	4b6d      	ldr	r3, [pc, #436]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	496a      	ldr	r1, [pc, #424]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80049a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d105      	bne.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049b0:	4b66      	ldr	r3, [pc, #408]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049b2:	69db      	ldr	r3, [r3, #28]
 80049b4:	4a65      	ldr	r2, [pc, #404]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d008      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049c8:	4b60      	ldr	r3, [pc, #384]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049cc:	f023 0203 	bic.w	r2, r3, #3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	495d      	ldr	r1, [pc, #372]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d008      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049e6:	4b59      	ldr	r3, [pc, #356]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	4956      	ldr	r1, [pc, #344]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0304 	and.w	r3, r3, #4
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d008      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a04:	4b51      	ldr	r3, [pc, #324]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	494e      	ldr	r1, [pc, #312]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0320 	and.w	r3, r3, #32
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d008      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a22:	4b4a      	ldr	r3, [pc, #296]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a26:	f023 0210 	bic.w	r2, r3, #16
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	69db      	ldr	r3, [r3, #28]
 8004a2e:	4947      	ldr	r1, [pc, #284]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d008      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004a40:	4b42      	ldr	r3, [pc, #264]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4c:	493f      	ldr	r1, [pc, #252]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d008      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a5e:	4b3b      	ldr	r3, [pc, #236]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a62:	f023 0220 	bic.w	r2, r3, #32
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	4938      	ldr	r1, [pc, #224]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0308 	and.w	r3, r3, #8
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d008      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a7c:	4b33      	ldr	r3, [pc, #204]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	4930      	ldr	r1, [pc, #192]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0310 	and.w	r3, r3, #16
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d008      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a9a:	4b2c      	ldr	r3, [pc, #176]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	4929      	ldr	r1, [pc, #164]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d008      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ab8:	4b24      	ldr	r3, [pc, #144]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac4:	4921      	ldr	r1, [pc, #132]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d008      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004ad6:	4b1d      	ldr	r3, [pc, #116]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ada:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	491a      	ldr	r1, [pc, #104]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d008      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004af4:	4b15      	ldr	r3, [pc, #84]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b00:	4912      	ldr	r1, [pc, #72]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d008      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004b12:	4b0e      	ldr	r3, [pc, #56]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1e:	490b      	ldr	r1, [pc, #44]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d008      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004b30:	4b06      	ldr	r3, [pc, #24]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b34:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b3c:	4903      	ldr	r1, [pc, #12]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3748      	adds	r7, #72	; 0x48
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	40021000 	.word	0x40021000

08004b50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e09d      	b.n	8004c9e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d108      	bne.n	8004b7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b72:	d009      	beq.n	8004b88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	61da      	str	r2, [r3, #28]
 8004b7a:	e005      	b.n	8004b88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d106      	bne.n	8004ba8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f7fc fafe 	bl	80011a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bbe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bc8:	d902      	bls.n	8004bd0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	60fb      	str	r3, [r7, #12]
 8004bce:	e002      	b.n	8004bd6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004bd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bd4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004bde:	d007      	beq.n	8004bf0 <HAL_SPI_Init+0xa0>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004be8:	d002      	beq.n	8004bf0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c00:	431a      	orrs	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	431a      	orrs	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	69db      	ldr	r3, [r3, #28]
 8004c24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c28:	431a      	orrs	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c32:	ea42 0103 	orr.w	r1, r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	0c1b      	lsrs	r3, r3, #16
 8004c4c:	f003 0204 	and.w	r2, r3, #4
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c54:	f003 0310 	and.w	r3, r3, #16
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c5e:	f003 0308 	and.w	r3, r3, #8
 8004c62:	431a      	orrs	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004c6c:	ea42 0103 	orr.w	r1, r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	69da      	ldr	r2, [r3, #28]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b085      	sub	sp, #20
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004cae:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004cb2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	43db      	mvns	r3, r3
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3714      	adds	r7, #20
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004cdc:	b084      	sub	sp, #16
 8004cde:	b480      	push	{r7}
 8004ce0:	b083      	sub	sp, #12
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
 8004ce6:	f107 0014 	add.w	r0, r7, #20
 8004cea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	b004      	add	sp, #16
 8004d1c:	4770      	bx	lr
	...

08004d20 <__libc_init_array>:
 8004d20:	b570      	push	{r4, r5, r6, lr}
 8004d22:	4d0d      	ldr	r5, [pc, #52]	; (8004d58 <__libc_init_array+0x38>)
 8004d24:	4c0d      	ldr	r4, [pc, #52]	; (8004d5c <__libc_init_array+0x3c>)
 8004d26:	1b64      	subs	r4, r4, r5
 8004d28:	10a4      	asrs	r4, r4, #2
 8004d2a:	2600      	movs	r6, #0
 8004d2c:	42a6      	cmp	r6, r4
 8004d2e:	d109      	bne.n	8004d44 <__libc_init_array+0x24>
 8004d30:	4d0b      	ldr	r5, [pc, #44]	; (8004d60 <__libc_init_array+0x40>)
 8004d32:	4c0c      	ldr	r4, [pc, #48]	; (8004d64 <__libc_init_array+0x44>)
 8004d34:	f000 f820 	bl	8004d78 <_init>
 8004d38:	1b64      	subs	r4, r4, r5
 8004d3a:	10a4      	asrs	r4, r4, #2
 8004d3c:	2600      	movs	r6, #0
 8004d3e:	42a6      	cmp	r6, r4
 8004d40:	d105      	bne.n	8004d4e <__libc_init_array+0x2e>
 8004d42:	bd70      	pop	{r4, r5, r6, pc}
 8004d44:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d48:	4798      	blx	r3
 8004d4a:	3601      	adds	r6, #1
 8004d4c:	e7ee      	b.n	8004d2c <__libc_init_array+0xc>
 8004d4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d52:	4798      	blx	r3
 8004d54:	3601      	adds	r6, #1
 8004d56:	e7f2      	b.n	8004d3e <__libc_init_array+0x1e>
 8004d58:	08004e4c 	.word	0x08004e4c
 8004d5c:	08004e4c 	.word	0x08004e4c
 8004d60:	08004e4c 	.word	0x08004e4c
 8004d64:	08004e50 	.word	0x08004e50

08004d68 <memset>:
 8004d68:	4402      	add	r2, r0
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d100      	bne.n	8004d72 <memset+0xa>
 8004d70:	4770      	bx	lr
 8004d72:	f803 1b01 	strb.w	r1, [r3], #1
 8004d76:	e7f9      	b.n	8004d6c <memset+0x4>

08004d78 <_init>:
 8004d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d7a:	bf00      	nop
 8004d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d7e:	bc08      	pop	{r3}
 8004d80:	469e      	mov	lr, r3
 8004d82:	4770      	bx	lr

08004d84 <_fini>:
 8004d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d86:	bf00      	nop
 8004d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d8a:	bc08      	pop	{r3}
 8004d8c:	469e      	mov	lr, r3
 8004d8e:	4770      	bx	lr
