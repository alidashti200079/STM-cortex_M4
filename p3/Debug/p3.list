
p3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005500  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  08005688  08005688  00015688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059d0  080059d0  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080059d0  080059d0  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080059d0  080059d0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059d0  080059d0  000159d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059d4  080059d4  000159d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080059d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          000004ac  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004c0  200004c0  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   000188c3  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c70  00000000  00000000  00038907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013d0  00000000  00000000  0003b578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001300  00000000  00000000  0003c948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ea60  00000000  00000000  0003dc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018b38  00000000  00000000  0005c6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ba20b  00000000  00000000  000751e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012f3eb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005544  00000000  00000000  0012f440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005670 	.word	0x08005670

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08005670 	.word	0x08005670

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fe2e 	bl	8000e2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f816 	bl	8000200 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f9be 	bl	8000554 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001d8:	f000 f876 	bl	80002c8 <MX_I2C1_Init>
  MX_SPI1_Init();
 80001dc:	f000 f8b4 	bl	8000348 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80001e0:	f000 f996 	bl	8000510 <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 80001e4:	f000 f964 	bl	80004b0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80001e8:	f000 f8ec 	bl	80003c4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2,data,sizeof(data));
 80001ec:	2201      	movs	r2, #1
 80001ee:	4902      	ldr	r1, [pc, #8]	; (80001f8 <main+0x30>)
 80001f0:	4802      	ldr	r0, [pc, #8]	; (80001fc <main+0x34>)
 80001f2:	f004 f859 	bl	80042a8 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f6:	e7fe      	b.n	80001f6 <main+0x2e>
 80001f8:	20000084 	.word	0x20000084
 80001fc:	20000138 	.word	0x20000138

08000200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b09e      	sub	sp, #120	; 0x78
 8000204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000206:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800020a:	2228      	movs	r2, #40	; 0x28
 800020c:	2100      	movs	r1, #0
 800020e:	4618      	mov	r0, r3
 8000210:	f005 fa26 	bl	8005660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000214:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000218:	2200      	movs	r2, #0
 800021a:	601a      	str	r2, [r3, #0]
 800021c:	605a      	str	r2, [r3, #4]
 800021e:	609a      	str	r2, [r3, #8]
 8000220:	60da      	str	r2, [r3, #12]
 8000222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000224:	463b      	mov	r3, r7
 8000226:	223c      	movs	r2, #60	; 0x3c
 8000228:	2100      	movs	r1, #0
 800022a:	4618      	mov	r0, r3
 800022c:	f005 fa18 	bl	8005660 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000230:	2303      	movs	r3, #3
 8000232:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000234:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000238:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800023a:	2300      	movs	r3, #0
 800023c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800023e:	2301      	movs	r3, #1
 8000240:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000242:	2310      	movs	r3, #16
 8000244:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000246:	2302      	movs	r3, #2
 8000248:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800024a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800024e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000250:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000254:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000256:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800025a:	4618      	mov	r0, r3
 800025c:	f001 fb6a 	bl	8001934 <HAL_RCC_OscConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000266:	f000 f9f3 	bl	8000650 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026a:	230f      	movs	r3, #15
 800026c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026e:	2302      	movs	r3, #2
 8000270:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000276:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800027a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000280:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000284:	2101      	movs	r1, #1
 8000286:	4618      	mov	r0, r3
 8000288:	f002 fa5c 	bl	8002744 <HAL_RCC_ClockConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000292:	f000 f9dd 	bl	8000650 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 8000296:	4b0b      	ldr	r3, [pc, #44]	; (80002c4 <SystemClock_Config+0xc4>)
 8000298:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800029a:	2300      	movs	r3, #0
 800029c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800029e:	2300      	movs	r3, #0
 80002a0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80002a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80002a6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a8:	463b      	mov	r3, r7
 80002aa:	4618      	mov	r0, r3
 80002ac:	f002 fc80 	bl	8002bb0 <HAL_RCCEx_PeriphCLKConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0xba>
  {
    Error_Handler();
 80002b6:	f000 f9cb 	bl	8000650 <Error_Handler>
  }
}
 80002ba:	bf00      	nop
 80002bc:	3778      	adds	r7, #120	; 0x78
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	00020022 	.word	0x00020022

080002c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002cc:	4b1b      	ldr	r3, [pc, #108]	; (800033c <MX_I2C1_Init+0x74>)
 80002ce:	4a1c      	ldr	r2, [pc, #112]	; (8000340 <MX_I2C1_Init+0x78>)
 80002d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80002d2:	4b1a      	ldr	r3, [pc, #104]	; (800033c <MX_I2C1_Init+0x74>)
 80002d4:	4a1b      	ldr	r2, [pc, #108]	; (8000344 <MX_I2C1_Init+0x7c>)
 80002d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002d8:	4b18      	ldr	r3, [pc, #96]	; (800033c <MX_I2C1_Init+0x74>)
 80002da:	2200      	movs	r2, #0
 80002dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002de:	4b17      	ldr	r3, [pc, #92]	; (800033c <MX_I2C1_Init+0x74>)
 80002e0:	2201      	movs	r2, #1
 80002e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002e4:	4b15      	ldr	r3, [pc, #84]	; (800033c <MX_I2C1_Init+0x74>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002ea:	4b14      	ldr	r3, [pc, #80]	; (800033c <MX_I2C1_Init+0x74>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002f0:	4b12      	ldr	r3, [pc, #72]	; (800033c <MX_I2C1_Init+0x74>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002f6:	4b11      	ldr	r3, [pc, #68]	; (800033c <MX_I2C1_Init+0x74>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002fc:	4b0f      	ldr	r3, [pc, #60]	; (800033c <MX_I2C1_Init+0x74>)
 80002fe:	2200      	movs	r2, #0
 8000300:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000302:	480e      	ldr	r0, [pc, #56]	; (800033c <MX_I2C1_Init+0x74>)
 8000304:	f001 f912 	bl	800152c <HAL_I2C_Init>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800030e:	f000 f99f 	bl	8000650 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000312:	2100      	movs	r1, #0
 8000314:	4809      	ldr	r0, [pc, #36]	; (800033c <MX_I2C1_Init+0x74>)
 8000316:	f001 f998 	bl	800164a <HAL_I2CEx_ConfigAnalogFilter>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000320:	f000 f996 	bl	8000650 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000324:	2100      	movs	r1, #0
 8000326:	4805      	ldr	r0, [pc, #20]	; (800033c <MX_I2C1_Init+0x74>)
 8000328:	f001 f9da 	bl	80016e0 <HAL_I2CEx_ConfigDigitalFilter>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000332:	f000 f98d 	bl	8000650 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	20000038 	.word	0x20000038
 8000340:	40005400 	.word	0x40005400
 8000344:	2000090e 	.word	0x2000090e

08000348 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800034c:	4b1b      	ldr	r3, [pc, #108]	; (80003bc <MX_SPI1_Init+0x74>)
 800034e:	4a1c      	ldr	r2, [pc, #112]	; (80003c0 <MX_SPI1_Init+0x78>)
 8000350:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000352:	4b1a      	ldr	r3, [pc, #104]	; (80003bc <MX_SPI1_Init+0x74>)
 8000354:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000358:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800035a:	4b18      	ldr	r3, [pc, #96]	; (80003bc <MX_SPI1_Init+0x74>)
 800035c:	2200      	movs	r2, #0
 800035e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000360:	4b16      	ldr	r3, [pc, #88]	; (80003bc <MX_SPI1_Init+0x74>)
 8000362:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000366:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000368:	4b14      	ldr	r3, [pc, #80]	; (80003bc <MX_SPI1_Init+0x74>)
 800036a:	2200      	movs	r2, #0
 800036c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800036e:	4b13      	ldr	r3, [pc, #76]	; (80003bc <MX_SPI1_Init+0x74>)
 8000370:	2200      	movs	r2, #0
 8000372:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000374:	4b11      	ldr	r3, [pc, #68]	; (80003bc <MX_SPI1_Init+0x74>)
 8000376:	f44f 7200 	mov.w	r2, #512	; 0x200
 800037a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800037c:	4b0f      	ldr	r3, [pc, #60]	; (80003bc <MX_SPI1_Init+0x74>)
 800037e:	2208      	movs	r2, #8
 8000380:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000382:	4b0e      	ldr	r3, [pc, #56]	; (80003bc <MX_SPI1_Init+0x74>)
 8000384:	2200      	movs	r2, #0
 8000386:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000388:	4b0c      	ldr	r3, [pc, #48]	; (80003bc <MX_SPI1_Init+0x74>)
 800038a:	2200      	movs	r2, #0
 800038c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800038e:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <MX_SPI1_Init+0x74>)
 8000390:	2200      	movs	r2, #0
 8000392:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000394:	4b09      	ldr	r3, [pc, #36]	; (80003bc <MX_SPI1_Init+0x74>)
 8000396:	2207      	movs	r2, #7
 8000398:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800039a:	4b08      	ldr	r3, [pc, #32]	; (80003bc <MX_SPI1_Init+0x74>)
 800039c:	2200      	movs	r2, #0
 800039e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003a0:	4b06      	ldr	r3, [pc, #24]	; (80003bc <MX_SPI1_Init+0x74>)
 80003a2:	2208      	movs	r2, #8
 80003a4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003a6:	4805      	ldr	r0, [pc, #20]	; (80003bc <MX_SPI1_Init+0x74>)
 80003a8:	f002 fdb2 	bl	8002f10 <HAL_SPI_Init>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80003b2:	f000 f94d 	bl	8000650 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003b6:	bf00      	nop
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	20000088 	.word	0x20000088
 80003c0:	40013000 	.word	0x40013000

080003c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b08e      	sub	sp, #56	; 0x38
 80003c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
 80003d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003d8:	f107 031c 	add.w	r3, r7, #28
 80003dc:	2200      	movs	r2, #0
 80003de:	601a      	str	r2, [r3, #0]
 80003e0:	605a      	str	r2, [r3, #4]
 80003e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003e4:	463b      	mov	r3, r7
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	605a      	str	r2, [r3, #4]
 80003ec:	609a      	str	r2, [r3, #8]
 80003ee:	60da      	str	r2, [r3, #12]
 80003f0:	611a      	str	r2, [r3, #16]
 80003f2:	615a      	str	r2, [r3, #20]
 80003f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003f6:	4b2d      	ldr	r3, [pc, #180]	; (80004ac <MX_TIM2_Init+0xe8>)
 80003f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80003fe:	4b2b      	ldr	r3, [pc, #172]	; (80004ac <MX_TIM2_Init+0xe8>)
 8000400:	2200      	movs	r2, #0
 8000402:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000404:	4b29      	ldr	r3, [pc, #164]	; (80004ac <MX_TIM2_Init+0xe8>)
 8000406:	2200      	movs	r2, #0
 8000408:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800040a:	4b28      	ldr	r3, [pc, #160]	; (80004ac <MX_TIM2_Init+0xe8>)
 800040c:	f04f 32ff 	mov.w	r2, #4294967295
 8000410:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000412:	4b26      	ldr	r3, [pc, #152]	; (80004ac <MX_TIM2_Init+0xe8>)
 8000414:	2200      	movs	r2, #0
 8000416:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000418:	4b24      	ldr	r3, [pc, #144]	; (80004ac <MX_TIM2_Init+0xe8>)
 800041a:	2200      	movs	r2, #0
 800041c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800041e:	4823      	ldr	r0, [pc, #140]	; (80004ac <MX_TIM2_Init+0xe8>)
 8000420:	f002 fe21 	bl	8003066 <HAL_TIM_Base_Init>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800042a:	f000 f911 	bl	8000650 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800042e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000432:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000434:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000438:	4619      	mov	r1, r3
 800043a:	481c      	ldr	r0, [pc, #112]	; (80004ac <MX_TIM2_Init+0xe8>)
 800043c:	f003 f976 	bl	800372c <HAL_TIM_ConfigClockSource>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000446:	f000 f903 	bl	8000650 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800044a:	4818      	ldr	r0, [pc, #96]	; (80004ac <MX_TIM2_Init+0xe8>)
 800044c:	f002 fe62 	bl	8003114 <HAL_TIM_PWM_Init>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000456:	f000 f8fb 	bl	8000650 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800045a:	2300      	movs	r3, #0
 800045c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800045e:	2300      	movs	r3, #0
 8000460:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000462:	f107 031c 	add.w	r3, r7, #28
 8000466:	4619      	mov	r1, r3
 8000468:	4810      	ldr	r0, [pc, #64]	; (80004ac <MX_TIM2_Init+0xe8>)
 800046a:	f003 fe4f 	bl	800410c <HAL_TIMEx_MasterConfigSynchronization>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000474:	f000 f8ec 	bl	8000650 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000478:	2360      	movs	r3, #96	; 0x60
 800047a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800047c:	2300      	movs	r3, #0
 800047e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000480:	2300      	movs	r3, #0
 8000482:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000484:	2300      	movs	r3, #0
 8000486:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000488:	463b      	mov	r3, r7
 800048a:	2200      	movs	r2, #0
 800048c:	4619      	mov	r1, r3
 800048e:	4807      	ldr	r0, [pc, #28]	; (80004ac <MX_TIM2_Init+0xe8>)
 8000490:	f003 f838 	bl	8003504 <HAL_TIM_PWM_ConfigChannel>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800049a:	f000 f8d9 	bl	8000650 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800049e:	4803      	ldr	r0, [pc, #12]	; (80004ac <MX_TIM2_Init+0xe8>)
 80004a0:	f000 f9a4 	bl	80007ec <HAL_TIM_MspPostInit>

}
 80004a4:	bf00      	nop
 80004a6:	3738      	adds	r7, #56	; 0x38
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	200000ec 	.word	0x200000ec

080004b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004b4:	4b14      	ldr	r3, [pc, #80]	; (8000508 <MX_USART2_UART_Init+0x58>)
 80004b6:	4a15      	ldr	r2, [pc, #84]	; (800050c <MX_USART2_UART_Init+0x5c>)
 80004b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80004ba:	4b13      	ldr	r3, [pc, #76]	; (8000508 <MX_USART2_UART_Init+0x58>)
 80004bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80004c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004c2:	4b11      	ldr	r3, [pc, #68]	; (8000508 <MX_USART2_UART_Init+0x58>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004c8:	4b0f      	ldr	r3, [pc, #60]	; (8000508 <MX_USART2_UART_Init+0x58>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004ce:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <MX_USART2_UART_Init+0x58>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004d4:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <MX_USART2_UART_Init+0x58>)
 80004d6:	220c      	movs	r2, #12
 80004d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004da:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <MX_USART2_UART_Init+0x58>)
 80004dc:	2200      	movs	r2, #0
 80004de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004e0:	4b09      	ldr	r3, [pc, #36]	; (8000508 <MX_USART2_UART_Init+0x58>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004e6:	4b08      	ldr	r3, [pc, #32]	; (8000508 <MX_USART2_UART_Init+0x58>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004ec:	4b06      	ldr	r3, [pc, #24]	; (8000508 <MX_USART2_UART_Init+0x58>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004f2:	4805      	ldr	r0, [pc, #20]	; (8000508 <MX_USART2_UART_Init+0x58>)
 80004f4:	f003 fe8a 	bl	800420c <HAL_UART_Init>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004fe:	f000 f8a7 	bl	8000650 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	20000138 	.word	0x20000138
 800050c:	40004400 	.word	0x40004400

08000510 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000514:	4b0d      	ldr	r3, [pc, #52]	; (800054c <MX_USB_PCD_Init+0x3c>)
 8000516:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <MX_USB_PCD_Init+0x40>)
 8000518:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800051a:	4b0c      	ldr	r3, [pc, #48]	; (800054c <MX_USB_PCD_Init+0x3c>)
 800051c:	2208      	movs	r2, #8
 800051e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000520:	4b0a      	ldr	r3, [pc, #40]	; (800054c <MX_USB_PCD_Init+0x3c>)
 8000522:	2202      	movs	r2, #2
 8000524:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000526:	4b09      	ldr	r3, [pc, #36]	; (800054c <MX_USB_PCD_Init+0x3c>)
 8000528:	2202      	movs	r2, #2
 800052a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800052c:	4b07      	ldr	r3, [pc, #28]	; (800054c <MX_USB_PCD_Init+0x3c>)
 800052e:	2200      	movs	r2, #0
 8000530:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000532:	4b06      	ldr	r3, [pc, #24]	; (800054c <MX_USB_PCD_Init+0x3c>)
 8000534:	2200      	movs	r2, #0
 8000536:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000538:	4804      	ldr	r0, [pc, #16]	; (800054c <MX_USB_PCD_Init+0x3c>)
 800053a:	f001 f91d 	bl	8001778 <HAL_PCD_Init>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000544:	f000 f884 	bl	8000650 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}
 800054c:	200001bc 	.word	0x200001bc
 8000550:	40005c00 	.word	0x40005c00

08000554 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b08a      	sub	sp, #40	; 0x28
 8000558:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055a:	f107 0314 	add.w	r3, r7, #20
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
 8000568:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800056a:	4b37      	ldr	r3, [pc, #220]	; (8000648 <MX_GPIO_Init+0xf4>)
 800056c:	695b      	ldr	r3, [r3, #20]
 800056e:	4a36      	ldr	r2, [pc, #216]	; (8000648 <MX_GPIO_Init+0xf4>)
 8000570:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000574:	6153      	str	r3, [r2, #20]
 8000576:	4b34      	ldr	r3, [pc, #208]	; (8000648 <MX_GPIO_Init+0xf4>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800057e:	613b      	str	r3, [r7, #16]
 8000580:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000582:	4b31      	ldr	r3, [pc, #196]	; (8000648 <MX_GPIO_Init+0xf4>)
 8000584:	695b      	ldr	r3, [r3, #20]
 8000586:	4a30      	ldr	r2, [pc, #192]	; (8000648 <MX_GPIO_Init+0xf4>)
 8000588:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800058c:	6153      	str	r3, [r2, #20]
 800058e:	4b2e      	ldr	r3, [pc, #184]	; (8000648 <MX_GPIO_Init+0xf4>)
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800059a:	4b2b      	ldr	r3, [pc, #172]	; (8000648 <MX_GPIO_Init+0xf4>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	4a2a      	ldr	r2, [pc, #168]	; (8000648 <MX_GPIO_Init+0xf4>)
 80005a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005a4:	6153      	str	r3, [r2, #20]
 80005a6:	4b28      	ldr	r3, [pc, #160]	; (8000648 <MX_GPIO_Init+0xf4>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b2:	4b25      	ldr	r3, [pc, #148]	; (8000648 <MX_GPIO_Init+0xf4>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	4a24      	ldr	r2, [pc, #144]	; (8000648 <MX_GPIO_Init+0xf4>)
 80005b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005bc:	6153      	str	r3, [r2, #20]
 80005be:	4b22      	ldr	r3, [pc, #136]	; (8000648 <MX_GPIO_Init+0xf4>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ca:	4b1f      	ldr	r3, [pc, #124]	; (8000648 <MX_GPIO_Init+0xf4>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	4a1e      	ldr	r2, [pc, #120]	; (8000648 <MX_GPIO_Init+0xf4>)
 80005d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005d4:	6153      	str	r3, [r2, #20]
 80005d6:	4b1c      	ldr	r3, [pc, #112]	; (8000648 <MX_GPIO_Init+0xf4>)
 80005d8:	695b      	ldr	r3, [r3, #20]
 80005da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005de:	603b      	str	r3, [r7, #0]
 80005e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80005e2:	2200      	movs	r2, #0
 80005e4:	f64f 7108 	movw	r1, #65288	; 0xff08
 80005e8:	4818      	ldr	r0, [pc, #96]	; (800064c <MX_GPIO_Init+0xf8>)
 80005ea:	f000 ff87 	bl	80014fc <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT2_Pin;
 80005ee:	2336      	movs	r3, #54	; 0x36
 80005f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005f2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80005f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005fc:	f107 0314 	add.w	r3, r7, #20
 8000600:	4619      	mov	r1, r3
 8000602:	4812      	ldr	r0, [pc, #72]	; (800064c <MX_GPIO_Init+0xf8>)
 8000604:	f000 fe00 	bl	8001208 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000608:	f64f 7308 	movw	r3, #65288	; 0xff08
 800060c:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060e:	2301      	movs	r3, #1
 8000610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000616:	2300      	movs	r3, #0
 8000618:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	4619      	mov	r1, r3
 8000620:	480a      	ldr	r0, [pc, #40]	; (800064c <MX_GPIO_Init+0xf8>)
 8000622:	f000 fdf1 	bl	8001208 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000626:	2301      	movs	r3, #1
 8000628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800062a:	2300      	movs	r3, #0
 800062c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	4619      	mov	r1, r3
 8000638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063c:	f000 fde4 	bl	8001208 <HAL_GPIO_Init>

}
 8000640:	bf00      	nop
 8000642:	3728      	adds	r7, #40	; 0x28
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40021000 	.word	0x40021000
 800064c:	48001000 	.word	0x48001000

08000650 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000654:	b672      	cpsid	i
}
 8000656:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000658:	e7fe      	b.n	8000658 <Error_Handler+0x8>
	...

0800065c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000662:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <HAL_MspInit+0x44>)
 8000664:	699b      	ldr	r3, [r3, #24]
 8000666:	4a0e      	ldr	r2, [pc, #56]	; (80006a0 <HAL_MspInit+0x44>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6193      	str	r3, [r2, #24]
 800066e:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <HAL_MspInit+0x44>)
 8000670:	699b      	ldr	r3, [r3, #24]
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800067a:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <HAL_MspInit+0x44>)
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	4a08      	ldr	r2, [pc, #32]	; (80006a0 <HAL_MspInit+0x44>)
 8000680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000684:	61d3      	str	r3, [r2, #28]
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <HAL_MspInit+0x44>)
 8000688:	69db      	ldr	r3, [r3, #28]
 800068a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068e:	603b      	str	r3, [r7, #0]
 8000690:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000692:	2007      	movs	r0, #7
 8000694:	f000 fd00 	bl	8001098 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40021000 	.word	0x40021000

080006a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08a      	sub	sp, #40	; 0x28
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ac:	f107 0314 	add.w	r3, r7, #20
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a17      	ldr	r2, [pc, #92]	; (8000720 <HAL_I2C_MspInit+0x7c>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d127      	bne.n	8000716 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c6:	4b17      	ldr	r3, [pc, #92]	; (8000724 <HAL_I2C_MspInit+0x80>)
 80006c8:	695b      	ldr	r3, [r3, #20]
 80006ca:	4a16      	ldr	r2, [pc, #88]	; (8000724 <HAL_I2C_MspInit+0x80>)
 80006cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006d0:	6153      	str	r3, [r2, #20]
 80006d2:	4b14      	ldr	r3, [pc, #80]	; (8000724 <HAL_I2C_MspInit+0x80>)
 80006d4:	695b      	ldr	r3, [r3, #20]
 80006d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006da:	613b      	str	r3, [r7, #16]
 80006dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80006de:	23c0      	movs	r3, #192	; 0xc0
 80006e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006e2:	2312      	movs	r3, #18
 80006e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006e6:	2301      	movs	r3, #1
 80006e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ea:	2303      	movs	r3, #3
 80006ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006ee:	2304      	movs	r3, #4
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	4619      	mov	r1, r3
 80006f8:	480b      	ldr	r0, [pc, #44]	; (8000728 <HAL_I2C_MspInit+0x84>)
 80006fa:	f000 fd85 	bl	8001208 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006fe:	4b09      	ldr	r3, [pc, #36]	; (8000724 <HAL_I2C_MspInit+0x80>)
 8000700:	69db      	ldr	r3, [r3, #28]
 8000702:	4a08      	ldr	r2, [pc, #32]	; (8000724 <HAL_I2C_MspInit+0x80>)
 8000704:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000708:	61d3      	str	r3, [r2, #28]
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <HAL_I2C_MspInit+0x80>)
 800070c:	69db      	ldr	r3, [r3, #28]
 800070e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000716:	bf00      	nop
 8000718:	3728      	adds	r7, #40	; 0x28
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40005400 	.word	0x40005400
 8000724:	40021000 	.word	0x40021000
 8000728:	48000400 	.word	0x48000400

0800072c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a17      	ldr	r2, [pc, #92]	; (80007a8 <HAL_SPI_MspInit+0x7c>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d128      	bne.n	80007a0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800074e:	4b17      	ldr	r3, [pc, #92]	; (80007ac <HAL_SPI_MspInit+0x80>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	4a16      	ldr	r2, [pc, #88]	; (80007ac <HAL_SPI_MspInit+0x80>)
 8000754:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000758:	6193      	str	r3, [r2, #24]
 800075a:	4b14      	ldr	r3, [pc, #80]	; (80007ac <HAL_SPI_MspInit+0x80>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <HAL_SPI_MspInit+0x80>)
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	4a10      	ldr	r2, [pc, #64]	; (80007ac <HAL_SPI_MspInit+0x80>)
 800076c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000770:	6153      	str	r3, [r2, #20]
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <HAL_SPI_MspInit+0x80>)
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800077e:	23e0      	movs	r3, #224	; 0xe0
 8000780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000782:	2302      	movs	r3, #2
 8000784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800078a:	2303      	movs	r3, #3
 800078c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800078e:	2305      	movs	r3, #5
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	4619      	mov	r1, r3
 8000798:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800079c:	f000 fd34 	bl	8001208 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80007a0:	bf00      	nop
 80007a2:	3728      	adds	r7, #40	; 0x28
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40013000 	.word	0x40013000
 80007ac:	40021000 	.word	0x40021000

080007b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007c0:	d10b      	bne.n	80007da <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <HAL_TIM_Base_MspInit+0x38>)
 80007c4:	69db      	ldr	r3, [r3, #28]
 80007c6:	4a08      	ldr	r2, [pc, #32]	; (80007e8 <HAL_TIM_Base_MspInit+0x38>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	61d3      	str	r3, [r2, #28]
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <HAL_TIM_Base_MspInit+0x38>)
 80007d0:	69db      	ldr	r3, [r3, #28]
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80007da:	bf00      	nop
 80007dc:	3714      	adds	r7, #20
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	40021000 	.word	0x40021000

080007ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b088      	sub	sp, #32
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800080c:	d11d      	bne.n	800084a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <HAL_TIM_MspPostInit+0x68>)
 8000810:	695b      	ldr	r3, [r3, #20]
 8000812:	4a10      	ldr	r2, [pc, #64]	; (8000854 <HAL_TIM_MspPostInit+0x68>)
 8000814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000818:	6153      	str	r3, [r2, #20]
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <HAL_TIM_MspPostInit+0x68>)
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800082a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082c:	2302      	movs	r3, #2
 800082e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000838:	2301      	movs	r3, #1
 800083a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	4619      	mov	r1, r3
 8000842:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000846:	f000 fcdf 	bl	8001208 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800084a:	bf00      	nop
 800084c:	3720      	adds	r7, #32
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40021000 	.word	0x40021000

08000858 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08a      	sub	sp, #40	; 0x28
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a1b      	ldr	r2, [pc, #108]	; (80008e4 <HAL_UART_MspInit+0x8c>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d130      	bne.n	80008dc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800087a:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <HAL_UART_MspInit+0x90>)
 800087c:	69db      	ldr	r3, [r3, #28]
 800087e:	4a1a      	ldr	r2, [pc, #104]	; (80008e8 <HAL_UART_MspInit+0x90>)
 8000880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000884:	61d3      	str	r3, [r2, #28]
 8000886:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <HAL_UART_MspInit+0x90>)
 8000888:	69db      	ldr	r3, [r3, #28]
 800088a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <HAL_UART_MspInit+0x90>)
 8000894:	695b      	ldr	r3, [r3, #20]
 8000896:	4a14      	ldr	r2, [pc, #80]	; (80008e8 <HAL_UART_MspInit+0x90>)
 8000898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800089c:	6153      	str	r3, [r2, #20]
 800089e:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <HAL_UART_MspInit+0x90>)
 80008a0:	695b      	ldr	r3, [r3, #20]
 80008a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008aa:	230c      	movs	r3, #12
 80008ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008b6:	2303      	movs	r3, #3
 80008b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008ba:	2307      	movs	r3, #7
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	4619      	mov	r1, r3
 80008c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c8:	f000 fc9e 	bl	8001208 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2100      	movs	r1, #0
 80008d0:	2026      	movs	r0, #38	; 0x26
 80008d2:	f000 fbec 	bl	80010ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008d6:	2026      	movs	r0, #38	; 0x26
 80008d8:	f000 fc05 	bl	80010e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008dc:	bf00      	nop
 80008de:	3728      	adds	r7, #40	; 0x28
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40004400 	.word	0x40004400
 80008e8:	40021000 	.word	0x40021000

080008ec <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	; 0x28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a18      	ldr	r2, [pc, #96]	; (800096c <HAL_PCD_MspInit+0x80>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d129      	bne.n	8000962 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	4b18      	ldr	r3, [pc, #96]	; (8000970 <HAL_PCD_MspInit+0x84>)
 8000910:	695b      	ldr	r3, [r3, #20]
 8000912:	4a17      	ldr	r2, [pc, #92]	; (8000970 <HAL_PCD_MspInit+0x84>)
 8000914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000918:	6153      	str	r3, [r2, #20]
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <HAL_PCD_MspInit+0x84>)
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000926:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800092a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	2302      	movs	r3, #2
 800092e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000934:	2303      	movs	r3, #3
 8000936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000938:	230e      	movs	r3, #14
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	4619      	mov	r1, r3
 8000942:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000946:	f000 fc5f 	bl	8001208 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <HAL_PCD_MspInit+0x84>)
 800094c:	69db      	ldr	r3, [r3, #28]
 800094e:	4a08      	ldr	r2, [pc, #32]	; (8000970 <HAL_PCD_MspInit+0x84>)
 8000950:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000954:	61d3      	str	r3, [r2, #28]
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <HAL_PCD_MspInit+0x84>)
 8000958:	69db      	ldr	r3, [r3, #28]
 800095a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000962:	bf00      	nop
 8000964:	3728      	adds	r7, #40	; 0x28
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40005c00 	.word	0x40005c00
 8000970:	40021000 	.word	0x40021000

08000974 <PWM_Start>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void PWM_Start()
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(pwm_timer, pwm_channel);
 8000978:	4b04      	ldr	r3, [pc, #16]	; (800098c <PWM_Start+0x18>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a04      	ldr	r2, [pc, #16]	; (8000990 <PWM_Start+0x1c>)
 800097e:	6812      	ldr	r2, [r2, #0]
 8000980:	4611      	mov	r1, r2
 8000982:	4618      	mov	r0, r3
 8000984:	f002 fc28 	bl	80031d8 <HAL_TIM_PWM_Start>
}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000000 	.word	0x20000000
 8000990:	20000030 	.word	0x20000030

08000994 <PWM_Stop>:

void PWM_Stop()
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(pwm_timer, pwm_channel);
 8000998:	4b04      	ldr	r3, [pc, #16]	; (80009ac <PWM_Stop+0x18>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a04      	ldr	r2, [pc, #16]	; (80009b0 <PWM_Stop+0x1c>)
 800099e:	6812      	ldr	r2, [r2, #0]
 80009a0:	4611      	mov	r1, r2
 80009a2:	4618      	mov	r0, r3
 80009a4:	f002 fd18 	bl	80033d8 <HAL_TIM_PWM_Stop>
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000000 	.word	0x20000000
 80009b0:	20000030 	.word	0x20000030

080009b4 <PWM_Change_Tone>:

void PWM_Change_Tone(uint16_t pwm_freq, uint16_t volume) // pwm_freq (1 - 20000), volume (0 - 1000)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b088      	sub	sp, #32
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	460a      	mov	r2, r1
 80009be:	80fb      	strh	r3, [r7, #6]
 80009c0:	4613      	mov	r3, r2
 80009c2:	80bb      	strh	r3, [r7, #4]
    if (pwm_freq == 0 || pwm_freq > 20000)
 80009c4:	88fb      	ldrh	r3, [r7, #6]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d004      	beq.n	80009d4 <PWM_Change_Tone+0x20>
 80009ca:	88fb      	ldrh	r3, [r7, #6]
 80009cc:	f644 6220 	movw	r2, #20000	; 0x4e20
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d937      	bls.n	8000a44 <PWM_Change_Tone+0x90>
    {
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, 0);
 80009d4:	4b52      	ldr	r3, [pc, #328]	; (8000b20 <PWM_Change_Tone+0x16c>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d105      	bne.n	80009e8 <PWM_Change_Tone+0x34>
 80009dc:	4b51      	ldr	r3, [pc, #324]	; (8000b24 <PWM_Change_Tone+0x170>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2200      	movs	r2, #0
 80009e4:	635a      	str	r2, [r3, #52]	; 0x34
 80009e6:	e097      	b.n	8000b18 <PWM_Change_Tone+0x164>
 80009e8:	4b4d      	ldr	r3, [pc, #308]	; (8000b20 <PWM_Change_Tone+0x16c>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b04      	cmp	r3, #4
 80009ee:	d105      	bne.n	80009fc <PWM_Change_Tone+0x48>
 80009f0:	4b4c      	ldr	r3, [pc, #304]	; (8000b24 <PWM_Change_Tone+0x170>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	2300      	movs	r3, #0
 80009f8:	6393      	str	r3, [r2, #56]	; 0x38
 80009fa:	e08d      	b.n	8000b18 <PWM_Change_Tone+0x164>
 80009fc:	4b48      	ldr	r3, [pc, #288]	; (8000b20 <PWM_Change_Tone+0x16c>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b08      	cmp	r3, #8
 8000a02:	d105      	bne.n	8000a10 <PWM_Change_Tone+0x5c>
 8000a04:	4b47      	ldr	r3, [pc, #284]	; (8000b24 <PWM_Change_Tone+0x170>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000a0e:	e083      	b.n	8000b18 <PWM_Change_Tone+0x164>
 8000a10:	4b43      	ldr	r3, [pc, #268]	; (8000b20 <PWM_Change_Tone+0x16c>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2b0c      	cmp	r3, #12
 8000a16:	d105      	bne.n	8000a24 <PWM_Change_Tone+0x70>
 8000a18:	4b42      	ldr	r3, [pc, #264]	; (8000b24 <PWM_Change_Tone+0x170>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	2300      	movs	r3, #0
 8000a20:	6413      	str	r3, [r2, #64]	; 0x40
 8000a22:	e079      	b.n	8000b18 <PWM_Change_Tone+0x164>
 8000a24:	4b3e      	ldr	r3, [pc, #248]	; (8000b20 <PWM_Change_Tone+0x16c>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b10      	cmp	r3, #16
 8000a2a:	d105      	bne.n	8000a38 <PWM_Change_Tone+0x84>
 8000a2c:	4b3d      	ldr	r3, [pc, #244]	; (8000b24 <PWM_Change_Tone+0x170>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	2300      	movs	r3, #0
 8000a34:	6593      	str	r3, [r2, #88]	; 0x58
 8000a36:	e06f      	b.n	8000b18 <PWM_Change_Tone+0x164>
 8000a38:	4b3a      	ldr	r3, [pc, #232]	; (8000b24 <PWM_Change_Tone+0x170>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	2300      	movs	r3, #0
 8000a40:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000a42:	e069      	b.n	8000b18 <PWM_Change_Tone+0x164>
    }
    else
    {
        const uint32_t internal_clock_freq = HAL_RCC_GetSysClockFreq();
 8000a44:	f001 fffa 	bl	8002a3c <HAL_RCC_GetSysClockFreq>
 8000a48:	61f8      	str	r0, [r7, #28]
        const uint16_t prescaler = 1 + internal_clock_freq / pwm_freq / 60000;
 8000a4a:	88fb      	ldrh	r3, [r7, #6]
 8000a4c:	69fa      	ldr	r2, [r7, #28]
 8000a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a52:	4a35      	ldr	r2, [pc, #212]	; (8000b28 <PWM_Change_Tone+0x174>)
 8000a54:	fba2 2303 	umull	r2, r3, r2, r3
 8000a58:	0b9b      	lsrs	r3, r3, #14
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	837b      	strh	r3, [r7, #26]
        const uint32_t timer_clock = internal_clock_freq / prescaler;
 8000a60:	8b7b      	ldrh	r3, [r7, #26]
 8000a62:	69fa      	ldr	r2, [r7, #28]
 8000a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a68:	617b      	str	r3, [r7, #20]
        const uint32_t period_cycles = timer_clock / pwm_freq;
 8000a6a:	88fb      	ldrh	r3, [r7, #6]
 8000a6c:	697a      	ldr	r2, [r7, #20]
 8000a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a72:	613b      	str	r3, [r7, #16]
        const uint32_t pulse_width = volume * period_cycles / 1000 / 2;
 8000a74:	88bb      	ldrh	r3, [r7, #4]
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	fb02 f303 	mul.w	r3, r2, r3
 8000a7c:	4a2b      	ldr	r2, [pc, #172]	; (8000b2c <PWM_Change_Tone+0x178>)
 8000a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a82:	09db      	lsrs	r3, r3, #7
 8000a84:	60fb      	str	r3, [r7, #12]

        pwm_timer->Instance->PSC = prescaler - 1;
 8000a86:	8b7b      	ldrh	r3, [r7, #26]
 8000a88:	1e5a      	subs	r2, r3, #1
 8000a8a:	4b26      	ldr	r3, [pc, #152]	; (8000b24 <PWM_Change_Tone+0x170>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	629a      	str	r2, [r3, #40]	; 0x28
        pwm_timer->Instance->ARR = period_cycles - 1;
 8000a92:	4b24      	ldr	r3, [pc, #144]	; (8000b24 <PWM_Change_Tone+0x170>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	693a      	ldr	r2, [r7, #16]
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	62da      	str	r2, [r3, #44]	; 0x2c
        pwm_timer->Instance->EGR = TIM_EGR_UG;
 8000a9e:	4b21      	ldr	r3, [pc, #132]	; (8000b24 <PWM_Change_Tone+0x170>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8000aa8:	4b1d      	ldr	r3, [pc, #116]	; (8000b20 <PWM_Change_Tone+0x16c>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d105      	bne.n	8000abc <PWM_Change_Tone+0x108>
 8000ab0:	4b1c      	ldr	r3, [pc, #112]	; (8000b24 <PWM_Change_Tone+0x170>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	68fa      	ldr	r2, [r7, #12]
 8000ab8:	635a      	str	r2, [r3, #52]	; 0x34
    }
}
 8000aba:	e02d      	b.n	8000b18 <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8000abc:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <PWM_Change_Tone+0x16c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b04      	cmp	r3, #4
 8000ac2:	d105      	bne.n	8000ad0 <PWM_Change_Tone+0x11c>
 8000ac4:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <PWM_Change_Tone+0x170>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000ace:	e023      	b.n	8000b18 <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8000ad0:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <PWM_Change_Tone+0x16c>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2b08      	cmp	r3, #8
 8000ad6:	d105      	bne.n	8000ae4 <PWM_Change_Tone+0x130>
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <PWM_Change_Tone+0x170>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000ae2:	e019      	b.n	8000b18 <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8000ae4:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <PWM_Change_Tone+0x16c>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b0c      	cmp	r3, #12
 8000aea:	d105      	bne.n	8000af8 <PWM_Change_Tone+0x144>
 8000aec:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <PWM_Change_Tone+0x170>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000af6:	e00f      	b.n	8000b18 <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <PWM_Change_Tone+0x16c>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b10      	cmp	r3, #16
 8000afe:	d105      	bne.n	8000b0c <PWM_Change_Tone+0x158>
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <PWM_Change_Tone+0x170>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000b0a:	e005      	b.n	8000b18 <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channel, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <PWM_Change_Tone+0x170>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000b16:	e7ff      	b.n	8000b18 <PWM_Change_Tone+0x164>
 8000b18:	bf00      	nop
 8000b1a:	3720      	adds	r7, #32
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000030 	.word	0x20000030
 8000b24:	20000000 	.word	0x20000000
 8000b28:	45e7b273 	.word	0x45e7b273
 8000b2c:	10624dd3 	.word	0x10624dd3

08000b30 <Change_Melody>:

void Change_Melody(const Tone *melody, uint16_t tone_count)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	807b      	strh	r3, [r7, #2]
    melody_ptr = melody;
 8000b3c:	4a07      	ldr	r2, [pc, #28]	; (8000b5c <Change_Melody+0x2c>)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6013      	str	r3, [r2, #0]
    melody_tone_count = tone_count;
 8000b42:	4a07      	ldr	r2, [pc, #28]	; (8000b60 <Change_Melody+0x30>)
 8000b44:	887b      	ldrh	r3, [r7, #2]
 8000b46:	8013      	strh	r3, [r2, #0]
    current_tone_number = 0;
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <Change_Melody+0x34>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	801a      	strh	r2, [r3, #0]
}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	200004b0 	.word	0x200004b0
 8000b60:	200004b4 	.word	0x200004b4
 8000b64:	200004ac 	.word	0x200004ac

08000b68 <Update_Melody>:

void Update_Melody()
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
    if( pause == 0 )
 8000b6e:	4b1b      	ldr	r3, [pc, #108]	; (8000bdc <Update_Melody+0x74>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d12e      	bne.n	8000bd4 <Update_Melody+0x6c>
    {
    	if ((HAL_GetTick() > current_tone_end) && (current_tone_number < melody_tone_count))
 8000b76:	f000 f9b3 	bl	8000ee0 <HAL_GetTick>
 8000b7a:	4602      	mov	r2, r0
 8000b7c:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <Update_Melody+0x78>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d927      	bls.n	8000bd4 <Update_Melody+0x6c>
 8000b84:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <Update_Melody+0x7c>)
 8000b86:	881b      	ldrh	r3, [r3, #0]
 8000b88:	b29a      	uxth	r2, r3
 8000b8a:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <Update_Melody+0x80>)
 8000b8c:	881b      	ldrh	r3, [r3, #0]
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d21f      	bcs.n	8000bd4 <Update_Melody+0x6c>
    	    {
    	        const Tone active_tone = *(melody_ptr + current_tone_number);
 8000b94:	4b15      	ldr	r3, [pc, #84]	; (8000bec <Update_Melody+0x84>)
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <Update_Melody+0x7c>)
 8000b9a:	881b      	ldrh	r3, [r3, #0]
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	009b      	lsls	r3, r3, #2
 8000ba0:	441a      	add	r2, r3
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	6810      	ldr	r0, [r2, #0]
 8000ba6:	6018      	str	r0, [r3, #0]
    	        PWM_Change_Tone(active_tone.frequency, volume);
 8000ba8:	88bb      	ldrh	r3, [r7, #4]
 8000baa:	4a11      	ldr	r2, [pc, #68]	; (8000bf0 <Update_Melody+0x88>)
 8000bac:	8812      	ldrh	r2, [r2, #0]
 8000bae:	b292      	uxth	r2, r2
 8000bb0:	4611      	mov	r1, r2
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff fefe 	bl	80009b4 <PWM_Change_Tone>
    	        current_tone_end = HAL_GetTick() + active_tone.duration;
 8000bb8:	f000 f992 	bl	8000ee0 <HAL_GetTick>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	88fa      	ldrh	r2, [r7, #6]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	4a07      	ldr	r2, [pc, #28]	; (8000be0 <Update_Melody+0x78>)
 8000bc4:	6013      	str	r3, [r2, #0]
    	        current_tone_number++;
 8000bc6:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <Update_Melody+0x7c>)
 8000bc8:	881b      	ldrh	r3, [r3, #0]
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	3301      	adds	r3, #1
 8000bce:	b29a      	uxth	r2, r3
 8000bd0:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <Update_Melody+0x7c>)
 8000bd2:	801a      	strh	r2, [r3, #0]
    	    }
    }
}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000034 	.word	0x20000034
 8000be0:	200004a8 	.word	0x200004a8
 8000be4:	200004ac 	.word	0x200004ac
 8000be8:	200004b4 	.word	0x200004b4
 8000bec:	200004b0 	.word	0x200004b0
 8000bf0:	20000004 	.word	0x20000004

08000bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <NMI_Handler+0x4>

08000bfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <HardFault_Handler+0x4>

08000c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <MemManage_Handler+0x4>

08000c06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <BusFault_Handler+0x4>

08000c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <UsageFault_Handler+0x4>

08000c12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c40:	f000 f93a 	bl	8000eb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  Update_Melody();
 8000c44:	f7ff ff90 	bl	8000b68 <Update_Melody>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c50:	4851      	ldr	r0, [pc, #324]	; (8000d98 <USART2_IRQHandler+0x14c>)
 8000c52:	f003 fb77 	bl	8004344 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

	extern unsigned char data[1];

	switch(data[0]) {
 8000c56:	4b51      	ldr	r3, [pc, #324]	; (8000d9c <USART2_IRQHandler+0x150>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	3b48      	subs	r3, #72	; 0x48
 8000c5c:	2b28      	cmp	r3, #40	; 0x28
 8000c5e:	f200 8094 	bhi.w	8000d8a <USART2_IRQHandler+0x13e>
 8000c62:	a201      	add	r2, pc, #4	; (adr r2, 8000c68 <USART2_IRQHandler+0x1c>)
 8000c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c68:	08000d37 	.word	0x08000d37
 8000c6c:	08000d8b 	.word	0x08000d8b
 8000c70:	08000d8b 	.word	0x08000d8b
 8000c74:	08000d8b 	.word	0x08000d8b
 8000c78:	08000d53 	.word	0x08000d53
 8000c7c:	08000d8b 	.word	0x08000d8b
 8000c80:	08000d8b 	.word	0x08000d8b
 8000c84:	08000d8b 	.word	0x08000d8b
 8000c88:	08000d79 	.word	0x08000d79
 8000c8c:	08000d8b 	.word	0x08000d8b
 8000c90:	08000d8b 	.word	0x08000d8b
 8000c94:	08000d6d 	.word	0x08000d6d
 8000c98:	08000d8b 	.word	0x08000d8b
 8000c9c:	08000d8b 	.word	0x08000d8b
 8000ca0:	08000d8b 	.word	0x08000d8b
 8000ca4:	08000d8b 	.word	0x08000d8b
 8000ca8:	08000d8b 	.word	0x08000d8b
 8000cac:	08000d8b 	.word	0x08000d8b
 8000cb0:	08000d8b 	.word	0x08000d8b
 8000cb4:	08000d8b 	.word	0x08000d8b
 8000cb8:	08000d8b 	.word	0x08000d8b
 8000cbc:	08000d8b 	.word	0x08000d8b
 8000cc0:	08000d8b 	.word	0x08000d8b
 8000cc4:	08000d8b 	.word	0x08000d8b
 8000cc8:	08000d8b 	.word	0x08000d8b
 8000ccc:	08000d8b 	.word	0x08000d8b
 8000cd0:	08000d8b 	.word	0x08000d8b
 8000cd4:	08000d8b 	.word	0x08000d8b
 8000cd8:	08000d8b 	.word	0x08000d8b
 8000cdc:	08000d8b 	.word	0x08000d8b
 8000ce0:	08000d8b 	.word	0x08000d8b
 8000ce4:	08000d8b 	.word	0x08000d8b
 8000ce8:	08000d8b 	.word	0x08000d8b
 8000cec:	08000d8b 	.word	0x08000d8b
 8000cf0:	08000d8b 	.word	0x08000d8b
 8000cf4:	08000d8b 	.word	0x08000d8b
 8000cf8:	08000d8b 	.word	0x08000d8b
 8000cfc:	08000d0d 	.word	0x08000d0d
 8000d00:	08000d1b 	.word	0x08000d1b
 8000d04:	08000d8b 	.word	0x08000d8b
 8000d08:	08000d29 	.word	0x08000d29
		case'm':
			PWM_Start();
 8000d0c:	f7ff fe32 	bl	8000974 <PWM_Start>
			Change_Melody(super_mario_bros, ARRAY_LENGTH(super_mario_bros));
 8000d10:	2141      	movs	r1, #65	; 0x41
 8000d12:	4823      	ldr	r0, [pc, #140]	; (8000da0 <USART2_IRQHandler+0x154>)
 8000d14:	f7ff ff0c 	bl	8000b30 <Change_Melody>
		break;
 8000d18:	e037      	b.n	8000d8a <USART2_IRQHandler+0x13e>
		case'n':
			PWM_Start();
 8000d1a:	f7ff fe2b 	bl	8000974 <PWM_Start>
			Change_Melody(Nokia, ARRAY_LENGTH(Nokia));
 8000d1e:	212a      	movs	r1, #42	; 0x2a
 8000d20:	4820      	ldr	r0, [pc, #128]	; (8000da4 <USART2_IRQHandler+0x158>)
 8000d22:	f7ff ff05 	bl	8000b30 <Change_Melody>
		break;
 8000d26:	e030      	b.n	8000d8a <USART2_IRQHandler+0x13e>
		case'p':
			PWM_Start();
 8000d28:	f7ff fe24 	bl	8000974 <PWM_Start>
			Change_Melody(PinkPanther, ARRAY_LENGTH(PinkPanther));
 8000d2c:	2159      	movs	r1, #89	; 0x59
 8000d2e:	481e      	ldr	r0, [pc, #120]	; (8000da8 <USART2_IRQHandler+0x15c>)
 8000d30:	f7ff fefe 	bl	8000b30 <Change_Melody>
		break;
 8000d34:	e029      	b.n	8000d8a <USART2_IRQHandler+0x13e>
		case'H':
			if( volume < 1000 ) {
 8000d36:	4b1d      	ldr	r3, [pc, #116]	; (8000dac <USART2_IRQHandler+0x160>)
 8000d38:	881b      	ldrh	r3, [r3, #0]
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d40:	d220      	bcs.n	8000d84 <USART2_IRQHandler+0x138>
				volume = volume + 5;
 8000d42:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <USART2_IRQHandler+0x160>)
 8000d44:	881b      	ldrh	r3, [r3, #0]
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	3305      	adds	r3, #5
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	4b17      	ldr	r3, [pc, #92]	; (8000dac <USART2_IRQHandler+0x160>)
 8000d4e:	801a      	strh	r2, [r3, #0]
			}
		break;
 8000d50:	e018      	b.n	8000d84 <USART2_IRQHandler+0x138>
		case'L':
			if( volume > 0 ) {
 8000d52:	4b16      	ldr	r3, [pc, #88]	; (8000dac <USART2_IRQHandler+0x160>)
 8000d54:	881b      	ldrh	r3, [r3, #0]
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d015      	beq.n	8000d88 <USART2_IRQHandler+0x13c>
				volume = volume - 5;
 8000d5c:	4b13      	ldr	r3, [pc, #76]	; (8000dac <USART2_IRQHandler+0x160>)
 8000d5e:	881b      	ldrh	r3, [r3, #0]
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	3b05      	subs	r3, #5
 8000d64:	b29a      	uxth	r2, r3
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <USART2_IRQHandler+0x160>)
 8000d68:	801a      	strh	r2, [r3, #0]
			}
		break;
 8000d6a:	e00d      	b.n	8000d88 <USART2_IRQHandler+0x13c>
		case'S':
			PWM_Stop();
 8000d6c:	f7ff fe12 	bl	8000994 <PWM_Stop>
			pause = 1;
 8000d70:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <USART2_IRQHandler+0x164>)
 8000d72:	2201      	movs	r2, #1
 8000d74:	601a      	str	r2, [r3, #0]
		break;
 8000d76:	e008      	b.n	8000d8a <USART2_IRQHandler+0x13e>
		case'P':
			PWM_Start();
 8000d78:	f7ff fdfc 	bl	8000974 <PWM_Start>
			pause = 0;
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <USART2_IRQHandler+0x164>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
		break;
 8000d82:	e002      	b.n	8000d8a <USART2_IRQHandler+0x13e>
		break;
 8000d84:	bf00      	nop
 8000d86:	e000      	b.n	8000d8a <USART2_IRQHandler+0x13e>
		break;
 8000d88:	bf00      	nop
	}

	HAL_UART_Receive_IT(&huart2,data,sizeof(data));
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	4903      	ldr	r1, [pc, #12]	; (8000d9c <USART2_IRQHandler+0x150>)
 8000d8e:	4802      	ldr	r0, [pc, #8]	; (8000d98 <USART2_IRQHandler+0x14c>)
 8000d90:	f003 fa8a 	bl	80042a8 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	20000138 	.word	0x20000138
 8000d9c:	20000084 	.word	0x20000084
 8000da0:	08005688 	.word	0x08005688
 8000da4:	0800578c 	.word	0x0800578c
 8000da8:	08005834 	.word	0x08005834
 8000dac:	20000004 	.word	0x20000004
 8000db0:	20000034 	.word	0x20000034

08000db4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <SystemInit+0x20>)
 8000dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dbe:	4a05      	ldr	r2, [pc, #20]	; (8000dd4 <SystemInit+0x20>)
 8000dc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000dd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e10 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ddc:	480d      	ldr	r0, [pc, #52]	; (8000e14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dde:	490e      	ldr	r1, [pc, #56]	; (8000e18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000de0:	4a0e      	ldr	r2, [pc, #56]	; (8000e1c <LoopForever+0xe>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de4:	e002      	b.n	8000dec <LoopCopyDataInit>

08000de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dea:	3304      	adds	r3, #4

08000dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df0:	d3f9      	bcc.n	8000de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df2:	4a0b      	ldr	r2, [pc, #44]	; (8000e20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000df4:	4c0b      	ldr	r4, [pc, #44]	; (8000e24 <LoopForever+0x16>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df8:	e001      	b.n	8000dfe <LoopFillZerobss>

08000dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dfc:	3204      	adds	r2, #4

08000dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e00:	d3fb      	bcc.n	8000dfa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e02:	f7ff ffd7 	bl	8000db4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e06:	f004 fc07 	bl	8005618 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e0a:	f7ff f9dd 	bl	80001c8 <main>

08000e0e <LoopForever>:

LoopForever:
    b LoopForever
 8000e0e:	e7fe      	b.n	8000e0e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e10:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000e14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e18:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000e1c:	080059d8 	.word	0x080059d8
  ldr r2, =_sbss
 8000e20:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000e24:	200004c0 	.word	0x200004c0

08000e28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e28:	e7fe      	b.n	8000e28 <ADC1_2_IRQHandler>
	...

08000e2c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <HAL_Init+0x28>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a07      	ldr	r2, [pc, #28]	; (8000e54 <HAL_Init+0x28>)
 8000e36:	f043 0310 	orr.w	r3, r3, #16
 8000e3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e3c:	2003      	movs	r0, #3
 8000e3e:	f000 f92b 	bl	8001098 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e42:	2000      	movs	r0, #0
 8000e44:	f000 f808 	bl	8000e58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e48:	f7ff fc08 	bl	800065c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40022000 	.word	0x40022000

08000e58 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <HAL_InitTick+0x54>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <HAL_InitTick+0x58>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 f943 	bl	8001102 <HAL_SYSTICK_Config>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e00e      	b.n	8000ea4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2b0f      	cmp	r3, #15
 8000e8a:	d80a      	bhi.n	8000ea2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	6879      	ldr	r1, [r7, #4]
 8000e90:	f04f 30ff 	mov.w	r0, #4294967295
 8000e94:	f000 f90b 	bl	80010ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e98:	4a06      	ldr	r2, [pc, #24]	; (8000eb4 <HAL_InitTick+0x5c>)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e000      	b.n	8000ea4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000008 	.word	0x20000008
 8000eb0:	20000010 	.word	0x20000010
 8000eb4:	2000000c 	.word	0x2000000c

08000eb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_IncTick+0x20>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_IncTick+0x24>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	4a04      	ldr	r2, [pc, #16]	; (8000edc <HAL_IncTick+0x24>)
 8000eca:	6013      	str	r3, [r2, #0]
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000010 	.word	0x20000010
 8000edc:	200004bc 	.word	0x200004bc

08000ee0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ee4:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <HAL_GetTick+0x14>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	200004bc 	.word	0x200004bc

08000ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f14:	4013      	ands	r3, r2
 8000f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2a:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	60d3      	str	r3, [r2, #12]
}
 8000f30:	bf00      	nop
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f44:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <__NVIC_GetPriorityGrouping+0x18>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	0a1b      	lsrs	r3, r3, #8
 8000f4a:	f003 0307 	and.w	r3, r3, #7
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	db0b      	blt.n	8000f86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	f003 021f 	and.w	r2, r3, #31
 8000f74:	4907      	ldr	r1, [pc, #28]	; (8000f94 <__NVIC_EnableIRQ+0x38>)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	095b      	lsrs	r3, r3, #5
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000e100 	.word	0xe000e100

08000f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	6039      	str	r1, [r7, #0]
 8000fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	db0a      	blt.n	8000fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	490c      	ldr	r1, [pc, #48]	; (8000fe4 <__NVIC_SetPriority+0x4c>)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	0112      	lsls	r2, r2, #4
 8000fb8:	b2d2      	uxtb	r2, r2
 8000fba:	440b      	add	r3, r1
 8000fbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc0:	e00a      	b.n	8000fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4908      	ldr	r1, [pc, #32]	; (8000fe8 <__NVIC_SetPriority+0x50>)
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	f003 030f 	and.w	r3, r3, #15
 8000fce:	3b04      	subs	r3, #4
 8000fd0:	0112      	lsls	r2, r2, #4
 8000fd2:	b2d2      	uxtb	r2, r2
 8000fd4:	440b      	add	r3, r1
 8000fd6:	761a      	strb	r2, [r3, #24]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000e100 	.word	0xe000e100
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	f1c3 0307 	rsb	r3, r3, #7
 8001006:	2b04      	cmp	r3, #4
 8001008:	bf28      	it	cs
 800100a:	2304      	movcs	r3, #4
 800100c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3304      	adds	r3, #4
 8001012:	2b06      	cmp	r3, #6
 8001014:	d902      	bls.n	800101c <NVIC_EncodePriority+0x30>
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3b03      	subs	r3, #3
 800101a:	e000      	b.n	800101e <NVIC_EncodePriority+0x32>
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	f04f 32ff 	mov.w	r2, #4294967295
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43da      	mvns	r2, r3
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	401a      	ands	r2, r3
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001034:	f04f 31ff 	mov.w	r1, #4294967295
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	fa01 f303 	lsl.w	r3, r1, r3
 800103e:	43d9      	mvns	r1, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	4313      	orrs	r3, r2
         );
}
 8001046:	4618      	mov	r0, r3
 8001048:	3724      	adds	r7, #36	; 0x24
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3b01      	subs	r3, #1
 8001060:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001064:	d301      	bcc.n	800106a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001066:	2301      	movs	r3, #1
 8001068:	e00f      	b.n	800108a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800106a:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <SysTick_Config+0x40>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001072:	210f      	movs	r1, #15
 8001074:	f04f 30ff 	mov.w	r0, #4294967295
 8001078:	f7ff ff8e 	bl	8000f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <SysTick_Config+0x40>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001082:	4b04      	ldr	r3, [pc, #16]	; (8001094 <SysTick_Config+0x40>)
 8001084:	2207      	movs	r2, #7
 8001086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	e000e010 	.word	0xe000e010

08001098 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ff29 	bl	8000ef8 <__NVIC_SetPriorityGrouping>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b086      	sub	sp, #24
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	4603      	mov	r3, r0
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
 80010ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010c0:	f7ff ff3e 	bl	8000f40 <__NVIC_GetPriorityGrouping>
 80010c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	68b9      	ldr	r1, [r7, #8]
 80010ca:	6978      	ldr	r0, [r7, #20]
 80010cc:	f7ff ff8e 	bl	8000fec <NVIC_EncodePriority>
 80010d0:	4602      	mov	r2, r0
 80010d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d6:	4611      	mov	r1, r2
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff5d 	bl	8000f98 <__NVIC_SetPriority>
}
 80010de:	bf00      	nop
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	4603      	mov	r3, r0
 80010ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff31 	bl	8000f5c <__NVIC_EnableIRQ>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff ffa2 	bl	8001054 <SysTick_Config>
 8001110:	4603      	mov	r3, r0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001128:	2b02      	cmp	r3, #2
 800112a:	d008      	beq.n	800113e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2204      	movs	r2, #4
 8001130:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e020      	b.n	8001180 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f022 020e 	bic.w	r2, r2, #14
 800114c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f022 0201 	bic.w	r2, r2, #1
 800115c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001166:	2101      	movs	r1, #1
 8001168:	fa01 f202 	lsl.w	r2, r1, r2
 800116c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2201      	movs	r2, #1
 8001172:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800117e:	2300      	movs	r3, #0
}
 8001180:	4618      	mov	r0, r3
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001194:	2300      	movs	r3, #0
 8001196:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d005      	beq.n	80011ae <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2204      	movs	r2, #4
 80011a6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	73fb      	strb	r3, [r7, #15]
 80011ac:	e027      	b.n	80011fe <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f022 020e 	bic.w	r2, r2, #14
 80011bc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f022 0201 	bic.w	r2, r2, #1
 80011cc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011d6:	2101      	movs	r1, #1
 80011d8:	fa01 f202 	lsl.w	r2, r1, r2
 80011dc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2201      	movs	r2, #1
 80011e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	4798      	blx	r3
    } 
  }
  return status;
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001208:	b480      	push	{r7}
 800120a:	b087      	sub	sp, #28
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001216:	e154      	b.n	80014c2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	2101      	movs	r1, #1
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	fa01 f303 	lsl.w	r3, r1, r3
 8001224:	4013      	ands	r3, r2
 8001226:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2b00      	cmp	r3, #0
 800122c:	f000 8146 	beq.w	80014bc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	2b01      	cmp	r3, #1
 800123a:	d005      	beq.n	8001248 <HAL_GPIO_Init+0x40>
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 0303 	and.w	r3, r3, #3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d130      	bne.n	80012aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	2203      	movs	r2, #3
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4013      	ands	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	68da      	ldr	r2, [r3, #12]
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4313      	orrs	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800127e:	2201      	movs	r2, #1
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43db      	mvns	r3, r3
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4013      	ands	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	091b      	lsrs	r3, r3, #4
 8001294:	f003 0201 	and.w	r2, r3, #1
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 0303 	and.w	r3, r3, #3
 80012b2:	2b03      	cmp	r3, #3
 80012b4:	d017      	beq.n	80012e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	2203      	movs	r2, #3
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43db      	mvns	r3, r3
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	4013      	ands	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	689a      	ldr	r2, [r3, #8]
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4313      	orrs	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f003 0303 	and.w	r3, r3, #3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d123      	bne.n	800133a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	08da      	lsrs	r2, r3, #3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	3208      	adds	r2, #8
 80012fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	220f      	movs	r2, #15
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	4013      	ands	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	691a      	ldr	r2, [r3, #16]
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	f003 0307 	and.w	r3, r3, #7
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	08da      	lsrs	r2, r3, #3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3208      	adds	r2, #8
 8001334:	6939      	ldr	r1, [r7, #16]
 8001336:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	2203      	movs	r2, #3
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4013      	ands	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f003 0203 	and.w	r2, r3, #3
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001376:	2b00      	cmp	r3, #0
 8001378:	f000 80a0 	beq.w	80014bc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137c:	4b58      	ldr	r3, [pc, #352]	; (80014e0 <HAL_GPIO_Init+0x2d8>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	4a57      	ldr	r2, [pc, #348]	; (80014e0 <HAL_GPIO_Init+0x2d8>)
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	6193      	str	r3, [r2, #24]
 8001388:	4b55      	ldr	r3, [pc, #340]	; (80014e0 <HAL_GPIO_Init+0x2d8>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001394:	4a53      	ldr	r2, [pc, #332]	; (80014e4 <HAL_GPIO_Init+0x2dc>)
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	089b      	lsrs	r3, r3, #2
 800139a:	3302      	adds	r3, #2
 800139c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	f003 0303 	and.w	r3, r3, #3
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	220f      	movs	r2, #15
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4013      	ands	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013be:	d019      	beq.n	80013f4 <HAL_GPIO_Init+0x1ec>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a49      	ldr	r2, [pc, #292]	; (80014e8 <HAL_GPIO_Init+0x2e0>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d013      	beq.n	80013f0 <HAL_GPIO_Init+0x1e8>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a48      	ldr	r2, [pc, #288]	; (80014ec <HAL_GPIO_Init+0x2e4>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d00d      	beq.n	80013ec <HAL_GPIO_Init+0x1e4>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a47      	ldr	r2, [pc, #284]	; (80014f0 <HAL_GPIO_Init+0x2e8>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d007      	beq.n	80013e8 <HAL_GPIO_Init+0x1e0>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a46      	ldr	r2, [pc, #280]	; (80014f4 <HAL_GPIO_Init+0x2ec>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d101      	bne.n	80013e4 <HAL_GPIO_Init+0x1dc>
 80013e0:	2304      	movs	r3, #4
 80013e2:	e008      	b.n	80013f6 <HAL_GPIO_Init+0x1ee>
 80013e4:	2305      	movs	r3, #5
 80013e6:	e006      	b.n	80013f6 <HAL_GPIO_Init+0x1ee>
 80013e8:	2303      	movs	r3, #3
 80013ea:	e004      	b.n	80013f6 <HAL_GPIO_Init+0x1ee>
 80013ec:	2302      	movs	r3, #2
 80013ee:	e002      	b.n	80013f6 <HAL_GPIO_Init+0x1ee>
 80013f0:	2301      	movs	r3, #1
 80013f2:	e000      	b.n	80013f6 <HAL_GPIO_Init+0x1ee>
 80013f4:	2300      	movs	r3, #0
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	f002 0203 	and.w	r2, r2, #3
 80013fc:	0092      	lsls	r2, r2, #2
 80013fe:	4093      	lsls	r3, r2
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	4313      	orrs	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001406:	4937      	ldr	r1, [pc, #220]	; (80014e4 <HAL_GPIO_Init+0x2dc>)
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	089b      	lsrs	r3, r3, #2
 800140c:	3302      	adds	r3, #2
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001414:	4b38      	ldr	r3, [pc, #224]	; (80014f8 <HAL_GPIO_Init+0x2f0>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	43db      	mvns	r3, r3
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	4013      	ands	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	4313      	orrs	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001438:	4a2f      	ldr	r2, [pc, #188]	; (80014f8 <HAL_GPIO_Init+0x2f0>)
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800143e:	4b2e      	ldr	r3, [pc, #184]	; (80014f8 <HAL_GPIO_Init+0x2f0>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	43db      	mvns	r3, r3
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	4013      	ands	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4313      	orrs	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001462:	4a25      	ldr	r2, [pc, #148]	; (80014f8 <HAL_GPIO_Init+0x2f0>)
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001468:	4b23      	ldr	r3, [pc, #140]	; (80014f8 <HAL_GPIO_Init+0x2f0>)
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	43db      	mvns	r3, r3
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	4013      	ands	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d003      	beq.n	800148c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800148c:	4a1a      	ldr	r2, [pc, #104]	; (80014f8 <HAL_GPIO_Init+0x2f0>)
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001492:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <HAL_GPIO_Init+0x2f0>)
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	43db      	mvns	r3, r3
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4013      	ands	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014b6:	4a10      	ldr	r2, [pc, #64]	; (80014f8 <HAL_GPIO_Init+0x2f0>)
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	3301      	adds	r3, #1
 80014c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	fa22 f303 	lsr.w	r3, r2, r3
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f47f aea3 	bne.w	8001218 <HAL_GPIO_Init+0x10>
  }
}
 80014d2:	bf00      	nop
 80014d4:	bf00      	nop
 80014d6:	371c      	adds	r7, #28
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40010000 	.word	0x40010000
 80014e8:	48000400 	.word	0x48000400
 80014ec:	48000800 	.word	0x48000800
 80014f0:	48000c00 	.word	0x48000c00
 80014f4:	48001000 	.word	0x48001000
 80014f8:	40010400 	.word	0x40010400

080014fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	460b      	mov	r3, r1
 8001506:	807b      	strh	r3, [r7, #2]
 8001508:	4613      	mov	r3, r2
 800150a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800150c:	787b      	ldrb	r3, [r7, #1]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001512:	887a      	ldrh	r2, [r7, #2]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001518:	e002      	b.n	8001520 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800151a:	887a      	ldrh	r2, [r7, #2]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e081      	b.n	8001642 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	d106      	bne.n	8001558 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff f8a6 	bl	80006a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2224      	movs	r2, #36	; 0x24
 800155c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f022 0201 	bic.w	r2, r2, #1
 800156e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800157c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800158c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d107      	bne.n	80015a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689a      	ldr	r2, [r3, #8]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	e006      	b.n	80015b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689a      	ldr	r2, [r3, #8]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80015b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d104      	bne.n	80015c6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	6812      	ldr	r2, [r2, #0]
 80015d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68da      	ldr	r2, [r3, #12]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	691a      	ldr	r2, [r3, #16]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	430a      	orrs	r2, r1
 8001602:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	69d9      	ldr	r1, [r3, #28]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a1a      	ldr	r2, [r3, #32]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	430a      	orrs	r2, r1
 8001612:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f042 0201 	orr.w	r2, r2, #1
 8001622:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2220      	movs	r2, #32
 800162e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800164a:	b480      	push	{r7}
 800164c:	b083      	sub	sp, #12
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
 8001652:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b20      	cmp	r3, #32
 800165e:	d138      	bne.n	80016d2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001666:	2b01      	cmp	r3, #1
 8001668:	d101      	bne.n	800166e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800166a:	2302      	movs	r3, #2
 800166c:	e032      	b.n	80016d4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2201      	movs	r2, #1
 8001672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2224      	movs	r2, #36	; 0x24
 800167a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f022 0201 	bic.w	r2, r2, #1
 800168c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800169c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6819      	ldr	r1, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f042 0201 	orr.w	r2, r2, #1
 80016bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2220      	movs	r2, #32
 80016c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80016ce:	2300      	movs	r3, #0
 80016d0:	e000      	b.n	80016d4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80016d2:	2302      	movs	r3, #2
  }
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b20      	cmp	r3, #32
 80016f4:	d139      	bne.n	800176a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d101      	bne.n	8001704 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001700:	2302      	movs	r3, #2
 8001702:	e033      	b.n	800176c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2201      	movs	r2, #1
 8001708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2224      	movs	r2, #36	; 0x24
 8001710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f022 0201 	bic.w	r2, r2, #1
 8001722:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001732:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	021b      	lsls	r3, r3, #8
 8001738:	68fa      	ldr	r2, [r7, #12]
 800173a:	4313      	orrs	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f042 0201 	orr.w	r2, r2, #1
 8001754:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2220      	movs	r2, #32
 800175a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001766:	2300      	movs	r3, #0
 8001768:	e000      	b.n	800176c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800176a:	2302      	movs	r3, #2
  }
}
 800176c:	4618      	mov	r0, r3
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800177a:	b08b      	sub	sp, #44	; 0x2c
 800177c:	af06      	add	r7, sp, #24
 800177e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d101      	bne.n	800178a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e0d0      	b.n	800192c <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d106      	bne.n	80017a4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff f8a4 	bl	80008ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2203      	movs	r2, #3
 80017a8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f003 fef4 	bl	800559e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017b6:	2300      	movs	r3, #0
 80017b8:	73fb      	strb	r3, [r7, #15]
 80017ba:	e04c      	b.n	8001856 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	6879      	ldr	r1, [r7, #4]
 80017c0:	1c5a      	adds	r2, r3, #1
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	440b      	add	r3, r1
 80017cc:	3301      	adds	r3, #1
 80017ce:	2201      	movs	r2, #1
 80017d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	6879      	ldr	r1, [r7, #4]
 80017d6:	1c5a      	adds	r2, r3, #1
 80017d8:	4613      	mov	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	440b      	add	r3, r1
 80017e2:	7bfa      	ldrb	r2, [r7, #15]
 80017e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80017e6:	7bfa      	ldrb	r2, [r7, #15]
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
 80017ea:	b298      	uxth	r0, r3
 80017ec:	6879      	ldr	r1, [r7, #4]
 80017ee:	4613      	mov	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	440b      	add	r3, r1
 80017f8:	3336      	adds	r3, #54	; 0x36
 80017fa:	4602      	mov	r2, r0
 80017fc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
 8001800:	6879      	ldr	r1, [r7, #4]
 8001802:	1c5a      	adds	r2, r3, #1
 8001804:	4613      	mov	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	440b      	add	r3, r1
 800180e:	3303      	adds	r3, #3
 8001810:	2200      	movs	r2, #0
 8001812:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001814:	7bfa      	ldrb	r2, [r7, #15]
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	4613      	mov	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	440b      	add	r3, r1
 8001822:	3338      	adds	r3, #56	; 0x38
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001828:	7bfa      	ldrb	r2, [r7, #15]
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	4613      	mov	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	440b      	add	r3, r1
 8001836:	333c      	adds	r3, #60	; 0x3c
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800183c:	7bfa      	ldrb	r2, [r7, #15]
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	4613      	mov	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	440b      	add	r3, r1
 800184a:	3340      	adds	r3, #64	; 0x40
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001850:	7bfb      	ldrb	r3, [r7, #15]
 8001852:	3301      	adds	r3, #1
 8001854:	73fb      	strb	r3, [r7, #15]
 8001856:	7bfa      	ldrb	r2, [r7, #15]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	429a      	cmp	r2, r3
 800185e:	d3ad      	bcc.n	80017bc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001860:	2300      	movs	r3, #0
 8001862:	73fb      	strb	r3, [r7, #15]
 8001864:	e044      	b.n	80018f0 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001866:	7bfa      	ldrb	r2, [r7, #15]
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	4613      	mov	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	440b      	add	r3, r1
 8001874:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800187c:	7bfa      	ldrb	r2, [r7, #15]
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	4613      	mov	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	440b      	add	r3, r1
 800188a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800188e:	7bfa      	ldrb	r2, [r7, #15]
 8001890:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001892:	7bfa      	ldrb	r2, [r7, #15]
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	4613      	mov	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4413      	add	r3, r2
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	440b      	add	r3, r1
 80018a0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80018a4:	2200      	movs	r2, #0
 80018a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018a8:	7bfa      	ldrb	r2, [r7, #15]
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	4613      	mov	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	4413      	add	r3, r2
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	440b      	add	r3, r1
 80018b6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018be:	7bfa      	ldrb	r2, [r7, #15]
 80018c0:	6879      	ldr	r1, [r7, #4]
 80018c2:	4613      	mov	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4413      	add	r3, r2
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	440b      	add	r3, r1
 80018cc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80018d4:	7bfa      	ldrb	r2, [r7, #15]
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	4613      	mov	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	440b      	add	r3, r1
 80018e2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
 80018ec:	3301      	adds	r3, #1
 80018ee:	73fb      	strb	r3, [r7, #15]
 80018f0:	7bfa      	ldrb	r2, [r7, #15]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d3b5      	bcc.n	8001866 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	603b      	str	r3, [r7, #0]
 8001900:	687e      	ldr	r6, [r7, #4]
 8001902:	466d      	mov	r5, sp
 8001904:	f106 0410 	add.w	r4, r6, #16
 8001908:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800190a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800190c:	6823      	ldr	r3, [r4, #0]
 800190e:	602b      	str	r3, [r5, #0]
 8001910:	1d33      	adds	r3, r6, #4
 8001912:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001914:	6838      	ldr	r0, [r7, #0]
 8001916:	f003 fe5d 	bl	80055d4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2201      	movs	r2, #1
 8001926:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001934 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800193a:	af00      	add	r7, sp, #0
 800193c:	1d3b      	adds	r3, r7, #4
 800193e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001940:	1d3b      	adds	r3, r7, #4
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d102      	bne.n	800194e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	f000 bef4 	b.w	8002736 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800194e:	1d3b      	adds	r3, r7, #4
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	2b00      	cmp	r3, #0
 800195a:	f000 816a 	beq.w	8001c32 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800195e:	4bb3      	ldr	r3, [pc, #716]	; (8001c2c <HAL_RCC_OscConfig+0x2f8>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f003 030c 	and.w	r3, r3, #12
 8001966:	2b04      	cmp	r3, #4
 8001968:	d00c      	beq.n	8001984 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800196a:	4bb0      	ldr	r3, [pc, #704]	; (8001c2c <HAL_RCC_OscConfig+0x2f8>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	2b08      	cmp	r3, #8
 8001974:	d159      	bne.n	8001a2a <HAL_RCC_OscConfig+0xf6>
 8001976:	4bad      	ldr	r3, [pc, #692]	; (8001c2c <HAL_RCC_OscConfig+0x2f8>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800197e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001982:	d152      	bne.n	8001a2a <HAL_RCC_OscConfig+0xf6>
 8001984:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001988:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001990:	fa93 f3a3 	rbit	r3, r3
 8001994:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001998:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800199c:	fab3 f383 	clz	r3, r3
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	095b      	lsrs	r3, r3, #5
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d102      	bne.n	80019b6 <HAL_RCC_OscConfig+0x82>
 80019b0:	4b9e      	ldr	r3, [pc, #632]	; (8001c2c <HAL_RCC_OscConfig+0x2f8>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	e015      	b.n	80019e2 <HAL_RCC_OscConfig+0xae>
 80019b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019ba:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019be:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80019c2:	fa93 f3a3 	rbit	r3, r3
 80019c6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80019ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019ce:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80019d2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80019d6:	fa93 f3a3 	rbit	r3, r3
 80019da:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80019de:	4b93      	ldr	r3, [pc, #588]	; (8001c2c <HAL_RCC_OscConfig+0x2f8>)
 80019e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019e6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80019ea:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80019ee:	fa92 f2a2 	rbit	r2, r2
 80019f2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80019f6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80019fa:	fab2 f282 	clz	r2, r2
 80019fe:	b2d2      	uxtb	r2, r2
 8001a00:	f042 0220 	orr.w	r2, r2, #32
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	f002 021f 	and.w	r2, r2, #31
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a10:	4013      	ands	r3, r2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 810c 	beq.w	8001c30 <HAL_RCC_OscConfig+0x2fc>
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f040 8106 	bne.w	8001c30 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	f000 be86 	b.w	8002736 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a2a:	1d3b      	adds	r3, r7, #4
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a34:	d106      	bne.n	8001a44 <HAL_RCC_OscConfig+0x110>
 8001a36:	4b7d      	ldr	r3, [pc, #500]	; (8001c2c <HAL_RCC_OscConfig+0x2f8>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a7c      	ldr	r2, [pc, #496]	; (8001c2c <HAL_RCC_OscConfig+0x2f8>)
 8001a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	e030      	b.n	8001aa6 <HAL_RCC_OscConfig+0x172>
 8001a44:	1d3b      	adds	r3, r7, #4
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10c      	bne.n	8001a68 <HAL_RCC_OscConfig+0x134>
 8001a4e:	4b77      	ldr	r3, [pc, #476]	; (8001c2c <HAL_RCC_OscConfig+0x2f8>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a76      	ldr	r2, [pc, #472]	; (8001c2c <HAL_RCC_OscConfig+0x2f8>)
 8001a54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	4b74      	ldr	r3, [pc, #464]	; (8001c2c <HAL_RCC_OscConfig+0x2f8>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a73      	ldr	r2, [pc, #460]	; (8001c2c <HAL_RCC_OscConfig+0x2f8>)
 8001a60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a64:	6013      	str	r3, [r2, #0]
 8001a66:	e01e      	b.n	8001aa6 <HAL_RCC_OscConfig+0x172>
 8001a68:	1d3b      	adds	r3, r7, #4
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a72:	d10c      	bne.n	8001a8e <HAL_RCC_OscConfig+0x15a>
 8001a74:	4b6d      	ldr	r3, [pc, #436]	; (8001c2c <HAL_RCC_OscConfig+0x2f8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a6c      	ldr	r2, [pc, #432]	; (8001c2c <HAL_RCC_OscConfig+0x2f8>)
 8001a7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a7e:	6013      	str	r3, [r2, #0]
 8001a80:	4b6a      	ldr	r3, [pc, #424]	; (8001c2c <HAL_RCC_OscConfig+0x2f8>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a69      	ldr	r2, [pc, #420]	; (8001c2c <HAL_RCC_OscConfig+0x2f8>)
 8001a86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	e00b      	b.n	8001aa6 <HAL_RCC_OscConfig+0x172>
 8001a8e:	4b67      	ldr	r3, [pc, #412]	; (8001c2c <HAL_RCC_OscConfig+0x2f8>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a66      	ldr	r2, [pc, #408]	; (8001c2c <HAL_RCC_OscConfig+0x2f8>)
 8001a94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	4b64      	ldr	r3, [pc, #400]	; (8001c2c <HAL_RCC_OscConfig+0x2f8>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a63      	ldr	r2, [pc, #396]	; (8001c2c <HAL_RCC_OscConfig+0x2f8>)
 8001aa0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aa4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001aa6:	4b61      	ldr	r3, [pc, #388]	; (8001c2c <HAL_RCC_OscConfig+0x2f8>)
 8001aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aaa:	f023 020f 	bic.w	r2, r3, #15
 8001aae:	1d3b      	adds	r3, r7, #4
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	495d      	ldr	r1, [pc, #372]	; (8001c2c <HAL_RCC_OscConfig+0x2f8>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d059      	beq.n	8001b78 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac4:	f7ff fa0c 	bl	8000ee0 <HAL_GetTick>
 8001ac8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001acc:	e00a      	b.n	8001ae4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ace:	f7ff fa07 	bl	8000ee0 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b64      	cmp	r3, #100	; 0x64
 8001adc:	d902      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	f000 be29 	b.w	8002736 <HAL_RCC_OscConfig+0xe02>
 8001ae4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ae8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aec:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001af0:	fa93 f3a3 	rbit	r3, r3
 8001af4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001af8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afc:	fab3 f383 	clz	r3, r3
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	095b      	lsrs	r3, r3, #5
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d102      	bne.n	8001b16 <HAL_RCC_OscConfig+0x1e2>
 8001b10:	4b46      	ldr	r3, [pc, #280]	; (8001c2c <HAL_RCC_OscConfig+0x2f8>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	e015      	b.n	8001b42 <HAL_RCC_OscConfig+0x20e>
 8001b16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b1a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001b22:	fa93 f3a3 	rbit	r3, r3
 8001b26:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001b2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b2e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001b32:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001b36:	fa93 f3a3 	rbit	r3, r3
 8001b3a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001b3e:	4b3b      	ldr	r3, [pc, #236]	; (8001c2c <HAL_RCC_OscConfig+0x2f8>)
 8001b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b46:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001b4a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001b4e:	fa92 f2a2 	rbit	r2, r2
 8001b52:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001b56:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001b5a:	fab2 f282 	clz	r2, r2
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	f042 0220 	orr.w	r2, r2, #32
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	f002 021f 	and.w	r2, r2, #31
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b70:	4013      	ands	r3, r2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0ab      	beq.n	8001ace <HAL_RCC_OscConfig+0x19a>
 8001b76:	e05c      	b.n	8001c32 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b78:	f7ff f9b2 	bl	8000ee0 <HAL_GetTick>
 8001b7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b80:	e00a      	b.n	8001b98 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b82:	f7ff f9ad 	bl	8000ee0 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b64      	cmp	r3, #100	; 0x64
 8001b90:	d902      	bls.n	8001b98 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	f000 bdcf 	b.w	8002736 <HAL_RCC_OscConfig+0xe02>
 8001b98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b9c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001ba4:	fa93 f3a3 	rbit	r3, r3
 8001ba8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001bac:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bb0:	fab3 f383 	clz	r3, r3
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	095b      	lsrs	r3, r3, #5
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	f043 0301 	orr.w	r3, r3, #1
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d102      	bne.n	8001bca <HAL_RCC_OscConfig+0x296>
 8001bc4:	4b19      	ldr	r3, [pc, #100]	; (8001c2c <HAL_RCC_OscConfig+0x2f8>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	e015      	b.n	8001bf6 <HAL_RCC_OscConfig+0x2c2>
 8001bca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bce:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001bd6:	fa93 f3a3 	rbit	r3, r3
 8001bda:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001bde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001be2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001be6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001bea:	fa93 f3a3 	rbit	r3, r3
 8001bee:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001bf2:	4b0e      	ldr	r3, [pc, #56]	; (8001c2c <HAL_RCC_OscConfig+0x2f8>)
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bfa:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001bfe:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001c02:	fa92 f2a2 	rbit	r2, r2
 8001c06:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001c0a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001c0e:	fab2 f282 	clz	r2, r2
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	f042 0220 	orr.w	r2, r2, #32
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	f002 021f 	and.w	r2, r2, #31
 8001c1e:	2101      	movs	r1, #1
 8001c20:	fa01 f202 	lsl.w	r2, r1, r2
 8001c24:	4013      	ands	r3, r2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1ab      	bne.n	8001b82 <HAL_RCC_OscConfig+0x24e>
 8001c2a:	e002      	b.n	8001c32 <HAL_RCC_OscConfig+0x2fe>
 8001c2c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c32:	1d3b      	adds	r3, r7, #4
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f000 816f 	beq.w	8001f20 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c42:	4bd0      	ldr	r3, [pc, #832]	; (8001f84 <HAL_RCC_OscConfig+0x650>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f003 030c 	and.w	r3, r3, #12
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00b      	beq.n	8001c66 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c4e:	4bcd      	ldr	r3, [pc, #820]	; (8001f84 <HAL_RCC_OscConfig+0x650>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f003 030c 	and.w	r3, r3, #12
 8001c56:	2b08      	cmp	r3, #8
 8001c58:	d16c      	bne.n	8001d34 <HAL_RCC_OscConfig+0x400>
 8001c5a:	4bca      	ldr	r3, [pc, #808]	; (8001f84 <HAL_RCC_OscConfig+0x650>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d166      	bne.n	8001d34 <HAL_RCC_OscConfig+0x400>
 8001c66:	2302      	movs	r3, #2
 8001c68:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001c70:	fa93 f3a3 	rbit	r3, r3
 8001c74:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001c78:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c7c:	fab3 f383 	clz	r3, r3
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	095b      	lsrs	r3, r3, #5
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	f043 0301 	orr.w	r3, r3, #1
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d102      	bne.n	8001c96 <HAL_RCC_OscConfig+0x362>
 8001c90:	4bbc      	ldr	r3, [pc, #752]	; (8001f84 <HAL_RCC_OscConfig+0x650>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	e013      	b.n	8001cbe <HAL_RCC_OscConfig+0x38a>
 8001c96:	2302      	movs	r3, #2
 8001c98:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001ca0:	fa93 f3a3 	rbit	r3, r3
 8001ca4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001ca8:	2302      	movs	r3, #2
 8001caa:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001cae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001cb2:	fa93 f3a3 	rbit	r3, r3
 8001cb6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001cba:	4bb2      	ldr	r3, [pc, #712]	; (8001f84 <HAL_RCC_OscConfig+0x650>)
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001cc4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001cc8:	fa92 f2a2 	rbit	r2, r2
 8001ccc:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001cd0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001cd4:	fab2 f282 	clz	r2, r2
 8001cd8:	b2d2      	uxtb	r2, r2
 8001cda:	f042 0220 	orr.w	r2, r2, #32
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	f002 021f 	and.w	r2, r2, #31
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cea:	4013      	ands	r3, r2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d007      	beq.n	8001d00 <HAL_RCC_OscConfig+0x3cc>
 8001cf0:	1d3b      	adds	r3, r7, #4
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d002      	beq.n	8001d00 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	f000 bd1b 	b.w	8002736 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d00:	4ba0      	ldr	r3, [pc, #640]	; (8001f84 <HAL_RCC_OscConfig+0x650>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d08:	1d3b      	adds	r3, r7, #4
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	21f8      	movs	r1, #248	; 0xf8
 8001d10:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d14:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001d18:	fa91 f1a1 	rbit	r1, r1
 8001d1c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001d20:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001d24:	fab1 f181 	clz	r1, r1
 8001d28:	b2c9      	uxtb	r1, r1
 8001d2a:	408b      	lsls	r3, r1
 8001d2c:	4995      	ldr	r1, [pc, #596]	; (8001f84 <HAL_RCC_OscConfig+0x650>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d32:	e0f5      	b.n	8001f20 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d34:	1d3b      	adds	r3, r7, #4
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 8085 	beq.w	8001e4a <HAL_RCC_OscConfig+0x516>
 8001d40:	2301      	movs	r3, #1
 8001d42:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d46:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001d4a:	fa93 f3a3 	rbit	r3, r3
 8001d4e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001d52:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d56:	fab3 f383 	clz	r3, r3
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	461a      	mov	r2, r3
 8001d68:	2301      	movs	r3, #1
 8001d6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6c:	f7ff f8b8 	bl	8000ee0 <HAL_GetTick>
 8001d70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d74:	e00a      	b.n	8001d8c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d76:	f7ff f8b3 	bl	8000ee0 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d902      	bls.n	8001d8c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	f000 bcd5 	b.w	8002736 <HAL_RCC_OscConfig+0xe02>
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d92:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001d96:	fa93 f3a3 	rbit	r3, r3
 8001d9a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001d9e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da2:	fab3 f383 	clz	r3, r3
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	095b      	lsrs	r3, r3, #5
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d102      	bne.n	8001dbc <HAL_RCC_OscConfig+0x488>
 8001db6:	4b73      	ldr	r3, [pc, #460]	; (8001f84 <HAL_RCC_OscConfig+0x650>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	e013      	b.n	8001de4 <HAL_RCC_OscConfig+0x4b0>
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001dc6:	fa93 f3a3 	rbit	r3, r3
 8001dca:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001dce:	2302      	movs	r3, #2
 8001dd0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001dd4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001dd8:	fa93 f3a3 	rbit	r3, r3
 8001ddc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001de0:	4b68      	ldr	r3, [pc, #416]	; (8001f84 <HAL_RCC_OscConfig+0x650>)
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de4:	2202      	movs	r2, #2
 8001de6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001dea:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001dee:	fa92 f2a2 	rbit	r2, r2
 8001df2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001df6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001dfa:	fab2 f282 	clz	r2, r2
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	f042 0220 	orr.w	r2, r2, #32
 8001e04:	b2d2      	uxtb	r2, r2
 8001e06:	f002 021f 	and.w	r2, r2, #31
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e10:	4013      	ands	r3, r2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0af      	beq.n	8001d76 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e16:	4b5b      	ldr	r3, [pc, #364]	; (8001f84 <HAL_RCC_OscConfig+0x650>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e1e:	1d3b      	adds	r3, r7, #4
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	21f8      	movs	r1, #248	; 0xf8
 8001e26:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001e2e:	fa91 f1a1 	rbit	r1, r1
 8001e32:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001e36:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001e3a:	fab1 f181 	clz	r1, r1
 8001e3e:	b2c9      	uxtb	r1, r1
 8001e40:	408b      	lsls	r3, r1
 8001e42:	4950      	ldr	r1, [pc, #320]	; (8001f84 <HAL_RCC_OscConfig+0x650>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	600b      	str	r3, [r1, #0]
 8001e48:	e06a      	b.n	8001f20 <HAL_RCC_OscConfig+0x5ec>
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e50:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001e54:	fa93 f3a3 	rbit	r3, r3
 8001e58:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001e5c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e60:	fab3 f383 	clz	r3, r3
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e6a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	461a      	mov	r2, r3
 8001e72:	2300      	movs	r3, #0
 8001e74:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e76:	f7ff f833 	bl	8000ee0 <HAL_GetTick>
 8001e7a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e7e:	e00a      	b.n	8001e96 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e80:	f7ff f82e 	bl	8000ee0 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d902      	bls.n	8001e96 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	f000 bc50 	b.w	8002736 <HAL_RCC_OscConfig+0xe02>
 8001e96:	2302      	movs	r3, #2
 8001e98:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001ea0:	fa93 f3a3 	rbit	r3, r3
 8001ea4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001ea8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eac:	fab3 f383 	clz	r3, r3
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	095b      	lsrs	r3, r3, #5
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	f043 0301 	orr.w	r3, r3, #1
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d102      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x592>
 8001ec0:	4b30      	ldr	r3, [pc, #192]	; (8001f84 <HAL_RCC_OscConfig+0x650>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	e013      	b.n	8001eee <HAL_RCC_OscConfig+0x5ba>
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ecc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001ed0:	fa93 f3a3 	rbit	r3, r3
 8001ed4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001ed8:	2302      	movs	r3, #2
 8001eda:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001ede:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001ee2:	fa93 f3a3 	rbit	r3, r3
 8001ee6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001eea:	4b26      	ldr	r3, [pc, #152]	; (8001f84 <HAL_RCC_OscConfig+0x650>)
 8001eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eee:	2202      	movs	r2, #2
 8001ef0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001ef4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001ef8:	fa92 f2a2 	rbit	r2, r2
 8001efc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001f00:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001f04:	fab2 f282 	clz	r2, r2
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	f042 0220 	orr.w	r2, r2, #32
 8001f0e:	b2d2      	uxtb	r2, r2
 8001f10:	f002 021f 	and.w	r2, r2, #31
 8001f14:	2101      	movs	r1, #1
 8001f16:	fa01 f202 	lsl.w	r2, r1, r2
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1af      	bne.n	8001e80 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f20:	1d3b      	adds	r3, r7, #4
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0308 	and.w	r3, r3, #8
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 80da 	beq.w	80020e4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f30:	1d3b      	adds	r3, r7, #4
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d069      	beq.n	800200e <HAL_RCC_OscConfig+0x6da>
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f40:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001f44:	fa93 f3a3 	rbit	r3, r3
 8001f48:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001f4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f50:	fab3 f383 	clz	r3, r3
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	461a      	mov	r2, r3
 8001f58:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <HAL_RCC_OscConfig+0x654>)
 8001f5a:	4413      	add	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	461a      	mov	r2, r3
 8001f60:	2301      	movs	r3, #1
 8001f62:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f64:	f7fe ffbc 	bl	8000ee0 <HAL_GetTick>
 8001f68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f6c:	e00e      	b.n	8001f8c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f6e:	f7fe ffb7 	bl	8000ee0 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d906      	bls.n	8001f8c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e3d9      	b.n	8002736 <HAL_RCC_OscConfig+0xe02>
 8001f82:	bf00      	nop
 8001f84:	40021000 	.word	0x40021000
 8001f88:	10908120 	.word	0x10908120
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f92:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001f96:	fa93 f3a3 	rbit	r3, r3
 8001f9a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001f9e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	fa93 f2a3 	rbit	r2, r3
 8001fb0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001fba:	2202      	movs	r2, #2
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	fa93 f2a3 	rbit	r2, r3
 8001fc8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001fcc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fce:	4ba5      	ldr	r3, [pc, #660]	; (8002264 <HAL_RCC_OscConfig+0x930>)
 8001fd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fd2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001fd6:	2102      	movs	r1, #2
 8001fd8:	6019      	str	r1, [r3, #0]
 8001fda:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	fa93 f1a3 	rbit	r1, r3
 8001fe4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001fe8:	6019      	str	r1, [r3, #0]
  return result;
 8001fea:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	fab3 f383 	clz	r3, r3
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	f003 031f 	and.w	r3, r3, #31
 8002000:	2101      	movs	r1, #1
 8002002:	fa01 f303 	lsl.w	r3, r1, r3
 8002006:	4013      	ands	r3, r2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0b0      	beq.n	8001f6e <HAL_RCC_OscConfig+0x63a>
 800200c:	e06a      	b.n	80020e4 <HAL_RCC_OscConfig+0x7b0>
 800200e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002012:	2201      	movs	r2, #1
 8002014:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002016:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	fa93 f2a3 	rbit	r2, r3
 8002020:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002024:	601a      	str	r2, [r3, #0]
  return result;
 8002026:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800202a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800202c:	fab3 f383 	clz	r3, r3
 8002030:	b2db      	uxtb	r3, r3
 8002032:	461a      	mov	r2, r3
 8002034:	4b8c      	ldr	r3, [pc, #560]	; (8002268 <HAL_RCC_OscConfig+0x934>)
 8002036:	4413      	add	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	461a      	mov	r2, r3
 800203c:	2300      	movs	r3, #0
 800203e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002040:	f7fe ff4e 	bl	8000ee0 <HAL_GetTick>
 8002044:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002048:	e009      	b.n	800205e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800204a:	f7fe ff49 	bl	8000ee0 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e36b      	b.n	8002736 <HAL_RCC_OscConfig+0xe02>
 800205e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002062:	2202      	movs	r2, #2
 8002064:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002066:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	fa93 f2a3 	rbit	r2, r3
 8002070:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800207a:	2202      	movs	r2, #2
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	fa93 f2a3 	rbit	r2, r3
 8002088:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002092:	2202      	movs	r2, #2
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	fa93 f2a3 	rbit	r2, r3
 80020a0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020a4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a6:	4b6f      	ldr	r3, [pc, #444]	; (8002264 <HAL_RCC_OscConfig+0x930>)
 80020a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020aa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80020ae:	2102      	movs	r1, #2
 80020b0:	6019      	str	r1, [r3, #0]
 80020b2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	fa93 f1a3 	rbit	r1, r3
 80020bc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80020c0:	6019      	str	r1, [r3, #0]
  return result;
 80020c2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	fab3 f383 	clz	r3, r3
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	f003 031f 	and.w	r3, r3, #31
 80020d8:	2101      	movs	r1, #1
 80020da:	fa01 f303 	lsl.w	r3, r1, r3
 80020de:	4013      	ands	r3, r2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1b2      	bne.n	800204a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020e4:	1d3b      	adds	r3, r7, #4
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0304 	and.w	r3, r3, #4
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f000 8158 	beq.w	80023a4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020f4:	2300      	movs	r3, #0
 80020f6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020fa:	4b5a      	ldr	r3, [pc, #360]	; (8002264 <HAL_RCC_OscConfig+0x930>)
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d112      	bne.n	800212c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002106:	4b57      	ldr	r3, [pc, #348]	; (8002264 <HAL_RCC_OscConfig+0x930>)
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	4a56      	ldr	r2, [pc, #344]	; (8002264 <HAL_RCC_OscConfig+0x930>)
 800210c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002110:	61d3      	str	r3, [r2, #28]
 8002112:	4b54      	ldr	r3, [pc, #336]	; (8002264 <HAL_RCC_OscConfig+0x930>)
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800211a:	f107 0308 	add.w	r3, r7, #8
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	f107 0308 	add.w	r3, r7, #8
 8002124:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002126:	2301      	movs	r3, #1
 8002128:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212c:	4b4f      	ldr	r3, [pc, #316]	; (800226c <HAL_RCC_OscConfig+0x938>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002134:	2b00      	cmp	r3, #0
 8002136:	d11a      	bne.n	800216e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002138:	4b4c      	ldr	r3, [pc, #304]	; (800226c <HAL_RCC_OscConfig+0x938>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a4b      	ldr	r2, [pc, #300]	; (800226c <HAL_RCC_OscConfig+0x938>)
 800213e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002142:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002144:	f7fe fecc 	bl	8000ee0 <HAL_GetTick>
 8002148:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800214c:	e009      	b.n	8002162 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800214e:	f7fe fec7 	bl	8000ee0 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b64      	cmp	r3, #100	; 0x64
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e2e9      	b.n	8002736 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002162:	4b42      	ldr	r3, [pc, #264]	; (800226c <HAL_RCC_OscConfig+0x938>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0ef      	beq.n	800214e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800216e:	1d3b      	adds	r3, r7, #4
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d106      	bne.n	8002186 <HAL_RCC_OscConfig+0x852>
 8002178:	4b3a      	ldr	r3, [pc, #232]	; (8002264 <HAL_RCC_OscConfig+0x930>)
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	4a39      	ldr	r2, [pc, #228]	; (8002264 <HAL_RCC_OscConfig+0x930>)
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	6213      	str	r3, [r2, #32]
 8002184:	e02f      	b.n	80021e6 <HAL_RCC_OscConfig+0x8b2>
 8002186:	1d3b      	adds	r3, r7, #4
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d10c      	bne.n	80021aa <HAL_RCC_OscConfig+0x876>
 8002190:	4b34      	ldr	r3, [pc, #208]	; (8002264 <HAL_RCC_OscConfig+0x930>)
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	4a33      	ldr	r2, [pc, #204]	; (8002264 <HAL_RCC_OscConfig+0x930>)
 8002196:	f023 0301 	bic.w	r3, r3, #1
 800219a:	6213      	str	r3, [r2, #32]
 800219c:	4b31      	ldr	r3, [pc, #196]	; (8002264 <HAL_RCC_OscConfig+0x930>)
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	4a30      	ldr	r2, [pc, #192]	; (8002264 <HAL_RCC_OscConfig+0x930>)
 80021a2:	f023 0304 	bic.w	r3, r3, #4
 80021a6:	6213      	str	r3, [r2, #32]
 80021a8:	e01d      	b.n	80021e6 <HAL_RCC_OscConfig+0x8b2>
 80021aa:	1d3b      	adds	r3, r7, #4
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	2b05      	cmp	r3, #5
 80021b2:	d10c      	bne.n	80021ce <HAL_RCC_OscConfig+0x89a>
 80021b4:	4b2b      	ldr	r3, [pc, #172]	; (8002264 <HAL_RCC_OscConfig+0x930>)
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	4a2a      	ldr	r2, [pc, #168]	; (8002264 <HAL_RCC_OscConfig+0x930>)
 80021ba:	f043 0304 	orr.w	r3, r3, #4
 80021be:	6213      	str	r3, [r2, #32]
 80021c0:	4b28      	ldr	r3, [pc, #160]	; (8002264 <HAL_RCC_OscConfig+0x930>)
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	4a27      	ldr	r2, [pc, #156]	; (8002264 <HAL_RCC_OscConfig+0x930>)
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	6213      	str	r3, [r2, #32]
 80021cc:	e00b      	b.n	80021e6 <HAL_RCC_OscConfig+0x8b2>
 80021ce:	4b25      	ldr	r3, [pc, #148]	; (8002264 <HAL_RCC_OscConfig+0x930>)
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	4a24      	ldr	r2, [pc, #144]	; (8002264 <HAL_RCC_OscConfig+0x930>)
 80021d4:	f023 0301 	bic.w	r3, r3, #1
 80021d8:	6213      	str	r3, [r2, #32]
 80021da:	4b22      	ldr	r3, [pc, #136]	; (8002264 <HAL_RCC_OscConfig+0x930>)
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	4a21      	ldr	r2, [pc, #132]	; (8002264 <HAL_RCC_OscConfig+0x930>)
 80021e0:	f023 0304 	bic.w	r3, r3, #4
 80021e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021e6:	1d3b      	adds	r3, r7, #4
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d06b      	beq.n	80022c8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f0:	f7fe fe76 	bl	8000ee0 <HAL_GetTick>
 80021f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f8:	e00b      	b.n	8002212 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021fa:	f7fe fe71 	bl	8000ee0 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	f241 3288 	movw	r2, #5000	; 0x1388
 800220a:	4293      	cmp	r3, r2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e291      	b.n	8002736 <HAL_RCC_OscConfig+0xe02>
 8002212:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002216:	2202      	movs	r2, #2
 8002218:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	fa93 f2a3 	rbit	r2, r3
 8002224:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800222e:	2202      	movs	r2, #2
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	fa93 f2a3 	rbit	r2, r3
 800223c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002240:	601a      	str	r2, [r3, #0]
  return result;
 8002242:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002246:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002248:	fab3 f383 	clz	r3, r3
 800224c:	b2db      	uxtb	r3, r3
 800224e:	095b      	lsrs	r3, r3, #5
 8002250:	b2db      	uxtb	r3, r3
 8002252:	f043 0302 	orr.w	r3, r3, #2
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d109      	bne.n	8002270 <HAL_RCC_OscConfig+0x93c>
 800225c:	4b01      	ldr	r3, [pc, #4]	; (8002264 <HAL_RCC_OscConfig+0x930>)
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	e014      	b.n	800228c <HAL_RCC_OscConfig+0x958>
 8002262:	bf00      	nop
 8002264:	40021000 	.word	0x40021000
 8002268:	10908120 	.word	0x10908120
 800226c:	40007000 	.word	0x40007000
 8002270:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002274:	2202      	movs	r2, #2
 8002276:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002278:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	fa93 f2a3 	rbit	r2, r3
 8002282:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	4bbb      	ldr	r3, [pc, #748]	; (8002578 <HAL_RCC_OscConfig+0xc44>)
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002290:	2102      	movs	r1, #2
 8002292:	6011      	str	r1, [r2, #0]
 8002294:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002298:	6812      	ldr	r2, [r2, #0]
 800229a:	fa92 f1a2 	rbit	r1, r2
 800229e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80022a2:	6011      	str	r1, [r2, #0]
  return result;
 80022a4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80022a8:	6812      	ldr	r2, [r2, #0]
 80022aa:	fab2 f282 	clz	r2, r2
 80022ae:	b2d2      	uxtb	r2, r2
 80022b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	f002 021f 	and.w	r2, r2, #31
 80022ba:	2101      	movs	r1, #1
 80022bc:	fa01 f202 	lsl.w	r2, r1, r2
 80022c0:	4013      	ands	r3, r2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d099      	beq.n	80021fa <HAL_RCC_OscConfig+0x8c6>
 80022c6:	e063      	b.n	8002390 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c8:	f7fe fe0a 	bl	8000ee0 <HAL_GetTick>
 80022cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d0:	e00b      	b.n	80022ea <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022d2:	f7fe fe05 	bl	8000ee0 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e225      	b.n	8002736 <HAL_RCC_OscConfig+0xe02>
 80022ea:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80022ee:	2202      	movs	r2, #2
 80022f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	fa93 f2a3 	rbit	r2, r3
 80022fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002306:	2202      	movs	r2, #2
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	fa93 f2a3 	rbit	r2, r3
 8002314:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002318:	601a      	str	r2, [r3, #0]
  return result;
 800231a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800231e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002320:	fab3 f383 	clz	r3, r3
 8002324:	b2db      	uxtb	r3, r3
 8002326:	095b      	lsrs	r3, r3, #5
 8002328:	b2db      	uxtb	r3, r3
 800232a:	f043 0302 	orr.w	r3, r3, #2
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d102      	bne.n	800233a <HAL_RCC_OscConfig+0xa06>
 8002334:	4b90      	ldr	r3, [pc, #576]	; (8002578 <HAL_RCC_OscConfig+0xc44>)
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	e00d      	b.n	8002356 <HAL_RCC_OscConfig+0xa22>
 800233a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800233e:	2202      	movs	r2, #2
 8002340:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002342:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	fa93 f2a3 	rbit	r2, r3
 800234c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	4b89      	ldr	r3, [pc, #548]	; (8002578 <HAL_RCC_OscConfig+0xc44>)
 8002354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002356:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800235a:	2102      	movs	r1, #2
 800235c:	6011      	str	r1, [r2, #0]
 800235e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002362:	6812      	ldr	r2, [r2, #0]
 8002364:	fa92 f1a2 	rbit	r1, r2
 8002368:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800236c:	6011      	str	r1, [r2, #0]
  return result;
 800236e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002372:	6812      	ldr	r2, [r2, #0]
 8002374:	fab2 f282 	clz	r2, r2
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	f002 021f 	and.w	r2, r2, #31
 8002384:	2101      	movs	r1, #1
 8002386:	fa01 f202 	lsl.w	r2, r1, r2
 800238a:	4013      	ands	r3, r2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1a0      	bne.n	80022d2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002390:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002394:	2b01      	cmp	r3, #1
 8002396:	d105      	bne.n	80023a4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002398:	4b77      	ldr	r3, [pc, #476]	; (8002578 <HAL_RCC_OscConfig+0xc44>)
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	4a76      	ldr	r2, [pc, #472]	; (8002578 <HAL_RCC_OscConfig+0xc44>)
 800239e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023a2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023a4:	1d3b      	adds	r3, r7, #4
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 81c2 	beq.w	8002734 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023b0:	4b71      	ldr	r3, [pc, #452]	; (8002578 <HAL_RCC_OscConfig+0xc44>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f003 030c 	and.w	r3, r3, #12
 80023b8:	2b08      	cmp	r3, #8
 80023ba:	f000 819c 	beq.w	80026f6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023be:	1d3b      	adds	r3, r7, #4
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	69db      	ldr	r3, [r3, #28]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	f040 8114 	bne.w	80025f2 <HAL_RCC_OscConfig+0xcbe>
 80023ca:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80023ce:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	fa93 f2a3 	rbit	r2, r3
 80023de:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80023e2:	601a      	str	r2, [r3, #0]
  return result;
 80023e4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80023e8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ea:	fab3 f383 	clz	r3, r3
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	461a      	mov	r2, r3
 80023fc:	2300      	movs	r3, #0
 80023fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002400:	f7fe fd6e 	bl	8000ee0 <HAL_GetTick>
 8002404:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002408:	e009      	b.n	800241e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800240a:	f7fe fd69 	bl	8000ee0 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e18b      	b.n	8002736 <HAL_RCC_OscConfig+0xe02>
 800241e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002422:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002426:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002428:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	fa93 f2a3 	rbit	r2, r3
 8002432:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002436:	601a      	str	r2, [r3, #0]
  return result;
 8002438:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800243c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800243e:	fab3 f383 	clz	r3, r3
 8002442:	b2db      	uxtb	r3, r3
 8002444:	095b      	lsrs	r3, r3, #5
 8002446:	b2db      	uxtb	r3, r3
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b01      	cmp	r3, #1
 8002450:	d102      	bne.n	8002458 <HAL_RCC_OscConfig+0xb24>
 8002452:	4b49      	ldr	r3, [pc, #292]	; (8002578 <HAL_RCC_OscConfig+0xc44>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	e01b      	b.n	8002490 <HAL_RCC_OscConfig+0xb5c>
 8002458:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800245c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002460:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002462:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	fa93 f2a3 	rbit	r2, r3
 800246c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002476:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	fa93 f2a3 	rbit	r2, r3
 8002486:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	4b3a      	ldr	r3, [pc, #232]	; (8002578 <HAL_RCC_OscConfig+0xc44>)
 800248e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002490:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002494:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002498:	6011      	str	r1, [r2, #0]
 800249a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800249e:	6812      	ldr	r2, [r2, #0]
 80024a0:	fa92 f1a2 	rbit	r1, r2
 80024a4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80024a8:	6011      	str	r1, [r2, #0]
  return result;
 80024aa:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80024ae:	6812      	ldr	r2, [r2, #0]
 80024b0:	fab2 f282 	clz	r2, r2
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	f042 0220 	orr.w	r2, r2, #32
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	f002 021f 	and.w	r2, r2, #31
 80024c0:	2101      	movs	r1, #1
 80024c2:	fa01 f202 	lsl.w	r2, r1, r2
 80024c6:	4013      	ands	r3, r2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d19e      	bne.n	800240a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024cc:	4b2a      	ldr	r3, [pc, #168]	; (8002578 <HAL_RCC_OscConfig+0xc44>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024d4:	1d3b      	adds	r3, r7, #4
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80024da:	1d3b      	adds	r3, r7, #4
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	430b      	orrs	r3, r1
 80024e2:	4925      	ldr	r1, [pc, #148]	; (8002578 <HAL_RCC_OscConfig+0xc44>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	604b      	str	r3, [r1, #4]
 80024e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80024ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	fa93 f2a3 	rbit	r2, r3
 80024fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002500:	601a      	str	r2, [r3, #0]
  return result;
 8002502:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002506:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002508:	fab3 f383 	clz	r3, r3
 800250c:	b2db      	uxtb	r3, r3
 800250e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002512:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	461a      	mov	r2, r3
 800251a:	2301      	movs	r3, #1
 800251c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251e:	f7fe fcdf 	bl	8000ee0 <HAL_GetTick>
 8002522:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002526:	e009      	b.n	800253c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002528:	f7fe fcda 	bl	8000ee0 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e0fc      	b.n	8002736 <HAL_RCC_OscConfig+0xe02>
 800253c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002540:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002544:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002546:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	fa93 f2a3 	rbit	r2, r3
 8002550:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002554:	601a      	str	r2, [r3, #0]
  return result;
 8002556:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800255a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800255c:	fab3 f383 	clz	r3, r3
 8002560:	b2db      	uxtb	r3, r3
 8002562:	095b      	lsrs	r3, r3, #5
 8002564:	b2db      	uxtb	r3, r3
 8002566:	f043 0301 	orr.w	r3, r3, #1
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b01      	cmp	r3, #1
 800256e:	d105      	bne.n	800257c <HAL_RCC_OscConfig+0xc48>
 8002570:	4b01      	ldr	r3, [pc, #4]	; (8002578 <HAL_RCC_OscConfig+0xc44>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	e01e      	b.n	80025b4 <HAL_RCC_OscConfig+0xc80>
 8002576:	bf00      	nop
 8002578:	40021000 	.word	0x40021000
 800257c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002580:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002584:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002586:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	fa93 f2a3 	rbit	r2, r3
 8002590:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800259a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	fa93 f2a3 	rbit	r2, r3
 80025aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	4b63      	ldr	r3, [pc, #396]	; (8002740 <HAL_RCC_OscConfig+0xe0c>)
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80025b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025bc:	6011      	str	r1, [r2, #0]
 80025be:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80025c2:	6812      	ldr	r2, [r2, #0]
 80025c4:	fa92 f1a2 	rbit	r1, r2
 80025c8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80025cc:	6011      	str	r1, [r2, #0]
  return result;
 80025ce:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80025d2:	6812      	ldr	r2, [r2, #0]
 80025d4:	fab2 f282 	clz	r2, r2
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	f042 0220 	orr.w	r2, r2, #32
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	f002 021f 	and.w	r2, r2, #31
 80025e4:	2101      	movs	r1, #1
 80025e6:	fa01 f202 	lsl.w	r2, r1, r2
 80025ea:	4013      	ands	r3, r2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d09b      	beq.n	8002528 <HAL_RCC_OscConfig+0xbf4>
 80025f0:	e0a0      	b.n	8002734 <HAL_RCC_OscConfig+0xe00>
 80025f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	fa93 f2a3 	rbit	r2, r3
 8002606:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800260a:	601a      	str	r2, [r3, #0]
  return result;
 800260c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002610:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002612:	fab3 f383 	clz	r3, r3
 8002616:	b2db      	uxtb	r3, r3
 8002618:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800261c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	461a      	mov	r2, r3
 8002624:	2300      	movs	r3, #0
 8002626:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002628:	f7fe fc5a 	bl	8000ee0 <HAL_GetTick>
 800262c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002630:	e009      	b.n	8002646 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002632:	f7fe fc55 	bl	8000ee0 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e077      	b.n	8002736 <HAL_RCC_OscConfig+0xe02>
 8002646:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800264a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800264e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002650:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	fa93 f2a3 	rbit	r2, r3
 800265a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800265e:	601a      	str	r2, [r3, #0]
  return result;
 8002660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002664:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002666:	fab3 f383 	clz	r3, r3
 800266a:	b2db      	uxtb	r3, r3
 800266c:	095b      	lsrs	r3, r3, #5
 800266e:	b2db      	uxtb	r3, r3
 8002670:	f043 0301 	orr.w	r3, r3, #1
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b01      	cmp	r3, #1
 8002678:	d102      	bne.n	8002680 <HAL_RCC_OscConfig+0xd4c>
 800267a:	4b31      	ldr	r3, [pc, #196]	; (8002740 <HAL_RCC_OscConfig+0xe0c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	e01b      	b.n	80026b8 <HAL_RCC_OscConfig+0xd84>
 8002680:	f107 0320 	add.w	r3, r7, #32
 8002684:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002688:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268a:	f107 0320 	add.w	r3, r7, #32
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	fa93 f2a3 	rbit	r2, r3
 8002694:	f107 031c 	add.w	r3, r7, #28
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	f107 0318 	add.w	r3, r7, #24
 800269e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	f107 0318 	add.w	r3, r7, #24
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	fa93 f2a3 	rbit	r2, r3
 80026ae:	f107 0314 	add.w	r3, r7, #20
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	4b22      	ldr	r3, [pc, #136]	; (8002740 <HAL_RCC_OscConfig+0xe0c>)
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b8:	f107 0210 	add.w	r2, r7, #16
 80026bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80026c0:	6011      	str	r1, [r2, #0]
 80026c2:	f107 0210 	add.w	r2, r7, #16
 80026c6:	6812      	ldr	r2, [r2, #0]
 80026c8:	fa92 f1a2 	rbit	r1, r2
 80026cc:	f107 020c 	add.w	r2, r7, #12
 80026d0:	6011      	str	r1, [r2, #0]
  return result;
 80026d2:	f107 020c 	add.w	r2, r7, #12
 80026d6:	6812      	ldr	r2, [r2, #0]
 80026d8:	fab2 f282 	clz	r2, r2
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	f042 0220 	orr.w	r2, r2, #32
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	f002 021f 	and.w	r2, r2, #31
 80026e8:	2101      	movs	r1, #1
 80026ea:	fa01 f202 	lsl.w	r2, r1, r2
 80026ee:	4013      	ands	r3, r2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d19e      	bne.n	8002632 <HAL_RCC_OscConfig+0xcfe>
 80026f4:	e01e      	b.n	8002734 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026f6:	1d3b      	adds	r3, r7, #4
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d101      	bne.n	8002704 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e018      	b.n	8002736 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002704:	4b0e      	ldr	r3, [pc, #56]	; (8002740 <HAL_RCC_OscConfig+0xe0c>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800270c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002710:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002714:	1d3b      	adds	r3, r7, #4
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	429a      	cmp	r2, r3
 800271c:	d108      	bne.n	8002730 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800271e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002722:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002726:	1d3b      	adds	r3, r7, #4
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800272c:	429a      	cmp	r2, r3
 800272e:	d001      	beq.n	8002734 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e000      	b.n	8002736 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40021000 	.word	0x40021000

08002744 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b09e      	sub	sp, #120	; 0x78
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800274e:	2300      	movs	r3, #0
 8002750:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e162      	b.n	8002a22 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800275c:	4b90      	ldr	r3, [pc, #576]	; (80029a0 <HAL_RCC_ClockConfig+0x25c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	429a      	cmp	r2, r3
 8002768:	d910      	bls.n	800278c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276a:	4b8d      	ldr	r3, [pc, #564]	; (80029a0 <HAL_RCC_ClockConfig+0x25c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f023 0207 	bic.w	r2, r3, #7
 8002772:	498b      	ldr	r1, [pc, #556]	; (80029a0 <HAL_RCC_ClockConfig+0x25c>)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	4313      	orrs	r3, r2
 8002778:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800277a:	4b89      	ldr	r3, [pc, #548]	; (80029a0 <HAL_RCC_ClockConfig+0x25c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	429a      	cmp	r2, r3
 8002786:	d001      	beq.n	800278c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e14a      	b.n	8002a22 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d008      	beq.n	80027aa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002798:	4b82      	ldr	r3, [pc, #520]	; (80029a4 <HAL_RCC_ClockConfig+0x260>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	497f      	ldr	r1, [pc, #508]	; (80029a4 <HAL_RCC_ClockConfig+0x260>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 80dc 	beq.w	8002970 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d13c      	bne.n	800283a <HAL_RCC_ClockConfig+0xf6>
 80027c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027c4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027c8:	fa93 f3a3 	rbit	r3, r3
 80027cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80027ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d0:	fab3 f383 	clz	r3, r3
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	095b      	lsrs	r3, r3, #5
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d102      	bne.n	80027ea <HAL_RCC_ClockConfig+0xa6>
 80027e4:	4b6f      	ldr	r3, [pc, #444]	; (80029a4 <HAL_RCC_ClockConfig+0x260>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	e00f      	b.n	800280a <HAL_RCC_ClockConfig+0xc6>
 80027ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027ee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027f2:	fa93 f3a3 	rbit	r3, r3
 80027f6:	667b      	str	r3, [r7, #100]	; 0x64
 80027f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027fc:	663b      	str	r3, [r7, #96]	; 0x60
 80027fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002800:	fa93 f3a3 	rbit	r3, r3
 8002804:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002806:	4b67      	ldr	r3, [pc, #412]	; (80029a4 <HAL_RCC_ClockConfig+0x260>)
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800280e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002810:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002812:	fa92 f2a2 	rbit	r2, r2
 8002816:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002818:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800281a:	fab2 f282 	clz	r2, r2
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	f042 0220 	orr.w	r2, r2, #32
 8002824:	b2d2      	uxtb	r2, r2
 8002826:	f002 021f 	and.w	r2, r2, #31
 800282a:	2101      	movs	r1, #1
 800282c:	fa01 f202 	lsl.w	r2, r1, r2
 8002830:	4013      	ands	r3, r2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d17b      	bne.n	800292e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e0f3      	b.n	8002a22 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2b02      	cmp	r3, #2
 8002840:	d13c      	bne.n	80028bc <HAL_RCC_ClockConfig+0x178>
 8002842:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002846:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002848:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800284a:	fa93 f3a3 	rbit	r3, r3
 800284e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002852:	fab3 f383 	clz	r3, r3
 8002856:	b2db      	uxtb	r3, r3
 8002858:	095b      	lsrs	r3, r3, #5
 800285a:	b2db      	uxtb	r3, r3
 800285c:	f043 0301 	orr.w	r3, r3, #1
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b01      	cmp	r3, #1
 8002864:	d102      	bne.n	800286c <HAL_RCC_ClockConfig+0x128>
 8002866:	4b4f      	ldr	r3, [pc, #316]	; (80029a4 <HAL_RCC_ClockConfig+0x260>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	e00f      	b.n	800288c <HAL_RCC_ClockConfig+0x148>
 800286c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002870:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002874:	fa93 f3a3 	rbit	r3, r3
 8002878:	647b      	str	r3, [r7, #68]	; 0x44
 800287a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800287e:	643b      	str	r3, [r7, #64]	; 0x40
 8002880:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002882:	fa93 f3a3 	rbit	r3, r3
 8002886:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002888:	4b46      	ldr	r3, [pc, #280]	; (80029a4 <HAL_RCC_ClockConfig+0x260>)
 800288a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002890:	63ba      	str	r2, [r7, #56]	; 0x38
 8002892:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002894:	fa92 f2a2 	rbit	r2, r2
 8002898:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800289a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800289c:	fab2 f282 	clz	r2, r2
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	f042 0220 	orr.w	r2, r2, #32
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	f002 021f 	and.w	r2, r2, #31
 80028ac:	2101      	movs	r1, #1
 80028ae:	fa01 f202 	lsl.w	r2, r1, r2
 80028b2:	4013      	ands	r3, r2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d13a      	bne.n	800292e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e0b2      	b.n	8002a22 <HAL_RCC_ClockConfig+0x2de>
 80028bc:	2302      	movs	r3, #2
 80028be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c2:	fa93 f3a3 	rbit	r3, r3
 80028c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80028c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ca:	fab3 f383 	clz	r3, r3
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	095b      	lsrs	r3, r3, #5
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	f043 0301 	orr.w	r3, r3, #1
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d102      	bne.n	80028e4 <HAL_RCC_ClockConfig+0x1a0>
 80028de:	4b31      	ldr	r3, [pc, #196]	; (80029a4 <HAL_RCC_ClockConfig+0x260>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	e00d      	b.n	8002900 <HAL_RCC_ClockConfig+0x1bc>
 80028e4:	2302      	movs	r3, #2
 80028e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ea:	fa93 f3a3 	rbit	r3, r3
 80028ee:	627b      	str	r3, [r7, #36]	; 0x24
 80028f0:	2302      	movs	r3, #2
 80028f2:	623b      	str	r3, [r7, #32]
 80028f4:	6a3b      	ldr	r3, [r7, #32]
 80028f6:	fa93 f3a3 	rbit	r3, r3
 80028fa:	61fb      	str	r3, [r7, #28]
 80028fc:	4b29      	ldr	r3, [pc, #164]	; (80029a4 <HAL_RCC_ClockConfig+0x260>)
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	2202      	movs	r2, #2
 8002902:	61ba      	str	r2, [r7, #24]
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	fa92 f2a2 	rbit	r2, r2
 800290a:	617a      	str	r2, [r7, #20]
  return result;
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	fab2 f282 	clz	r2, r2
 8002912:	b2d2      	uxtb	r2, r2
 8002914:	f042 0220 	orr.w	r2, r2, #32
 8002918:	b2d2      	uxtb	r2, r2
 800291a:	f002 021f 	and.w	r2, r2, #31
 800291e:	2101      	movs	r1, #1
 8002920:	fa01 f202 	lsl.w	r2, r1, r2
 8002924:	4013      	ands	r3, r2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e079      	b.n	8002a22 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800292e:	4b1d      	ldr	r3, [pc, #116]	; (80029a4 <HAL_RCC_ClockConfig+0x260>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f023 0203 	bic.w	r2, r3, #3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	491a      	ldr	r1, [pc, #104]	; (80029a4 <HAL_RCC_ClockConfig+0x260>)
 800293c:	4313      	orrs	r3, r2
 800293e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002940:	f7fe face 	bl	8000ee0 <HAL_GetTick>
 8002944:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002946:	e00a      	b.n	800295e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002948:	f7fe faca 	bl	8000ee0 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	f241 3288 	movw	r2, #5000	; 0x1388
 8002956:	4293      	cmp	r3, r2
 8002958:	d901      	bls.n	800295e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e061      	b.n	8002a22 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800295e:	4b11      	ldr	r3, [pc, #68]	; (80029a4 <HAL_RCC_ClockConfig+0x260>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f003 020c 	and.w	r2, r3, #12
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	429a      	cmp	r2, r3
 800296e:	d1eb      	bne.n	8002948 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002970:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <HAL_RCC_ClockConfig+0x25c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	d214      	bcs.n	80029a8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297e:	4b08      	ldr	r3, [pc, #32]	; (80029a0 <HAL_RCC_ClockConfig+0x25c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f023 0207 	bic.w	r2, r3, #7
 8002986:	4906      	ldr	r1, [pc, #24]	; (80029a0 <HAL_RCC_ClockConfig+0x25c>)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	4313      	orrs	r3, r2
 800298c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800298e:	4b04      	ldr	r3, [pc, #16]	; (80029a0 <HAL_RCC_ClockConfig+0x25c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	429a      	cmp	r2, r3
 800299a:	d005      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e040      	b.n	8002a22 <HAL_RCC_ClockConfig+0x2de>
 80029a0:	40022000 	.word	0x40022000
 80029a4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d008      	beq.n	80029c6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029b4:	4b1d      	ldr	r3, [pc, #116]	; (8002a2c <HAL_RCC_ClockConfig+0x2e8>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	491a      	ldr	r1, [pc, #104]	; (8002a2c <HAL_RCC_ClockConfig+0x2e8>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0308 	and.w	r3, r3, #8
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d009      	beq.n	80029e6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029d2:	4b16      	ldr	r3, [pc, #88]	; (8002a2c <HAL_RCC_ClockConfig+0x2e8>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	4912      	ldr	r1, [pc, #72]	; (8002a2c <HAL_RCC_ClockConfig+0x2e8>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80029e6:	f000 f829 	bl	8002a3c <HAL_RCC_GetSysClockFreq>
 80029ea:	4601      	mov	r1, r0
 80029ec:	4b0f      	ldr	r3, [pc, #60]	; (8002a2c <HAL_RCC_ClockConfig+0x2e8>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029f4:	22f0      	movs	r2, #240	; 0xf0
 80029f6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	fa92 f2a2 	rbit	r2, r2
 80029fe:	60fa      	str	r2, [r7, #12]
  return result;
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	fab2 f282 	clz	r2, r2
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	40d3      	lsrs	r3, r2
 8002a0a:	4a09      	ldr	r2, [pc, #36]	; (8002a30 <HAL_RCC_ClockConfig+0x2ec>)
 8002a0c:	5cd3      	ldrb	r3, [r2, r3]
 8002a0e:	fa21 f303 	lsr.w	r3, r1, r3
 8002a12:	4a08      	ldr	r2, [pc, #32]	; (8002a34 <HAL_RCC_ClockConfig+0x2f0>)
 8002a14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002a16:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <HAL_RCC_ClockConfig+0x2f4>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fe fa1c 	bl	8000e58 <HAL_InitTick>
  
  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3778      	adds	r7, #120	; 0x78
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	08005998 	.word	0x08005998
 8002a34:	20000008 	.word	0x20000008
 8002a38:	2000000c 	.word	0x2000000c

08002a3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b08b      	sub	sp, #44	; 0x2c
 8002a40:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	61fb      	str	r3, [r7, #28]
 8002a46:	2300      	movs	r3, #0
 8002a48:	61bb      	str	r3, [r7, #24]
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a4e:	2300      	movs	r3, #0
 8002a50:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a52:	2300      	movs	r3, #0
 8002a54:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002a56:	4b29      	ldr	r3, [pc, #164]	; (8002afc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f003 030c 	and.w	r3, r3, #12
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	d002      	beq.n	8002a6c <HAL_RCC_GetSysClockFreq+0x30>
 8002a66:	2b08      	cmp	r3, #8
 8002a68:	d003      	beq.n	8002a72 <HAL_RCC_GetSysClockFreq+0x36>
 8002a6a:	e03c      	b.n	8002ae6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a6c:	4b24      	ldr	r3, [pc, #144]	; (8002b00 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a6e:	623b      	str	r3, [r7, #32]
      break;
 8002a70:	e03c      	b.n	8002aec <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002a78:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002a7c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	fa92 f2a2 	rbit	r2, r2
 8002a84:	607a      	str	r2, [r7, #4]
  return result;
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	fab2 f282 	clz	r2, r2
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	40d3      	lsrs	r3, r2
 8002a90:	4a1c      	ldr	r2, [pc, #112]	; (8002b04 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a92:	5cd3      	ldrb	r3, [r2, r3]
 8002a94:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002a96:	4b19      	ldr	r3, [pc, #100]	; (8002afc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	220f      	movs	r2, #15
 8002aa0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	fa92 f2a2 	rbit	r2, r2
 8002aa8:	60fa      	str	r2, [r7, #12]
  return result;
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	fab2 f282 	clz	r2, r2
 8002ab0:	b2d2      	uxtb	r2, r2
 8002ab2:	40d3      	lsrs	r3, r2
 8002ab4:	4a14      	ldr	r2, [pc, #80]	; (8002b08 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002ab6:	5cd3      	ldrb	r3, [r2, r3]
 8002ab8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d008      	beq.n	8002ad6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ac4:	4a0e      	ldr	r2, [pc, #56]	; (8002b00 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	fb02 f303 	mul.w	r3, r2, r3
 8002ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad4:	e004      	b.n	8002ae0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	4a0c      	ldr	r2, [pc, #48]	; (8002b0c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002ada:	fb02 f303 	mul.w	r3, r2, r3
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae2:	623b      	str	r3, [r7, #32]
      break;
 8002ae4:	e002      	b.n	8002aec <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ae6:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ae8:	623b      	str	r3, [r7, #32]
      break;
 8002aea:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aec:	6a3b      	ldr	r3, [r7, #32]
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	372c      	adds	r7, #44	; 0x2c
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	40021000 	.word	0x40021000
 8002b00:	007a1200 	.word	0x007a1200
 8002b04:	080059b0 	.word	0x080059b0
 8002b08:	080059c0 	.word	0x080059c0
 8002b0c:	003d0900 	.word	0x003d0900

08002b10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b14:	4b03      	ldr	r3, [pc, #12]	; (8002b24 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b16:	681b      	ldr	r3, [r3, #0]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	20000008 	.word	0x20000008

08002b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002b2e:	f7ff ffef 	bl	8002b10 <HAL_RCC_GetHCLKFreq>
 8002b32:	4601      	mov	r1, r0
 8002b34:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b3c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002b40:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	fa92 f2a2 	rbit	r2, r2
 8002b48:	603a      	str	r2, [r7, #0]
  return result;
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	fab2 f282 	clz	r2, r2
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	40d3      	lsrs	r3, r2
 8002b54:	4a04      	ldr	r2, [pc, #16]	; (8002b68 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002b56:	5cd3      	ldrb	r3, [r2, r3]
 8002b58:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40021000 	.word	0x40021000
 8002b68:	080059a8 	.word	0x080059a8

08002b6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002b72:	f7ff ffcd 	bl	8002b10 <HAL_RCC_GetHCLKFreq>
 8002b76:	4601      	mov	r1, r0
 8002b78:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002b80:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002b84:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	fa92 f2a2 	rbit	r2, r2
 8002b8c:	603a      	str	r2, [r7, #0]
  return result;
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	fab2 f282 	clz	r2, r2
 8002b94:	b2d2      	uxtb	r2, r2
 8002b96:	40d3      	lsrs	r3, r2
 8002b98:	4a04      	ldr	r2, [pc, #16]	; (8002bac <HAL_RCC_GetPCLK2Freq+0x40>)
 8002b9a:	5cd3      	ldrb	r3, [r2, r3]
 8002b9c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	080059a8 	.word	0x080059a8

08002bb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b092      	sub	sp, #72	; 0x48
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 80d4 	beq.w	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bd4:	4b4e      	ldr	r3, [pc, #312]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10e      	bne.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002be0:	4b4b      	ldr	r3, [pc, #300]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be2:	69db      	ldr	r3, [r3, #28]
 8002be4:	4a4a      	ldr	r2, [pc, #296]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bea:	61d3      	str	r3, [r2, #28]
 8002bec:	4b48      	ldr	r3, [pc, #288]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bfe:	4b45      	ldr	r3, [pc, #276]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d118      	bne.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c0a:	4b42      	ldr	r3, [pc, #264]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a41      	ldr	r2, [pc, #260]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c14:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c16:	f7fe f963 	bl	8000ee0 <HAL_GetTick>
 8002c1a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1c:	e008      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c1e:	f7fe f95f 	bl	8000ee0 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b64      	cmp	r3, #100	; 0x64
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e169      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c30:	4b38      	ldr	r3, [pc, #224]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d0f0      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c3c:	4b34      	ldr	r3, [pc, #208]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c44:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 8084 	beq.w	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d07c      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c5c:	4b2c      	ldr	r3, [pc, #176]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c6a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6e:	fa93 f3a3 	rbit	r3, r3
 8002c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c76:	fab3 f383 	clz	r3, r3
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	4b26      	ldr	r3, [pc, #152]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c80:	4413      	add	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	461a      	mov	r2, r3
 8002c86:	2301      	movs	r3, #1
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c92:	fa93 f3a3 	rbit	r3, r3
 8002c96:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c9a:	fab3 f383 	clz	r3, r3
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	4b1d      	ldr	r3, [pc, #116]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ca4:	4413      	add	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	461a      	mov	r2, r3
 8002caa:	2300      	movs	r3, #0
 8002cac:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002cae:	4a18      	ldr	r2, [pc, #96]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cb2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d04b      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cbe:	f7fe f90f 	bl	8000ee0 <HAL_GetTick>
 8002cc2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc4:	e00a      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc6:	f7fe f90b 	bl	8000ee0 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e113      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce2:	fa93 f3a3 	rbit	r3, r3
 8002ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce8:	2302      	movs	r3, #2
 8002cea:	623b      	str	r3, [r7, #32]
 8002cec:	6a3b      	ldr	r3, [r7, #32]
 8002cee:	fa93 f3a3 	rbit	r3, r3
 8002cf2:	61fb      	str	r3, [r7, #28]
  return result;
 8002cf4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf6:	fab3 f383 	clz	r3, r3
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	095b      	lsrs	r3, r3, #5
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	f043 0302 	orr.w	r3, r3, #2
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d108      	bne.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002d0a:	4b01      	ldr	r3, [pc, #4]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	e00d      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002d10:	40021000 	.word	0x40021000
 8002d14:	40007000 	.word	0x40007000
 8002d18:	10908100 	.word	0x10908100
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	fa93 f3a3 	rbit	r3, r3
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	4b78      	ldr	r3, [pc, #480]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	613a      	str	r2, [r7, #16]
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	fa92 f2a2 	rbit	r2, r2
 8002d36:	60fa      	str	r2, [r7, #12]
  return result;
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	fab2 f282 	clz	r2, r2
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	f002 021f 	and.w	r2, r2, #31
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d50:	4013      	ands	r3, r2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0b7      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002d56:	4b6d      	ldr	r3, [pc, #436]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	496a      	ldr	r1, [pc, #424]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d105      	bne.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d70:	4b66      	ldr	r3, [pc, #408]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	4a65      	ldr	r2, [pc, #404]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d7a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d008      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d88:	4b60      	ldr	r3, [pc, #384]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8c:	f023 0203 	bic.w	r2, r3, #3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	495d      	ldr	r1, [pc, #372]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d008      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002da6:	4b59      	ldr	r3, [pc, #356]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	4956      	ldr	r1, [pc, #344]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d008      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dc4:	4b51      	ldr	r3, [pc, #324]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	494e      	ldr	r1, [pc, #312]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0320 	and.w	r3, r3, #32
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d008      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002de2:	4b4a      	ldr	r3, [pc, #296]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	f023 0210 	bic.w	r2, r3, #16
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	4947      	ldr	r1, [pc, #284]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d008      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002e00:	4b42      	ldr	r3, [pc, #264]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0c:	493f      	ldr	r1, [pc, #252]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d008      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e1e:	4b3b      	ldr	r3, [pc, #236]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e22:	f023 0220 	bic.w	r2, r3, #32
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	4938      	ldr	r1, [pc, #224]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0308 	and.w	r3, r3, #8
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d008      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e3c:	4b33      	ldr	r3, [pc, #204]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	4930      	ldr	r1, [pc, #192]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0310 	and.w	r3, r3, #16
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d008      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e5a:	4b2c      	ldr	r3, [pc, #176]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	4929      	ldr	r1, [pc, #164]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d008      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e78:	4b24      	ldr	r3, [pc, #144]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e84:	4921      	ldr	r1, [pc, #132]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d008      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e96:	4b1d      	ldr	r3, [pc, #116]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea2:	491a      	ldr	r1, [pc, #104]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d008      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002eb4:	4b15      	ldr	r3, [pc, #84]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec0:	4912      	ldr	r1, [pc, #72]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d008      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ed2:	4b0e      	ldr	r3, [pc, #56]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	490b      	ldr	r1, [pc, #44]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d008      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002ef0:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002efc:	4903      	ldr	r1, [pc, #12]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3748      	adds	r7, #72	; 0x48
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40021000 	.word	0x40021000

08002f10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e09d      	b.n	800305e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d108      	bne.n	8002f3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f32:	d009      	beq.n	8002f48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	61da      	str	r2, [r3, #28]
 8002f3a:	e005      	b.n	8002f48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d106      	bne.n	8002f68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7fd fbe2 	bl	800072c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f7e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f88:	d902      	bls.n	8002f90 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	e002      	b.n	8002f96 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f94:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002f9e:	d007      	beq.n	8002fb0 <HAL_SPI_Init+0xa0>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fa8:	d002      	beq.n	8002fb0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff2:	ea42 0103 	orr.w	r1, r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	430a      	orrs	r2, r1
 8003004:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	0c1b      	lsrs	r3, r3, #16
 800300c:	f003 0204 	and.w	r2, r3, #4
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	f003 0310 	and.w	r3, r3, #16
 8003018:	431a      	orrs	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800301e:	f003 0308 	and.w	r3, r3, #8
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800302c:	ea42 0103 	orr.w	r1, r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	430a      	orrs	r2, r1
 800303c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	69da      	ldr	r2, [r3, #28]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800304c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b082      	sub	sp, #8
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e049      	b.n	800310c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	d106      	bne.n	8003092 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7fd fb8f 	bl	80007b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2202      	movs	r2, #2
 8003096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	3304      	adds	r3, #4
 80030a2:	4619      	mov	r1, r3
 80030a4:	4610      	mov	r0, r2
 80030a6:	f000 fc0b 	bl	80038c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3708      	adds	r7, #8
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e049      	b.n	80031ba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d106      	bne.n	8003140 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f841 	bl	80031c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2202      	movs	r2, #2
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3304      	adds	r3, #4
 8003150:	4619      	mov	r1, r3
 8003152:	4610      	mov	r0, r2
 8003154:	f000 fbb4 	bl	80038c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
	...

080031d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d109      	bne.n	80031fc <HAL_TIM_PWM_Start+0x24>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	bf14      	ite	ne
 80031f4:	2301      	movne	r3, #1
 80031f6:	2300      	moveq	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	e03c      	b.n	8003276 <HAL_TIM_PWM_Start+0x9e>
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d109      	bne.n	8003216 <HAL_TIM_PWM_Start+0x3e>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b01      	cmp	r3, #1
 800320c:	bf14      	ite	ne
 800320e:	2301      	movne	r3, #1
 8003210:	2300      	moveq	r3, #0
 8003212:	b2db      	uxtb	r3, r3
 8003214:	e02f      	b.n	8003276 <HAL_TIM_PWM_Start+0x9e>
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	2b08      	cmp	r3, #8
 800321a:	d109      	bne.n	8003230 <HAL_TIM_PWM_Start+0x58>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b01      	cmp	r3, #1
 8003226:	bf14      	ite	ne
 8003228:	2301      	movne	r3, #1
 800322a:	2300      	moveq	r3, #0
 800322c:	b2db      	uxtb	r3, r3
 800322e:	e022      	b.n	8003276 <HAL_TIM_PWM_Start+0x9e>
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	2b0c      	cmp	r3, #12
 8003234:	d109      	bne.n	800324a <HAL_TIM_PWM_Start+0x72>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b01      	cmp	r3, #1
 8003240:	bf14      	ite	ne
 8003242:	2301      	movne	r3, #1
 8003244:	2300      	moveq	r3, #0
 8003246:	b2db      	uxtb	r3, r3
 8003248:	e015      	b.n	8003276 <HAL_TIM_PWM_Start+0x9e>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	2b10      	cmp	r3, #16
 800324e:	d109      	bne.n	8003264 <HAL_TIM_PWM_Start+0x8c>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b01      	cmp	r3, #1
 800325a:	bf14      	ite	ne
 800325c:	2301      	movne	r3, #1
 800325e:	2300      	moveq	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	e008      	b.n	8003276 <HAL_TIM_PWM_Start+0x9e>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b01      	cmp	r3, #1
 800326e:	bf14      	ite	ne
 8003270:	2301      	movne	r3, #1
 8003272:	2300      	moveq	r3, #0
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e097      	b.n	80033ae <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d104      	bne.n	800328e <HAL_TIM_PWM_Start+0xb6>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2202      	movs	r2, #2
 8003288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800328c:	e023      	b.n	80032d6 <HAL_TIM_PWM_Start+0xfe>
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	2b04      	cmp	r3, #4
 8003292:	d104      	bne.n	800329e <HAL_TIM_PWM_Start+0xc6>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2202      	movs	r2, #2
 8003298:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800329c:	e01b      	b.n	80032d6 <HAL_TIM_PWM_Start+0xfe>
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d104      	bne.n	80032ae <HAL_TIM_PWM_Start+0xd6>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2202      	movs	r2, #2
 80032a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032ac:	e013      	b.n	80032d6 <HAL_TIM_PWM_Start+0xfe>
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	2b0c      	cmp	r3, #12
 80032b2:	d104      	bne.n	80032be <HAL_TIM_PWM_Start+0xe6>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2202      	movs	r2, #2
 80032b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032bc:	e00b      	b.n	80032d6 <HAL_TIM_PWM_Start+0xfe>
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	2b10      	cmp	r3, #16
 80032c2:	d104      	bne.n	80032ce <HAL_TIM_PWM_Start+0xf6>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2202      	movs	r2, #2
 80032c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032cc:	e003      	b.n	80032d6 <HAL_TIM_PWM_Start+0xfe>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2202      	movs	r2, #2
 80032d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2201      	movs	r2, #1
 80032dc:	6839      	ldr	r1, [r7, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 feee 	bl	80040c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a33      	ldr	r2, [pc, #204]	; (80033b8 <HAL_TIM_PWM_Start+0x1e0>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d013      	beq.n	8003316 <HAL_TIM_PWM_Start+0x13e>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a32      	ldr	r2, [pc, #200]	; (80033bc <HAL_TIM_PWM_Start+0x1e4>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d00e      	beq.n	8003316 <HAL_TIM_PWM_Start+0x13e>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a30      	ldr	r2, [pc, #192]	; (80033c0 <HAL_TIM_PWM_Start+0x1e8>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d009      	beq.n	8003316 <HAL_TIM_PWM_Start+0x13e>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a2f      	ldr	r2, [pc, #188]	; (80033c4 <HAL_TIM_PWM_Start+0x1ec>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d004      	beq.n	8003316 <HAL_TIM_PWM_Start+0x13e>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a2d      	ldr	r2, [pc, #180]	; (80033c8 <HAL_TIM_PWM_Start+0x1f0>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d101      	bne.n	800331a <HAL_TIM_PWM_Start+0x142>
 8003316:	2301      	movs	r3, #1
 8003318:	e000      	b.n	800331c <HAL_TIM_PWM_Start+0x144>
 800331a:	2300      	movs	r3, #0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d007      	beq.n	8003330 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800332e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a20      	ldr	r2, [pc, #128]	; (80033b8 <HAL_TIM_PWM_Start+0x1e0>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d018      	beq.n	800336c <HAL_TIM_PWM_Start+0x194>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003342:	d013      	beq.n	800336c <HAL_TIM_PWM_Start+0x194>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a20      	ldr	r2, [pc, #128]	; (80033cc <HAL_TIM_PWM_Start+0x1f4>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d00e      	beq.n	800336c <HAL_TIM_PWM_Start+0x194>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a1f      	ldr	r2, [pc, #124]	; (80033d0 <HAL_TIM_PWM_Start+0x1f8>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d009      	beq.n	800336c <HAL_TIM_PWM_Start+0x194>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a17      	ldr	r2, [pc, #92]	; (80033bc <HAL_TIM_PWM_Start+0x1e4>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d004      	beq.n	800336c <HAL_TIM_PWM_Start+0x194>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a16      	ldr	r2, [pc, #88]	; (80033c0 <HAL_TIM_PWM_Start+0x1e8>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d115      	bne.n	8003398 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689a      	ldr	r2, [r3, #8]
 8003372:	4b18      	ldr	r3, [pc, #96]	; (80033d4 <HAL_TIM_PWM_Start+0x1fc>)
 8003374:	4013      	ands	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2b06      	cmp	r3, #6
 800337c:	d015      	beq.n	80033aa <HAL_TIM_PWM_Start+0x1d2>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003384:	d011      	beq.n	80033aa <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f042 0201 	orr.w	r2, r2, #1
 8003394:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003396:	e008      	b.n	80033aa <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0201 	orr.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	e000      	b.n	80033ac <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	40012c00 	.word	0x40012c00
 80033bc:	40013400 	.word	0x40013400
 80033c0:	40014000 	.word	0x40014000
 80033c4:	40014400 	.word	0x40014400
 80033c8:	40014800 	.word	0x40014800
 80033cc:	40000400 	.word	0x40000400
 80033d0:	40000800 	.word	0x40000800
 80033d4:	00010007 	.word	0x00010007

080033d8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2200      	movs	r2, #0
 80033e8:	6839      	ldr	r1, [r7, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 fe68 	bl	80040c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a3e      	ldr	r2, [pc, #248]	; (80034f0 <HAL_TIM_PWM_Stop+0x118>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d013      	beq.n	8003422 <HAL_TIM_PWM_Stop+0x4a>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a3d      	ldr	r2, [pc, #244]	; (80034f4 <HAL_TIM_PWM_Stop+0x11c>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d00e      	beq.n	8003422 <HAL_TIM_PWM_Stop+0x4a>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a3b      	ldr	r2, [pc, #236]	; (80034f8 <HAL_TIM_PWM_Stop+0x120>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d009      	beq.n	8003422 <HAL_TIM_PWM_Stop+0x4a>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a3a      	ldr	r2, [pc, #232]	; (80034fc <HAL_TIM_PWM_Stop+0x124>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d004      	beq.n	8003422 <HAL_TIM_PWM_Stop+0x4a>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a38      	ldr	r2, [pc, #224]	; (8003500 <HAL_TIM_PWM_Stop+0x128>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d101      	bne.n	8003426 <HAL_TIM_PWM_Stop+0x4e>
 8003422:	2301      	movs	r3, #1
 8003424:	e000      	b.n	8003428 <HAL_TIM_PWM_Stop+0x50>
 8003426:	2300      	movs	r3, #0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d017      	beq.n	800345c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6a1a      	ldr	r2, [r3, #32]
 8003432:	f241 1311 	movw	r3, #4369	; 0x1111
 8003436:	4013      	ands	r3, r2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10f      	bne.n	800345c <HAL_TIM_PWM_Stop+0x84>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6a1a      	ldr	r2, [r3, #32]
 8003442:	f240 4344 	movw	r3, #1092	; 0x444
 8003446:	4013      	ands	r3, r2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d107      	bne.n	800345c <HAL_TIM_PWM_Stop+0x84>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800345a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6a1a      	ldr	r2, [r3, #32]
 8003462:	f241 1311 	movw	r3, #4369	; 0x1111
 8003466:	4013      	ands	r3, r2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10f      	bne.n	800348c <HAL_TIM_PWM_Stop+0xb4>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6a1a      	ldr	r2, [r3, #32]
 8003472:	f240 4344 	movw	r3, #1092	; 0x444
 8003476:	4013      	ands	r3, r2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d107      	bne.n	800348c <HAL_TIM_PWM_Stop+0xb4>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0201 	bic.w	r2, r2, #1
 800348a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d104      	bne.n	800349c <HAL_TIM_PWM_Stop+0xc4>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800349a:	e023      	b.n	80034e4 <HAL_TIM_PWM_Stop+0x10c>
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	2b04      	cmp	r3, #4
 80034a0:	d104      	bne.n	80034ac <HAL_TIM_PWM_Stop+0xd4>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034aa:	e01b      	b.n	80034e4 <HAL_TIM_PWM_Stop+0x10c>
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	2b08      	cmp	r3, #8
 80034b0:	d104      	bne.n	80034bc <HAL_TIM_PWM_Stop+0xe4>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034ba:	e013      	b.n	80034e4 <HAL_TIM_PWM_Stop+0x10c>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	2b0c      	cmp	r3, #12
 80034c0:	d104      	bne.n	80034cc <HAL_TIM_PWM_Stop+0xf4>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034ca:	e00b      	b.n	80034e4 <HAL_TIM_PWM_Stop+0x10c>
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	2b10      	cmp	r3, #16
 80034d0:	d104      	bne.n	80034dc <HAL_TIM_PWM_Stop+0x104>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034da:	e003      	b.n	80034e4 <HAL_TIM_PWM_Stop+0x10c>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	40012c00 	.word	0x40012c00
 80034f4:	40013400 	.word	0x40013400
 80034f8:	40014000 	.word	0x40014000
 80034fc:	40014400 	.word	0x40014400
 8003500:	40014800 	.word	0x40014800

08003504 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003510:	2300      	movs	r3, #0
 8003512:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800351a:	2b01      	cmp	r3, #1
 800351c:	d101      	bne.n	8003522 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800351e:	2302      	movs	r3, #2
 8003520:	e0ff      	b.n	8003722 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b14      	cmp	r3, #20
 800352e:	f200 80f0 	bhi.w	8003712 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003532:	a201      	add	r2, pc, #4	; (adr r2, 8003538 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003538:	0800358d 	.word	0x0800358d
 800353c:	08003713 	.word	0x08003713
 8003540:	08003713 	.word	0x08003713
 8003544:	08003713 	.word	0x08003713
 8003548:	080035cd 	.word	0x080035cd
 800354c:	08003713 	.word	0x08003713
 8003550:	08003713 	.word	0x08003713
 8003554:	08003713 	.word	0x08003713
 8003558:	0800360f 	.word	0x0800360f
 800355c:	08003713 	.word	0x08003713
 8003560:	08003713 	.word	0x08003713
 8003564:	08003713 	.word	0x08003713
 8003568:	0800364f 	.word	0x0800364f
 800356c:	08003713 	.word	0x08003713
 8003570:	08003713 	.word	0x08003713
 8003574:	08003713 	.word	0x08003713
 8003578:	08003691 	.word	0x08003691
 800357c:	08003713 	.word	0x08003713
 8003580:	08003713 	.word	0x08003713
 8003584:	08003713 	.word	0x08003713
 8003588:	080036d1 	.word	0x080036d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68b9      	ldr	r1, [r7, #8]
 8003592:	4618      	mov	r0, r3
 8003594:	f000 fa24 	bl	80039e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	699a      	ldr	r2, [r3, #24]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f042 0208 	orr.w	r2, r2, #8
 80035a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	699a      	ldr	r2, [r3, #24]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0204 	bic.w	r2, r2, #4
 80035b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6999      	ldr	r1, [r3, #24]
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	691a      	ldr	r2, [r3, #16]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	619a      	str	r2, [r3, #24]
      break;
 80035ca:	e0a5      	b.n	8003718 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68b9      	ldr	r1, [r7, #8]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f000 fa94 	bl	8003b00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	699a      	ldr	r2, [r3, #24]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	699a      	ldr	r2, [r3, #24]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6999      	ldr	r1, [r3, #24]
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	021a      	lsls	r2, r3, #8
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	619a      	str	r2, [r3, #24]
      break;
 800360c:	e084      	b.n	8003718 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68b9      	ldr	r1, [r7, #8]
 8003614:	4618      	mov	r0, r3
 8003616:	f000 fafd 	bl	8003c14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	69da      	ldr	r2, [r3, #28]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f042 0208 	orr.w	r2, r2, #8
 8003628:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	69da      	ldr	r2, [r3, #28]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 0204 	bic.w	r2, r2, #4
 8003638:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	69d9      	ldr	r1, [r3, #28]
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	691a      	ldr	r2, [r3, #16]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	430a      	orrs	r2, r1
 800364a:	61da      	str	r2, [r3, #28]
      break;
 800364c:	e064      	b.n	8003718 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68b9      	ldr	r1, [r7, #8]
 8003654:	4618      	mov	r0, r3
 8003656:	f000 fb65 	bl	8003d24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	69da      	ldr	r2, [r3, #28]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003668:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	69da      	ldr	r2, [r3, #28]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003678:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	69d9      	ldr	r1, [r3, #28]
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	021a      	lsls	r2, r3, #8
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	61da      	str	r2, [r3, #28]
      break;
 800368e:	e043      	b.n	8003718 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68b9      	ldr	r1, [r7, #8]
 8003696:	4618      	mov	r0, r3
 8003698:	f000 fbae 	bl	8003df8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f042 0208 	orr.w	r2, r2, #8
 80036aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0204 	bic.w	r2, r2, #4
 80036ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	691a      	ldr	r2, [r3, #16]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80036ce:	e023      	b.n	8003718 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68b9      	ldr	r1, [r7, #8]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 fbf2 	bl	8003ec0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	021a      	lsls	r2, r3, #8
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003710:	e002      	b.n	8003718 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	75fb      	strb	r3, [r7, #23]
      break;
 8003716:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003720:	7dfb      	ldrb	r3, [r7, #23]
}
 8003722:	4618      	mov	r0, r3
 8003724:	3718      	adds	r7, #24
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop

0800372c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003736:	2300      	movs	r3, #0
 8003738:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003740:	2b01      	cmp	r3, #1
 8003742:	d101      	bne.n	8003748 <HAL_TIM_ConfigClockSource+0x1c>
 8003744:	2302      	movs	r3, #2
 8003746:	e0b6      	b.n	80038b6 <HAL_TIM_ConfigClockSource+0x18a>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2202      	movs	r2, #2
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003766:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800376a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003772:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003784:	d03e      	beq.n	8003804 <HAL_TIM_ConfigClockSource+0xd8>
 8003786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800378a:	f200 8087 	bhi.w	800389c <HAL_TIM_ConfigClockSource+0x170>
 800378e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003792:	f000 8086 	beq.w	80038a2 <HAL_TIM_ConfigClockSource+0x176>
 8003796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800379a:	d87f      	bhi.n	800389c <HAL_TIM_ConfigClockSource+0x170>
 800379c:	2b70      	cmp	r3, #112	; 0x70
 800379e:	d01a      	beq.n	80037d6 <HAL_TIM_ConfigClockSource+0xaa>
 80037a0:	2b70      	cmp	r3, #112	; 0x70
 80037a2:	d87b      	bhi.n	800389c <HAL_TIM_ConfigClockSource+0x170>
 80037a4:	2b60      	cmp	r3, #96	; 0x60
 80037a6:	d050      	beq.n	800384a <HAL_TIM_ConfigClockSource+0x11e>
 80037a8:	2b60      	cmp	r3, #96	; 0x60
 80037aa:	d877      	bhi.n	800389c <HAL_TIM_ConfigClockSource+0x170>
 80037ac:	2b50      	cmp	r3, #80	; 0x50
 80037ae:	d03c      	beq.n	800382a <HAL_TIM_ConfigClockSource+0xfe>
 80037b0:	2b50      	cmp	r3, #80	; 0x50
 80037b2:	d873      	bhi.n	800389c <HAL_TIM_ConfigClockSource+0x170>
 80037b4:	2b40      	cmp	r3, #64	; 0x40
 80037b6:	d058      	beq.n	800386a <HAL_TIM_ConfigClockSource+0x13e>
 80037b8:	2b40      	cmp	r3, #64	; 0x40
 80037ba:	d86f      	bhi.n	800389c <HAL_TIM_ConfigClockSource+0x170>
 80037bc:	2b30      	cmp	r3, #48	; 0x30
 80037be:	d064      	beq.n	800388a <HAL_TIM_ConfigClockSource+0x15e>
 80037c0:	2b30      	cmp	r3, #48	; 0x30
 80037c2:	d86b      	bhi.n	800389c <HAL_TIM_ConfigClockSource+0x170>
 80037c4:	2b20      	cmp	r3, #32
 80037c6:	d060      	beq.n	800388a <HAL_TIM_ConfigClockSource+0x15e>
 80037c8:	2b20      	cmp	r3, #32
 80037ca:	d867      	bhi.n	800389c <HAL_TIM_ConfigClockSource+0x170>
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d05c      	beq.n	800388a <HAL_TIM_ConfigClockSource+0x15e>
 80037d0:	2b10      	cmp	r3, #16
 80037d2:	d05a      	beq.n	800388a <HAL_TIM_ConfigClockSource+0x15e>
 80037d4:	e062      	b.n	800389c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6818      	ldr	r0, [r3, #0]
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	6899      	ldr	r1, [r3, #8]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f000 fc4b 	bl	8004080 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	609a      	str	r2, [r3, #8]
      break;
 8003802:	e04f      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6818      	ldr	r0, [r3, #0]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	6899      	ldr	r1, [r3, #8]
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	f000 fc34 	bl	8004080 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689a      	ldr	r2, [r3, #8]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003826:	609a      	str	r2, [r3, #8]
      break;
 8003828:	e03c      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6818      	ldr	r0, [r3, #0]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	6859      	ldr	r1, [r3, #4]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	461a      	mov	r2, r3
 8003838:	f000 fba8 	bl	8003f8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2150      	movs	r1, #80	; 0x50
 8003842:	4618      	mov	r0, r3
 8003844:	f000 fc01 	bl	800404a <TIM_ITRx_SetConfig>
      break;
 8003848:	e02c      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6818      	ldr	r0, [r3, #0]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	6859      	ldr	r1, [r3, #4]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	461a      	mov	r2, r3
 8003858:	f000 fbc7 	bl	8003fea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2160      	movs	r1, #96	; 0x60
 8003862:	4618      	mov	r0, r3
 8003864:	f000 fbf1 	bl	800404a <TIM_ITRx_SetConfig>
      break;
 8003868:	e01c      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6818      	ldr	r0, [r3, #0]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	6859      	ldr	r1, [r3, #4]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	461a      	mov	r2, r3
 8003878:	f000 fb88 	bl	8003f8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2140      	movs	r1, #64	; 0x40
 8003882:	4618      	mov	r0, r3
 8003884:	f000 fbe1 	bl	800404a <TIM_ITRx_SetConfig>
      break;
 8003888:	e00c      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4619      	mov	r1, r3
 8003894:	4610      	mov	r0, r2
 8003896:	f000 fbd8 	bl	800404a <TIM_ITRx_SetConfig>
      break;
 800389a:	e003      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	73fb      	strb	r3, [r7, #15]
      break;
 80038a0:	e000      	b.n	80038a4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80038a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
	...

080038c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a3c      	ldr	r2, [pc, #240]	; (80039c4 <TIM_Base_SetConfig+0x104>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d00f      	beq.n	80038f8 <TIM_Base_SetConfig+0x38>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038de:	d00b      	beq.n	80038f8 <TIM_Base_SetConfig+0x38>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a39      	ldr	r2, [pc, #228]	; (80039c8 <TIM_Base_SetConfig+0x108>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d007      	beq.n	80038f8 <TIM_Base_SetConfig+0x38>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a38      	ldr	r2, [pc, #224]	; (80039cc <TIM_Base_SetConfig+0x10c>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d003      	beq.n	80038f8 <TIM_Base_SetConfig+0x38>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a37      	ldr	r2, [pc, #220]	; (80039d0 <TIM_Base_SetConfig+0x110>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d108      	bne.n	800390a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	4313      	orrs	r3, r2
 8003908:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a2d      	ldr	r2, [pc, #180]	; (80039c4 <TIM_Base_SetConfig+0x104>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d01b      	beq.n	800394a <TIM_Base_SetConfig+0x8a>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003918:	d017      	beq.n	800394a <TIM_Base_SetConfig+0x8a>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a2a      	ldr	r2, [pc, #168]	; (80039c8 <TIM_Base_SetConfig+0x108>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d013      	beq.n	800394a <TIM_Base_SetConfig+0x8a>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a29      	ldr	r2, [pc, #164]	; (80039cc <TIM_Base_SetConfig+0x10c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d00f      	beq.n	800394a <TIM_Base_SetConfig+0x8a>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a28      	ldr	r2, [pc, #160]	; (80039d0 <TIM_Base_SetConfig+0x110>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d00b      	beq.n	800394a <TIM_Base_SetConfig+0x8a>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a27      	ldr	r2, [pc, #156]	; (80039d4 <TIM_Base_SetConfig+0x114>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d007      	beq.n	800394a <TIM_Base_SetConfig+0x8a>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a26      	ldr	r2, [pc, #152]	; (80039d8 <TIM_Base_SetConfig+0x118>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d003      	beq.n	800394a <TIM_Base_SetConfig+0x8a>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a25      	ldr	r2, [pc, #148]	; (80039dc <TIM_Base_SetConfig+0x11c>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d108      	bne.n	800395c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003950:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	4313      	orrs	r3, r2
 800395a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	4313      	orrs	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a10      	ldr	r2, [pc, #64]	; (80039c4 <TIM_Base_SetConfig+0x104>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d00f      	beq.n	80039a8 <TIM_Base_SetConfig+0xe8>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a11      	ldr	r2, [pc, #68]	; (80039d0 <TIM_Base_SetConfig+0x110>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d00b      	beq.n	80039a8 <TIM_Base_SetConfig+0xe8>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a10      	ldr	r2, [pc, #64]	; (80039d4 <TIM_Base_SetConfig+0x114>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d007      	beq.n	80039a8 <TIM_Base_SetConfig+0xe8>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a0f      	ldr	r2, [pc, #60]	; (80039d8 <TIM_Base_SetConfig+0x118>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d003      	beq.n	80039a8 <TIM_Base_SetConfig+0xe8>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a0e      	ldr	r2, [pc, #56]	; (80039dc <TIM_Base_SetConfig+0x11c>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d103      	bne.n	80039b0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	691a      	ldr	r2, [r3, #16]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	615a      	str	r2, [r3, #20]
}
 80039b6:	bf00      	nop
 80039b8:	3714      	adds	r7, #20
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	40012c00 	.word	0x40012c00
 80039c8:	40000400 	.word	0x40000400
 80039cc:	40000800 	.word	0x40000800
 80039d0:	40013400 	.word	0x40013400
 80039d4:	40014000 	.word	0x40014000
 80039d8:	40014400 	.word	0x40014400
 80039dc:	40014800 	.word	0x40014800

080039e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b087      	sub	sp, #28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	f023 0201 	bic.w	r2, r3, #1
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f023 0303 	bic.w	r3, r3, #3
 8003a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f023 0302 	bic.w	r3, r3, #2
 8003a2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a2c      	ldr	r2, [pc, #176]	; (8003aec <TIM_OC1_SetConfig+0x10c>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d00f      	beq.n	8003a60 <TIM_OC1_SetConfig+0x80>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a2b      	ldr	r2, [pc, #172]	; (8003af0 <TIM_OC1_SetConfig+0x110>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d00b      	beq.n	8003a60 <TIM_OC1_SetConfig+0x80>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a2a      	ldr	r2, [pc, #168]	; (8003af4 <TIM_OC1_SetConfig+0x114>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d007      	beq.n	8003a60 <TIM_OC1_SetConfig+0x80>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a29      	ldr	r2, [pc, #164]	; (8003af8 <TIM_OC1_SetConfig+0x118>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d003      	beq.n	8003a60 <TIM_OC1_SetConfig+0x80>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a28      	ldr	r2, [pc, #160]	; (8003afc <TIM_OC1_SetConfig+0x11c>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d10c      	bne.n	8003a7a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	f023 0308 	bic.w	r3, r3, #8
 8003a66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f023 0304 	bic.w	r3, r3, #4
 8003a78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a1b      	ldr	r2, [pc, #108]	; (8003aec <TIM_OC1_SetConfig+0x10c>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d00f      	beq.n	8003aa2 <TIM_OC1_SetConfig+0xc2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a1a      	ldr	r2, [pc, #104]	; (8003af0 <TIM_OC1_SetConfig+0x110>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d00b      	beq.n	8003aa2 <TIM_OC1_SetConfig+0xc2>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a19      	ldr	r2, [pc, #100]	; (8003af4 <TIM_OC1_SetConfig+0x114>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d007      	beq.n	8003aa2 <TIM_OC1_SetConfig+0xc2>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a18      	ldr	r2, [pc, #96]	; (8003af8 <TIM_OC1_SetConfig+0x118>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d003      	beq.n	8003aa2 <TIM_OC1_SetConfig+0xc2>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a17      	ldr	r2, [pc, #92]	; (8003afc <TIM_OC1_SetConfig+0x11c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d111      	bne.n	8003ac6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	621a      	str	r2, [r3, #32]
}
 8003ae0:	bf00      	nop
 8003ae2:	371c      	adds	r7, #28
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	40012c00 	.word	0x40012c00
 8003af0:	40013400 	.word	0x40013400
 8003af4:	40014000 	.word	0x40014000
 8003af8:	40014400 	.word	0x40014400
 8003afc:	40014800 	.word	0x40014800

08003b00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b087      	sub	sp, #28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	f023 0210 	bic.w	r2, r3, #16
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	021b      	lsls	r3, r3, #8
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f023 0320 	bic.w	r3, r3, #32
 8003b4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a28      	ldr	r2, [pc, #160]	; (8003c00 <TIM_OC2_SetConfig+0x100>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d003      	beq.n	8003b6c <TIM_OC2_SetConfig+0x6c>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a27      	ldr	r2, [pc, #156]	; (8003c04 <TIM_OC2_SetConfig+0x104>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d10d      	bne.n	8003b88 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	011b      	lsls	r3, r3, #4
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a1d      	ldr	r2, [pc, #116]	; (8003c00 <TIM_OC2_SetConfig+0x100>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d00f      	beq.n	8003bb0 <TIM_OC2_SetConfig+0xb0>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a1c      	ldr	r2, [pc, #112]	; (8003c04 <TIM_OC2_SetConfig+0x104>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d00b      	beq.n	8003bb0 <TIM_OC2_SetConfig+0xb0>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a1b      	ldr	r2, [pc, #108]	; (8003c08 <TIM_OC2_SetConfig+0x108>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d007      	beq.n	8003bb0 <TIM_OC2_SetConfig+0xb0>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a1a      	ldr	r2, [pc, #104]	; (8003c0c <TIM_OC2_SetConfig+0x10c>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d003      	beq.n	8003bb0 <TIM_OC2_SetConfig+0xb0>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a19      	ldr	r2, [pc, #100]	; (8003c10 <TIM_OC2_SetConfig+0x110>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d113      	bne.n	8003bd8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bb6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bbe:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	621a      	str	r2, [r3, #32]
}
 8003bf2:	bf00      	nop
 8003bf4:	371c      	adds	r7, #28
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	40012c00 	.word	0x40012c00
 8003c04:	40013400 	.word	0x40013400
 8003c08:	40014000 	.word	0x40014000
 8003c0c:	40014400 	.word	0x40014400
 8003c10:	40014800 	.word	0x40014800

08003c14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b087      	sub	sp, #28
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f023 0303 	bic.w	r3, r3, #3
 8003c4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	021b      	lsls	r3, r3, #8
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a27      	ldr	r2, [pc, #156]	; (8003d10 <TIM_OC3_SetConfig+0xfc>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d003      	beq.n	8003c7e <TIM_OC3_SetConfig+0x6a>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a26      	ldr	r2, [pc, #152]	; (8003d14 <TIM_OC3_SetConfig+0x100>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d10d      	bne.n	8003c9a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	021b      	lsls	r3, r3, #8
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c98:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a1c      	ldr	r2, [pc, #112]	; (8003d10 <TIM_OC3_SetConfig+0xfc>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d00f      	beq.n	8003cc2 <TIM_OC3_SetConfig+0xae>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a1b      	ldr	r2, [pc, #108]	; (8003d14 <TIM_OC3_SetConfig+0x100>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d00b      	beq.n	8003cc2 <TIM_OC3_SetConfig+0xae>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a1a      	ldr	r2, [pc, #104]	; (8003d18 <TIM_OC3_SetConfig+0x104>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d007      	beq.n	8003cc2 <TIM_OC3_SetConfig+0xae>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a19      	ldr	r2, [pc, #100]	; (8003d1c <TIM_OC3_SetConfig+0x108>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d003      	beq.n	8003cc2 <TIM_OC3_SetConfig+0xae>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a18      	ldr	r2, [pc, #96]	; (8003d20 <TIM_OC3_SetConfig+0x10c>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d113      	bne.n	8003cea <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	011b      	lsls	r3, r3, #4
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	011b      	lsls	r3, r3, #4
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	621a      	str	r2, [r3, #32]
}
 8003d04:	bf00      	nop
 8003d06:	371c      	adds	r7, #28
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	40012c00 	.word	0x40012c00
 8003d14:	40013400 	.word	0x40013400
 8003d18:	40014000 	.word	0x40014000
 8003d1c:	40014400 	.word	0x40014400
 8003d20:	40014800 	.word	0x40014800

08003d24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b087      	sub	sp, #28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	021b      	lsls	r3, r3, #8
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	031b      	lsls	r3, r3, #12
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a18      	ldr	r2, [pc, #96]	; (8003de4 <TIM_OC4_SetConfig+0xc0>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d00f      	beq.n	8003da8 <TIM_OC4_SetConfig+0x84>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a17      	ldr	r2, [pc, #92]	; (8003de8 <TIM_OC4_SetConfig+0xc4>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d00b      	beq.n	8003da8 <TIM_OC4_SetConfig+0x84>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a16      	ldr	r2, [pc, #88]	; (8003dec <TIM_OC4_SetConfig+0xc8>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d007      	beq.n	8003da8 <TIM_OC4_SetConfig+0x84>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a15      	ldr	r2, [pc, #84]	; (8003df0 <TIM_OC4_SetConfig+0xcc>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d003      	beq.n	8003da8 <TIM_OC4_SetConfig+0x84>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a14      	ldr	r2, [pc, #80]	; (8003df4 <TIM_OC4_SetConfig+0xd0>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d109      	bne.n	8003dbc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	019b      	lsls	r3, r3, #6
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	621a      	str	r2, [r3, #32]
}
 8003dd6:	bf00      	nop
 8003dd8:	371c      	adds	r7, #28
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	40012c00 	.word	0x40012c00
 8003de8:	40013400 	.word	0x40013400
 8003dec:	40014000 	.word	0x40014000
 8003df0:	40014400 	.word	0x40014400
 8003df4:	40014800 	.word	0x40014800

08003df8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b087      	sub	sp, #28
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003e3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	041b      	lsls	r3, r3, #16
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a17      	ldr	r2, [pc, #92]	; (8003eac <TIM_OC5_SetConfig+0xb4>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d00f      	beq.n	8003e72 <TIM_OC5_SetConfig+0x7a>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a16      	ldr	r2, [pc, #88]	; (8003eb0 <TIM_OC5_SetConfig+0xb8>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d00b      	beq.n	8003e72 <TIM_OC5_SetConfig+0x7a>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a15      	ldr	r2, [pc, #84]	; (8003eb4 <TIM_OC5_SetConfig+0xbc>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d007      	beq.n	8003e72 <TIM_OC5_SetConfig+0x7a>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a14      	ldr	r2, [pc, #80]	; (8003eb8 <TIM_OC5_SetConfig+0xc0>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d003      	beq.n	8003e72 <TIM_OC5_SetConfig+0x7a>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a13      	ldr	r2, [pc, #76]	; (8003ebc <TIM_OC5_SetConfig+0xc4>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d109      	bne.n	8003e86 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	021b      	lsls	r3, r3, #8
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	621a      	str	r2, [r3, #32]
}
 8003ea0:	bf00      	nop
 8003ea2:	371c      	adds	r7, #28
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	40012c00 	.word	0x40012c00
 8003eb0:	40013400 	.word	0x40013400
 8003eb4:	40014000 	.word	0x40014000
 8003eb8:	40014400 	.word	0x40014400
 8003ebc:	40014800 	.word	0x40014800

08003ec0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b087      	sub	sp, #28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ef2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	021b      	lsls	r3, r3, #8
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	051b      	lsls	r3, r3, #20
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a18      	ldr	r2, [pc, #96]	; (8003f78 <TIM_OC6_SetConfig+0xb8>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d00f      	beq.n	8003f3c <TIM_OC6_SetConfig+0x7c>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a17      	ldr	r2, [pc, #92]	; (8003f7c <TIM_OC6_SetConfig+0xbc>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d00b      	beq.n	8003f3c <TIM_OC6_SetConfig+0x7c>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a16      	ldr	r2, [pc, #88]	; (8003f80 <TIM_OC6_SetConfig+0xc0>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d007      	beq.n	8003f3c <TIM_OC6_SetConfig+0x7c>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a15      	ldr	r2, [pc, #84]	; (8003f84 <TIM_OC6_SetConfig+0xc4>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d003      	beq.n	8003f3c <TIM_OC6_SetConfig+0x7c>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a14      	ldr	r2, [pc, #80]	; (8003f88 <TIM_OC6_SetConfig+0xc8>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d109      	bne.n	8003f50 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	029b      	lsls	r3, r3, #10
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	621a      	str	r2, [r3, #32]
}
 8003f6a:	bf00      	nop
 8003f6c:	371c      	adds	r7, #28
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	40012c00 	.word	0x40012c00
 8003f7c:	40013400 	.word	0x40013400
 8003f80:	40014000 	.word	0x40014000
 8003f84:	40014400 	.word	0x40014400
 8003f88:	40014800 	.word	0x40014800

08003f8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	f023 0201 	bic.w	r2, r3, #1
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	011b      	lsls	r3, r3, #4
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f023 030a 	bic.w	r3, r3, #10
 8003fc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	621a      	str	r2, [r3, #32]
}
 8003fde:	bf00      	nop
 8003fe0:	371c      	adds	r7, #28
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b087      	sub	sp, #28
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	60f8      	str	r0, [r7, #12]
 8003ff2:	60b9      	str	r1, [r7, #8]
 8003ff4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	f023 0210 	bic.w	r2, r3, #16
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004014:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	031b      	lsls	r3, r3, #12
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	4313      	orrs	r3, r2
 800401e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004026:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	011b      	lsls	r3, r3, #4
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	4313      	orrs	r3, r2
 8004030:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	621a      	str	r2, [r3, #32]
}
 800403e:	bf00      	nop
 8004040:	371c      	adds	r7, #28
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800404a:	b480      	push	{r7}
 800404c:	b085      	sub	sp, #20
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
 8004052:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004060:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4313      	orrs	r3, r2
 8004068:	f043 0307 	orr.w	r3, r3, #7
 800406c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	609a      	str	r2, [r3, #8]
}
 8004074:	bf00      	nop
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004080:	b480      	push	{r7}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
 800408c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800409a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	021a      	lsls	r2, r3, #8
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	431a      	orrs	r2, r3
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	609a      	str	r2, [r3, #8]
}
 80040b4:	bf00      	nop
 80040b6:	371c      	adds	r7, #28
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b087      	sub	sp, #28
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	f003 031f 	and.w	r3, r3, #31
 80040d2:	2201      	movs	r2, #1
 80040d4:	fa02 f303 	lsl.w	r3, r2, r3
 80040d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6a1a      	ldr	r2, [r3, #32]
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	43db      	mvns	r3, r3
 80040e2:	401a      	ands	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6a1a      	ldr	r2, [r3, #32]
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	f003 031f 	and.w	r3, r3, #31
 80040f2:	6879      	ldr	r1, [r7, #4]
 80040f4:	fa01 f303 	lsl.w	r3, r1, r3
 80040f8:	431a      	orrs	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	621a      	str	r2, [r3, #32]
}
 80040fe:	bf00      	nop
 8004100:	371c      	adds	r7, #28
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
	...

0800410c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800411c:	2b01      	cmp	r3, #1
 800411e:	d101      	bne.n	8004124 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004120:	2302      	movs	r3, #2
 8004122:	e063      	b.n	80041ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2202      	movs	r2, #2
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a2b      	ldr	r2, [pc, #172]	; (80041f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d004      	beq.n	8004158 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a2a      	ldr	r2, [pc, #168]	; (80041fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d108      	bne.n	800416a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800415e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	4313      	orrs	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004170:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	4313      	orrs	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a1b      	ldr	r2, [pc, #108]	; (80041f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d018      	beq.n	80041c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004196:	d013      	beq.n	80041c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a18      	ldr	r2, [pc, #96]	; (8004200 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d00e      	beq.n	80041c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a17      	ldr	r2, [pc, #92]	; (8004204 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d009      	beq.n	80041c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a12      	ldr	r2, [pc, #72]	; (80041fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d004      	beq.n	80041c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a13      	ldr	r2, [pc, #76]	; (8004208 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d10c      	bne.n	80041da <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr
 80041f8:	40012c00 	.word	0x40012c00
 80041fc:	40013400 	.word	0x40013400
 8004200:	40000400 	.word	0x40000400
 8004204:	40000800 	.word	0x40000800
 8004208:	40014000 	.word	0x40014000

0800420c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e040      	b.n	80042a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004222:	2b00      	cmp	r3, #0
 8004224:	d106      	bne.n	8004234 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7fc fb12 	bl	8000858 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2224      	movs	r2, #36	; 0x24
 8004238:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0201 	bic.w	r2, r2, #1
 8004248:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 fb82 	bl	8004954 <UART_SetConfig>
 8004250:	4603      	mov	r3, r0
 8004252:	2b01      	cmp	r3, #1
 8004254:	d101      	bne.n	800425a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e022      	b.n	80042a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	2b00      	cmp	r3, #0
 8004260:	d002      	beq.n	8004268 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 fd4a 	bl	8004cfc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685a      	ldr	r2, [r3, #4]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004276:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689a      	ldr	r2, [r3, #8]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004286:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f042 0201 	orr.w	r2, r2, #1
 8004296:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 fdd1 	bl	8004e40 <UART_CheckIdleState>
 800429e:	4603      	mov	r3, r0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3708      	adds	r7, #8
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b08a      	sub	sp, #40	; 0x28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	4613      	mov	r3, r2
 80042b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042ba:	2b20      	cmp	r3, #32
 80042bc:	d13d      	bne.n	800433a <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d002      	beq.n	80042ca <HAL_UART_Receive_IT+0x22>
 80042c4:	88fb      	ldrh	r3, [r7, #6]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e036      	b.n	800433c <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d101      	bne.n	80042dc <HAL_UART_Receive_IT+0x34>
 80042d8:	2302      	movs	r3, #2
 80042da:	e02f      	b.n	800433c <HAL_UART_Receive_IT+0x94>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d018      	beq.n	800432a <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	e853 3f00 	ldrex	r3, [r3]
 8004304:	613b      	str	r3, [r7, #16]
   return(result);
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800430c:	627b      	str	r3, [r7, #36]	; 0x24
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	461a      	mov	r2, r3
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	623b      	str	r3, [r7, #32]
 8004318:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431a:	69f9      	ldr	r1, [r7, #28]
 800431c:	6a3a      	ldr	r2, [r7, #32]
 800431e:	e841 2300 	strex	r3, r2, [r1]
 8004322:	61bb      	str	r3, [r7, #24]
   return(result);
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1e6      	bne.n	80042f8 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800432a:	88fb      	ldrh	r3, [r7, #6]
 800432c:	461a      	mov	r2, r3
 800432e:	68b9      	ldr	r1, [r7, #8]
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f000 fe93 	bl	800505c <UART_Start_Receive_IT>
 8004336:	4603      	mov	r3, r0
 8004338:	e000      	b.n	800433c <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800433a:	2302      	movs	r3, #2
  }
}
 800433c:	4618      	mov	r0, r3
 800433e:	3728      	adds	r7, #40	; 0x28
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b0ba      	sub	sp, #232	; 0xe8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800436a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800436e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004372:	4013      	ands	r3, r2
 8004374:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004378:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800437c:	2b00      	cmp	r3, #0
 800437e:	d115      	bne.n	80043ac <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004384:	f003 0320 	and.w	r3, r3, #32
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00f      	beq.n	80043ac <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800438c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004390:	f003 0320 	and.w	r3, r3, #32
 8004394:	2b00      	cmp	r3, #0
 8004396:	d009      	beq.n	80043ac <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 82a3 	beq.w	80048e8 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	4798      	blx	r3
      }
      return;
 80043aa:	e29d      	b.n	80048e8 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80043ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 8117 	beq.w	80045e4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80043b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d106      	bne.n	80043d0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80043c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80043c6:	4b85      	ldr	r3, [pc, #532]	; (80045dc <HAL_UART_IRQHandler+0x298>)
 80043c8:	4013      	ands	r3, r2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 810a 	beq.w	80045e4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80043d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d011      	beq.n	8004400 <HAL_UART_IRQHandler+0xbc>
 80043dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00b      	beq.n	8004400 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2201      	movs	r2, #1
 80043ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043f6:	f043 0201 	orr.w	r2, r3, #1
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d011      	beq.n	8004430 <HAL_UART_IRQHandler+0xec>
 800440c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00b      	beq.n	8004430 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2202      	movs	r2, #2
 800441e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004426:	f043 0204 	orr.w	r2, r3, #4
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004434:	f003 0304 	and.w	r3, r3, #4
 8004438:	2b00      	cmp	r3, #0
 800443a:	d011      	beq.n	8004460 <HAL_UART_IRQHandler+0x11c>
 800443c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00b      	beq.n	8004460 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2204      	movs	r2, #4
 800444e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004456:	f043 0202 	orr.w	r2, r3, #2
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004464:	f003 0308 	and.w	r3, r3, #8
 8004468:	2b00      	cmp	r3, #0
 800446a:	d017      	beq.n	800449c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800446c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004470:	f003 0320 	and.w	r3, r3, #32
 8004474:	2b00      	cmp	r3, #0
 8004476:	d105      	bne.n	8004484 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004478:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800447c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00b      	beq.n	800449c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2208      	movs	r2, #8
 800448a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004492:	f043 0208 	orr.w	r2, r3, #8
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800449c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d012      	beq.n	80044ce <HAL_UART_IRQHandler+0x18a>
 80044a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00c      	beq.n	80044ce <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044c4:	f043 0220 	orr.w	r2, r3, #32
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 8209 	beq.w	80048ec <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80044da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044de:	f003 0320 	and.w	r3, r3, #32
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00d      	beq.n	8004502 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80044e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044ea:	f003 0320 	and.w	r3, r3, #32
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d007      	beq.n	8004502 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004508:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004516:	2b40      	cmp	r3, #64	; 0x40
 8004518:	d005      	beq.n	8004526 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800451a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800451e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004522:	2b00      	cmp	r3, #0
 8004524:	d04f      	beq.n	80045c6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 fe30 	bl	800518c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004536:	2b40      	cmp	r3, #64	; 0x40
 8004538:	d141      	bne.n	80045be <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	3308      	adds	r3, #8
 8004540:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004544:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004548:	e853 3f00 	ldrex	r3, [r3]
 800454c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004550:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004554:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004558:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	3308      	adds	r3, #8
 8004562:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004566:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800456a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004572:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004576:	e841 2300 	strex	r3, r2, [r1]
 800457a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800457e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1d9      	bne.n	800453a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458a:	2b00      	cmp	r3, #0
 800458c:	d013      	beq.n	80045b6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004592:	4a13      	ldr	r2, [pc, #76]	; (80045e0 <HAL_UART_IRQHandler+0x29c>)
 8004594:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459a:	4618      	mov	r0, r3
 800459c:	f7fc fdf6 	bl	800118c <HAL_DMA_Abort_IT>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d017      	beq.n	80045d6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80045b0:	4610      	mov	r0, r2
 80045b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045b4:	e00f      	b.n	80045d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f9b6 	bl	8004928 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045bc:	e00b      	b.n	80045d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 f9b2 	bl	8004928 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045c4:	e007      	b.n	80045d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 f9ae 	bl	8004928 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80045d4:	e18a      	b.n	80048ec <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045d6:	bf00      	nop
    return;
 80045d8:	e188      	b.n	80048ec <HAL_UART_IRQHandler+0x5a8>
 80045da:	bf00      	nop
 80045dc:	04000120 	.word	0x04000120
 80045e0:	08005253 	.word	0x08005253

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	f040 8143 	bne.w	8004874 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80045ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045f2:	f003 0310 	and.w	r3, r3, #16
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 813c 	beq.w	8004874 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80045fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004600:	f003 0310 	and.w	r3, r3, #16
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 8135 	beq.w	8004874 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2210      	movs	r2, #16
 8004610:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461c:	2b40      	cmp	r3, #64	; 0x40
 800461e:	f040 80b1 	bne.w	8004784 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800462e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 815c 	beq.w	80048f0 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800463e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004642:	429a      	cmp	r2, r3
 8004644:	f080 8154 	bcs.w	80048f0 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800464e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	2b20      	cmp	r3, #32
 800465a:	f000 8085 	beq.w	8004768 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004666:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800466a:	e853 3f00 	ldrex	r3, [r3]
 800466e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004672:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004676:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800467a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	461a      	mov	r2, r3
 8004684:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004688:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800468c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004690:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004694:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004698:	e841 2300 	strex	r3, r2, [r1]
 800469c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80046a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1da      	bne.n	800465e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	3308      	adds	r3, #8
 80046ae:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046b2:	e853 3f00 	ldrex	r3, [r3]
 80046b6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80046b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046ba:	f023 0301 	bic.w	r3, r3, #1
 80046be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	3308      	adds	r3, #8
 80046c8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80046cc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80046d0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80046d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80046d8:	e841 2300 	strex	r3, r2, [r1]
 80046dc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80046de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1e1      	bne.n	80046a8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	3308      	adds	r3, #8
 80046ea:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046ee:	e853 3f00 	ldrex	r3, [r3]
 80046f2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80046f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	3308      	adds	r3, #8
 8004704:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004708:	66fa      	str	r2, [r7, #108]	; 0x6c
 800470a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800470e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004710:	e841 2300 	strex	r3, r2, [r1]
 8004714:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004716:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1e3      	bne.n	80046e4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2220      	movs	r2, #32
 8004720:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004730:	e853 3f00 	ldrex	r3, [r3]
 8004734:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004738:	f023 0310 	bic.w	r3, r3, #16
 800473c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	461a      	mov	r2, r3
 8004746:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800474a:	65bb      	str	r3, [r7, #88]	; 0x58
 800474c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004750:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004752:	e841 2300 	strex	r3, r2, [r1]
 8004756:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004758:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1e4      	bne.n	8004728 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004762:	4618      	mov	r0, r3
 8004764:	f7fc fcd9 	bl	800111a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004774:	b29b      	uxth	r3, r3
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	b29b      	uxth	r3, r3
 800477a:	4619      	mov	r1, r3
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f8dd 	bl	800493c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004782:	e0b5      	b.n	80048f0 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004790:	b29b      	uxth	r3, r3
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800479e:	b29b      	uxth	r3, r3
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 80a7 	beq.w	80048f4 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80047a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 80a2 	beq.w	80048f4 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b8:	e853 3f00 	ldrex	r3, [r3]
 80047bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80047be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	461a      	mov	r2, r3
 80047ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80047d2:	647b      	str	r3, [r7, #68]	; 0x44
 80047d4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047da:	e841 2300 	strex	r3, r2, [r1]
 80047de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1e4      	bne.n	80047b0 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	3308      	adds	r3, #8
 80047ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	e853 3f00 	ldrex	r3, [r3]
 80047f4:	623b      	str	r3, [r7, #32]
   return(result);
 80047f6:	6a3b      	ldr	r3, [r7, #32]
 80047f8:	f023 0301 	bic.w	r3, r3, #1
 80047fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3308      	adds	r3, #8
 8004806:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800480a:	633a      	str	r2, [r7, #48]	; 0x30
 800480c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800480e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004812:	e841 2300 	strex	r3, r2, [r1]
 8004816:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1e3      	bne.n	80047e6 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2220      	movs	r2, #32
 8004822:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	e853 3f00 	ldrex	r3, [r3]
 800483c:	60fb      	str	r3, [r7, #12]
   return(result);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f023 0310 	bic.w	r3, r3, #16
 8004844:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	461a      	mov	r2, r3
 800484e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004852:	61fb      	str	r3, [r7, #28]
 8004854:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004856:	69b9      	ldr	r1, [r7, #24]
 8004858:	69fa      	ldr	r2, [r7, #28]
 800485a:	e841 2300 	strex	r3, r2, [r1]
 800485e:	617b      	str	r3, [r7, #20]
   return(result);
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1e4      	bne.n	8004830 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004866:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800486a:	4619      	mov	r1, r3
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 f865 	bl	800493c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004872:	e03f      	b.n	80048f4 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004878:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00e      	beq.n	800489e <HAL_UART_IRQHandler+0x55a>
 8004880:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004884:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d008      	beq.n	800489e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004894:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 fe77 	bl	800558a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800489c:	e02d      	b.n	80048fa <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800489e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00e      	beq.n	80048c8 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80048aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d008      	beq.n	80048c8 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d01c      	beq.n	80048f8 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	4798      	blx	r3
    }
    return;
 80048c6:	e017      	b.n	80048f8 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80048c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d012      	beq.n	80048fa <HAL_UART_IRQHandler+0x5b6>
 80048d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00c      	beq.n	80048fa <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 fccc 	bl	800527e <UART_EndTransmit_IT>
    return;
 80048e6:	e008      	b.n	80048fa <HAL_UART_IRQHandler+0x5b6>
      return;
 80048e8:	bf00      	nop
 80048ea:	e006      	b.n	80048fa <HAL_UART_IRQHandler+0x5b6>
    return;
 80048ec:	bf00      	nop
 80048ee:	e004      	b.n	80048fa <HAL_UART_IRQHandler+0x5b6>
      return;
 80048f0:	bf00      	nop
 80048f2:	e002      	b.n	80048fa <HAL_UART_IRQHandler+0x5b6>
      return;
 80048f4:	bf00      	nop
 80048f6:	e000      	b.n	80048fa <HAL_UART_IRQHandler+0x5b6>
    return;
 80048f8:	bf00      	nop
  }

}
 80048fa:	37e8      	adds	r7, #232	; 0xe8
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	460b      	mov	r3, r1
 8004946:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b088      	sub	sp, #32
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800495c:	2300      	movs	r3, #0
 800495e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689a      	ldr	r2, [r3, #8]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	431a      	orrs	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	69db      	ldr	r3, [r3, #28]
 8004974:	4313      	orrs	r3, r2
 8004976:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004982:	f023 030c 	bic.w	r3, r3, #12
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	6812      	ldr	r2, [r2, #0]
 800498a:	6979      	ldr	r1, [r7, #20]
 800498c:	430b      	orrs	r3, r1
 800498e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	68da      	ldr	r2, [r3, #12]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	430a      	orrs	r2, r1
 80049a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a1b      	ldr	r3, [r3, #32]
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4aae      	ldr	r2, [pc, #696]	; (8004c88 <UART_SetConfig+0x334>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d120      	bne.n	8004a16 <UART_SetConfig+0xc2>
 80049d4:	4bad      	ldr	r3, [pc, #692]	; (8004c8c <UART_SetConfig+0x338>)
 80049d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d8:	f003 0303 	and.w	r3, r3, #3
 80049dc:	2b03      	cmp	r3, #3
 80049de:	d817      	bhi.n	8004a10 <UART_SetConfig+0xbc>
 80049e0:	a201      	add	r2, pc, #4	; (adr r2, 80049e8 <UART_SetConfig+0x94>)
 80049e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e6:	bf00      	nop
 80049e8:	080049f9 	.word	0x080049f9
 80049ec:	08004a05 	.word	0x08004a05
 80049f0:	08004a0b 	.word	0x08004a0b
 80049f4:	080049ff 	.word	0x080049ff
 80049f8:	2301      	movs	r3, #1
 80049fa:	77fb      	strb	r3, [r7, #31]
 80049fc:	e0b5      	b.n	8004b6a <UART_SetConfig+0x216>
 80049fe:	2302      	movs	r3, #2
 8004a00:	77fb      	strb	r3, [r7, #31]
 8004a02:	e0b2      	b.n	8004b6a <UART_SetConfig+0x216>
 8004a04:	2304      	movs	r3, #4
 8004a06:	77fb      	strb	r3, [r7, #31]
 8004a08:	e0af      	b.n	8004b6a <UART_SetConfig+0x216>
 8004a0a:	2308      	movs	r3, #8
 8004a0c:	77fb      	strb	r3, [r7, #31]
 8004a0e:	e0ac      	b.n	8004b6a <UART_SetConfig+0x216>
 8004a10:	2310      	movs	r3, #16
 8004a12:	77fb      	strb	r3, [r7, #31]
 8004a14:	e0a9      	b.n	8004b6a <UART_SetConfig+0x216>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a9d      	ldr	r2, [pc, #628]	; (8004c90 <UART_SetConfig+0x33c>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d124      	bne.n	8004a6a <UART_SetConfig+0x116>
 8004a20:	4b9a      	ldr	r3, [pc, #616]	; (8004c8c <UART_SetConfig+0x338>)
 8004a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a2c:	d011      	beq.n	8004a52 <UART_SetConfig+0xfe>
 8004a2e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a32:	d817      	bhi.n	8004a64 <UART_SetConfig+0x110>
 8004a34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a38:	d011      	beq.n	8004a5e <UART_SetConfig+0x10a>
 8004a3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a3e:	d811      	bhi.n	8004a64 <UART_SetConfig+0x110>
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d003      	beq.n	8004a4c <UART_SetConfig+0xf8>
 8004a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a48:	d006      	beq.n	8004a58 <UART_SetConfig+0x104>
 8004a4a:	e00b      	b.n	8004a64 <UART_SetConfig+0x110>
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	77fb      	strb	r3, [r7, #31]
 8004a50:	e08b      	b.n	8004b6a <UART_SetConfig+0x216>
 8004a52:	2302      	movs	r3, #2
 8004a54:	77fb      	strb	r3, [r7, #31]
 8004a56:	e088      	b.n	8004b6a <UART_SetConfig+0x216>
 8004a58:	2304      	movs	r3, #4
 8004a5a:	77fb      	strb	r3, [r7, #31]
 8004a5c:	e085      	b.n	8004b6a <UART_SetConfig+0x216>
 8004a5e:	2308      	movs	r3, #8
 8004a60:	77fb      	strb	r3, [r7, #31]
 8004a62:	e082      	b.n	8004b6a <UART_SetConfig+0x216>
 8004a64:	2310      	movs	r3, #16
 8004a66:	77fb      	strb	r3, [r7, #31]
 8004a68:	e07f      	b.n	8004b6a <UART_SetConfig+0x216>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a89      	ldr	r2, [pc, #548]	; (8004c94 <UART_SetConfig+0x340>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d124      	bne.n	8004abe <UART_SetConfig+0x16a>
 8004a74:	4b85      	ldr	r3, [pc, #532]	; (8004c8c <UART_SetConfig+0x338>)
 8004a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a78:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004a7c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004a80:	d011      	beq.n	8004aa6 <UART_SetConfig+0x152>
 8004a82:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004a86:	d817      	bhi.n	8004ab8 <UART_SetConfig+0x164>
 8004a88:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004a8c:	d011      	beq.n	8004ab2 <UART_SetConfig+0x15e>
 8004a8e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004a92:	d811      	bhi.n	8004ab8 <UART_SetConfig+0x164>
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d003      	beq.n	8004aa0 <UART_SetConfig+0x14c>
 8004a98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a9c:	d006      	beq.n	8004aac <UART_SetConfig+0x158>
 8004a9e:	e00b      	b.n	8004ab8 <UART_SetConfig+0x164>
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	77fb      	strb	r3, [r7, #31]
 8004aa4:	e061      	b.n	8004b6a <UART_SetConfig+0x216>
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	77fb      	strb	r3, [r7, #31]
 8004aaa:	e05e      	b.n	8004b6a <UART_SetConfig+0x216>
 8004aac:	2304      	movs	r3, #4
 8004aae:	77fb      	strb	r3, [r7, #31]
 8004ab0:	e05b      	b.n	8004b6a <UART_SetConfig+0x216>
 8004ab2:	2308      	movs	r3, #8
 8004ab4:	77fb      	strb	r3, [r7, #31]
 8004ab6:	e058      	b.n	8004b6a <UART_SetConfig+0x216>
 8004ab8:	2310      	movs	r3, #16
 8004aba:	77fb      	strb	r3, [r7, #31]
 8004abc:	e055      	b.n	8004b6a <UART_SetConfig+0x216>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a75      	ldr	r2, [pc, #468]	; (8004c98 <UART_SetConfig+0x344>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d124      	bne.n	8004b12 <UART_SetConfig+0x1be>
 8004ac8:	4b70      	ldr	r3, [pc, #448]	; (8004c8c <UART_SetConfig+0x338>)
 8004aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004acc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004ad0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ad4:	d011      	beq.n	8004afa <UART_SetConfig+0x1a6>
 8004ad6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ada:	d817      	bhi.n	8004b0c <UART_SetConfig+0x1b8>
 8004adc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ae0:	d011      	beq.n	8004b06 <UART_SetConfig+0x1b2>
 8004ae2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ae6:	d811      	bhi.n	8004b0c <UART_SetConfig+0x1b8>
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <UART_SetConfig+0x1a0>
 8004aec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004af0:	d006      	beq.n	8004b00 <UART_SetConfig+0x1ac>
 8004af2:	e00b      	b.n	8004b0c <UART_SetConfig+0x1b8>
 8004af4:	2300      	movs	r3, #0
 8004af6:	77fb      	strb	r3, [r7, #31]
 8004af8:	e037      	b.n	8004b6a <UART_SetConfig+0x216>
 8004afa:	2302      	movs	r3, #2
 8004afc:	77fb      	strb	r3, [r7, #31]
 8004afe:	e034      	b.n	8004b6a <UART_SetConfig+0x216>
 8004b00:	2304      	movs	r3, #4
 8004b02:	77fb      	strb	r3, [r7, #31]
 8004b04:	e031      	b.n	8004b6a <UART_SetConfig+0x216>
 8004b06:	2308      	movs	r3, #8
 8004b08:	77fb      	strb	r3, [r7, #31]
 8004b0a:	e02e      	b.n	8004b6a <UART_SetConfig+0x216>
 8004b0c:	2310      	movs	r3, #16
 8004b0e:	77fb      	strb	r3, [r7, #31]
 8004b10:	e02b      	b.n	8004b6a <UART_SetConfig+0x216>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a61      	ldr	r2, [pc, #388]	; (8004c9c <UART_SetConfig+0x348>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d124      	bne.n	8004b66 <UART_SetConfig+0x212>
 8004b1c:	4b5b      	ldr	r3, [pc, #364]	; (8004c8c <UART_SetConfig+0x338>)
 8004b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b20:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004b24:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b28:	d011      	beq.n	8004b4e <UART_SetConfig+0x1fa>
 8004b2a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b2e:	d817      	bhi.n	8004b60 <UART_SetConfig+0x20c>
 8004b30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b34:	d011      	beq.n	8004b5a <UART_SetConfig+0x206>
 8004b36:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b3a:	d811      	bhi.n	8004b60 <UART_SetConfig+0x20c>
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d003      	beq.n	8004b48 <UART_SetConfig+0x1f4>
 8004b40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b44:	d006      	beq.n	8004b54 <UART_SetConfig+0x200>
 8004b46:	e00b      	b.n	8004b60 <UART_SetConfig+0x20c>
 8004b48:	2300      	movs	r3, #0
 8004b4a:	77fb      	strb	r3, [r7, #31]
 8004b4c:	e00d      	b.n	8004b6a <UART_SetConfig+0x216>
 8004b4e:	2302      	movs	r3, #2
 8004b50:	77fb      	strb	r3, [r7, #31]
 8004b52:	e00a      	b.n	8004b6a <UART_SetConfig+0x216>
 8004b54:	2304      	movs	r3, #4
 8004b56:	77fb      	strb	r3, [r7, #31]
 8004b58:	e007      	b.n	8004b6a <UART_SetConfig+0x216>
 8004b5a:	2308      	movs	r3, #8
 8004b5c:	77fb      	strb	r3, [r7, #31]
 8004b5e:	e004      	b.n	8004b6a <UART_SetConfig+0x216>
 8004b60:	2310      	movs	r3, #16
 8004b62:	77fb      	strb	r3, [r7, #31]
 8004b64:	e001      	b.n	8004b6a <UART_SetConfig+0x216>
 8004b66:	2310      	movs	r3, #16
 8004b68:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b72:	d15c      	bne.n	8004c2e <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8004b74:	7ffb      	ldrb	r3, [r7, #31]
 8004b76:	2b08      	cmp	r3, #8
 8004b78:	d827      	bhi.n	8004bca <UART_SetConfig+0x276>
 8004b7a:	a201      	add	r2, pc, #4	; (adr r2, 8004b80 <UART_SetConfig+0x22c>)
 8004b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b80:	08004ba5 	.word	0x08004ba5
 8004b84:	08004bad 	.word	0x08004bad
 8004b88:	08004bb5 	.word	0x08004bb5
 8004b8c:	08004bcb 	.word	0x08004bcb
 8004b90:	08004bbb 	.word	0x08004bbb
 8004b94:	08004bcb 	.word	0x08004bcb
 8004b98:	08004bcb 	.word	0x08004bcb
 8004b9c:	08004bcb 	.word	0x08004bcb
 8004ba0:	08004bc3 	.word	0x08004bc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ba4:	f7fd ffc0 	bl	8002b28 <HAL_RCC_GetPCLK1Freq>
 8004ba8:	61b8      	str	r0, [r7, #24]
        break;
 8004baa:	e013      	b.n	8004bd4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bac:	f7fd ffde 	bl	8002b6c <HAL_RCC_GetPCLK2Freq>
 8004bb0:	61b8      	str	r0, [r7, #24]
        break;
 8004bb2:	e00f      	b.n	8004bd4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bb4:	4b3a      	ldr	r3, [pc, #232]	; (8004ca0 <UART_SetConfig+0x34c>)
 8004bb6:	61bb      	str	r3, [r7, #24]
        break;
 8004bb8:	e00c      	b.n	8004bd4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bba:	f7fd ff3f 	bl	8002a3c <HAL_RCC_GetSysClockFreq>
 8004bbe:	61b8      	str	r0, [r7, #24]
        break;
 8004bc0:	e008      	b.n	8004bd4 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bc6:	61bb      	str	r3, [r7, #24]
        break;
 8004bc8:	e004      	b.n	8004bd4 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	77bb      	strb	r3, [r7, #30]
        break;
 8004bd2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f000 8085 	beq.w	8004ce6 <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	005a      	lsls	r2, r3, #1
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	085b      	lsrs	r3, r3, #1
 8004be6:	441a      	add	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	2b0f      	cmp	r3, #15
 8004bf8:	d916      	bls.n	8004c28 <UART_SetConfig+0x2d4>
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c00:	d212      	bcs.n	8004c28 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	f023 030f 	bic.w	r3, r3, #15
 8004c0a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	085b      	lsrs	r3, r3, #1
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	f003 0307 	and.w	r3, r3, #7
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	89fb      	ldrh	r3, [r7, #14]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	89fa      	ldrh	r2, [r7, #14]
 8004c24:	60da      	str	r2, [r3, #12]
 8004c26:	e05e      	b.n	8004ce6 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	77bb      	strb	r3, [r7, #30]
 8004c2c:	e05b      	b.n	8004ce6 <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c2e:	7ffb      	ldrb	r3, [r7, #31]
 8004c30:	2b08      	cmp	r3, #8
 8004c32:	d837      	bhi.n	8004ca4 <UART_SetConfig+0x350>
 8004c34:	a201      	add	r2, pc, #4	; (adr r2, 8004c3c <UART_SetConfig+0x2e8>)
 8004c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c3a:	bf00      	nop
 8004c3c:	08004c61 	.word	0x08004c61
 8004c40:	08004c69 	.word	0x08004c69
 8004c44:	08004c71 	.word	0x08004c71
 8004c48:	08004ca5 	.word	0x08004ca5
 8004c4c:	08004c77 	.word	0x08004c77
 8004c50:	08004ca5 	.word	0x08004ca5
 8004c54:	08004ca5 	.word	0x08004ca5
 8004c58:	08004ca5 	.word	0x08004ca5
 8004c5c:	08004c7f 	.word	0x08004c7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c60:	f7fd ff62 	bl	8002b28 <HAL_RCC_GetPCLK1Freq>
 8004c64:	61b8      	str	r0, [r7, #24]
        break;
 8004c66:	e022      	b.n	8004cae <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c68:	f7fd ff80 	bl	8002b6c <HAL_RCC_GetPCLK2Freq>
 8004c6c:	61b8      	str	r0, [r7, #24]
        break;
 8004c6e:	e01e      	b.n	8004cae <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c70:	4b0b      	ldr	r3, [pc, #44]	; (8004ca0 <UART_SetConfig+0x34c>)
 8004c72:	61bb      	str	r3, [r7, #24]
        break;
 8004c74:	e01b      	b.n	8004cae <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c76:	f7fd fee1 	bl	8002a3c <HAL_RCC_GetSysClockFreq>
 8004c7a:	61b8      	str	r0, [r7, #24]
        break;
 8004c7c:	e017      	b.n	8004cae <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c82:	61bb      	str	r3, [r7, #24]
        break;
 8004c84:	e013      	b.n	8004cae <UART_SetConfig+0x35a>
 8004c86:	bf00      	nop
 8004c88:	40013800 	.word	0x40013800
 8004c8c:	40021000 	.word	0x40021000
 8004c90:	40004400 	.word	0x40004400
 8004c94:	40004800 	.word	0x40004800
 8004c98:	40004c00 	.word	0x40004c00
 8004c9c:	40005000 	.word	0x40005000
 8004ca0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	77bb      	strb	r3, [r7, #30]
        break;
 8004cac:	bf00      	nop
    }

    if (pclk != 0U)
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d018      	beq.n	8004ce6 <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	085a      	lsrs	r2, r3, #1
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	441a      	add	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	2b0f      	cmp	r3, #15
 8004cce:	d908      	bls.n	8004ce2 <UART_SetConfig+0x38e>
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cd6:	d204      	bcs.n	8004ce2 <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	60da      	str	r2, [r3, #12]
 8004ce0:	e001      	b.n	8004ce6 <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004cf2:	7fbb      	ldrb	r3, [r7, #30]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3720      	adds	r7, #32
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00a      	beq.n	8004d26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00a      	beq.n	8004d48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	430a      	orrs	r2, r1
 8004d46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4c:	f003 0304 	and.w	r3, r3, #4
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00a      	beq.n	8004d6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6e:	f003 0308 	and.w	r3, r3, #8
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00a      	beq.n	8004d8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d90:	f003 0310 	and.w	r3, r3, #16
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00a      	beq.n	8004dae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	430a      	orrs	r2, r1
 8004dac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db2:	f003 0320 	and.w	r3, r3, #32
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00a      	beq.n	8004dd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d01a      	beq.n	8004e12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dfa:	d10a      	bne.n	8004e12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00a      	beq.n	8004e34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	430a      	orrs	r2, r1
 8004e32:	605a      	str	r2, [r3, #4]
  }
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af02      	add	r7, sp, #8
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e50:	f7fc f846 	bl	8000ee0 <HAL_GetTick>
 8004e54:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0308 	and.w	r3, r3, #8
 8004e60:	2b08      	cmp	r3, #8
 8004e62:	d10e      	bne.n	8004e82 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f82d 	bl	8004ed2 <UART_WaitOnFlagUntilTimeout>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d001      	beq.n	8004e82 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e023      	b.n	8004eca <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	2b04      	cmp	r3, #4
 8004e8e:	d10e      	bne.n	8004eae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f817 	bl	8004ed2 <UART_WaitOnFlagUntilTimeout>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e00d      	b.n	8004eca <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b09c      	sub	sp, #112	; 0x70
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	60f8      	str	r0, [r7, #12]
 8004eda:	60b9      	str	r1, [r7, #8]
 8004edc:	603b      	str	r3, [r7, #0]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ee2:	e0a5      	b.n	8005030 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ee4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eea:	f000 80a1 	beq.w	8005030 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eee:	f7fb fff7 	bl	8000ee0 <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d302      	bcc.n	8004f04 <UART_WaitOnFlagUntilTimeout+0x32>
 8004efe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d13e      	bne.n	8004f82 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f0c:	e853 3f00 	ldrex	r3, [r3]
 8004f10:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f18:	667b      	str	r3, [r7, #100]	; 0x64
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f24:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f26:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004f28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f2a:	e841 2300 	strex	r3, r2, [r1]
 8004f2e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004f30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1e6      	bne.n	8004f04 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	3308      	adds	r3, #8
 8004f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f40:	e853 3f00 	ldrex	r3, [r3]
 8004f44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f48:	f023 0301 	bic.w	r3, r3, #1
 8004f4c:	663b      	str	r3, [r7, #96]	; 0x60
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	3308      	adds	r3, #8
 8004f54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f56:	64ba      	str	r2, [r7, #72]	; 0x48
 8004f58:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f5e:	e841 2300 	strex	r3, r2, [r1]
 8004f62:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004f64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1e5      	bne.n	8004f36 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2220      	movs	r2, #32
 8004f74:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e067      	b.n	8005052 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0304 	and.w	r3, r3, #4
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d04f      	beq.n	8005030 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	69db      	ldr	r3, [r3, #28]
 8004f96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f9e:	d147      	bne.n	8005030 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fa8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb2:	e853 3f00 	ldrex	r3, [r3]
 8004fb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fbe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fc8:	637b      	str	r3, [r7, #52]	; 0x34
 8004fca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fcc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fd0:	e841 2300 	strex	r3, r2, [r1]
 8004fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1e6      	bne.n	8004faa <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	3308      	adds	r3, #8
 8004fe2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	e853 3f00 	ldrex	r3, [r3]
 8004fea:	613b      	str	r3, [r7, #16]
   return(result);
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	f023 0301 	bic.w	r3, r3, #1
 8004ff2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	3308      	adds	r3, #8
 8004ffa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ffc:	623a      	str	r2, [r7, #32]
 8004ffe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005000:	69f9      	ldr	r1, [r7, #28]
 8005002:	6a3a      	ldr	r2, [r7, #32]
 8005004:	e841 2300 	strex	r3, r2, [r1]
 8005008:	61bb      	str	r3, [r7, #24]
   return(result);
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1e5      	bne.n	8004fdc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2220      	movs	r2, #32
 8005014:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2220      	movs	r2, #32
 800501a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2220      	movs	r2, #32
 8005020:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e010      	b.n	8005052 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	69da      	ldr	r2, [r3, #28]
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	4013      	ands	r3, r2
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	429a      	cmp	r2, r3
 800503e:	bf0c      	ite	eq
 8005040:	2301      	moveq	r3, #1
 8005042:	2300      	movne	r3, #0
 8005044:	b2db      	uxtb	r3, r3
 8005046:	461a      	mov	r2, r3
 8005048:	79fb      	ldrb	r3, [r7, #7]
 800504a:	429a      	cmp	r2, r3
 800504c:	f43f af4a 	beq.w	8004ee4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3770      	adds	r7, #112	; 0x70
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
	...

0800505c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800505c:	b480      	push	{r7}
 800505e:	b091      	sub	sp, #68	; 0x44
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	4613      	mov	r3, r2
 8005068:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	88fa      	ldrh	r2, [r7, #6]
 8005074:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	88fa      	ldrh	r2, [r7, #6]
 800507c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800508e:	d10e      	bne.n	80050ae <UART_Start_Receive_IT+0x52>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d105      	bne.n	80050a4 <UART_Start_Receive_IT+0x48>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800509e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80050a2:	e01a      	b.n	80050da <UART_Start_Receive_IT+0x7e>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	22ff      	movs	r2, #255	; 0xff
 80050a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80050ac:	e015      	b.n	80050da <UART_Start_Receive_IT+0x7e>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10d      	bne.n	80050d2 <UART_Start_Receive_IT+0x76>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d104      	bne.n	80050c8 <UART_Start_Receive_IT+0x6c>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	22ff      	movs	r2, #255	; 0xff
 80050c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80050c6:	e008      	b.n	80050da <UART_Start_Receive_IT+0x7e>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	227f      	movs	r2, #127	; 0x7f
 80050cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80050d0:	e003      	b.n	80050da <UART_Start_Receive_IT+0x7e>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2222      	movs	r2, #34	; 0x22
 80050e6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	3308      	adds	r3, #8
 80050ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f2:	e853 3f00 	ldrex	r3, [r3]
 80050f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fa:	f043 0301 	orr.w	r3, r3, #1
 80050fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	3308      	adds	r3, #8
 8005106:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005108:	637a      	str	r2, [r7, #52]	; 0x34
 800510a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800510e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005110:	e841 2300 	strex	r3, r2, [r1]
 8005114:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1e5      	bne.n	80050e8 <UART_Start_Receive_IT+0x8c>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005124:	d107      	bne.n	8005136 <UART_Start_Receive_IT+0xda>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d103      	bne.n	8005136 <UART_Start_Receive_IT+0xda>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	4a14      	ldr	r2, [pc, #80]	; (8005184 <UART_Start_Receive_IT+0x128>)
 8005132:	665a      	str	r2, [r3, #100]	; 0x64
 8005134:	e002      	b.n	800513c <UART_Start_Receive_IT+0xe0>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	4a13      	ldr	r2, [pc, #76]	; (8005188 <UART_Start_Receive_IT+0x12c>)
 800513a:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	e853 3f00 	ldrex	r3, [r3]
 8005150:	613b      	str	r3, [r7, #16]
   return(result);
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005158:	63bb      	str	r3, [r7, #56]	; 0x38
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	461a      	mov	r2, r3
 8005160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005162:	623b      	str	r3, [r7, #32]
 8005164:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005166:	69f9      	ldr	r1, [r7, #28]
 8005168:	6a3a      	ldr	r2, [r7, #32]
 800516a:	e841 2300 	strex	r3, r2, [r1]
 800516e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1e6      	bne.n	8005144 <UART_Start_Receive_IT+0xe8>
  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3744      	adds	r7, #68	; 0x44
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr
 8005184:	0800542f 	.word	0x0800542f
 8005188:	080052d3 	.word	0x080052d3

0800518c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800518c:	b480      	push	{r7}
 800518e:	b095      	sub	sp, #84	; 0x54
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800519c:	e853 3f00 	ldrex	r3, [r3]
 80051a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	461a      	mov	r2, r3
 80051b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051b2:	643b      	str	r3, [r7, #64]	; 0x40
 80051b4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051ba:	e841 2300 	strex	r3, r2, [r1]
 80051be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1e6      	bne.n	8005194 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	3308      	adds	r3, #8
 80051cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ce:	6a3b      	ldr	r3, [r7, #32]
 80051d0:	e853 3f00 	ldrex	r3, [r3]
 80051d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	f023 0301 	bic.w	r3, r3, #1
 80051dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	3308      	adds	r3, #8
 80051e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051ee:	e841 2300 	strex	r3, r2, [r1]
 80051f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1e5      	bne.n	80051c6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d118      	bne.n	8005234 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	e853 3f00 	ldrex	r3, [r3]
 800520e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	f023 0310 	bic.w	r3, r3, #16
 8005216:	647b      	str	r3, [r7, #68]	; 0x44
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	461a      	mov	r2, r3
 800521e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005220:	61bb      	str	r3, [r7, #24]
 8005222:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005224:	6979      	ldr	r1, [r7, #20]
 8005226:	69ba      	ldr	r2, [r7, #24]
 8005228:	e841 2300 	strex	r3, r2, [r1]
 800522c:	613b      	str	r3, [r7, #16]
   return(result);
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1e6      	bne.n	8005202 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2220      	movs	r2, #32
 8005238:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005246:	bf00      	nop
 8005248:	3754      	adds	r7, #84	; 0x54
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005252:	b580      	push	{r7, lr}
 8005254:	b084      	sub	sp, #16
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f7ff fb59 	bl	8004928 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005276:	bf00      	nop
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b088      	sub	sp, #32
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	e853 3f00 	ldrex	r3, [r3]
 8005292:	60bb      	str	r3, [r7, #8]
   return(result);
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800529a:	61fb      	str	r3, [r7, #28]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	461a      	mov	r2, r3
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	61bb      	str	r3, [r7, #24]
 80052a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a8:	6979      	ldr	r1, [r7, #20]
 80052aa:	69ba      	ldr	r2, [r7, #24]
 80052ac:	e841 2300 	strex	r3, r2, [r1]
 80052b0:	613b      	str	r3, [r7, #16]
   return(result);
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1e6      	bne.n	8005286 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2220      	movs	r2, #32
 80052bc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f7ff fb1b 	bl	8004900 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052ca:	bf00      	nop
 80052cc:	3720      	adds	r7, #32
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b096      	sub	sp, #88	; 0x58
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80052e0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052e8:	2b22      	cmp	r3, #34	; 0x22
 80052ea:	f040 8094 	bne.w	8005416 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80052f4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80052f8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80052fc:	b2d9      	uxtb	r1, r3
 80052fe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005302:	b2da      	uxtb	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005308:	400a      	ands	r2, r1
 800530a:	b2d2      	uxtb	r2, r2
 800530c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005312:	1c5a      	adds	r2, r3, #1
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800531e:	b29b      	uxth	r3, r3
 8005320:	3b01      	subs	r3, #1
 8005322:	b29a      	uxth	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005330:	b29b      	uxth	r3, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d177      	bne.n	8005426 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533e:	e853 3f00 	ldrex	r3, [r3]
 8005342:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005346:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800534a:	653b      	str	r3, [r7, #80]	; 0x50
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	461a      	mov	r2, r3
 8005352:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005354:	647b      	str	r3, [r7, #68]	; 0x44
 8005356:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005358:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800535a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800535c:	e841 2300 	strex	r3, r2, [r1]
 8005360:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1e6      	bne.n	8005336 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	3308      	adds	r3, #8
 800536e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005372:	e853 3f00 	ldrex	r3, [r3]
 8005376:	623b      	str	r3, [r7, #32]
   return(result);
 8005378:	6a3b      	ldr	r3, [r7, #32]
 800537a:	f023 0301 	bic.w	r3, r3, #1
 800537e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	3308      	adds	r3, #8
 8005386:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005388:	633a      	str	r2, [r7, #48]	; 0x30
 800538a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800538e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005390:	e841 2300 	strex	r3, r2, [r1]
 8005394:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1e5      	bne.n	8005368 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2220      	movs	r2, #32
 80053a0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d12e      	bne.n	800540e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	e853 3f00 	ldrex	r3, [r3]
 80053c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f023 0310 	bic.w	r3, r3, #16
 80053ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	461a      	mov	r2, r3
 80053d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053d4:	61fb      	str	r3, [r7, #28]
 80053d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d8:	69b9      	ldr	r1, [r7, #24]
 80053da:	69fa      	ldr	r2, [r7, #28]
 80053dc:	e841 2300 	strex	r3, r2, [r1]
 80053e0:	617b      	str	r3, [r7, #20]
   return(result);
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1e6      	bne.n	80053b6 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	f003 0310 	and.w	r3, r3, #16
 80053f2:	2b10      	cmp	r3, #16
 80053f4:	d103      	bne.n	80053fe <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2210      	movs	r2, #16
 80053fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005404:	4619      	mov	r1, r3
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7ff fa98 	bl	800493c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800540c:	e00b      	b.n	8005426 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7ff fa80 	bl	8004914 <HAL_UART_RxCpltCallback>
}
 8005414:	e007      	b.n	8005426 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	699a      	ldr	r2, [r3, #24]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f042 0208 	orr.w	r2, r2, #8
 8005424:	619a      	str	r2, [r3, #24]
}
 8005426:	bf00      	nop
 8005428:	3758      	adds	r7, #88	; 0x58
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b096      	sub	sp, #88	; 0x58
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800543c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005444:	2b22      	cmp	r3, #34	; 0x22
 8005446:	f040 8094 	bne.w	8005572 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005450:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005458:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800545a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800545e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005462:	4013      	ands	r3, r2
 8005464:	b29a      	uxth	r2, r3
 8005466:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005468:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800546e:	1c9a      	adds	r2, r3, #2
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800547a:	b29b      	uxth	r3, r3
 800547c:	3b01      	subs	r3, #1
 800547e:	b29a      	uxth	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800548c:	b29b      	uxth	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d177      	bne.n	8005582 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800549a:	e853 3f00 	ldrex	r3, [r3]
 800549e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80054a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	461a      	mov	r2, r3
 80054ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054b0:	643b      	str	r3, [r7, #64]	; 0x40
 80054b2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80054b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054b8:	e841 2300 	strex	r3, r2, [r1]
 80054bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1e6      	bne.n	8005492 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	3308      	adds	r3, #8
 80054ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054cc:	6a3b      	ldr	r3, [r7, #32]
 80054ce:	e853 3f00 	ldrex	r3, [r3]
 80054d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	f023 0301 	bic.w	r3, r3, #1
 80054da:	64bb      	str	r3, [r7, #72]	; 0x48
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	3308      	adds	r3, #8
 80054e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054ec:	e841 2300 	strex	r3, r2, [r1]
 80054f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1e5      	bne.n	80054c4 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2220      	movs	r2, #32
 80054fc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005508:	2b01      	cmp	r3, #1
 800550a:	d12e      	bne.n	800556a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	e853 3f00 	ldrex	r3, [r3]
 800551e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	f023 0310 	bic.w	r3, r3, #16
 8005526:	647b      	str	r3, [r7, #68]	; 0x44
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	461a      	mov	r2, r3
 800552e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005530:	61bb      	str	r3, [r7, #24]
 8005532:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005534:	6979      	ldr	r1, [r7, #20]
 8005536:	69ba      	ldr	r2, [r7, #24]
 8005538:	e841 2300 	strex	r3, r2, [r1]
 800553c:	613b      	str	r3, [r7, #16]
   return(result);
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d1e6      	bne.n	8005512 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	69db      	ldr	r3, [r3, #28]
 800554a:	f003 0310 	and.w	r3, r3, #16
 800554e:	2b10      	cmp	r3, #16
 8005550:	d103      	bne.n	800555a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2210      	movs	r2, #16
 8005558:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005560:	4619      	mov	r1, r3
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f7ff f9ea 	bl	800493c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005568:	e00b      	b.n	8005582 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f7ff f9d2 	bl	8004914 <HAL_UART_RxCpltCallback>
}
 8005570:	e007      	b.n	8005582 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	699a      	ldr	r2, [r3, #24]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f042 0208 	orr.w	r2, r2, #8
 8005580:	619a      	str	r2, [r3, #24]
}
 8005582:	bf00      	nop
 8005584:	3758      	adds	r7, #88	; 0x58
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800558a:	b480      	push	{r7}
 800558c:	b083      	sub	sp, #12
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005592:	bf00      	nop
 8005594:	370c      	adds	r7, #12
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr

0800559e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800559e:	b480      	push	{r7}
 80055a0:	b085      	sub	sp, #20
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80055a6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80055aa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	43db      	mvns	r3, r3
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	4013      	ands	r3, r2
 80055be:	b29a      	uxth	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80055d4:	b084      	sub	sp, #16
 80055d6:	b480      	push	{r7}
 80055d8:	b083      	sub	sp, #12
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
 80055de:	f107 0014 	add.w	r0, r7, #20
 80055e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	b004      	add	sp, #16
 8005614:	4770      	bx	lr
	...

08005618 <__libc_init_array>:
 8005618:	b570      	push	{r4, r5, r6, lr}
 800561a:	4d0d      	ldr	r5, [pc, #52]	; (8005650 <__libc_init_array+0x38>)
 800561c:	4c0d      	ldr	r4, [pc, #52]	; (8005654 <__libc_init_array+0x3c>)
 800561e:	1b64      	subs	r4, r4, r5
 8005620:	10a4      	asrs	r4, r4, #2
 8005622:	2600      	movs	r6, #0
 8005624:	42a6      	cmp	r6, r4
 8005626:	d109      	bne.n	800563c <__libc_init_array+0x24>
 8005628:	4d0b      	ldr	r5, [pc, #44]	; (8005658 <__libc_init_array+0x40>)
 800562a:	4c0c      	ldr	r4, [pc, #48]	; (800565c <__libc_init_array+0x44>)
 800562c:	f000 f820 	bl	8005670 <_init>
 8005630:	1b64      	subs	r4, r4, r5
 8005632:	10a4      	asrs	r4, r4, #2
 8005634:	2600      	movs	r6, #0
 8005636:	42a6      	cmp	r6, r4
 8005638:	d105      	bne.n	8005646 <__libc_init_array+0x2e>
 800563a:	bd70      	pop	{r4, r5, r6, pc}
 800563c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005640:	4798      	blx	r3
 8005642:	3601      	adds	r6, #1
 8005644:	e7ee      	b.n	8005624 <__libc_init_array+0xc>
 8005646:	f855 3b04 	ldr.w	r3, [r5], #4
 800564a:	4798      	blx	r3
 800564c:	3601      	adds	r6, #1
 800564e:	e7f2      	b.n	8005636 <__libc_init_array+0x1e>
 8005650:	080059d0 	.word	0x080059d0
 8005654:	080059d0 	.word	0x080059d0
 8005658:	080059d0 	.word	0x080059d0
 800565c:	080059d4 	.word	0x080059d4

08005660 <memset>:
 8005660:	4402      	add	r2, r0
 8005662:	4603      	mov	r3, r0
 8005664:	4293      	cmp	r3, r2
 8005666:	d100      	bne.n	800566a <memset+0xa>
 8005668:	4770      	bx	lr
 800566a:	f803 1b01 	strb.w	r1, [r3], #1
 800566e:	e7f9      	b.n	8005664 <memset+0x4>

08005670 <_init>:
 8005670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005672:	bf00      	nop
 8005674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005676:	bc08      	pop	{r3}
 8005678:	469e      	mov	lr, r3
 800567a:	4770      	bx	lr

0800567c <_fini>:
 800567c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800567e:	bf00      	nop
 8005680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005682:	bc08      	pop	{r3}
 8005684:	469e      	mov	lr, r3
 8005686:	4770      	bx	lr
