
p0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cfc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000e84  08000e84  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000e84  08000e84  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000e84  08000e84  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e84  08000e84  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e84  08000e84  00010e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e88  08000e88  00010e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000e8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000020  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002c9c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000c28  00000000  00000000  00022cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000378  00000000  00000000  00023900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000300  00000000  00000000  00023c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b3e3  00000000  00000000  00023f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003d15  00000000  00000000  0003f35b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a3cae  00000000  00000000  00043070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000e6d1e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000c04  00000000  00000000  000e6d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000e6c 	.word	0x08000e6c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08000e6c 	.word	0x08000e6c

080001c8 <initForLights>:
#include "stm32f3xx_hal.h"

void initForLights() {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0

	__HAL_RCC_GPIOD_CLK_ENABLE();
 80001ce:	4b0e      	ldr	r3, [pc, #56]	; (8000208 <initForLights+0x40>)
 80001d0:	695b      	ldr	r3, [r3, #20]
 80001d2:	4a0d      	ldr	r2, [pc, #52]	; (8000208 <initForLights+0x40>)
 80001d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001d8:	6153      	str	r3, [r2, #20]
 80001da:	4b0b      	ldr	r3, [pc, #44]	; (8000208 <initForLights+0x40>)
 80001dc:	695b      	ldr	r3, [r3, #20]
 80001de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80001e2:	603b      	str	r3, [r7, #0]
 80001e4:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef temp1;
	temp1.Pin = GPIO_PIN_7 | GPIO_PIN_8 ;
 80001e6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80001ea:	607b      	str	r3, [r7, #4]
	temp1.Mode = GPIO_MODE_OUTPUT_PP;
 80001ec:	2301      	movs	r3, #1
 80001ee:	60bb      	str	r3, [r7, #8]
	temp1.Speed = GPIO_SPEED_FREQ_HIGH;
 80001f0:	2303      	movs	r3, #3
 80001f2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOD, &temp1);
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	4619      	mov	r1, r3
 80001f8:	4804      	ldr	r0, [pc, #16]	; (800020c <initForLights+0x44>)
 80001fa:	f000 fc69 	bl	8000ad0 <HAL_GPIO_Init>
}
 80001fe:	bf00      	nop
 8000200:	3718      	adds	r7, #24
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	40021000 	.word	0x40021000
 800020c:	48000c00 	.word	0x48000c00

08000210 <initForBlueButton>:


void initForBlueButton() {
 8000210:	b580      	push	{r7, lr}
 8000212:	b086      	sub	sp, #24
 8000214:	af00      	add	r7, sp, #0

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000216:	4b0f      	ldr	r3, [pc, #60]	; (8000254 <initForBlueButton+0x44>)
 8000218:	695b      	ldr	r3, [r3, #20]
 800021a:	4a0e      	ldr	r2, [pc, #56]	; (8000254 <initForBlueButton+0x44>)
 800021c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000220:	6153      	str	r3, [r2, #20]
 8000222:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <initForBlueButton+0x44>)
 8000224:	695b      	ldr	r3, [r3, #20]
 8000226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800022a:	603b      	str	r3, [r7, #0]
 800022c:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef temp1;
	temp1.Pin = GPIO_PIN_0;
 800022e:	2301      	movs	r3, #1
 8000230:	607b      	str	r3, [r7, #4]
	temp1.Mode = GPIO_MODE_INPUT;
 8000232:	2300      	movs	r3, #0
 8000234:	60bb      	str	r3, [r7, #8]
	temp1.Speed = GPIO_SPEED_FREQ_HIGH;
 8000236:	2303      	movs	r3, #3
 8000238:	613b      	str	r3, [r7, #16]
	temp1.Pull = GPIO_PULLDOWN;
 800023a:	2302      	movs	r3, #2
 800023c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &temp1);
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	4619      	mov	r1, r3
 8000242:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000246:	f000 fc43 	bl	8000ad0 <HAL_GPIO_Init>
}
 800024a:	bf00      	nop
 800024c:	3718      	adds	r7, #24
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	40021000 	.word	0x40021000

08000258 <initForSevenSeg>:


void initForSevenSeg() {
 8000258:	b580      	push	{r7, lr}
 800025a:	b086      	sub	sp, #24
 800025c:	af00      	add	r7, sp, #0

	__HAL_RCC_GPIOC_CLK_ENABLE();
 800025e:	4b0d      	ldr	r3, [pc, #52]	; (8000294 <initForSevenSeg+0x3c>)
 8000260:	695b      	ldr	r3, [r3, #20]
 8000262:	4a0c      	ldr	r2, [pc, #48]	; (8000294 <initForSevenSeg+0x3c>)
 8000264:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000268:	6153      	str	r3, [r2, #20]
 800026a:	4b0a      	ldr	r3, [pc, #40]	; (8000294 <initForSevenSeg+0x3c>)
 800026c:	695b      	ldr	r3, [r3, #20]
 800026e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000272:	603b      	str	r3, [r7, #0]
 8000274:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef temp;
	temp.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 8000276:	23ff      	movs	r3, #255	; 0xff
 8000278:	607b      	str	r3, [r7, #4]
	temp.Mode = GPIO_MODE_OUTPUT_PP;
 800027a:	2301      	movs	r3, #1
 800027c:	60bb      	str	r3, [r7, #8]
	temp.Speed = GPIO_SPEED_FREQ_HIGH;
 800027e:	2303      	movs	r3, #3
 8000280:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &temp);
 8000282:	1d3b      	adds	r3, r7, #4
 8000284:	4619      	mov	r1, r3
 8000286:	4804      	ldr	r0, [pc, #16]	; (8000298 <initForSevenSeg+0x40>)
 8000288:	f000 fc22 	bl	8000ad0 <HAL_GPIO_Init>
}
 800028c:	bf00      	nop
 800028e:	3718      	adds	r7, #24
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	40021000 	.word	0x40021000
 8000298:	48000800 	.word	0x48000800

0800029c <initForLED>:


void initForLED() {
 800029c:	b580      	push	{r7, lr}
 800029e:	b086      	sub	sp, #24
 80002a0:	af00      	add	r7, sp, #0

	__HAL_RCC_GPIOE_CLK_ENABLE();
 80002a2:	4b0e      	ldr	r3, [pc, #56]	; (80002dc <initForLED+0x40>)
 80002a4:	695b      	ldr	r3, [r3, #20]
 80002a6:	4a0d      	ldr	r2, [pc, #52]	; (80002dc <initForLED+0x40>)
 80002a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002ac:	6153      	str	r3, [r2, #20]
 80002ae:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <initForLED+0x40>)
 80002b0:	695b      	ldr	r3, [r3, #20]
 80002b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80002b6:	603b      	str	r3, [r7, #0]
 80002b8:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80002ba:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80002be:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002c0:	2301      	movs	r3, #1
 80002c2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002c4:	2303      	movs	r3, #3
 80002c6:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80002c8:	1d3b      	adds	r3, r7, #4
 80002ca:	4619      	mov	r1, r3
 80002cc:	4804      	ldr	r0, [pc, #16]	; (80002e0 <initForLED+0x44>)
 80002ce:	f000 fbff 	bl	8000ad0 <HAL_GPIO_Init>
}
 80002d2:	bf00      	nop
 80002d4:	3718      	adds	r7, #24
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	40021000 	.word	0x40021000
 80002e0:	48001000 	.word	0x48001000

080002e4 <turnOnLights>:


void turnOnLights(int number) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	2b09      	cmp	r3, #9
 80002f0:	f200 8090 	bhi.w	8000414 <turnOnLights+0x130>
 80002f4:	a201      	add	r2, pc, #4	; (adr r2, 80002fc <turnOnLights+0x18>)
 80002f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002fa:	bf00      	nop
 80002fc:	08000325 	.word	0x08000325
 8000300:	0800033d 	.word	0x0800033d
 8000304:	08000355 	.word	0x08000355
 8000308:	0800036d 	.word	0x0800036d
 800030c:	08000385 	.word	0x08000385
 8000310:	0800039d 	.word	0x0800039d
 8000314:	080003b5 	.word	0x080003b5
 8000318:	080003cd 	.word	0x080003cd
 800031c:	080003e5 	.word	0x080003e5
 8000320:	080003fd 	.word	0x080003fd

	switch (number) {
		case 0:
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 0);
 8000324:	2200      	movs	r2, #0
 8000326:	2180      	movs	r1, #128	; 0x80
 8000328:	483c      	ldr	r0, [pc, #240]	; (800041c <turnOnLights+0x138>)
 800032a:	f000 fd63 	bl	8000df4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 800032e:	2201      	movs	r2, #1
 8000330:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000334:	4839      	ldr	r0, [pc, #228]	; (800041c <turnOnLights+0x138>)
 8000336:	f000 fd5d 	bl	8000df4 <HAL_GPIO_WritePin>
			break;
 800033a:	e06b      	b.n	8000414 <turnOnLights+0x130>
		case 1:
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 1);
 800033c:	2201      	movs	r2, #1
 800033e:	2180      	movs	r1, #128	; 0x80
 8000340:	4836      	ldr	r0, [pc, #216]	; (800041c <turnOnLights+0x138>)
 8000342:	f000 fd57 	bl	8000df4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000346:	2200      	movs	r2, #0
 8000348:	f44f 7180 	mov.w	r1, #256	; 0x100
 800034c:	4833      	ldr	r0, [pc, #204]	; (800041c <turnOnLights+0x138>)
 800034e:	f000 fd51 	bl	8000df4 <HAL_GPIO_WritePin>
			break;
 8000352:	e05f      	b.n	8000414 <turnOnLights+0x130>
		case 2:
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 0);
 8000354:	2200      	movs	r2, #0
 8000356:	2180      	movs	r1, #128	; 0x80
 8000358:	4830      	ldr	r0, [pc, #192]	; (800041c <turnOnLights+0x138>)
 800035a:	f000 fd4b 	bl	8000df4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 800035e:	2201      	movs	r2, #1
 8000360:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000364:	482d      	ldr	r0, [pc, #180]	; (800041c <turnOnLights+0x138>)
 8000366:	f000 fd45 	bl	8000df4 <HAL_GPIO_WritePin>
			break;
 800036a:	e053      	b.n	8000414 <turnOnLights+0x130>
		case 3:
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 1);
 800036c:	2201      	movs	r2, #1
 800036e:	2180      	movs	r1, #128	; 0x80
 8000370:	482a      	ldr	r0, [pc, #168]	; (800041c <turnOnLights+0x138>)
 8000372:	f000 fd3f 	bl	8000df4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000376:	2200      	movs	r2, #0
 8000378:	f44f 7180 	mov.w	r1, #256	; 0x100
 800037c:	4827      	ldr	r0, [pc, #156]	; (800041c <turnOnLights+0x138>)
 800037e:	f000 fd39 	bl	8000df4 <HAL_GPIO_WritePin>
			break;
 8000382:	e047      	b.n	8000414 <turnOnLights+0x130>
		case 4:
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 0);
 8000384:	2200      	movs	r2, #0
 8000386:	2180      	movs	r1, #128	; 0x80
 8000388:	4824      	ldr	r0, [pc, #144]	; (800041c <turnOnLights+0x138>)
 800038a:	f000 fd33 	bl	8000df4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 800038e:	2201      	movs	r2, #1
 8000390:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000394:	4821      	ldr	r0, [pc, #132]	; (800041c <turnOnLights+0x138>)
 8000396:	f000 fd2d 	bl	8000df4 <HAL_GPIO_WritePin>
			break;
 800039a:	e03b      	b.n	8000414 <turnOnLights+0x130>
		case 5:
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 1);
 800039c:	2201      	movs	r2, #1
 800039e:	2180      	movs	r1, #128	; 0x80
 80003a0:	481e      	ldr	r0, [pc, #120]	; (800041c <turnOnLights+0x138>)
 80003a2:	f000 fd27 	bl	8000df4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 80003a6:	2200      	movs	r2, #0
 80003a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003ac:	481b      	ldr	r0, [pc, #108]	; (800041c <turnOnLights+0x138>)
 80003ae:	f000 fd21 	bl	8000df4 <HAL_GPIO_WritePin>
			break;
 80003b2:	e02f      	b.n	8000414 <turnOnLights+0x130>
		case 6:
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 0);
 80003b4:	2200      	movs	r2, #0
 80003b6:	2180      	movs	r1, #128	; 0x80
 80003b8:	4818      	ldr	r0, [pc, #96]	; (800041c <turnOnLights+0x138>)
 80003ba:	f000 fd1b 	bl	8000df4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 80003be:	2201      	movs	r2, #1
 80003c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003c4:	4815      	ldr	r0, [pc, #84]	; (800041c <turnOnLights+0x138>)
 80003c6:	f000 fd15 	bl	8000df4 <HAL_GPIO_WritePin>
			break;
 80003ca:	e023      	b.n	8000414 <turnOnLights+0x130>
		case 7:
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 1);
 80003cc:	2201      	movs	r2, #1
 80003ce:	2180      	movs	r1, #128	; 0x80
 80003d0:	4812      	ldr	r0, [pc, #72]	; (800041c <turnOnLights+0x138>)
 80003d2:	f000 fd0f 	bl	8000df4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 80003d6:	2200      	movs	r2, #0
 80003d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003dc:	480f      	ldr	r0, [pc, #60]	; (800041c <turnOnLights+0x138>)
 80003de:	f000 fd09 	bl	8000df4 <HAL_GPIO_WritePin>
			break;
 80003e2:	e017      	b.n	8000414 <turnOnLights+0x130>
		case 8:
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 0);
 80003e4:	2200      	movs	r2, #0
 80003e6:	2180      	movs	r1, #128	; 0x80
 80003e8:	480c      	ldr	r0, [pc, #48]	; (800041c <turnOnLights+0x138>)
 80003ea:	f000 fd03 	bl	8000df4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 80003ee:	2201      	movs	r2, #1
 80003f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003f4:	4809      	ldr	r0, [pc, #36]	; (800041c <turnOnLights+0x138>)
 80003f6:	f000 fcfd 	bl	8000df4 <HAL_GPIO_WritePin>
			break;
 80003fa:	e00b      	b.n	8000414 <turnOnLights+0x130>
		case 9:
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, 1);
 80003fc:	2201      	movs	r2, #1
 80003fe:	2180      	movs	r1, #128	; 0x80
 8000400:	4806      	ldr	r0, [pc, #24]	; (800041c <turnOnLights+0x138>)
 8000402:	f000 fcf7 	bl	8000df4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000406:	2200      	movs	r2, #0
 8000408:	f44f 7180 	mov.w	r1, #256	; 0x100
 800040c:	4803      	ldr	r0, [pc, #12]	; (800041c <turnOnLights+0x138>)
 800040e:	f000 fcf1 	bl	8000df4 <HAL_GPIO_WritePin>
			break;
 8000412:	bf00      	nop
	};
}
 8000414:	bf00      	nop
 8000416:	3708      	adds	r7, #8
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	48000c00 	.word	0x48000c00

08000420 <count>:

void count(int number) {
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	2b09      	cmp	r3, #9
 800042c:	d87f      	bhi.n	800052e <count+0x10e>
 800042e:	a201      	add	r2, pc, #4	; (adr r2, 8000434 <count+0x14>)
 8000430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000434:	0800045d 	.word	0x0800045d
 8000438:	08000473 	.word	0x08000473
 800043c:	08000489 	.word	0x08000489
 8000440:	0800049f 	.word	0x0800049f
 8000444:	080004b5 	.word	0x080004b5
 8000448:	080004cb 	.word	0x080004cb
 800044c:	080004e1 	.word	0x080004e1
 8000450:	080004f7 	.word	0x080004f7
 8000454:	0800050d 	.word	0x0800050d
 8000458:	08000519 	.word	0x08000519

	switch (number) {
		case 0:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, 1);
 800045c:	2201      	movs	r2, #1
 800045e:	213f      	movs	r1, #63	; 0x3f
 8000460:	4836      	ldr	r0, [pc, #216]	; (800053c <count+0x11c>)
 8000462:	f000 fcc7 	bl	8000df4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);
 8000466:	2200      	movs	r2, #0
 8000468:	2140      	movs	r1, #64	; 0x40
 800046a:	4834      	ldr	r0, [pc, #208]	; (800053c <count+0x11c>)
 800046c:	f000 fcc2 	bl	8000df4 <HAL_GPIO_WritePin>

			break;
 8000470:	e05d      	b.n	800052e <count+0x10e>
		case 1:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1 | GPIO_PIN_2, 1);
 8000472:	2201      	movs	r2, #1
 8000474:	2106      	movs	r1, #6
 8000476:	4831      	ldr	r0, [pc, #196]	; (800053c <count+0x11c>)
 8000478:	f000 fcbc 	bl	8000df4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, 0);
 800047c:	2200      	movs	r2, #0
 800047e:	2139      	movs	r1, #57	; 0x39
 8000480:	482e      	ldr	r0, [pc, #184]	; (800053c <count+0x11c>)
 8000482:	f000 fcb7 	bl	8000df4 <HAL_GPIO_WritePin>
			break;
 8000486:	e052      	b.n	800052e <count+0x10e>
		case 2:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6, 1);
 8000488:	2201      	movs	r2, #1
 800048a:	215b      	movs	r1, #91	; 0x5b
 800048c:	482b      	ldr	r0, [pc, #172]	; (800053c <count+0x11c>)
 800048e:	f000 fcb1 	bl	8000df4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2 | GPIO_PIN_5, 0);
 8000492:	2200      	movs	r2, #0
 8000494:	2124      	movs	r1, #36	; 0x24
 8000496:	4829      	ldr	r0, [pc, #164]	; (800053c <count+0x11c>)
 8000498:	f000 fcac 	bl	8000df4 <HAL_GPIO_WritePin>
			break;
 800049c:	e047      	b.n	800052e <count+0x10e>
		case 3:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_6, 1);
 800049e:	2201      	movs	r2, #1
 80004a0:	214f      	movs	r1, #79	; 0x4f
 80004a2:	4826      	ldr	r0, [pc, #152]	; (800053c <count+0x11c>)
 80004a4:	f000 fca6 	bl	8000df4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4 | GPIO_PIN_5, 0);
 80004a8:	2200      	movs	r2, #0
 80004aa:	2130      	movs	r1, #48	; 0x30
 80004ac:	4823      	ldr	r0, [pc, #140]	; (800053c <count+0x11c>)
 80004ae:	f000 fca1 	bl	8000df4 <HAL_GPIO_WritePin>
			break;
 80004b2:	e03c      	b.n	800052e <count+0x10e>
		case 4:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_5 | GPIO_PIN_6, 1);
 80004b4:	2201      	movs	r2, #1
 80004b6:	2166      	movs	r1, #102	; 0x66
 80004b8:	4820      	ldr	r0, [pc, #128]	; (800053c <count+0x11c>)
 80004ba:	f000 fc9b 	bl	8000df4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0 | GPIO_PIN_3 | GPIO_PIN_4, 0);
 80004be:	2200      	movs	r2, #0
 80004c0:	2119      	movs	r1, #25
 80004c2:	481e      	ldr	r0, [pc, #120]	; (800053c <count+0x11c>)
 80004c4:	f000 fc96 	bl	8000df4 <HAL_GPIO_WritePin>

			break;
 80004c8:	e031      	b.n	800052e <count+0x10e>
		case 5:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_6, 1);
 80004ca:	2201      	movs	r2, #1
 80004cc:	216d      	movs	r1, #109	; 0x6d
 80004ce:	481b      	ldr	r0, [pc, #108]	; (800053c <count+0x11c>)
 80004d0:	f000 fc90 	bl	8000df4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1| GPIO_PIN_4, 0);
 80004d4:	2200      	movs	r2, #0
 80004d6:	2112      	movs	r1, #18
 80004d8:	4818      	ldr	r0, [pc, #96]	; (800053c <count+0x11c>)
 80004da:	f000 fc8b 	bl	8000df4 <HAL_GPIO_WritePin>

			break;
 80004de:	e026      	b.n	800052e <count+0x10e>
		case 6:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6, 1);
 80004e0:	2201      	movs	r2, #1
 80004e2:	217d      	movs	r1, #125	; 0x7d
 80004e4:	4815      	ldr	r0, [pc, #84]	; (800053c <count+0x11c>)
 80004e6:	f000 fc85 	bl	8000df4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1 , 0);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2102      	movs	r1, #2
 80004ee:	4813      	ldr	r0, [pc, #76]	; (800053c <count+0x11c>)
 80004f0:	f000 fc80 	bl	8000df4 <HAL_GPIO_WritePin>
			break;
 80004f4:	e01b      	b.n	800052e <count+0x10e>
		case 7:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2, 1);
 80004f6:	2201      	movs	r2, #1
 80004f8:	2107      	movs	r1, #7
 80004fa:	4810      	ldr	r0, [pc, #64]	; (800053c <count+0x11c>)
 80004fc:	f000 fc7a 	bl	8000df4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6, 0);
 8000500:	2200      	movs	r2, #0
 8000502:	2178      	movs	r1, #120	; 0x78
 8000504:	480d      	ldr	r0, [pc, #52]	; (800053c <count+0x11c>)
 8000506:	f000 fc75 	bl	8000df4 <HAL_GPIO_WritePin>
			break;
 800050a:	e010      	b.n	800052e <count+0x10e>
		case 8:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6, 1);
 800050c:	2201      	movs	r2, #1
 800050e:	217f      	movs	r1, #127	; 0x7f
 8000510:	480a      	ldr	r0, [pc, #40]	; (800053c <count+0x11c>)
 8000512:	f000 fc6f 	bl	8000df4 <HAL_GPIO_WritePin>
			break;
 8000516:	e00a      	b.n	800052e <count+0x10e>
		case 9:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_6, 1);
 8000518:	2201      	movs	r2, #1
 800051a:	216f      	movs	r1, #111	; 0x6f
 800051c:	4807      	ldr	r0, [pc, #28]	; (800053c <count+0x11c>)
 800051e:	f000 fc69 	bl	8000df4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4 , 0);
 8000522:	2200      	movs	r2, #0
 8000524:	2110      	movs	r1, #16
 8000526:	4805      	ldr	r0, [pc, #20]	; (800053c <count+0x11c>)
 8000528:	f000 fc64 	bl	8000df4 <HAL_GPIO_WritePin>
			break;
 800052c:	bf00      	nop
	};
	turnOnLights(number);
 800052e:	6878      	ldr	r0, [r7, #4]
 8000530:	f7ff fed8 	bl	80002e4 <turnOnLights>
}
 8000534:	bf00      	nop
 8000536:	3708      	adds	r7, #8
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	48000800 	.word	0x48000800

08000540 <LED>:
//				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
//				break;
//		};
//}

void LED(int LNum) {
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	3b01      	subs	r3, #1
 800054c:	2b07      	cmp	r3, #7
 800054e:	d87b      	bhi.n	8000648 <LED+0x108>
 8000550:	a201      	add	r2, pc, #4	; (adr r2, 8000558 <LED+0x18>)
 8000552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000556:	bf00      	nop
 8000558:	08000579 	.word	0x08000579
 800055c:	08000593 	.word	0x08000593
 8000560:	080005ad 	.word	0x080005ad
 8000564:	080005c7 	.word	0x080005c7
 8000568:	080005e1 	.word	0x080005e1
 800056c:	080005fb 	.word	0x080005fb
 8000570:	08000615 	.word	0x08000615
 8000574:	0800062f 	.word	0x0800062f

	switch (LNum) {
			case 1:
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 8000578:	2201      	movs	r2, #1
 800057a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800057e:	4834      	ldr	r0, [pc, #208]	; (8000650 <LED+0x110>)
 8000580:	f000 fc38 	bl	8000df4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
 8000584:	2200      	movs	r2, #0
 8000586:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800058a:	4831      	ldr	r0, [pc, #196]	; (8000650 <LED+0x110>)
 800058c:	f000 fc32 	bl	8000df4 <HAL_GPIO_WritePin>
				break;
 8000590:	e05a      	b.n	8000648 <LED+0x108>
			case 2:
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 8000592:	2201      	movs	r2, #1
 8000594:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000598:	482d      	ldr	r0, [pc, #180]	; (8000650 <LED+0x110>)
 800059a:	f000 fc2b 	bl	8000df4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 800059e:	2200      	movs	r2, #0
 80005a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a4:	482a      	ldr	r0, [pc, #168]	; (8000650 <LED+0x110>)
 80005a6:	f000 fc25 	bl	8000df4 <HAL_GPIO_WritePin>
				break;
 80005aa:	e04d      	b.n	8000648 <LED+0x108>
			case 3:
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 80005ac:	2201      	movs	r2, #1
 80005ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005b2:	4827      	ldr	r0, [pc, #156]	; (8000650 <LED+0x110>)
 80005b4:	f000 fc1e 	bl	8000df4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 80005b8:	2200      	movs	r2, #0
 80005ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005be:	4824      	ldr	r0, [pc, #144]	; (8000650 <LED+0x110>)
 80005c0:	f000 fc18 	bl	8000df4 <HAL_GPIO_WritePin>
				break;
 80005c4:	e040      	b.n	8000648 <LED+0x108>
			case 4:
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 80005c6:	2201      	movs	r2, #1
 80005c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005cc:	4820      	ldr	r0, [pc, #128]	; (8000650 <LED+0x110>)
 80005ce:	f000 fc11 	bl	8000df4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 80005d2:	2200      	movs	r2, #0
 80005d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d8:	481d      	ldr	r0, [pc, #116]	; (8000650 <LED+0x110>)
 80005da:	f000 fc0b 	bl	8000df4 <HAL_GPIO_WritePin>
				break;
 80005de:	e033      	b.n	8000648 <LED+0x108>
			case 5:
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 1);
 80005e0:	2201      	movs	r2, #1
 80005e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005e6:	481a      	ldr	r0, [pc, #104]	; (8000650 <LED+0x110>)
 80005e8:	f000 fc04 	bl	8000df4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 80005ec:	2200      	movs	r2, #0
 80005ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005f2:	4817      	ldr	r0, [pc, #92]	; (8000650 <LED+0x110>)
 80005f4:	f000 fbfe 	bl	8000df4 <HAL_GPIO_WritePin>
				break;
 80005f8:	e026      	b.n	8000648 <LED+0x108>
			case 6:
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 1);
 80005fa:	2201      	movs	r2, #1
 80005fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000600:	4813      	ldr	r0, [pc, #76]	; (8000650 <LED+0x110>)
 8000602:	f000 fbf7 	bl	8000df4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 0);
 8000606:	2200      	movs	r2, #0
 8000608:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800060c:	4810      	ldr	r0, [pc, #64]	; (8000650 <LED+0x110>)
 800060e:	f000 fbf1 	bl	8000df4 <HAL_GPIO_WritePin>
				break;
 8000612:	e019      	b.n	8000648 <LED+0x108>
			case 7:
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 8000614:	2201      	movs	r2, #1
 8000616:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800061a:	480d      	ldr	r0, [pc, #52]	; (8000650 <LED+0x110>)
 800061c:	f000 fbea 	bl	8000df4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 0);
 8000620:	2200      	movs	r2, #0
 8000622:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000626:	480a      	ldr	r0, [pc, #40]	; (8000650 <LED+0x110>)
 8000628:	f000 fbe4 	bl	8000df4 <HAL_GPIO_WritePin>
				break;
 800062c:	e00c      	b.n	8000648 <LED+0x108>
			case 8:
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
 800062e:	2201      	movs	r2, #1
 8000630:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000634:	4806      	ldr	r0, [pc, #24]	; (8000650 <LED+0x110>)
 8000636:	f000 fbdd 	bl	8000df4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 800063a:	2200      	movs	r2, #0
 800063c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000640:	4803      	ldr	r0, [pc, #12]	; (8000650 <LED+0x110>)
 8000642:	f000 fbd7 	bl	8000df4 <HAL_GPIO_WritePin>
				break;
 8000646:	bf00      	nop
		};
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	48001000 	.word	0x48001000

08000654 <main>:


int main () {
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0

	HAL_Init();
 800065a:	f000 f8c9 	bl	80007f0 <HAL_Init>
	initForLights();
 800065e:	f7ff fdb3 	bl	80001c8 <initForLights>
	initForBlueButton();
 8000662:	f7ff fdd5 	bl	8000210 <initForBlueButton>
	initForSevenSeg();
 8000666:	f7ff fdf7 	bl	8000258 <initForSevenSeg>
	initForLED();
 800066a:	f7ff fe17 	bl	800029c <initForLED>

	int current_number = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	60fb      	str	r3, [r7, #12]
	int x = 1;
 8000672:	2301      	movs	r3, #1
 8000674:	60bb      	str	r3, [r7, #8]
	int LNum = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]

	while(1) {

			if(LNum == 9) {
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2b09      	cmp	r3, #9
 800067e:	d101      	bne.n	8000684 <main+0x30>
				LNum = 1;
 8000680:	2301      	movs	r3, #1
 8000682:	607b      	str	r3, [r7, #4]
			}

			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 8000684:	2101      	movs	r1, #1
 8000686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800068a:	f000 fb9b 	bl	8000dc4 <HAL_GPIO_ReadPin>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d01c      	beq.n	80006ce <main+0x7a>

				// start counting
				if (current_number == 9) x = 0;
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	2b09      	cmp	r3, #9
 8000698:	d101      	bne.n	800069e <main+0x4a>
 800069a:	2300      	movs	r3, #0
 800069c:	60bb      	str	r3, [r7, #8]
				if (current_number == 0) x = 1;
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d101      	bne.n	80006a8 <main+0x54>
 80006a4:	2301      	movs	r3, #1
 80006a6:	60bb      	str	r3, [r7, #8]
				if (x == 1)
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d106      	bne.n	80006bc <main+0x68>
					count(++current_number);
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	3301      	adds	r3, #1
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68f8      	ldr	r0, [r7, #12]
 80006b6:	f7ff feb3 	bl	8000420 <count>
 80006ba:	e004      	b.n	80006c6 <main+0x72>
				else {
					current_number = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	60fb      	str	r3, [r7, #12]
					LNum++;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	3301      	adds	r3, #1
 80006c4:	607b      	str	r3, [r7, #4]
				}

				HAL_Delay(200);
 80006c6:	20c8      	movs	r0, #200	; 0xc8
 80006c8:	f000 f8f8 	bl	80008bc <HAL_Delay>
 80006cc:	e7d5      	b.n	800067a <main+0x26>

			} else {

				// stop counting
				count(current_number);
 80006ce:	68f8      	ldr	r0, [r7, #12]
 80006d0:	f7ff fea6 	bl	8000420 <count>
				LED(LNum);
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f7ff ff33 	bl	8000540 <LED>
			if(LNum == 9) {
 80006da:	e7ce      	b.n	800067a <main+0x26>

080006dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006e2:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <HAL_MspInit+0x44>)
 80006e4:	699b      	ldr	r3, [r3, #24]
 80006e6:	4a0e      	ldr	r2, [pc, #56]	; (8000720 <HAL_MspInit+0x44>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	6193      	str	r3, [r2, #24]
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <HAL_MspInit+0x44>)
 80006f0:	699b      	ldr	r3, [r3, #24]
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <HAL_MspInit+0x44>)
 80006fc:	69db      	ldr	r3, [r3, #28]
 80006fe:	4a08      	ldr	r2, [pc, #32]	; (8000720 <HAL_MspInit+0x44>)
 8000700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000704:	61d3      	str	r3, [r2, #28]
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <HAL_MspInit+0x44>)
 8000708:	69db      	ldr	r3, [r3, #28]
 800070a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800070e:	603b      	str	r3, [r7, #0]
 8000710:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000712:	bf00      	nop
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	40021000 	.word	0x40021000

08000724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000728:	e7fe      	b.n	8000728 <NMI_Handler+0x4>

0800072a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800072e:	e7fe      	b.n	800072e <HardFault_Handler+0x4>

08000730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000734:	e7fe      	b.n	8000734 <MemManage_Handler+0x4>

08000736 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800073a:	e7fe      	b.n	800073a <BusFault_Handler+0x4>

0800073c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000740:	e7fe      	b.n	8000740 <UsageFault_Handler+0x4>

08000742 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000746:	bf00      	nop
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr

0800075e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800075e:	b480      	push	{r7}
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr

0800076c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

 /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000770:	f000 f884 	bl	800087c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

 /* USER CODE END SysTick_IRQn 1 */
}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}

08000778 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <SystemInit+0x20>)
 800077e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000782:	4a05      	ldr	r2, [pc, #20]	; (8000798 <SystemInit+0x20>)
 8000784:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000788:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800079c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007d4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a0:	480d      	ldr	r0, [pc, #52]	; (80007d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80007a2:	490e      	ldr	r1, [pc, #56]	; (80007dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80007a4:	4a0e      	ldr	r2, [pc, #56]	; (80007e0 <LoopForever+0xe>)
  movs r3, #0
 80007a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007a8:	e002      	b.n	80007b0 <LoopCopyDataInit>

080007aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ae:	3304      	adds	r3, #4

080007b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b4:	d3f9      	bcc.n	80007aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007b6:	4a0b      	ldr	r2, [pc, #44]	; (80007e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007b8:	4c0b      	ldr	r4, [pc, #44]	; (80007e8 <LoopForever+0x16>)
  movs r3, #0
 80007ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007bc:	e001      	b.n	80007c2 <LoopFillZerobss>

080007be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c0:	3204      	adds	r2, #4

080007c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c4:	d3fb      	bcc.n	80007be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007c6:	f7ff ffd7 	bl	8000778 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007ca:	f000 fb2b 	bl	8000e24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007ce:	f7ff ff41 	bl	8000654 <main>

080007d2 <LoopForever>:

LoopForever:
    b LoopForever
 80007d2:	e7fe      	b.n	80007d2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007d4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80007d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007e0:	08000e8c 	.word	0x08000e8c
  ldr r2, =_sbss
 80007e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007e8:	2000002c 	.word	0x2000002c

080007ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007ec:	e7fe      	b.n	80007ec <ADC1_2_IRQHandler>
	...

080007f0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007f4:	4b08      	ldr	r3, [pc, #32]	; (8000818 <HAL_Init+0x28>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a07      	ldr	r2, [pc, #28]	; (8000818 <HAL_Init+0x28>)
 80007fa:	f043 0310 	orr.w	r3, r3, #16
 80007fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000800:	2003      	movs	r0, #3
 8000802:	f000 f931 	bl	8000a68 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000806:	200f      	movs	r0, #15
 8000808:	f000 f808 	bl	800081c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800080c:	f7ff ff66 	bl	80006dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000810:	2300      	movs	r3, #0
}
 8000812:	4618      	mov	r0, r3
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40022000 	.word	0x40022000

0800081c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <HAL_InitTick+0x54>)
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <HAL_InitTick+0x58>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	4619      	mov	r1, r3
 800082e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000832:	fbb3 f3f1 	udiv	r3, r3, r1
 8000836:	fbb2 f3f3 	udiv	r3, r2, r3
 800083a:	4618      	mov	r0, r3
 800083c:	f000 f93b 	bl	8000ab6 <HAL_SYSTICK_Config>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000846:	2301      	movs	r3, #1
 8000848:	e00e      	b.n	8000868 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	2b0f      	cmp	r3, #15
 800084e:	d80a      	bhi.n	8000866 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000850:	2200      	movs	r2, #0
 8000852:	6879      	ldr	r1, [r7, #4]
 8000854:	f04f 30ff 	mov.w	r0, #4294967295
 8000858:	f000 f911 	bl	8000a7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800085c:	4a06      	ldr	r2, [pc, #24]	; (8000878 <HAL_InitTick+0x5c>)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000862:	2300      	movs	r3, #0
 8000864:	e000      	b.n	8000868 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000866:	2301      	movs	r3, #1
}
 8000868:	4618      	mov	r0, r3
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000000 	.word	0x20000000
 8000874:	20000008 	.word	0x20000008
 8000878:	20000004 	.word	0x20000004

0800087c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <HAL_IncTick+0x20>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	461a      	mov	r2, r3
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <HAL_IncTick+0x24>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4413      	add	r3, r2
 800088c:	4a04      	ldr	r2, [pc, #16]	; (80008a0 <HAL_IncTick+0x24>)
 800088e:	6013      	str	r3, [r2, #0]
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	20000008 	.word	0x20000008
 80008a0:	20000028 	.word	0x20000028

080008a4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  return uwTick;  
 80008a8:	4b03      	ldr	r3, [pc, #12]	; (80008b8 <HAL_GetTick+0x14>)
 80008aa:	681b      	ldr	r3, [r3, #0]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	20000028 	.word	0x20000028

080008bc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008c4:	f7ff ffee 	bl	80008a4 <HAL_GetTick>
 80008c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008d4:	d005      	beq.n	80008e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008d6:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <HAL_Delay+0x44>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	461a      	mov	r2, r3
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	4413      	add	r3, r2
 80008e0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80008e2:	bf00      	nop
 80008e4:	f7ff ffde 	bl	80008a4 <HAL_GetTick>
 80008e8:	4602      	mov	r2, r0
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	68fa      	ldr	r2, [r7, #12]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d8f7      	bhi.n	80008e4 <HAL_Delay+0x28>
  {
  }
}
 80008f4:	bf00      	nop
 80008f6:	bf00      	nop
 80008f8:	3710      	adds	r7, #16
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000008 	.word	0x20000008

08000904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	f003 0307 	and.w	r3, r3, #7
 8000912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <__NVIC_SetPriorityGrouping+0x44>)
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000920:	4013      	ands	r3, r2
 8000922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800092c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000936:	4a04      	ldr	r2, [pc, #16]	; (8000948 <__NVIC_SetPriorityGrouping+0x44>)
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	60d3      	str	r3, [r2, #12]
}
 800093c:	bf00      	nop
 800093e:	3714      	adds	r7, #20
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000950:	4b04      	ldr	r3, [pc, #16]	; (8000964 <__NVIC_GetPriorityGrouping+0x18>)
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	0a1b      	lsrs	r3, r3, #8
 8000956:	f003 0307 	and.w	r3, r3, #7
}
 800095a:	4618      	mov	r0, r3
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	6039      	str	r1, [r7, #0]
 8000972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000978:	2b00      	cmp	r3, #0
 800097a:	db0a      	blt.n	8000992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	b2da      	uxtb	r2, r3
 8000980:	490c      	ldr	r1, [pc, #48]	; (80009b4 <__NVIC_SetPriority+0x4c>)
 8000982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000986:	0112      	lsls	r2, r2, #4
 8000988:	b2d2      	uxtb	r2, r2
 800098a:	440b      	add	r3, r1
 800098c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000990:	e00a      	b.n	80009a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	b2da      	uxtb	r2, r3
 8000996:	4908      	ldr	r1, [pc, #32]	; (80009b8 <__NVIC_SetPriority+0x50>)
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	f003 030f 	and.w	r3, r3, #15
 800099e:	3b04      	subs	r3, #4
 80009a0:	0112      	lsls	r2, r2, #4
 80009a2:	b2d2      	uxtb	r2, r2
 80009a4:	440b      	add	r3, r1
 80009a6:	761a      	strb	r2, [r3, #24]
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	e000e100 	.word	0xe000e100
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009bc:	b480      	push	{r7}
 80009be:	b089      	sub	sp, #36	; 0x24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	f003 0307 	and.w	r3, r3, #7
 80009ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009d0:	69fb      	ldr	r3, [r7, #28]
 80009d2:	f1c3 0307 	rsb	r3, r3, #7
 80009d6:	2b04      	cmp	r3, #4
 80009d8:	bf28      	it	cs
 80009da:	2304      	movcs	r3, #4
 80009dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	3304      	adds	r3, #4
 80009e2:	2b06      	cmp	r3, #6
 80009e4:	d902      	bls.n	80009ec <NVIC_EncodePriority+0x30>
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	3b03      	subs	r3, #3
 80009ea:	e000      	b.n	80009ee <NVIC_EncodePriority+0x32>
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f0:	f04f 32ff 	mov.w	r2, #4294967295
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	43da      	mvns	r2, r3
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	401a      	ands	r2, r3
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a04:	f04f 31ff 	mov.w	r1, #4294967295
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0e:	43d9      	mvns	r1, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a14:	4313      	orrs	r3, r2
         );
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3724      	adds	r7, #36	; 0x24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
	...

08000a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3b01      	subs	r3, #1
 8000a30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a34:	d301      	bcc.n	8000a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a36:	2301      	movs	r3, #1
 8000a38:	e00f      	b.n	8000a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a3a:	4a0a      	ldr	r2, [pc, #40]	; (8000a64 <SysTick_Config+0x40>)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	3b01      	subs	r3, #1
 8000a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a42:	210f      	movs	r1, #15
 8000a44:	f04f 30ff 	mov.w	r0, #4294967295
 8000a48:	f7ff ff8e 	bl	8000968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a4c:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <SysTick_Config+0x40>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a52:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <SysTick_Config+0x40>)
 8000a54:	2207      	movs	r2, #7
 8000a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	e000e010 	.word	0xe000e010

08000a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f7ff ff47 	bl	8000904 <__NVIC_SetPriorityGrouping>
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b086      	sub	sp, #24
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	4603      	mov	r3, r0
 8000a86:	60b9      	str	r1, [r7, #8]
 8000a88:	607a      	str	r2, [r7, #4]
 8000a8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a90:	f7ff ff5c 	bl	800094c <__NVIC_GetPriorityGrouping>
 8000a94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	68b9      	ldr	r1, [r7, #8]
 8000a9a:	6978      	ldr	r0, [r7, #20]
 8000a9c:	f7ff ff8e 	bl	80009bc <NVIC_EncodePriority>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aa6:	4611      	mov	r1, r2
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff ff5d 	bl	8000968 <__NVIC_SetPriority>
}
 8000aae:	bf00      	nop
 8000ab0:	3718      	adds	r7, #24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b082      	sub	sp, #8
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f7ff ffb0 	bl	8000a24 <SysTick_Config>
 8000ac4:	4603      	mov	r3, r0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b087      	sub	sp, #28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ade:	e154      	b.n	8000d8a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8000aec:	4013      	ands	r3, r2
 8000aee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	f000 8146 	beq.w	8000d84 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f003 0303 	and.w	r3, r3, #3
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d005      	beq.n	8000b10 <HAL_GPIO_Init+0x40>
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	f003 0303 	and.w	r3, r3, #3
 8000b0c:	2b02      	cmp	r3, #2
 8000b0e:	d130      	bne.n	8000b72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	2203      	movs	r2, #3
 8000b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b20:	43db      	mvns	r3, r3
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	4013      	ands	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	68da      	ldr	r2, [r3, #12]
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	fa02 f303 	lsl.w	r3, r2, r3
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b46:	2201      	movs	r2, #1
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	4013      	ands	r3, r2
 8000b54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	091b      	lsrs	r3, r3, #4
 8000b5c:	f003 0201 	and.w	r2, r3, #1
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f003 0303 	and.w	r3, r3, #3
 8000b7a:	2b03      	cmp	r3, #3
 8000b7c:	d017      	beq.n	8000bae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	68db      	ldr	r3, [r3, #12]
 8000b82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	2203      	movs	r2, #3
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	4013      	ands	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	689a      	ldr	r2, [r3, #8]
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f003 0303 	and.w	r3, r3, #3
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	d123      	bne.n	8000c02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	08da      	lsrs	r2, r3, #3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	3208      	adds	r2, #8
 8000bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	f003 0307 	and.w	r3, r3, #7
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	220f      	movs	r2, #15
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	43db      	mvns	r3, r3
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	691a      	ldr	r2, [r3, #16]
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	f003 0307 	and.w	r3, r3, #7
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	08da      	lsrs	r2, r3, #3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3208      	adds	r2, #8
 8000bfc:	6939      	ldr	r1, [r7, #16]
 8000bfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43db      	mvns	r3, r3
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	4013      	ands	r3, r2
 8000c18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f003 0203 	and.w	r2, r3, #3
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	f000 80a0 	beq.w	8000d84 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c44:	4b58      	ldr	r3, [pc, #352]	; (8000da8 <HAL_GPIO_Init+0x2d8>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	4a57      	ldr	r2, [pc, #348]	; (8000da8 <HAL_GPIO_Init+0x2d8>)
 8000c4a:	f043 0301 	orr.w	r3, r3, #1
 8000c4e:	6193      	str	r3, [r2, #24]
 8000c50:	4b55      	ldr	r3, [pc, #340]	; (8000da8 <HAL_GPIO_Init+0x2d8>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	f003 0301 	and.w	r3, r3, #1
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c5c:	4a53      	ldr	r2, [pc, #332]	; (8000dac <HAL_GPIO_Init+0x2dc>)
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	089b      	lsrs	r3, r3, #2
 8000c62:	3302      	adds	r3, #2
 8000c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	f003 0303 	and.w	r3, r3, #3
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	220f      	movs	r2, #15
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c86:	d019      	beq.n	8000cbc <HAL_GPIO_Init+0x1ec>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a49      	ldr	r2, [pc, #292]	; (8000db0 <HAL_GPIO_Init+0x2e0>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d013      	beq.n	8000cb8 <HAL_GPIO_Init+0x1e8>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a48      	ldr	r2, [pc, #288]	; (8000db4 <HAL_GPIO_Init+0x2e4>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d00d      	beq.n	8000cb4 <HAL_GPIO_Init+0x1e4>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4a47      	ldr	r2, [pc, #284]	; (8000db8 <HAL_GPIO_Init+0x2e8>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d007      	beq.n	8000cb0 <HAL_GPIO_Init+0x1e0>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a46      	ldr	r2, [pc, #280]	; (8000dbc <HAL_GPIO_Init+0x2ec>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d101      	bne.n	8000cac <HAL_GPIO_Init+0x1dc>
 8000ca8:	2304      	movs	r3, #4
 8000caa:	e008      	b.n	8000cbe <HAL_GPIO_Init+0x1ee>
 8000cac:	2305      	movs	r3, #5
 8000cae:	e006      	b.n	8000cbe <HAL_GPIO_Init+0x1ee>
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	e004      	b.n	8000cbe <HAL_GPIO_Init+0x1ee>
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	e002      	b.n	8000cbe <HAL_GPIO_Init+0x1ee>
 8000cb8:	2301      	movs	r3, #1
 8000cba:	e000      	b.n	8000cbe <HAL_GPIO_Init+0x1ee>
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	697a      	ldr	r2, [r7, #20]
 8000cc0:	f002 0203 	and.w	r2, r2, #3
 8000cc4:	0092      	lsls	r2, r2, #2
 8000cc6:	4093      	lsls	r3, r2
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cce:	4937      	ldr	r1, [pc, #220]	; (8000dac <HAL_GPIO_Init+0x2dc>)
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	089b      	lsrs	r3, r3, #2
 8000cd4:	3302      	adds	r3, #2
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cdc:	4b38      	ldr	r3, [pc, #224]	; (8000dc0 <HAL_GPIO_Init+0x2f0>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d003      	beq.n	8000d00 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d00:	4a2f      	ldr	r2, [pc, #188]	; (8000dc0 <HAL_GPIO_Init+0x2f0>)
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d06:	4b2e      	ldr	r3, [pc, #184]	; (8000dc0 <HAL_GPIO_Init+0x2f0>)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	4013      	ands	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d003      	beq.n	8000d2a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d2a:	4a25      	ldr	r2, [pc, #148]	; (8000dc0 <HAL_GPIO_Init+0x2f0>)
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d30:	4b23      	ldr	r3, [pc, #140]	; (8000dc0 <HAL_GPIO_Init+0x2f0>)
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d003      	beq.n	8000d54 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d54:	4a1a      	ldr	r2, [pc, #104]	; (8000dc0 <HAL_GPIO_Init+0x2f0>)
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d5a:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <HAL_GPIO_Init+0x2f0>)
 8000d5c:	68db      	ldr	r3, [r3, #12]
 8000d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	43db      	mvns	r3, r3
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	4013      	ands	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d003      	beq.n	8000d7e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d7e:	4a10      	ldr	r2, [pc, #64]	; (8000dc0 <HAL_GPIO_Init+0x2f0>)
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	3301      	adds	r3, #1
 8000d88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	fa22 f303 	lsr.w	r3, r2, r3
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	f47f aea3 	bne.w	8000ae0 <HAL_GPIO_Init+0x10>
  }
}
 8000d9a:	bf00      	nop
 8000d9c:	bf00      	nop
 8000d9e:	371c      	adds	r7, #28
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	40021000 	.word	0x40021000
 8000dac:	40010000 	.word	0x40010000
 8000db0:	48000400 	.word	0x48000400
 8000db4:	48000800 	.word	0x48000800
 8000db8:	48000c00 	.word	0x48000c00
 8000dbc:	48001000 	.word	0x48001000
 8000dc0:	40010400 	.word	0x40010400

08000dc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	691a      	ldr	r2, [r3, #16]
 8000dd4:	887b      	ldrh	r3, [r7, #2]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d002      	beq.n	8000de2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	73fb      	strb	r3, [r7, #15]
 8000de0:	e001      	b.n	8000de6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000de2:	2300      	movs	r3, #0
 8000de4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	807b      	strh	r3, [r7, #2]
 8000e00:	4613      	mov	r3, r2
 8000e02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e04:	787b      	ldrb	r3, [r7, #1]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d003      	beq.n	8000e12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e0a:	887a      	ldrh	r2, [r7, #2]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e10:	e002      	b.n	8000e18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e12:	887a      	ldrh	r2, [r7, #2]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <__libc_init_array>:
 8000e24:	b570      	push	{r4, r5, r6, lr}
 8000e26:	4d0d      	ldr	r5, [pc, #52]	; (8000e5c <__libc_init_array+0x38>)
 8000e28:	4c0d      	ldr	r4, [pc, #52]	; (8000e60 <__libc_init_array+0x3c>)
 8000e2a:	1b64      	subs	r4, r4, r5
 8000e2c:	10a4      	asrs	r4, r4, #2
 8000e2e:	2600      	movs	r6, #0
 8000e30:	42a6      	cmp	r6, r4
 8000e32:	d109      	bne.n	8000e48 <__libc_init_array+0x24>
 8000e34:	4d0b      	ldr	r5, [pc, #44]	; (8000e64 <__libc_init_array+0x40>)
 8000e36:	4c0c      	ldr	r4, [pc, #48]	; (8000e68 <__libc_init_array+0x44>)
 8000e38:	f000 f818 	bl	8000e6c <_init>
 8000e3c:	1b64      	subs	r4, r4, r5
 8000e3e:	10a4      	asrs	r4, r4, #2
 8000e40:	2600      	movs	r6, #0
 8000e42:	42a6      	cmp	r6, r4
 8000e44:	d105      	bne.n	8000e52 <__libc_init_array+0x2e>
 8000e46:	bd70      	pop	{r4, r5, r6, pc}
 8000e48:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e4c:	4798      	blx	r3
 8000e4e:	3601      	adds	r6, #1
 8000e50:	e7ee      	b.n	8000e30 <__libc_init_array+0xc>
 8000e52:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e56:	4798      	blx	r3
 8000e58:	3601      	adds	r6, #1
 8000e5a:	e7f2      	b.n	8000e42 <__libc_init_array+0x1e>
 8000e5c:	08000e84 	.word	0x08000e84
 8000e60:	08000e84 	.word	0x08000e84
 8000e64:	08000e84 	.word	0x08000e84
 8000e68:	08000e88 	.word	0x08000e88

08000e6c <_init>:
 8000e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e6e:	bf00      	nop
 8000e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e72:	bc08      	pop	{r3}
 8000e74:	469e      	mov	lr, r3
 8000e76:	4770      	bx	lr

08000e78 <_fini>:
 8000e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e7a:	bf00      	nop
 8000e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e7e:	bc08      	pop	{r3}
 8000e80:	469e      	mov	lr, r3
 8000e82:	4770      	bx	lr
