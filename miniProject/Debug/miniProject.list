
miniProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008834  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080089bc  080089bc  000189bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a04  08008a04  000202ec  2**0
                  CONTENTS
  4 .ARM          00000000  08008a04  08008a04  000202ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008a04  08008a04  000202ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a04  08008a04  00018a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a08  08008a08  00018a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002ec  20000000  08008a0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202ec  2**0
                  CONTENTS
 10 .bss          00000768  200002ec  200002ec  000202ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a54  20000a54  000202ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019d83  00000000  00000000  0002031c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e39  00000000  00000000  0003a09f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014a0  00000000  00000000  0003ced8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013e8  00000000  00000000  0003e378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f4f6  00000000  00000000  0003f760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a522  00000000  00000000  0005ec56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be0a8  00000000  00000000  00079178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00137220  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000589c  00000000  00000000  00137274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200002ec 	.word	0x200002ec
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080089a4 	.word	0x080089a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200002f0 	.word	0x200002f0
 80001c4:	080089a4 	.word	0x080089a4

080001c8 <initForSevenSeg>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

unsigned char data[1];

void initForSevenSeg() {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0

	__HAL_RCC_GPIOC_CLK_ENABLE();
 80001ce:	4b0e      	ldr	r3, [pc, #56]	; (8000208 <initForSevenSeg+0x40>)
 80001d0:	695b      	ldr	r3, [r3, #20]
 80001d2:	4a0d      	ldr	r2, [pc, #52]	; (8000208 <initForSevenSeg+0x40>)
 80001d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80001d8:	6153      	str	r3, [r2, #20]
 80001da:	4b0b      	ldr	r3, [pc, #44]	; (8000208 <initForSevenSeg+0x40>)
 80001dc:	695b      	ldr	r3, [r3, #20]
 80001de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80001e2:	603b      	str	r3, [r7, #0]
 80001e4:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef temp;
	temp.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 ;
 80001e6:	f240 13ff 	movw	r3, #511	; 0x1ff
 80001ea:	607b      	str	r3, [r7, #4]
	temp.Mode = GPIO_MODE_OUTPUT_PP;
 80001ec:	2301      	movs	r3, #1
 80001ee:	60bb      	str	r3, [r7, #8]
	temp.Speed = GPIO_SPEED_FREQ_HIGH;
 80001f0:	2303      	movs	r3, #3
 80001f2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &temp);
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	4619      	mov	r1, r3
 80001f8:	4804      	ldr	r0, [pc, #16]	; (800020c <initForSevenSeg+0x44>)
 80001fa:	f003 fe77 	bl	8003eec <HAL_GPIO_Init>
}
 80001fe:	bf00      	nop
 8000200:	3718      	adds	r7, #24
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	40021000 	.word	0x40021000
 800020c:	48000800 	.word	0x48000800

08000210 <initForLED>:

void initForLED() {
 8000210:	b580      	push	{r7, lr}
 8000212:	b086      	sub	sp, #24
 8000214:	af00      	add	r7, sp, #0

	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000216:	4b0e      	ldr	r3, [pc, #56]	; (8000250 <initForLED+0x40>)
 8000218:	695b      	ldr	r3, [r3, #20]
 800021a:	4a0d      	ldr	r2, [pc, #52]	; (8000250 <initForLED+0x40>)
 800021c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000220:	6153      	str	r3, [r2, #20]
 8000222:	4b0b      	ldr	r3, [pc, #44]	; (8000250 <initForLED+0x40>)
 8000224:	695b      	ldr	r3, [r3, #20]
 8000226:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800022a:	603b      	str	r3, [r7, #0]
 800022c:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 800022e:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000232:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000234:	2301      	movs	r3, #1
 8000236:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000238:	2303      	movs	r3, #3
 800023a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	4619      	mov	r1, r3
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <initForLED+0x44>)
 8000242:	f003 fe53 	bl	8003eec <HAL_GPIO_Init>
}
 8000246:	bf00      	nop
 8000248:	3718      	adds	r7, #24
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40021000 	.word	0x40021000
 8000254:	48001000 	.word	0x48001000

08000258 <numberToBCD0>:

void numberToBCD0(int number)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b086      	sub	sp, #24
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
	int x1 = number&1;
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	f003 0301 	and.w	r3, r3, #1
 8000266:	617b      	str	r3, [r7, #20]
	int x2 = number&2;
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	f003 0302 	and.w	r3, r3, #2
 800026e:	613b      	str	r3, [r7, #16]
	int x3 = number&4;
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	f003 0304 	and.w	r3, r3, #4
 8000276:	60fb      	str	r3, [r7, #12]
	int x4 = number&8;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	f003 0308 	and.w	r3, r3, #8
 800027e:	60bb      	str	r3, [r7, #8]

	if (x1 > 0) x1 = 1;
 8000280:	697b      	ldr	r3, [r7, #20]
 8000282:	2b00      	cmp	r3, #0
 8000284:	dd01      	ble.n	800028a <numberToBCD0+0x32>
 8000286:	2301      	movs	r3, #1
 8000288:	617b      	str	r3, [r7, #20]
	if (x2 > 0) x2 = 1;
 800028a:	693b      	ldr	r3, [r7, #16]
 800028c:	2b00      	cmp	r3, #0
 800028e:	dd01      	ble.n	8000294 <numberToBCD0+0x3c>
 8000290:	2301      	movs	r3, #1
 8000292:	613b      	str	r3, [r7, #16]
	if (x3 > 0) x3 = 1;
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	2b00      	cmp	r3, #0
 8000298:	dd01      	ble.n	800029e <numberToBCD0+0x46>
 800029a:	2301      	movs	r3, #1
 800029c:	60fb      	str	r3, [r7, #12]
	if (x4 > 0) x4 = 1;
 800029e:	68bb      	ldr	r3, [r7, #8]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	dd01      	ble.n	80002a8 <numberToBCD0+0x50>
 80002a4:	2301      	movs	r3, #1
 80002a6:	60bb      	str	r3, [r7, #8]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, x1);
 80002a8:	697b      	ldr	r3, [r7, #20]
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	461a      	mov	r2, r3
 80002ae:	2101      	movs	r1, #1
 80002b0:	480d      	ldr	r0, [pc, #52]	; (80002e8 <numberToBCD0+0x90>)
 80002b2:	f003 ffad 	bl	8004210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, x2);
 80002b6:	693b      	ldr	r3, [r7, #16]
 80002b8:	b2db      	uxtb	r3, r3
 80002ba:	461a      	mov	r2, r3
 80002bc:	2102      	movs	r1, #2
 80002be:	480a      	ldr	r0, [pc, #40]	; (80002e8 <numberToBCD0+0x90>)
 80002c0:	f003 ffa6 	bl	8004210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, x3);
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	b2db      	uxtb	r3, r3
 80002c8:	461a      	mov	r2, r3
 80002ca:	2104      	movs	r1, #4
 80002cc:	4806      	ldr	r0, [pc, #24]	; (80002e8 <numberToBCD0+0x90>)
 80002ce:	f003 ff9f 	bl	8004210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, x4);
 80002d2:	68bb      	ldr	r3, [r7, #8]
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	461a      	mov	r2, r3
 80002d8:	2108      	movs	r1, #8
 80002da:	4803      	ldr	r0, [pc, #12]	; (80002e8 <numberToBCD0+0x90>)
 80002dc:	f003 ff98 	bl	8004210 <HAL_GPIO_WritePin>

}
 80002e0:	bf00      	nop
 80002e2:	3718      	adds	r7, #24
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	48000800 	.word	0x48000800

080002ec <show>:

int x = 0;
void show(int floorIn, int floorGo) {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
 80002f4:	6039      	str	r1, [r7, #0]

	x++;
 80002f6:	4b18      	ldr	r3, [pc, #96]	; (8000358 <show+0x6c>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	3301      	adds	r3, #1
 80002fc:	4a16      	ldr	r2, [pc, #88]	; (8000358 <show+0x6c>)
 80002fe:	6013      	str	r3, [r2, #0]
	if( x == 100 ) {
 8000300:	4b15      	ldr	r3, [pc, #84]	; (8000358 <show+0x6c>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2b64      	cmp	r3, #100	; 0x64
 8000306:	d10d      	bne.n	8000324 <show+0x38>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 , 1);
 8000308:	2201      	movs	r2, #1
 800030a:	21f0      	movs	r1, #240	; 0xf0
 800030c:	4813      	ldr	r0, [pc, #76]	; (800035c <show+0x70>)
 800030e:	f003 ff7f 	bl	8004210 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7 | GPIO_PIN_8, 0);
 8000312:	2200      	movs	r2, #0
 8000314:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000318:	4810      	ldr	r0, [pc, #64]	; (800035c <show+0x70>)
 800031a:	f003 ff79 	bl	8004210 <HAL_GPIO_WritePin>
		numberToBCD0( floorIn );
 800031e:	6878      	ldr	r0, [r7, #4]
 8000320:	f7ff ff9a 	bl	8000258 <numberToBCD0>
	}
	if ( x ==200 ) {
 8000324:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <show+0x6c>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	2bc8      	cmp	r3, #200	; 0xc8
 800032a:	d110      	bne.n	800034e <show+0x62>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, 1);
 800032c:	2201      	movs	r2, #1
 800032e:	21f0      	movs	r1, #240	; 0xf0
 8000330:	480a      	ldr	r0, [pc, #40]	; (800035c <show+0x70>)
 8000332:	f003 ff6d 	bl	8004210 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4 | GPIO_PIN_8, 0);
 8000336:	2200      	movs	r2, #0
 8000338:	f44f 7188 	mov.w	r1, #272	; 0x110
 800033c:	4807      	ldr	r0, [pc, #28]	; (800035c <show+0x70>)
 800033e:	f003 ff67 	bl	8004210 <HAL_GPIO_WritePin>
		numberToBCD0( floorGo );
 8000342:	6838      	ldr	r0, [r7, #0]
 8000344:	f7ff ff88 	bl	8000258 <numberToBCD0>
		x=0;
 8000348:	4b03      	ldr	r3, [pc, #12]	; (8000358 <show+0x6c>)
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
	}
}
 800034e:	bf00      	nop
 8000350:	3708      	adds	r7, #8
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	20000308 	.word	0x20000308
 800035c:	48000800 	.word	0x48000800

08000360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000364:	f003 fbb0 	bl	8003ac8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000368:	f000 f82e 	bl	80003c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800036c:	f000 faa2 	bl	80008b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000370:	f000 f88e 	bl	8000490 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000374:	f000 f8cc 	bl	8000510 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000378:	f000 fa7a 	bl	8000870 <MX_USB_PCD_Init>
  MX_TIM3_Init();
 800037c:	f000 f906 	bl	800058c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000380:	f000 f954 	bl	800062c <MX_TIM4_Init>
  MX_TIM15_Init();
 8000384:	f000 f9a0 	bl	80006c8 <MX_TIM15_Init>
  MX_USART2_UART_Init();
 8000388:	f000 fa42 	bl	8000810 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  initForSevenSeg();
 800038c:	f7ff ff1c 	bl	80001c8 <initForSevenSeg>
  initForLED();
 8000390:	f7ff ff3e 	bl	8000210 <initForLED>

  HAL_TIM_Base_Start_IT(&htim4);
 8000394:	4807      	ldr	r0, [pc, #28]	; (80003b4 <main+0x54>)
 8000396:	f005 fd6b 	bl	8005e70 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim15);
 800039a:	4807      	ldr	r0, [pc, #28]	; (80003b8 <main+0x58>)
 800039c:	f005 fd68 	bl	8005e70 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80003a0:	4806      	ldr	r0, [pc, #24]	; (80003bc <main+0x5c>)
 80003a2:	f005 fd65 	bl	8005e70 <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(&huart2,data,sizeof(data));
 80003a6:	2201      	movs	r2, #1
 80003a8:	4905      	ldr	r1, [pc, #20]	; (80003c0 <main+0x60>)
 80003aa:	4806      	ldr	r0, [pc, #24]	; (80003c4 <main+0x64>)
 80003ac:	f007 f916 	bl	80075dc <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003b0:	e7fe      	b.n	80003b0 <main+0x50>
 80003b2:	bf00      	nop
 80003b4:	200003a4 	.word	0x200003a4
 80003b8:	2000043c 	.word	0x2000043c
 80003bc:	20000488 	.word	0x20000488
 80003c0:	200004d4 	.word	0x200004d4
 80003c4:	2000053c 	.word	0x2000053c

080003c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b09e      	sub	sp, #120	; 0x78
 80003cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80003d2:	2228      	movs	r2, #40	; 0x28
 80003d4:	2100      	movs	r1, #0
 80003d6:	4618      	mov	r0, r3
 80003d8:	f008 fadc 	bl	8008994 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003e0:	2200      	movs	r2, #0
 80003e2:	601a      	str	r2, [r3, #0]
 80003e4:	605a      	str	r2, [r3, #4]
 80003e6:	609a      	str	r2, [r3, #8]
 80003e8:	60da      	str	r2, [r3, #12]
 80003ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003ec:	463b      	mov	r3, r7
 80003ee:	223c      	movs	r2, #60	; 0x3c
 80003f0:	2100      	movs	r1, #0
 80003f2:	4618      	mov	r0, r3
 80003f4:	f008 face 	bl	8008994 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80003f8:	2303      	movs	r3, #3
 80003fa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80003fc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000400:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000402:	2300      	movs	r3, #0
 8000404:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000406:	2301      	movs	r3, #1
 8000408:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800040a:	2310      	movs	r3, #16
 800040c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800040e:	2302      	movs	r3, #2
 8000410:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000412:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000416:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000418:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800041c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800041e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000422:	4618      	mov	r0, r3
 8000424:	f004 f934 	bl	8004690 <HAL_RCC_OscConfig>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800042e:	f000 faed 	bl	8000a0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000432:	230f      	movs	r3, #15
 8000434:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000436:	2302      	movs	r3, #2
 8000438:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800043a:	2300      	movs	r3, #0
 800043c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800043e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000442:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000444:	2300      	movs	r3, #0
 8000446:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000448:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800044c:	2101      	movs	r1, #1
 800044e:	4618      	mov	r0, r3
 8000450:	f005 f826 	bl	80054a0 <HAL_RCC_ClockConfig>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800045a:	f000 fad7 	bl	8000a0c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 800045e:	4b0b      	ldr	r3, [pc, #44]	; (800048c <SystemClock_Config+0xc4>)
 8000460:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000462:	2300      	movs	r3, #0
 8000464:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000466:	2300      	movs	r3, #0
 8000468:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 800046a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800046e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000470:	463b      	mov	r3, r7
 8000472:	4618      	mov	r0, r3
 8000474:	f005 fa4a 	bl	800590c <HAL_RCCEx_PeriphCLKConfig>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800047e:	f000 fac5 	bl	8000a0c <Error_Handler>
  }
}
 8000482:	bf00      	nop
 8000484:	3778      	adds	r7, #120	; 0x78
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	00020022 	.word	0x00020022

08000490 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000494:	4b1b      	ldr	r3, [pc, #108]	; (8000504 <MX_I2C1_Init+0x74>)
 8000496:	4a1c      	ldr	r2, [pc, #112]	; (8000508 <MX_I2C1_Init+0x78>)
 8000498:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800049a:	4b1a      	ldr	r3, [pc, #104]	; (8000504 <MX_I2C1_Init+0x74>)
 800049c:	4a1b      	ldr	r2, [pc, #108]	; (800050c <MX_I2C1_Init+0x7c>)
 800049e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80004a0:	4b18      	ldr	r3, [pc, #96]	; (8000504 <MX_I2C1_Init+0x74>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004a6:	4b17      	ldr	r3, [pc, #92]	; (8000504 <MX_I2C1_Init+0x74>)
 80004a8:	2201      	movs	r2, #1
 80004aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004ac:	4b15      	ldr	r3, [pc, #84]	; (8000504 <MX_I2C1_Init+0x74>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004b2:	4b14      	ldr	r3, [pc, #80]	; (8000504 <MX_I2C1_Init+0x74>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004b8:	4b12      	ldr	r3, [pc, #72]	; (8000504 <MX_I2C1_Init+0x74>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004be:	4b11      	ldr	r3, [pc, #68]	; (8000504 <MX_I2C1_Init+0x74>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004c4:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <MX_I2C1_Init+0x74>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004ca:	480e      	ldr	r0, [pc, #56]	; (8000504 <MX_I2C1_Init+0x74>)
 80004cc:	f003 fedb 	bl	8004286 <HAL_I2C_Init>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004d6:	f000 fa99 	bl	8000a0c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004da:	2100      	movs	r1, #0
 80004dc:	4809      	ldr	r0, [pc, #36]	; (8000504 <MX_I2C1_Init+0x74>)
 80004de:	f003 ff61 	bl	80043a4 <HAL_I2CEx_ConfigAnalogFilter>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004e8:	f000 fa90 	bl	8000a0c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004ec:	2100      	movs	r1, #0
 80004ee:	4805      	ldr	r0, [pc, #20]	; (8000504 <MX_I2C1_Init+0x74>)
 80004f0:	f003 ffa3 	bl	800443a <HAL_I2CEx_ConfigDigitalFilter>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004fa:	f000 fa87 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	200003f0 	.word	0x200003f0
 8000508:	40005400 	.word	0x40005400
 800050c:	2000090e 	.word	0x2000090e

08000510 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000514:	4b1b      	ldr	r3, [pc, #108]	; (8000584 <MX_SPI1_Init+0x74>)
 8000516:	4a1c      	ldr	r2, [pc, #112]	; (8000588 <MX_SPI1_Init+0x78>)
 8000518:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800051a:	4b1a      	ldr	r3, [pc, #104]	; (8000584 <MX_SPI1_Init+0x74>)
 800051c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000520:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000522:	4b18      	ldr	r3, [pc, #96]	; (8000584 <MX_SPI1_Init+0x74>)
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000528:	4b16      	ldr	r3, [pc, #88]	; (8000584 <MX_SPI1_Init+0x74>)
 800052a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800052e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000530:	4b14      	ldr	r3, [pc, #80]	; (8000584 <MX_SPI1_Init+0x74>)
 8000532:	2200      	movs	r2, #0
 8000534:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000536:	4b13      	ldr	r3, [pc, #76]	; (8000584 <MX_SPI1_Init+0x74>)
 8000538:	2200      	movs	r2, #0
 800053a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800053c:	4b11      	ldr	r3, [pc, #68]	; (8000584 <MX_SPI1_Init+0x74>)
 800053e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000542:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000544:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <MX_SPI1_Init+0x74>)
 8000546:	2208      	movs	r2, #8
 8000548:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800054a:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <MX_SPI1_Init+0x74>)
 800054c:	2200      	movs	r2, #0
 800054e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000550:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <MX_SPI1_Init+0x74>)
 8000552:	2200      	movs	r2, #0
 8000554:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000556:	4b0b      	ldr	r3, [pc, #44]	; (8000584 <MX_SPI1_Init+0x74>)
 8000558:	2200      	movs	r2, #0
 800055a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800055c:	4b09      	ldr	r3, [pc, #36]	; (8000584 <MX_SPI1_Init+0x74>)
 800055e:	2207      	movs	r2, #7
 8000560:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000562:	4b08      	ldr	r3, [pc, #32]	; (8000584 <MX_SPI1_Init+0x74>)
 8000564:	2200      	movs	r2, #0
 8000566:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <MX_SPI1_Init+0x74>)
 800056a:	2208      	movs	r2, #8
 800056c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800056e:	4805      	ldr	r0, [pc, #20]	; (8000584 <MX_SPI1_Init+0x74>)
 8000570:	f005 fb7c 	bl	8005c6c <HAL_SPI_Init>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800057a:	f000 fa47 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	200004d8 	.word	0x200004d8
 8000588:	40013000 	.word	0x40013000

0800058c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b088      	sub	sp, #32
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000592:	f107 0310 	add.w	r3, r7, #16
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005aa:	4b1e      	ldr	r3, [pc, #120]	; (8000624 <MX_TIM3_Init+0x98>)
 80005ac:	4a1e      	ldr	r2, [pc, #120]	; (8000628 <MX_TIM3_Init+0x9c>)
 80005ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4799;
 80005b0:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <MX_TIM3_Init+0x98>)
 80005b2:	f241 22bf 	movw	r2, #4799	; 0x12bf
 80005b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005b8:	4b1a      	ldr	r3, [pc, #104]	; (8000624 <MX_TIM3_Init+0x98>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80005be:	4b19      	ldr	r3, [pc, #100]	; (8000624 <MX_TIM3_Init+0x98>)
 80005c0:	f242 720f 	movw	r2, #9999	; 0x270f
 80005c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005c6:	4b17      	ldr	r3, [pc, #92]	; (8000624 <MX_TIM3_Init+0x98>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005cc:	4b15      	ldr	r3, [pc, #84]	; (8000624 <MX_TIM3_Init+0x98>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80005d2:	4814      	ldr	r0, [pc, #80]	; (8000624 <MX_TIM3_Init+0x98>)
 80005d4:	f005 fbf5 	bl	8005dc2 <HAL_TIM_Base_Init>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80005de:	f000 fa15 	bl	8000a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005e8:	f107 0310 	add.w	r3, r7, #16
 80005ec:	4619      	mov	r1, r3
 80005ee:	480d      	ldr	r0, [pc, #52]	; (8000624 <MX_TIM3_Init+0x98>)
 80005f0:	f006 f8d4 	bl	800679c <HAL_TIM_ConfigClockSource>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80005fa:	f000 fa07 	bl	8000a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005fe:	2300      	movs	r3, #0
 8000600:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000602:	2300      	movs	r3, #0
 8000604:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	4619      	mov	r1, r3
 800060a:	4806      	ldr	r0, [pc, #24]	; (8000624 <MX_TIM3_Init+0x98>)
 800060c:	f006 fde8 	bl	80071e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000616:	f000 f9f9 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800061a:	bf00      	nop
 800061c:	3720      	adds	r7, #32
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000488 	.word	0x20000488
 8000628:	40000400 	.word	0x40000400

0800062c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000632:	f107 0310 	add.w	r3, r7, #16
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800064a:	4b1d      	ldr	r3, [pc, #116]	; (80006c0 <MX_TIM4_Init+0x94>)
 800064c:	4a1d      	ldr	r2, [pc, #116]	; (80006c4 <MX_TIM4_Init+0x98>)
 800064e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 47;
 8000650:	4b1b      	ldr	r3, [pc, #108]	; (80006c0 <MX_TIM4_Init+0x94>)
 8000652:	222f      	movs	r2, #47	; 0x2f
 8000654:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000656:	4b1a      	ldr	r3, [pc, #104]	; (80006c0 <MX_TIM4_Init+0x94>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9;
 800065c:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <MX_TIM4_Init+0x94>)
 800065e:	2209      	movs	r2, #9
 8000660:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000662:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <MX_TIM4_Init+0x94>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000668:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <MX_TIM4_Init+0x94>)
 800066a:	2200      	movs	r2, #0
 800066c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800066e:	4814      	ldr	r0, [pc, #80]	; (80006c0 <MX_TIM4_Init+0x94>)
 8000670:	f005 fba7 	bl	8005dc2 <HAL_TIM_Base_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800067a:	f000 f9c7 	bl	8000a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800067e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000682:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000684:	f107 0310 	add.w	r3, r7, #16
 8000688:	4619      	mov	r1, r3
 800068a:	480d      	ldr	r0, [pc, #52]	; (80006c0 <MX_TIM4_Init+0x94>)
 800068c:	f006 f886 	bl	800679c <HAL_TIM_ConfigClockSource>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000696:	f000 f9b9 	bl	8000a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	4619      	mov	r1, r3
 80006a6:	4806      	ldr	r0, [pc, #24]	; (80006c0 <MX_TIM4_Init+0x94>)
 80006a8:	f006 fd9a 	bl	80071e0 <HAL_TIMEx_MasterConfigSynchronization>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80006b2:	f000 f9ab 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	3720      	adds	r7, #32
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	200003a4 	.word	0x200003a4
 80006c4:	40000800 	.word	0x40000800

080006c8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b09a      	sub	sp, #104	; 0x68
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]
 80006f8:	615a      	str	r2, [r3, #20]
 80006fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	222c      	movs	r2, #44	; 0x2c
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f008 f946 	bl	8008994 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000708:	4b3f      	ldr	r3, [pc, #252]	; (8000808 <MX_TIM15_Init+0x140>)
 800070a:	4a40      	ldr	r2, [pc, #256]	; (800080c <MX_TIM15_Init+0x144>)
 800070c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800070e:	4b3e      	ldr	r3, [pc, #248]	; (8000808 <MX_TIM15_Init+0x140>)
 8000710:	2200      	movs	r2, #0
 8000712:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000714:	4b3c      	ldr	r3, [pc, #240]	; (8000808 <MX_TIM15_Init+0x140>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800071a:	4b3b      	ldr	r3, [pc, #236]	; (8000808 <MX_TIM15_Init+0x140>)
 800071c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000720:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000722:	4b39      	ldr	r3, [pc, #228]	; (8000808 <MX_TIM15_Init+0x140>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000728:	4b37      	ldr	r3, [pc, #220]	; (8000808 <MX_TIM15_Init+0x140>)
 800072a:	2200      	movs	r2, #0
 800072c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800072e:	4b36      	ldr	r3, [pc, #216]	; (8000808 <MX_TIM15_Init+0x140>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000734:	4834      	ldr	r0, [pc, #208]	; (8000808 <MX_TIM15_Init+0x140>)
 8000736:	f005 fb44 	bl	8005dc2 <HAL_TIM_Base_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8000740:	f000 f964 	bl	8000a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000744:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000748:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800074a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800074e:	4619      	mov	r1, r3
 8000750:	482d      	ldr	r0, [pc, #180]	; (8000808 <MX_TIM15_Init+0x140>)
 8000752:	f006 f823 	bl	800679c <HAL_TIM_ConfigClockSource>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 800075c:	f000 f956 	bl	8000a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000760:	4829      	ldr	r0, [pc, #164]	; (8000808 <MX_TIM15_Init+0x140>)
 8000762:	f005 fbef 	bl	8005f44 <HAL_TIM_PWM_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 800076c:	f000 f94e 	bl	8000a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000770:	2300      	movs	r3, #0
 8000772:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000774:	2300      	movs	r3, #0
 8000776:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000778:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800077c:	4619      	mov	r1, r3
 800077e:	4822      	ldr	r0, [pc, #136]	; (8000808 <MX_TIM15_Init+0x140>)
 8000780:	f006 fd2e 	bl	80071e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800078a:	f000 f93f 	bl	8000a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800078e:	2360      	movs	r3, #96	; 0x60
 8000790:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000796:	2300      	movs	r3, #0
 8000798:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800079a:	2300      	movs	r3, #0
 800079c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800079e:	2300      	movs	r3, #0
 80007a0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007a2:	2300      	movs	r3, #0
 80007a4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007a6:	2300      	movs	r3, #0
 80007a8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007ae:	2200      	movs	r2, #0
 80007b0:	4619      	mov	r1, r3
 80007b2:	4815      	ldr	r0, [pc, #84]	; (8000808 <MX_TIM15_Init+0x140>)
 80007b4:	f005 fede 	bl	8006574 <HAL_TIM_PWM_ConfigChannel>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 80007be:	f000 f925 	bl	8000a0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007da:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	4619      	mov	r1, r3
 80007e8:	4807      	ldr	r0, [pc, #28]	; (8000808 <MX_TIM15_Init+0x140>)
 80007ea:	f006 fd79 	bl	80072e0 <HAL_TIMEx_ConfigBreakDeadTime>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM15_Init+0x130>
  {
    Error_Handler();
 80007f4:	f000 f90a 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80007f8:	4803      	ldr	r0, [pc, #12]	; (8000808 <MX_TIM15_Init+0x140>)
 80007fa:	f000 fa15 	bl	8000c28 <HAL_TIM_MspPostInit>

}
 80007fe:	bf00      	nop
 8000800:	3768      	adds	r7, #104	; 0x68
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	2000043c 	.word	0x2000043c
 800080c:	40014000 	.word	0x40014000

08000810 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000814:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_USART2_UART_Init+0x58>)
 8000816:	4a15      	ldr	r2, [pc, #84]	; (800086c <MX_USART2_UART_Init+0x5c>)
 8000818:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800081a:	4b13      	ldr	r3, [pc, #76]	; (8000868 <MX_USART2_UART_Init+0x58>)
 800081c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000820:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_USART2_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_USART2_UART_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_USART2_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_USART2_UART_Init+0x58>)
 8000836:	220c      	movs	r2, #12
 8000838:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <MX_USART2_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_USART2_UART_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <MX_USART2_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_USART2_UART_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_USART2_UART_Init+0x58>)
 8000854:	f006 fde0 	bl	8007418 <HAL_UART_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800085e:	f000 f8d5 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	2000053c 	.word	0x2000053c
 800086c:	40004400 	.word	0x40004400

08000870 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000874:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <MX_USB_PCD_Init+0x3c>)
 8000876:	4a0e      	ldr	r2, [pc, #56]	; (80008b0 <MX_USB_PCD_Init+0x40>)
 8000878:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <MX_USB_PCD_Init+0x3c>)
 800087c:	2208      	movs	r2, #8
 800087e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000880:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <MX_USB_PCD_Init+0x3c>)
 8000882:	2202      	movs	r2, #2
 8000884:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_USB_PCD_Init+0x3c>)
 8000888:	2202      	movs	r2, #2
 800088a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800088c:	4b07      	ldr	r3, [pc, #28]	; (80008ac <MX_USB_PCD_Init+0x3c>)
 800088e:	2200      	movs	r2, #0
 8000890:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_USB_PCD_Init+0x3c>)
 8000894:	2200      	movs	r2, #0
 8000896:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000898:	4804      	ldr	r0, [pc, #16]	; (80008ac <MX_USB_PCD_Init+0x3c>)
 800089a:	f003 fe1a 	bl	80044d2 <HAL_PCD_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80008a4:	f000 f8b2 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	200005c0 	.word	0x200005c0
 80008b0:	40005c00 	.word	0x40005c00

080008b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08c      	sub	sp, #48	; 0x30
 80008b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
 80008c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ca:	4b4e      	ldr	r3, [pc, #312]	; (8000a04 <MX_GPIO_Init+0x150>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	4a4d      	ldr	r2, [pc, #308]	; (8000a04 <MX_GPIO_Init+0x150>)
 80008d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008d4:	6153      	str	r3, [r2, #20]
 80008d6:	4b4b      	ldr	r3, [pc, #300]	; (8000a04 <MX_GPIO_Init+0x150>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008de:	61bb      	str	r3, [r7, #24]
 80008e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e2:	4b48      	ldr	r3, [pc, #288]	; (8000a04 <MX_GPIO_Init+0x150>)
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	4a47      	ldr	r2, [pc, #284]	; (8000a04 <MX_GPIO_Init+0x150>)
 80008e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008ec:	6153      	str	r3, [r2, #20]
 80008ee:	4b45      	ldr	r3, [pc, #276]	; (8000a04 <MX_GPIO_Init+0x150>)
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008fa:	4b42      	ldr	r3, [pc, #264]	; (8000a04 <MX_GPIO_Init+0x150>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	4a41      	ldr	r2, [pc, #260]	; (8000a04 <MX_GPIO_Init+0x150>)
 8000900:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000904:	6153      	str	r3, [r2, #20]
 8000906:	4b3f      	ldr	r3, [pc, #252]	; (8000a04 <MX_GPIO_Init+0x150>)
 8000908:	695b      	ldr	r3, [r3, #20]
 800090a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b3c      	ldr	r3, [pc, #240]	; (8000a04 <MX_GPIO_Init+0x150>)
 8000914:	695b      	ldr	r3, [r3, #20]
 8000916:	4a3b      	ldr	r2, [pc, #236]	; (8000a04 <MX_GPIO_Init+0x150>)
 8000918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800091c:	6153      	str	r3, [r2, #20]
 800091e:	4b39      	ldr	r3, [pc, #228]	; (8000a04 <MX_GPIO_Init+0x150>)
 8000920:	695b      	ldr	r3, [r3, #20]
 8000922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800092a:	4b36      	ldr	r3, [pc, #216]	; (8000a04 <MX_GPIO_Init+0x150>)
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	4a35      	ldr	r2, [pc, #212]	; (8000a04 <MX_GPIO_Init+0x150>)
 8000930:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000934:	6153      	str	r3, [r2, #20]
 8000936:	4b33      	ldr	r3, [pc, #204]	; (8000a04 <MX_GPIO_Init+0x150>)
 8000938:	695b      	ldr	r3, [r3, #20]
 800093a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000942:	4b30      	ldr	r3, [pc, #192]	; (8000a04 <MX_GPIO_Init+0x150>)
 8000944:	695b      	ldr	r3, [r3, #20]
 8000946:	4a2f      	ldr	r2, [pc, #188]	; (8000a04 <MX_GPIO_Init+0x150>)
 8000948:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800094c:	6153      	str	r3, [r2, #20]
 800094e:	4b2d      	ldr	r3, [pc, #180]	; (8000a04 <MX_GPIO_Init+0x150>)
 8000950:	695b      	ldr	r3, [r3, #20]
 8000952:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800095a:	2200      	movs	r2, #0
 800095c:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000960:	4829      	ldr	r0, [pc, #164]	; (8000a08 <MX_GPIO_Init+0x154>)
 8000962:	f003 fc55 	bl	8004210 <HAL_GPIO_WritePin>
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000966:	f64f 7308 	movw	r3, #65288	; 0xff08
 800096a:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096c:	2301      	movs	r3, #1
 800096e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	4822      	ldr	r0, [pc, #136]	; (8000a08 <MX_GPIO_Init+0x154>)
 8000980:	f003 fab4 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT4_Pin */
  GPIO_InitStruct.Pin = MEMS_INT4_Pin;
 8000984:	2320      	movs	r3, #32
 8000986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000988:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT4_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	481b      	ldr	r0, [pc, #108]	; (8000a08 <MX_GPIO_Init+0x154>)
 800099a:	f003 faa7 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 800099e:	231b      	movs	r3, #27
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009a8:	2302      	movs	r3, #2
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b6:	f003 fa99 	bl	8003eec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2100      	movs	r1, #0
 80009be:	2006      	movs	r0, #6
 80009c0:	f003 f9e7 	bl	8003d92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009c4:	2006      	movs	r0, #6
 80009c6:	f003 fa00 	bl	8003dca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2100      	movs	r1, #0
 80009ce:	2007      	movs	r0, #7
 80009d0:	f003 f9df 	bl	8003d92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80009d4:	2007      	movs	r0, #7
 80009d6:	f003 f9f8 	bl	8003dca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 4, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	2104      	movs	r1, #4
 80009de:	2009      	movs	r0, #9
 80009e0:	f003 f9d7 	bl	8003d92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80009e4:	2009      	movs	r0, #9
 80009e6:	f003 f9f0 	bl	8003dca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2100      	movs	r1, #0
 80009ee:	200a      	movs	r0, #10
 80009f0:	f003 f9cf 	bl	8003d92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80009f4:	200a      	movs	r0, #10
 80009f6:	f003 f9e8 	bl	8003dca <HAL_NVIC_EnableIRQ>

}
 80009fa:	bf00      	nop
 80009fc:	3730      	adds	r7, #48	; 0x30
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40021000 	.word	0x40021000
 8000a08:	48001000 	.word	0x48001000

08000a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a10:	b672      	cpsid	i
}
 8000a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <Error_Handler+0x8>
	...

08000a18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <HAL_MspInit+0x44>)
 8000a20:	699b      	ldr	r3, [r3, #24]
 8000a22:	4a0e      	ldr	r2, [pc, #56]	; (8000a5c <HAL_MspInit+0x44>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	6193      	str	r3, [r2, #24]
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <HAL_MspInit+0x44>)
 8000a2c:	699b      	ldr	r3, [r3, #24]
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <HAL_MspInit+0x44>)
 8000a38:	69db      	ldr	r3, [r3, #28]
 8000a3a:	4a08      	ldr	r2, [pc, #32]	; (8000a5c <HAL_MspInit+0x44>)
 8000a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a40:	61d3      	str	r3, [r2, #28]
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <HAL_MspInit+0x44>)
 8000a44:	69db      	ldr	r3, [r3, #28]
 8000a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000a4e:	2004      	movs	r0, #4
 8000a50:	f003 f994 	bl	8003d7c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a54:	bf00      	nop
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40021000 	.word	0x40021000

08000a60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a17      	ldr	r2, [pc, #92]	; (8000adc <HAL_I2C_MspInit+0x7c>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d127      	bne.n	8000ad2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a82:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <HAL_I2C_MspInit+0x80>)
 8000a84:	695b      	ldr	r3, [r3, #20]
 8000a86:	4a16      	ldr	r2, [pc, #88]	; (8000ae0 <HAL_I2C_MspInit+0x80>)
 8000a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a8c:	6153      	str	r3, [r2, #20]
 8000a8e:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <HAL_I2C_MspInit+0x80>)
 8000a90:	695b      	ldr	r3, [r3, #20]
 8000a92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000a9a:	23c0      	movs	r3, #192	; 0xc0
 8000a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a9e:	2312      	movs	r3, #18
 8000aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aaa:	2304      	movs	r3, #4
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	480b      	ldr	r0, [pc, #44]	; (8000ae4 <HAL_I2C_MspInit+0x84>)
 8000ab6:	f003 fa19 	bl	8003eec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aba:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <HAL_I2C_MspInit+0x80>)
 8000abc:	69db      	ldr	r3, [r3, #28]
 8000abe:	4a08      	ldr	r2, [pc, #32]	; (8000ae0 <HAL_I2C_MspInit+0x80>)
 8000ac0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ac4:	61d3      	str	r3, [r2, #28]
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <HAL_I2C_MspInit+0x80>)
 8000ac8:	69db      	ldr	r3, [r3, #28]
 8000aca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ad2:	bf00      	nop
 8000ad4:	3728      	adds	r7, #40	; 0x28
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40005400 	.word	0x40005400
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	48000400 	.word	0x48000400

08000ae8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	; 0x28
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a17      	ldr	r2, [pc, #92]	; (8000b64 <HAL_SPI_MspInit+0x7c>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d128      	bne.n	8000b5c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b0a:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <HAL_SPI_MspInit+0x80>)
 8000b0c:	699b      	ldr	r3, [r3, #24]
 8000b0e:	4a16      	ldr	r2, [pc, #88]	; (8000b68 <HAL_SPI_MspInit+0x80>)
 8000b10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b14:	6193      	str	r3, [r2, #24]
 8000b16:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <HAL_SPI_MspInit+0x80>)
 8000b18:	699b      	ldr	r3, [r3, #24]
 8000b1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <HAL_SPI_MspInit+0x80>)
 8000b24:	695b      	ldr	r3, [r3, #20]
 8000b26:	4a10      	ldr	r2, [pc, #64]	; (8000b68 <HAL_SPI_MspInit+0x80>)
 8000b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b2c:	6153      	str	r3, [r2, #20]
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <HAL_SPI_MspInit+0x80>)
 8000b30:	695b      	ldr	r3, [r3, #20]
 8000b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000b3a:	23e0      	movs	r3, #224	; 0xe0
 8000b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b46:	2303      	movs	r3, #3
 8000b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b4a:	2305      	movs	r3, #5
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b58:	f003 f9c8 	bl	8003eec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b5c:	bf00      	nop
 8000b5e:	3728      	adds	r7, #40	; 0x28
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40013000 	.word	0x40013000
 8000b68:	40021000 	.word	0x40021000

08000b6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a27      	ldr	r2, [pc, #156]	; (8000c18 <HAL_TIM_Base_MspInit+0xac>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d114      	bne.n	8000ba8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b7e:	4b27      	ldr	r3, [pc, #156]	; (8000c1c <HAL_TIM_Base_MspInit+0xb0>)
 8000b80:	69db      	ldr	r3, [r3, #28]
 8000b82:	4a26      	ldr	r2, [pc, #152]	; (8000c1c <HAL_TIM_Base_MspInit+0xb0>)
 8000b84:	f043 0302 	orr.w	r3, r3, #2
 8000b88:	61d3      	str	r3, [r2, #28]
 8000b8a:	4b24      	ldr	r3, [pc, #144]	; (8000c1c <HAL_TIM_Base_MspInit+0xb0>)
 8000b8c:	69db      	ldr	r3, [r3, #28]
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2105      	movs	r1, #5
 8000b9a:	201d      	movs	r0, #29
 8000b9c:	f003 f8f9 	bl	8003d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ba0:	201d      	movs	r0, #29
 8000ba2:	f003 f912 	bl	8003dca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000ba6:	e032      	b.n	8000c0e <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM4)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a1c      	ldr	r2, [pc, #112]	; (8000c20 <HAL_TIM_Base_MspInit+0xb4>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d114      	bne.n	8000bdc <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000bb2:	4b1a      	ldr	r3, [pc, #104]	; (8000c1c <HAL_TIM_Base_MspInit+0xb0>)
 8000bb4:	69db      	ldr	r3, [r3, #28]
 8000bb6:	4a19      	ldr	r2, [pc, #100]	; (8000c1c <HAL_TIM_Base_MspInit+0xb0>)
 8000bb8:	f043 0304 	orr.w	r3, r3, #4
 8000bbc:	61d3      	str	r3, [r2, #28]
 8000bbe:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <HAL_TIM_Base_MspInit+0xb0>)
 8000bc0:	69db      	ldr	r3, [r3, #28]
 8000bc2:	f003 0304 	and.w	r3, r3, #4
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2100      	movs	r1, #0
 8000bce:	201e      	movs	r0, #30
 8000bd0:	f003 f8df 	bl	8003d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000bd4:	201e      	movs	r0, #30
 8000bd6:	f003 f8f8 	bl	8003dca <HAL_NVIC_EnableIRQ>
}
 8000bda:	e018      	b.n	8000c0e <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM15)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a10      	ldr	r2, [pc, #64]	; (8000c24 <HAL_TIM_Base_MspInit+0xb8>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d113      	bne.n	8000c0e <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000be6:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <HAL_TIM_Base_MspInit+0xb0>)
 8000be8:	699b      	ldr	r3, [r3, #24]
 8000bea:	4a0c      	ldr	r2, [pc, #48]	; (8000c1c <HAL_TIM_Base_MspInit+0xb0>)
 8000bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bf0:	6193      	str	r3, [r2, #24]
 8000bf2:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <HAL_TIM_Base_MspInit+0xb0>)
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 3, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2103      	movs	r1, #3
 8000c02:	2018      	movs	r0, #24
 8000c04:	f003 f8c5 	bl	8003d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000c08:	2018      	movs	r0, #24
 8000c0a:	f003 f8de 	bl	8003dca <HAL_NVIC_EnableIRQ>
}
 8000c0e:	bf00      	nop
 8000c10:	3718      	adds	r7, #24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40000400 	.word	0x40000400
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	40000800 	.word	0x40000800
 8000c24:	40014000 	.word	0x40014000

08000c28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 030c 	add.w	r3, r7, #12
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM15)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a11      	ldr	r2, [pc, #68]	; (8000c8c <HAL_TIM_MspPostInit+0x64>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d11c      	bne.n	8000c84 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c4a:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <HAL_TIM_MspPostInit+0x68>)
 8000c4c:	695b      	ldr	r3, [r3, #20]
 8000c4e:	4a10      	ldr	r2, [pc, #64]	; (8000c90 <HAL_TIM_MspPostInit+0x68>)
 8000c50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c54:	6153      	str	r3, [r2, #20]
 8000c56:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <HAL_TIM_MspPostInit+0x68>)
 8000c58:	695b      	ldr	r3, [r3, #20]
 8000c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PF9     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c66:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM15;
 8000c74:	2303      	movs	r3, #3
 8000c76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c78:	f107 030c 	add.w	r3, r7, #12
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4805      	ldr	r0, [pc, #20]	; (8000c94 <HAL_TIM_MspPostInit+0x6c>)
 8000c80:	f003 f934 	bl	8003eec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8000c84:	bf00      	nop
 8000c86:	3720      	adds	r7, #32
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40014000 	.word	0x40014000
 8000c90:	40021000 	.word	0x40021000
 8000c94:	48001400 	.word	0x48001400

08000c98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08a      	sub	sp, #40	; 0x28
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a2a      	ldr	r2, [pc, #168]	; (8000d60 <HAL_UART_MspInit+0xc8>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d14d      	bne.n	8000d56 <HAL_UART_MspInit+0xbe>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cba:	4b2a      	ldr	r3, [pc, #168]	; (8000d64 <HAL_UART_MspInit+0xcc>)
 8000cbc:	69db      	ldr	r3, [r3, #28]
 8000cbe:	4a29      	ldr	r2, [pc, #164]	; (8000d64 <HAL_UART_MspInit+0xcc>)
 8000cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc4:	61d3      	str	r3, [r2, #28]
 8000cc6:	4b27      	ldr	r3, [pc, #156]	; (8000d64 <HAL_UART_MspInit+0xcc>)
 8000cc8:	69db      	ldr	r3, [r3, #28]
 8000cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd2:	4b24      	ldr	r3, [pc, #144]	; (8000d64 <HAL_UART_MspInit+0xcc>)
 8000cd4:	695b      	ldr	r3, [r3, #20]
 8000cd6:	4a23      	ldr	r2, [pc, #140]	; (8000d64 <HAL_UART_MspInit+0xcc>)
 8000cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cdc:	6153      	str	r3, [r2, #20]
 8000cde:	4b21      	ldr	r3, [pc, #132]	; (8000d64 <HAL_UART_MspInit+0xcc>)
 8000ce0:	695b      	ldr	r3, [r3, #20]
 8000ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cea:	4b1e      	ldr	r3, [pc, #120]	; (8000d64 <HAL_UART_MspInit+0xcc>)
 8000cec:	695b      	ldr	r3, [r3, #20]
 8000cee:	4a1d      	ldr	r2, [pc, #116]	; (8000d64 <HAL_UART_MspInit+0xcc>)
 8000cf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000cf4:	6153      	str	r3, [r2, #20]
 8000cf6:	4b1b      	ldr	r3, [pc, #108]	; (8000d64 <HAL_UART_MspInit+0xcc>)
 8000cf8:	695b      	ldr	r3, [r3, #20]
 8000cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA15     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d10:	2303      	movs	r3, #3
 8000d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d14:	2307      	movs	r3, #7
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d22:	f003 f8e3 	bl	8003eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d26:	2320      	movs	r3, #32
 8000d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d32:	2303      	movs	r3, #3
 8000d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d36:	2307      	movs	r3, #7
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4809      	ldr	r0, [pc, #36]	; (8000d68 <HAL_UART_MspInit+0xd0>)
 8000d42:	f003 f8d3 	bl	8003eec <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2101      	movs	r1, #1
 8000d4a:	2026      	movs	r0, #38	; 0x26
 8000d4c:	f003 f821 	bl	8003d92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d50:	2026      	movs	r0, #38	; 0x26
 8000d52:	f003 f83a 	bl	8003dca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d56:	bf00      	nop
 8000d58:	3728      	adds	r7, #40	; 0x28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40004400 	.word	0x40004400
 8000d64:	40021000 	.word	0x40021000
 8000d68:	48000c00 	.word	0x48000c00

08000d6c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08a      	sub	sp, #40	; 0x28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a18      	ldr	r2, [pc, #96]	; (8000dec <HAL_PCD_MspInit+0x80>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d129      	bne.n	8000de2 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8e:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <HAL_PCD_MspInit+0x84>)
 8000d90:	695b      	ldr	r3, [r3, #20]
 8000d92:	4a17      	ldr	r2, [pc, #92]	; (8000df0 <HAL_PCD_MspInit+0x84>)
 8000d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d98:	6153      	str	r3, [r2, #20]
 8000d9a:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <HAL_PCD_MspInit+0x84>)
 8000d9c:	695b      	ldr	r3, [r3, #20]
 8000d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da2:	613b      	str	r3, [r7, #16]
 8000da4:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000da6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000daa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000db4:	2303      	movs	r3, #3
 8000db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000db8:	230e      	movs	r3, #14
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc6:	f003 f891 	bl	8003eec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <HAL_PCD_MspInit+0x84>)
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	4a08      	ldr	r2, [pc, #32]	; (8000df0 <HAL_PCD_MspInit+0x84>)
 8000dd0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000dd4:	61d3      	str	r3, [r2, #28]
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_PCD_MspInit+0x84>)
 8000dd8:	69db      	ldr	r3, [r3, #28]
 8000dda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000de2:	bf00      	nop
 8000de4:	3728      	adds	r7, #40	; 0x28
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40005c00 	.word	0x40005c00
 8000df0:	40021000 	.word	0x40021000

08000df4 <warning_start>:
	{   0,  250},
	{   400,  250},
	{   0,  250},
};

void warning_start() {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(pwm_timer, pwm_channe1);
 8000df8:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <warning_start+0x18>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <warning_start+0x1c>)
 8000dfe:	6812      	ldr	r2, [r2, #0]
 8000e00:	4611      	mov	r1, r2
 8000e02:	4618      	mov	r0, r3
 8000e04:	f005 f900 	bl	8006008 <HAL_TIM_PWM_Start>
}
 8000e08:	bf00      	nop
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	200002d8 	.word	0x200002d8
 8000e10:	2000039c 	.word	0x2000039c

08000e14 <warning_stop>:

void warning_stop() {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(pwm_timer, pwm_channe1);
 8000e18:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <warning_stop+0x18>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <warning_stop+0x1c>)
 8000e1e:	6812      	ldr	r2, [r2, #0]
 8000e20:	4611      	mov	r1, r2
 8000e22:	4618      	mov	r0, r3
 8000e24:	f005 f9f0 	bl	8006208 <HAL_TIM_PWM_Stop>
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	200002d8 	.word	0x200002d8
 8000e30:	2000039c 	.word	0x2000039c

08000e34 <PWM_Change_Tone>:

void PWM_Change_Tone(uint16_t pwm_freq, uint16_t volume) // pwm_freq (1 - 20000), volume (0 - 1000)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b088      	sub	sp, #32
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	460a      	mov	r2, r1
 8000e3e:	80fb      	strh	r3, [r7, #6]
 8000e40:	4613      	mov	r3, r2
 8000e42:	80bb      	strh	r3, [r7, #4]
    if (pwm_freq == 0 || pwm_freq > 20000)
 8000e44:	88fb      	ldrh	r3, [r7, #6]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d004      	beq.n	8000e54 <PWM_Change_Tone+0x20>
 8000e4a:	88fb      	ldrh	r3, [r7, #6]
 8000e4c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d937      	bls.n	8000ec4 <PWM_Change_Tone+0x90>
    {
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channe1, 0);
 8000e54:	4b52      	ldr	r3, [pc, #328]	; (8000fa0 <PWM_Change_Tone+0x16c>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d105      	bne.n	8000e68 <PWM_Change_Tone+0x34>
 8000e5c:	4b51      	ldr	r3, [pc, #324]	; (8000fa4 <PWM_Change_Tone+0x170>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2200      	movs	r2, #0
 8000e64:	635a      	str	r2, [r3, #52]	; 0x34
 8000e66:	e097      	b.n	8000f98 <PWM_Change_Tone+0x164>
 8000e68:	4b4d      	ldr	r3, [pc, #308]	; (8000fa0 <PWM_Change_Tone+0x16c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2b04      	cmp	r3, #4
 8000e6e:	d105      	bne.n	8000e7c <PWM_Change_Tone+0x48>
 8000e70:	4b4c      	ldr	r3, [pc, #304]	; (8000fa4 <PWM_Change_Tone+0x170>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	2300      	movs	r3, #0
 8000e78:	6393      	str	r3, [r2, #56]	; 0x38
 8000e7a:	e08d      	b.n	8000f98 <PWM_Change_Tone+0x164>
 8000e7c:	4b48      	ldr	r3, [pc, #288]	; (8000fa0 <PWM_Change_Tone+0x16c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b08      	cmp	r3, #8
 8000e82:	d105      	bne.n	8000e90 <PWM_Change_Tone+0x5c>
 8000e84:	4b47      	ldr	r3, [pc, #284]	; (8000fa4 <PWM_Change_Tone+0x170>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000e8e:	e083      	b.n	8000f98 <PWM_Change_Tone+0x164>
 8000e90:	4b43      	ldr	r3, [pc, #268]	; (8000fa0 <PWM_Change_Tone+0x16c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b0c      	cmp	r3, #12
 8000e96:	d105      	bne.n	8000ea4 <PWM_Change_Tone+0x70>
 8000e98:	4b42      	ldr	r3, [pc, #264]	; (8000fa4 <PWM_Change_Tone+0x170>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea2:	e079      	b.n	8000f98 <PWM_Change_Tone+0x164>
 8000ea4:	4b3e      	ldr	r3, [pc, #248]	; (8000fa0 <PWM_Change_Tone+0x16c>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b10      	cmp	r3, #16
 8000eaa:	d105      	bne.n	8000eb8 <PWM_Change_Tone+0x84>
 8000eac:	4b3d      	ldr	r3, [pc, #244]	; (8000fa4 <PWM_Change_Tone+0x170>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	6593      	str	r3, [r2, #88]	; 0x58
 8000eb6:	e06f      	b.n	8000f98 <PWM_Change_Tone+0x164>
 8000eb8:	4b3a      	ldr	r3, [pc, #232]	; (8000fa4 <PWM_Change_Tone+0x170>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000ec2:	e069      	b.n	8000f98 <PWM_Change_Tone+0x164>
    }
    else
    {
        const uint32_t internal_clock_freq = HAL_RCC_GetSysClockFreq();
 8000ec4:	f004 fc68 	bl	8005798 <HAL_RCC_GetSysClockFreq>
 8000ec8:	61f8      	str	r0, [r7, #28]
        const uint16_t prescaler = 1 + internal_clock_freq / pwm_freq / 60000;
 8000eca:	88fb      	ldrh	r3, [r7, #6]
 8000ecc:	69fa      	ldr	r2, [r7, #28]
 8000ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed2:	4a35      	ldr	r2, [pc, #212]	; (8000fa8 <PWM_Change_Tone+0x174>)
 8000ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed8:	0b9b      	lsrs	r3, r3, #14
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	3301      	adds	r3, #1
 8000ede:	837b      	strh	r3, [r7, #26]
        const uint32_t timer_clock = internal_clock_freq / prescaler;
 8000ee0:	8b7b      	ldrh	r3, [r7, #26]
 8000ee2:	69fa      	ldr	r2, [r7, #28]
 8000ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee8:	617b      	str	r3, [r7, #20]
        const uint32_t period_cycles = timer_clock / pwm_freq;
 8000eea:	88fb      	ldrh	r3, [r7, #6]
 8000eec:	697a      	ldr	r2, [r7, #20]
 8000eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef2:	613b      	str	r3, [r7, #16]
        const uint32_t pulse_width = volume * period_cycles / 1000 / 2;
 8000ef4:	88bb      	ldrh	r3, [r7, #4]
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	fb02 f303 	mul.w	r3, r2, r3
 8000efc:	4a2b      	ldr	r2, [pc, #172]	; (8000fac <PWM_Change_Tone+0x178>)
 8000efe:	fba2 2303 	umull	r2, r3, r2, r3
 8000f02:	09db      	lsrs	r3, r3, #7
 8000f04:	60fb      	str	r3, [r7, #12]

        pwm_timer->Instance->PSC = prescaler - 1;
 8000f06:	8b7b      	ldrh	r3, [r7, #26]
 8000f08:	1e5a      	subs	r2, r3, #1
 8000f0a:	4b26      	ldr	r3, [pc, #152]	; (8000fa4 <PWM_Change_Tone+0x170>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	629a      	str	r2, [r3, #40]	; 0x28
        pwm_timer->Instance->ARR = period_cycles - 1;
 8000f12:	4b24      	ldr	r3, [pc, #144]	; (8000fa4 <PWM_Change_Tone+0x170>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	3a01      	subs	r2, #1
 8000f1c:	62da      	str	r2, [r3, #44]	; 0x2c
        pwm_timer->Instance->EGR = TIM_EGR_UG;
 8000f1e:	4b21      	ldr	r3, [pc, #132]	; (8000fa4 <PWM_Change_Tone+0x170>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2201      	movs	r2, #1
 8000f26:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channe1, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8000f28:	4b1d      	ldr	r3, [pc, #116]	; (8000fa0 <PWM_Change_Tone+0x16c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d105      	bne.n	8000f3c <PWM_Change_Tone+0x108>
 8000f30:	4b1c      	ldr	r3, [pc, #112]	; (8000fa4 <PWM_Change_Tone+0x170>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	635a      	str	r2, [r3, #52]	; 0x34
    }
}
 8000f3a:	e02d      	b.n	8000f98 <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channe1, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8000f3c:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <PWM_Change_Tone+0x16c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b04      	cmp	r3, #4
 8000f42:	d105      	bne.n	8000f50 <PWM_Change_Tone+0x11c>
 8000f44:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <PWM_Change_Tone+0x170>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000f4e:	e023      	b.n	8000f98 <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channe1, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8000f50:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <PWM_Change_Tone+0x16c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b08      	cmp	r3, #8
 8000f56:	d105      	bne.n	8000f64 <PWM_Change_Tone+0x130>
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <PWM_Change_Tone+0x170>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000f62:	e019      	b.n	8000f98 <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channe1, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8000f64:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <PWM_Change_Tone+0x16c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b0c      	cmp	r3, #12
 8000f6a:	d105      	bne.n	8000f78 <PWM_Change_Tone+0x144>
 8000f6c:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <PWM_Change_Tone+0x170>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000f76:	e00f      	b.n	8000f98 <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channe1, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8000f78:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <PWM_Change_Tone+0x16c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b10      	cmp	r3, #16
 8000f7e:	d105      	bne.n	8000f8c <PWM_Change_Tone+0x158>
 8000f80:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <PWM_Change_Tone+0x170>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000f8a:	e005      	b.n	8000f98 <PWM_Change_Tone+0x164>
        __HAL_TIM_SET_COMPARE(pwm_timer, pwm_channe1, pulse_width); // pwm_timer->Instance->CCR2 = pulse_width;
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <PWM_Change_Tone+0x170>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000f96:	e7ff      	b.n	8000f98 <PWM_Change_Tone+0x164>
 8000f98:	bf00      	nop
 8000f9a:	3720      	adds	r7, #32
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	2000039c 	.word	0x2000039c
 8000fa4:	200002d8 	.word	0x200002d8
 8000fa8:	45e7b273 	.word	0x45e7b273
 8000fac:	10624dd3 	.word	0x10624dd3

08000fb0 <Change_Melody>:

void Change_Melody(const Tone *melody, uint16_t tone_count)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	807b      	strh	r3, [r7, #2]
    melody_ptr = melody;
 8000fbc:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <Change_Melody+0x2c>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6013      	str	r3, [r2, #0]
    melody_tone_count = tone_count;
 8000fc2:	4a07      	ldr	r2, [pc, #28]	; (8000fe0 <Change_Melody+0x30>)
 8000fc4:	887b      	ldrh	r3, [r7, #2]
 8000fc6:	8013      	strh	r3, [r2, #0]
    current_tone_number = 0;
 8000fc8:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <Change_Melody+0x34>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	801a      	strh	r2, [r3, #0]
}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	200008b4 	.word	0x200008b4
 8000fe0:	20000a48 	.word	0x20000a48
 8000fe4:	200008b0 	.word	0x200008b0

08000fe8 <Update_Melody>:

void Update_Melody()
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
    if( pause == 0 )
 8000fee:	4b1b      	ldr	r3, [pc, #108]	; (800105c <Update_Melody+0x74>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d12e      	bne.n	8001054 <Update_Melody+0x6c>
    {
    	if ((HAL_GetTick() > current_tone_end) && (current_tone_number < melody_tone_count))
 8000ff6:	f002 fdc1 	bl	8003b7c <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	4b18      	ldr	r3, [pc, #96]	; (8001060 <Update_Melody+0x78>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	429a      	cmp	r2, r3
 8001002:	d927      	bls.n	8001054 <Update_Melody+0x6c>
 8001004:	4b17      	ldr	r3, [pc, #92]	; (8001064 <Update_Melody+0x7c>)
 8001006:	881b      	ldrh	r3, [r3, #0]
 8001008:	b29a      	uxth	r2, r3
 800100a:	4b17      	ldr	r3, [pc, #92]	; (8001068 <Update_Melody+0x80>)
 800100c:	881b      	ldrh	r3, [r3, #0]
 800100e:	b29b      	uxth	r3, r3
 8001010:	429a      	cmp	r2, r3
 8001012:	d21f      	bcs.n	8001054 <Update_Melody+0x6c>
    	    {
    	        const Tone active_tone = *(melody_ptr + current_tone_number);
 8001014:	4b15      	ldr	r3, [pc, #84]	; (800106c <Update_Melody+0x84>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <Update_Melody+0x7c>)
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	b29b      	uxth	r3, r3
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	441a      	add	r2, r3
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	6810      	ldr	r0, [r2, #0]
 8001026:	6018      	str	r0, [r3, #0]
    	        PWM_Change_Tone(active_tone.frequency, volume);
 8001028:	88bb      	ldrh	r3, [r7, #4]
 800102a:	4a11      	ldr	r2, [pc, #68]	; (8001070 <Update_Melody+0x88>)
 800102c:	8812      	ldrh	r2, [r2, #0]
 800102e:	b292      	uxth	r2, r2
 8001030:	4611      	mov	r1, r2
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fefe 	bl	8000e34 <PWM_Change_Tone>
    	        current_tone_end = HAL_GetTick() + active_tone.duration;
 8001038:	f002 fda0 	bl	8003b7c <HAL_GetTick>
 800103c:	4603      	mov	r3, r0
 800103e:	88fa      	ldrh	r2, [r7, #6]
 8001040:	4413      	add	r3, r2
 8001042:	4a07      	ldr	r2, [pc, #28]	; (8001060 <Update_Melody+0x78>)
 8001044:	6013      	str	r3, [r2, #0]
    	        current_tone_number++;
 8001046:	4b07      	ldr	r3, [pc, #28]	; (8001064 <Update_Melody+0x7c>)
 8001048:	881b      	ldrh	r3, [r3, #0]
 800104a:	b29b      	uxth	r3, r3
 800104c:	3301      	adds	r3, #1
 800104e:	b29a      	uxth	r2, r3
 8001050:	4b04      	ldr	r3, [pc, #16]	; (8001064 <Update_Melody+0x7c>)
 8001052:	801a      	strh	r2, [r3, #0]
    	    }
    }
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	200003a0 	.word	0x200003a0
 8001060:	200008ac 	.word	0x200008ac
 8001064:	200008b0 	.word	0x200008b0
 8001068:	20000a48 	.word	0x20000a48
 800106c:	200008b4 	.word	0x200008b4
 8001070:	200002dc 	.word	0x200002dc

08001074 <warning>:

void warning() {
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	Change_Melody(biz, ARRAY_LENGTH(biz));
 8001078:	2104      	movs	r1, #4
 800107a:	4802      	ldr	r0, [pc, #8]	; (8001084 <warning+0x10>)
 800107c:	f7ff ff98 	bl	8000fb0 <Change_Melody>
}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}
 8001084:	080089bc 	.word	0x080089bc

08001088 <LED>:

void LED() {
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 800108c:	2201      	movs	r2, #1
 800108e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001092:	4864      	ldr	r0, [pc, #400]	; (8001224 <LED+0x19c>)
 8001094:	f003 f8bc 	bl	8004210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 8001098:	2201      	movs	r2, #1
 800109a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800109e:	4861      	ldr	r0, [pc, #388]	; (8001224 <LED+0x19c>)
 80010a0:	f003 f8b6 	bl	8004210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 80010a4:	2201      	movs	r2, #1
 80010a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010aa:	485e      	ldr	r0, [pc, #376]	; (8001224 <LED+0x19c>)
 80010ac:	f003 f8b0 	bl	8004210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 80010b0:	2201      	movs	r2, #1
 80010b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010b6:	485b      	ldr	r0, [pc, #364]	; (8001224 <LED+0x19c>)
 80010b8:	f003 f8aa 	bl	8004210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 1);
 80010bc:	2201      	movs	r2, #1
 80010be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010c2:	4858      	ldr	r0, [pc, #352]	; (8001224 <LED+0x19c>)
 80010c4:	f003 f8a4 	bl	8004210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 1);
 80010c8:	2201      	movs	r2, #1
 80010ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010ce:	4855      	ldr	r0, [pc, #340]	; (8001224 <LED+0x19c>)
 80010d0:	f003 f89e 	bl	8004210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 80010d4:	2201      	movs	r2, #1
 80010d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010da:	4852      	ldr	r0, [pc, #328]	; (8001224 <LED+0x19c>)
 80010dc:	f003 f898 	bl	8004210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
 80010e0:	2201      	movs	r2, #1
 80010e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010e6:	484f      	ldr	r0, [pc, #316]	; (8001224 <LED+0x19c>)
 80010e8:	f003 f892 	bl	8004210 <HAL_GPIO_WritePin>
	HAL_Delay(250);
 80010ec:	20fa      	movs	r0, #250	; 0xfa
 80010ee:	f002 fd51 	bl	8003b94 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f8:	484a      	ldr	r0, [pc, #296]	; (8001224 <LED+0x19c>)
 80010fa:	f003 f889 	bl	8004210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001104:	4847      	ldr	r0, [pc, #284]	; (8001224 <LED+0x19c>)
 8001106:	f003 f883 	bl	8004210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001110:	4844      	ldr	r0, [pc, #272]	; (8001224 <LED+0x19c>)
 8001112:	f003 f87d 	bl	8004210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800111c:	4841      	ldr	r0, [pc, #260]	; (8001224 <LED+0x19c>)
 800111e:	f003 f877 	bl	8004210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001128:	483e      	ldr	r0, [pc, #248]	; (8001224 <LED+0x19c>)
 800112a:	f003 f871 	bl	8004210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001134:	483b      	ldr	r0, [pc, #236]	; (8001224 <LED+0x19c>)
 8001136:	f003 f86b 	bl	8004210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001140:	4838      	ldr	r0, [pc, #224]	; (8001224 <LED+0x19c>)
 8001142:	f003 f865 	bl	8004210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800114c:	4835      	ldr	r0, [pc, #212]	; (8001224 <LED+0x19c>)
 800114e:	f003 f85f 	bl	8004210 <HAL_GPIO_WritePin>
	HAL_Delay(250);
 8001152:	20fa      	movs	r0, #250	; 0xfa
 8001154:	f002 fd1e 	bl	8003b94 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 8001158:	2201      	movs	r2, #1
 800115a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800115e:	4831      	ldr	r0, [pc, #196]	; (8001224 <LED+0x19c>)
 8001160:	f003 f856 	bl	8004210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 8001164:	2201      	movs	r2, #1
 8001166:	f44f 7100 	mov.w	r1, #512	; 0x200
 800116a:	482e      	ldr	r0, [pc, #184]	; (8001224 <LED+0x19c>)
 800116c:	f003 f850 	bl	8004210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 8001170:	2201      	movs	r2, #1
 8001172:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001176:	482b      	ldr	r0, [pc, #172]	; (8001224 <LED+0x19c>)
 8001178:	f003 f84a 	bl	8004210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 800117c:	2201      	movs	r2, #1
 800117e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001182:	4828      	ldr	r0, [pc, #160]	; (8001224 <LED+0x19c>)
 8001184:	f003 f844 	bl	8004210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 1);
 8001188:	2201      	movs	r2, #1
 800118a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800118e:	4825      	ldr	r0, [pc, #148]	; (8001224 <LED+0x19c>)
 8001190:	f003 f83e 	bl	8004210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 1);
 8001194:	2201      	movs	r2, #1
 8001196:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800119a:	4822      	ldr	r0, [pc, #136]	; (8001224 <LED+0x19c>)
 800119c:	f003 f838 	bl	8004210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 80011a0:	2201      	movs	r2, #1
 80011a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011a6:	481f      	ldr	r0, [pc, #124]	; (8001224 <LED+0x19c>)
 80011a8:	f003 f832 	bl	8004210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
 80011ac:	2201      	movs	r2, #1
 80011ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011b2:	481c      	ldr	r0, [pc, #112]	; (8001224 <LED+0x19c>)
 80011b4:	f003 f82c 	bl	8004210 <HAL_GPIO_WritePin>
	HAL_Delay(250);
 80011b8:	20fa      	movs	r0, #250	; 0xfa
 80011ba:	f002 fceb 	bl	8003b94 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011c4:	4817      	ldr	r0, [pc, #92]	; (8001224 <LED+0x19c>)
 80011c6:	f003 f823 	bl	8004210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 80011ca:	2200      	movs	r2, #0
 80011cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011d0:	4814      	ldr	r0, [pc, #80]	; (8001224 <LED+0x19c>)
 80011d2:	f003 f81d 	bl	8004210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011dc:	4811      	ldr	r0, [pc, #68]	; (8001224 <LED+0x19c>)
 80011de:	f003 f817 	bl	8004210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 80011e2:	2200      	movs	r2, #0
 80011e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011e8:	480e      	ldr	r0, [pc, #56]	; (8001224 <LED+0x19c>)
 80011ea:	f003 f811 	bl	8004210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011f4:	480b      	ldr	r0, [pc, #44]	; (8001224 <LED+0x19c>)
 80011f6:	f003 f80b 	bl	8004210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001200:	4808      	ldr	r0, [pc, #32]	; (8001224 <LED+0x19c>)
 8001202:	f003 f805 	bl	8004210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800120c:	4805      	ldr	r0, [pc, #20]	; (8001224 <LED+0x19c>)
 800120e:	f002 ffff 	bl	8004210 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001218:	4802      	ldr	r0, [pc, #8]	; (8001224 <LED+0x19c>)
 800121a:	f002 fff9 	bl	8004210 <HAL_GPIO_WritePin>
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	48001000 	.word	0x48001000

08001228 <elevator>:

void elevator() {
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	pop();
 800122c:	f000 f8a2 	bl	8001374 <pop>
	while ( requestQueue[Front] != floorIn && requestQueue[Front] > -1 && Rear > -1 && Front <= Rear )
 8001230:	e034      	b.n	800129c <elevator+0x74>
	{
		if ( floorIn < requestQueue[Front] )
 8001232:	4b2a      	ldr	r3, [pc, #168]	; (80012dc <elevator+0xb4>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a2a      	ldr	r2, [pc, #168]	; (80012e0 <elevator+0xb8>)
 8001238:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800123c:	4b29      	ldr	r3, [pc, #164]	; (80012e4 <elevator+0xbc>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	429a      	cmp	r2, r3
 8001242:	dd0a      	ble.n	800125a <elevator+0x32>
		{
			HAL_Delay(moveDelay);
 8001244:	4b28      	ldr	r3, [pc, #160]	; (80012e8 <elevator+0xc0>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f002 fca3 	bl	8003b94 <HAL_Delay>
			floorIn++;
 800124e:	4b25      	ldr	r3, [pc, #148]	; (80012e4 <elevator+0xbc>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	3301      	adds	r3, #1
 8001254:	4a23      	ldr	r2, [pc, #140]	; (80012e4 <elevator+0xbc>)
 8001256:	6013      	str	r3, [r2, #0]
 8001258:	e012      	b.n	8001280 <elevator+0x58>
		} else if ( floorIn > requestQueue[Front] ) {
 800125a:	4b20      	ldr	r3, [pc, #128]	; (80012dc <elevator+0xb4>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a20      	ldr	r2, [pc, #128]	; (80012e0 <elevator+0xb8>)
 8001260:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001264:	4b1f      	ldr	r3, [pc, #124]	; (80012e4 <elevator+0xbc>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	429a      	cmp	r2, r3
 800126a:	da09      	bge.n	8001280 <elevator+0x58>
			HAL_Delay(moveDelay);
 800126c:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <elevator+0xc0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f002 fc8f 	bl	8003b94 <HAL_Delay>
			floorIn--;
 8001276:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <elevator+0xbc>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	3b01      	subs	r3, #1
 800127c:	4a19      	ldr	r2, [pc, #100]	; (80012e4 <elevator+0xbc>)
 800127e:	6013      	str	r3, [r2, #0]
		}
		if ( requestQueue[Front] == floorIn )
 8001280:	4b16      	ldr	r3, [pc, #88]	; (80012dc <elevator+0xb4>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a16      	ldr	r2, [pc, #88]	; (80012e0 <elevator+0xb8>)
 8001286:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800128a:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <elevator+0xbc>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	429a      	cmp	r2, r3
 8001290:	d104      	bne.n	800129c <elevator+0x74>
		{
			HAL_Delay(stopDelay);
 8001292:	4b16      	ldr	r3, [pc, #88]	; (80012ec <elevator+0xc4>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f002 fc7c 	bl	8003b94 <HAL_Delay>
	while ( requestQueue[Front] != floorIn && requestQueue[Front] > -1 && Rear > -1 && Front <= Rear )
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <elevator+0xb4>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a0f      	ldr	r2, [pc, #60]	; (80012e0 <elevator+0xb8>)
 80012a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012a6:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <elevator+0xbc>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d010      	beq.n	80012d0 <elevator+0xa8>
 80012ae:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <elevator+0xb4>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a0b      	ldr	r2, [pc, #44]	; (80012e0 <elevator+0xb8>)
 80012b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	db09      	blt.n	80012d0 <elevator+0xa8>
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <elevator+0xc8>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	db05      	blt.n	80012d0 <elevator+0xa8>
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <elevator+0xb4>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <elevator+0xc8>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	ddb0      	ble.n	8001232 <elevator+0xa>
		}
	}
	run = 0;
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <elevator+0xcc>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200002d4 	.word	0x200002d4
 80012e0:	200008b8 	.word	0x200008b8
 80012e4:	20000378 	.word	0x20000378
 80012e8:	200002c0 	.word	0x200002c0
 80012ec:	200002c4 	.word	0x200002c4
 80012f0:	200002d0 	.word	0x200002d0
 80012f4:	20000384 	.word	0x20000384

080012f8 <push>:

void push(int floorGo) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	int rep = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	60fb      	str	r3, [r7, #12]
	int i;
	for ( i = 0; i <= Rear; i++ )
 8001304:	2300      	movs	r3, #0
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	e00b      	b.n	8001322 <push+0x2a>
	{
		if ( requestQueue[i] == floorGo )
 800130a:	4a17      	ldr	r2, [pc, #92]	; (8001368 <push+0x70>)
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	429a      	cmp	r2, r3
 8001316:	d101      	bne.n	800131c <push+0x24>
		{
			rep = 1;
 8001318:	2301      	movs	r3, #1
 800131a:	60fb      	str	r3, [r7, #12]
	for ( i = 0; i <= Rear; i++ )
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	3301      	adds	r3, #1
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	4b12      	ldr	r3, [pc, #72]	; (800136c <push+0x74>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	68ba      	ldr	r2, [r7, #8]
 8001328:	429a      	cmp	r2, r3
 800132a:	ddee      	ble.n	800130a <push+0x12>
		}
	}
	if ( rep == 0 )
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d115      	bne.n	800135e <push+0x66>
	{
		LED();
 8001332:	f7ff fea9 	bl	8001088 <LED>
		if ( Rear < 100 )
 8001336:	4b0d      	ldr	r3, [pc, #52]	; (800136c <push+0x74>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2b63      	cmp	r3, #99	; 0x63
 800133c:	dc0f      	bgt.n	800135e <push+0x66>
		{
			Rear++;
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <push+0x74>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	3301      	adds	r3, #1
 8001344:	4a09      	ldr	r2, [pc, #36]	; (800136c <push+0x74>)
 8001346:	6013      	str	r3, [r2, #0]
			requestQueue[Rear] = floorGo;
 8001348:	4b08      	ldr	r3, [pc, #32]	; (800136c <push+0x74>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4906      	ldr	r1, [pc, #24]	; (8001368 <push+0x70>)
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			howMuchJob++;
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <push+0x78>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	3301      	adds	r3, #1
 800135a:	4a05      	ldr	r2, [pc, #20]	; (8001370 <push+0x78>)
 800135c:	6013      	str	r3, [r2, #0]
		}
	}
}
 800135e:	bf00      	nop
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200008b8 	.word	0x200008b8
 800136c:	200002d0 	.word	0x200002d0
 8001370:	2000038c 	.word	0x2000038c

08001374 <pop>:

void pop() {
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
	if ( Front > Rear )
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <pop+0x4c>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <pop+0x50>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	429a      	cmp	r2, r3
 8001382:	dd07      	ble.n	8001394 <pop+0x20>
	{
		Rear = -1;
 8001384:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <pop+0x50>)
 8001386:	f04f 32ff 	mov.w	r2, #4294967295
 800138a:	601a      	str	r2, [r3, #0]
		Front = -1;
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <pop+0x4c>)
 800138e:	f04f 32ff 	mov.w	r2, #4294967295
 8001392:	601a      	str	r2, [r3, #0]
	}
	if ( Front < 100 )
 8001394:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <pop+0x4c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b63      	cmp	r3, #99	; 0x63
 800139a:	dc0b      	bgt.n	80013b4 <pop+0x40>
	{
		requestQueue[Front] = -1;
 800139c:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <pop+0x4c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a09      	ldr	r2, [pc, #36]	; (80013c8 <pop+0x54>)
 80013a2:	f04f 31ff 	mov.w	r1, #4294967295
 80013a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Front++;
 80013aa:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <pop+0x4c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	3301      	adds	r3, #1
 80013b0:	4a03      	ldr	r2, [pc, #12]	; (80013c0 <pop+0x4c>)
 80013b2:	6013      	str	r3, [r2, #0]
	}
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	200002d4 	.word	0x200002d4
 80013c4:	200002d0 	.word	0x200002d0
 80013c8:	200008b8 	.word	0x200008b8

080013cc <removeAll>:

void removeAll() {
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
	while ( Rear > -1  )
 80013d0:	e00b      	b.n	80013ea <removeAll+0x1e>
	{
		requestQueue[Rear] = -1;
 80013d2:	4b11      	ldr	r3, [pc, #68]	; (8001418 <removeAll+0x4c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a11      	ldr	r2, [pc, #68]	; (800141c <removeAll+0x50>)
 80013d8:	f04f 31ff 	mov.w	r1, #4294967295
 80013dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Rear--;
 80013e0:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <removeAll+0x4c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	4a0c      	ldr	r2, [pc, #48]	; (8001418 <removeAll+0x4c>)
 80013e8:	6013      	str	r3, [r2, #0]
	while ( Rear > -1  )
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <removeAll+0x4c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	daef      	bge.n	80013d2 <removeAll+0x6>
	}
	Rear = -1;
 80013f2:	4b09      	ldr	r3, [pc, #36]	; (8001418 <removeAll+0x4c>)
 80013f4:	f04f 32ff 	mov.w	r2, #4294967295
 80013f8:	601a      	str	r2, [r3, #0]
	Front = -1;
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <removeAll+0x54>)
 80013fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001400:	601a      	str	r2, [r3, #0]
	run = 0;
 8001402:	4b08      	ldr	r3, [pc, #32]	; (8001424 <removeAll+0x58>)
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
	howMuchJob = 0;
 8001408:	4b07      	ldr	r3, [pc, #28]	; (8001428 <removeAll+0x5c>)
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
}
 800140e:	bf00      	nop
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	200002d0 	.word	0x200002d0
 800141c:	200008b8 	.word	0x200008b8
 8001420:	200002d4 	.word	0x200002d4
 8001424:	20000384 	.word	0x20000384
 8001428:	2000038c 	.word	0x2000038c

0800142c <doJob>:

void doJob() {
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
	if( run == 0 && howMuchJob > 0)
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <doJob+0x2c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d10d      	bne.n	8001454 <doJob+0x28>
 8001438:	4b08      	ldr	r3, [pc, #32]	; (800145c <doJob+0x30>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	dd09      	ble.n	8001454 <doJob+0x28>
	{
		run = 1;
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <doJob+0x2c>)
 8001442:	2201      	movs	r2, #1
 8001444:	601a      	str	r2, [r3, #0]
		elevator();
 8001446:	f7ff feef 	bl	8001228 <elevator>
		howMuchJob--;
 800144a:	4b04      	ldr	r3, [pc, #16]	; (800145c <doJob+0x30>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	3b01      	subs	r3, #1
 8001450:	4a02      	ldr	r2, [pc, #8]	; (800145c <doJob+0x30>)
 8001452:	6013      	str	r3, [r2, #0]
	}
}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000384 	.word	0x20000384
 800145c:	2000038c 	.word	0x2000038c

08001460 <set_max_level>:

void set_max_level( int n ) {
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	sizeFloor = n;
 8001468:	4a07      	ldr	r2, [pc, #28]	; (8001488 <set_max_level+0x28>)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6013      	str	r3, [r2, #0]
	floorGo = 0;
 800146e:	4b07      	ldr	r3, [pc, #28]	; (800148c <set_max_level+0x2c>)
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
	floorIn = 0;
 8001474:	4b06      	ldr	r3, [pc, #24]	; (8001490 <set_max_level+0x30>)
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	200002c8 	.word	0x200002c8
 800148c:	20000374 	.word	0x20000374
 8001490:	20000378 	.word	0x20000378

08001494 <set_level>:

void set_level( int n ) {
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
	floorIn = n;
 800149c:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <set_level+0x1c>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6013      	str	r3, [r2, #0]
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	20000378 	.word	0x20000378

080014b4 <set_wait>:

void set_wait( int n ) {
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	stopDelay = n;
 80014bc:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <set_wait+0x1c>)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6013      	str	r3, [r2, #0]
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	200002c4 	.word	0x200002c4

080014d4 <set_LED>:

void set_LED( int on ) {
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
	LEDon = on;
 80014dc:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <set_LED+0x1c>)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6013      	str	r3, [r2, #0]
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	200002cc 	.word	0x200002cc

080014f4 <test>:

void test( int floor[] ) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]

	run = 1;
 80014fc:	4b18      	ldr	r3, [pc, #96]	; (8001560 <test+0x6c>)
 80014fe:	2201      	movs	r2, #1
 8001500:	601a      	str	r2, [r3, #0]

	int i = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
	while ( floor[i] && floor[i] > -1 ) {
 8001506:	e018      	b.n	800153a <test+0x46>
		if ( floor[i] <= sizeFloor )
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	4413      	add	r3, r2
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	4b14      	ldr	r3, [pc, #80]	; (8001564 <test+0x70>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	429a      	cmp	r2, r3
 8001518:	dc0c      	bgt.n	8001534 <test+0x40>
		{
			push(floor[i]);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	4413      	add	r3, r2
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fee7 	bl	80012f8 <push>
			testSize++;
 800152a:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <test+0x74>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	3301      	adds	r3, #1
 8001530:	4a0d      	ldr	r2, [pc, #52]	; (8001568 <test+0x74>)
 8001532:	6013      	str	r3, [r2, #0]
		}
		i++;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	3301      	adds	r3, #1
 8001538:	60fb      	str	r3, [r7, #12]
	while ( floor[i] && floor[i] > -1 ) {
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	4413      	add	r3, r2
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d006      	beq.n	8001556 <test+0x62>
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	4413      	add	r3, r2
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	dad8      	bge.n	8001508 <test+0x14>
	}

}
 8001556:	bf00      	nop
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000384 	.word	0x20000384
 8001564:	200002c8 	.word	0x200002c8
 8001568:	20000398 	.word	0x20000398

0800156c <start>:

void start() {
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
	howMuchJob = testSize;
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <start+0x1c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a05      	ldr	r2, [pc, #20]	; (800158c <start+0x20>)
 8001576:	6013      	str	r3, [r2, #0]
	run = 0;
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <start+0x24>)
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
}
 800157e:	bf00      	nop
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	20000398 	.word	0x20000398
 800158c:	2000038c 	.word	0x2000038c
 8001590:	20000384 	.word	0x20000384

08001594 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001598:	e7fe      	b.n	8001598 <NMI_Handler+0x4>

0800159a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800159e:	e7fe      	b.n	800159e <HardFault_Handler+0x4>

080015a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <MemManage_Handler+0x4>

080015a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015aa:	e7fe      	b.n	80015aa <BusFault_Handler+0x4>

080015ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <UsageFault_Handler+0x4>

080015b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015e0:	f002 fab8 	bl	8003b54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  Update_Melody();
 80015e4:	f7ff fd00 	bl	8000fe8 <Update_Melody>
  /* USER CODE END SysTick_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}

080015ec <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) && fix == 0 )
 80015f0:	2101      	movs	r1, #1
 80015f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f6:	f002 fdf3 	bl	80041e0 <HAL_GPIO_ReadPin>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d00f      	beq.n	8001620 <EXTI0_IRQHandler+0x34>
 8001600:	4b0a      	ldr	r3, [pc, #40]	; (800162c <EXTI0_IRQHandler+0x40>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d10b      	bne.n	8001620 <EXTI0_IRQHandler+0x34>
	{
		if (floorGo > 0 )
 8001608:	4b09      	ldr	r3, [pc, #36]	; (8001630 <EXTI0_IRQHandler+0x44>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	dd07      	ble.n	8001620 <EXTI0_IRQHandler+0x34>
		{
			floorGo--;
 8001610:	4b07      	ldr	r3, [pc, #28]	; (8001630 <EXTI0_IRQHandler+0x44>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	3b01      	subs	r3, #1
 8001616:	4a06      	ldr	r2, [pc, #24]	; (8001630 <EXTI0_IRQHandler+0x44>)
 8001618:	6013      	str	r3, [r2, #0]
			fix = 1;
 800161a:	4b04      	ldr	r3, [pc, #16]	; (800162c <EXTI0_IRQHandler+0x40>)
 800161c:	2201      	movs	r2, #1
 800161e:	601a      	str	r2, [r3, #0]
		}
	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001620:	2001      	movs	r0, #1
 8001622:	f002 fe0d 	bl	8004240 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000380 	.word	0x20000380
 8001630:	20000374 	.word	0x20000374

08001634 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) && fix == 0 )
 8001638:	2102      	movs	r1, #2
 800163a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800163e:	f002 fdcf 	bl	80041e0 <HAL_GPIO_ReadPin>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d011      	beq.n	800166c <EXTI1_IRQHandler+0x38>
 8001648:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <EXTI1_IRQHandler+0x44>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d10d      	bne.n	800166c <EXTI1_IRQHandler+0x38>
	{
		if (floorGo < sizeFloor )
 8001650:	4b0a      	ldr	r3, [pc, #40]	; (800167c <EXTI1_IRQHandler+0x48>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <EXTI1_IRQHandler+0x4c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	429a      	cmp	r2, r3
 800165a:	da07      	bge.n	800166c <EXTI1_IRQHandler+0x38>
		{
			floorGo++;
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <EXTI1_IRQHandler+0x48>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	3301      	adds	r3, #1
 8001662:	4a06      	ldr	r2, [pc, #24]	; (800167c <EXTI1_IRQHandler+0x48>)
 8001664:	6013      	str	r3, [r2, #0]
			fix = 1;
 8001666:	4b04      	ldr	r3, [pc, #16]	; (8001678 <EXTI1_IRQHandler+0x44>)
 8001668:	2201      	movs	r2, #1
 800166a:	601a      	str	r2, [r3, #0]
		}
	}

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800166c:	2002      	movs	r0, #2
 800166e:	f002 fde7 	bl	8004240 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000380 	.word	0x20000380
 800167c:	20000374 	.word	0x20000374
 8001680:	200002c8 	.word	0x200002c8

08001684 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) && fix == 0)
 8001688:	2108      	movs	r1, #8
 800168a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800168e:	f002 fda7 	bl	80041e0 <HAL_GPIO_ReadPin>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d00b      	beq.n	80016b0 <EXTI3_IRQHandler+0x2c>
 8001698:	4b08      	ldr	r3, [pc, #32]	; (80016bc <EXTI3_IRQHandler+0x38>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d107      	bne.n	80016b0 <EXTI3_IRQHandler+0x2c>
	{
		push(floorGo);
 80016a0:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <EXTI3_IRQHandler+0x3c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff fe27 	bl	80012f8 <push>
		fix = 1;
 80016aa:	4b04      	ldr	r3, [pc, #16]	; (80016bc <EXTI3_IRQHandler+0x38>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	601a      	str	r2, [r3, #0]
//			elevator();
//		}
	}

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80016b0:	2008      	movs	r0, #8
 80016b2:	f002 fdc5 	bl	8004240 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000380 	.word	0x20000380
 80016c0:	20000374 	.word	0x20000374

080016c4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	if ( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) && Button4 == 0 )
 80016c8:	2110      	movs	r1, #16
 80016ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ce:	f002 fd87 	bl	80041e0 <HAL_GPIO_ReadPin>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d009      	beq.n	80016ec <EXTI4_IRQHandler+0x28>
 80016d8:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <EXTI4_IRQHandler+0x54>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d105      	bne.n	80016ec <EXTI4_IRQHandler+0x28>
	{
		warning_start();
 80016e0:	f7ff fb88 	bl	8000df4 <warning_start>
		Button4 = 1;
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <EXTI4_IRQHandler+0x54>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	e010      	b.n	800170e <EXTI4_IRQHandler+0x4a>
	} else if ( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) && Button4 == 1 ) {
 80016ec:	2110      	movs	r1, #16
 80016ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f2:	f002 fd75 	bl	80041e0 <HAL_GPIO_ReadPin>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d008      	beq.n	800170e <EXTI4_IRQHandler+0x4a>
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <EXTI4_IRQHandler+0x54>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d104      	bne.n	800170e <EXTI4_IRQHandler+0x4a>
		warning_stop();
 8001704:	f7ff fb86 	bl	8000e14 <warning_stop>
		Button4 = 0;
 8001708:	4b03      	ldr	r3, [pc, #12]	; (8001718 <EXTI4_IRQHandler+0x54>)
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800170e:	2010      	movs	r0, #16
 8001710:	f002 fd96 	bl	8004240 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}
 8001718:	2000037c 	.word	0x2000037c

0800171c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001720:	4802      	ldr	r0, [pc, #8]	; (800172c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001722:	f004 fe07 	bl	8006334 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	2000043c 	.word	0x2000043c

08001730 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if ( Button4 == 1 )
 8001734:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <TIM3_IRQHandler+0x30>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d107      	bne.n	800174c <TIM3_IRQHandler+0x1c>
	{
		warning();
 800173c:	f7ff fc9a 	bl	8001074 <warning>
		if ( LEDon == 1 )
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <TIM3_IRQHandler+0x34>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d101      	bne.n	800174c <TIM3_IRQHandler+0x1c>
		{
			LED();
 8001748:	f7ff fc9e 	bl	8001088 <LED>
		}

	}

	//fix baraye chand bar feshorde shodan dokme ha
	fix = 0;
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <TIM3_IRQHandler+0x38>)
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]

	doJob();
 8001752:	f7ff fe6b 	bl	800142c <doJob>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001756:	4805      	ldr	r0, [pc, #20]	; (800176c <TIM3_IRQHandler+0x3c>)
 8001758:	f004 fdec 	bl	8006334 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	bd80      	pop	{r7, pc}
 8001760:	2000037c 	.word	0x2000037c
 8001764:	200002cc 	.word	0x200002cc
 8001768:	20000380 	.word	0x20000380
 800176c:	20000488 	.word	0x20000488

08001770 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	show(floorIn, floorGo);
 8001774:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <TIM4_IRQHandler+0x40>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a0e      	ldr	r2, [pc, #56]	; (80017b4 <TIM4_IRQHandler+0x44>)
 800177a:	6812      	ldr	r2, [r2, #0]
 800177c:	4611      	mov	r1, r2
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe fdb4 	bl	80002ec <show>

	if ( i == 50000 ) {
 8001784:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <TIM4_IRQHandler+0x48>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f24c 3250 	movw	r2, #50000	; 0xc350
 800178c:	4293      	cmp	r3, r2
 800178e:	d105      	bne.n	800179c <TIM4_IRQHandler+0x2c>
		i=0;
 8001790:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <TIM4_IRQHandler+0x48>)
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
		fix=0;
 8001796:	4b09      	ldr	r3, [pc, #36]	; (80017bc <TIM4_IRQHandler+0x4c>)
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
	}
	i++;
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <TIM4_IRQHandler+0x48>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	3301      	adds	r3, #1
 80017a2:	4a05      	ldr	r2, [pc, #20]	; (80017b8 <TIM4_IRQHandler+0x48>)
 80017a4:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80017a6:	4806      	ldr	r0, [pc, #24]	; (80017c0 <TIM4_IRQHandler+0x50>)
 80017a8:	f004 fdc4 	bl	8006334 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000378 	.word	0x20000378
 80017b4:	20000374 	.word	0x20000374
 80017b8:	20000388 	.word	0x20000388
 80017bc:	20000380 	.word	0x20000380
 80017c0:	200003a4 	.word	0x200003a4

080017c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08e      	sub	sp, #56	; 0x38
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017ca:	489b      	ldr	r0, [pc, #620]	; (8001a38 <USART2_IRQHandler+0x274>)
 80017cc:	f005 ff54 	bl	8007678 <HAL_UART_IRQHandler>


  	extern unsigned char data[1];


  	switch(data[0]){
 80017d0:	4b9a      	ldr	r3, [pc, #616]	; (8001a3c <USART2_IRQHandler+0x278>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b0a      	cmp	r3, #10
 80017d6:	f042 80ff 	bne.w	80039d8 <USART2_IRQHandler+0x2214>

	case '\n':

		if ( howMuchJob == 0 && buffer[0] == 'A' && buffer[1] == 'D' && buffer[2] == 'M' && buffer[3] == 'I' && buffer[4] == 'N'
 80017da:	4b99      	ldr	r3, [pc, #612]	; (8001a40 <USART2_IRQHandler+0x27c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d13c      	bne.n	800185c <USART2_IRQHandler+0x98>
 80017e2:	4b98      	ldr	r3, [pc, #608]	; (8001a44 <USART2_IRQHandler+0x280>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2b41      	cmp	r3, #65	; 0x41
 80017e8:	d138      	bne.n	800185c <USART2_IRQHandler+0x98>
 80017ea:	4b96      	ldr	r3, [pc, #600]	; (8001a44 <USART2_IRQHandler+0x280>)
 80017ec:	785b      	ldrb	r3, [r3, #1]
 80017ee:	2b44      	cmp	r3, #68	; 0x44
 80017f0:	d134      	bne.n	800185c <USART2_IRQHandler+0x98>
 80017f2:	4b94      	ldr	r3, [pc, #592]	; (8001a44 <USART2_IRQHandler+0x280>)
 80017f4:	789b      	ldrb	r3, [r3, #2]
 80017f6:	2b4d      	cmp	r3, #77	; 0x4d
 80017f8:	d130      	bne.n	800185c <USART2_IRQHandler+0x98>
 80017fa:	4b92      	ldr	r3, [pc, #584]	; (8001a44 <USART2_IRQHandler+0x280>)
 80017fc:	78db      	ldrb	r3, [r3, #3]
 80017fe:	2b49      	cmp	r3, #73	; 0x49
 8001800:	d12c      	bne.n	800185c <USART2_IRQHandler+0x98>
 8001802:	4b90      	ldr	r3, [pc, #576]	; (8001a44 <USART2_IRQHandler+0x280>)
 8001804:	791b      	ldrb	r3, [r3, #4]
 8001806:	2b4e      	cmp	r3, #78	; 0x4e
 8001808:	d128      	bne.n	800185c <USART2_IRQHandler+0x98>
			&& buffer[5] == '#' )
 800180a:	4b8e      	ldr	r3, [pc, #568]	; (8001a44 <USART2_IRQHandler+0x280>)
 800180c:	795b      	ldrb	r3, [r3, #5]
 800180e:	2b23      	cmp	r3, #35	; 0x23
 8001810:	d124      	bne.n	800185c <USART2_IRQHandler+0x98>
		{
			if ( buffer[6] == '1' && buffer[7] == '2' && buffer[8] == '3' && buffer[9] == '4' )
 8001812:	4b8c      	ldr	r3, [pc, #560]	; (8001a44 <USART2_IRQHandler+0x280>)
 8001814:	799b      	ldrb	r3, [r3, #6]
 8001816:	2b31      	cmp	r3, #49	; 0x31
 8001818:	d119      	bne.n	800184e <USART2_IRQHandler+0x8a>
 800181a:	4b8a      	ldr	r3, [pc, #552]	; (8001a44 <USART2_IRQHandler+0x280>)
 800181c:	79db      	ldrb	r3, [r3, #7]
 800181e:	2b32      	cmp	r3, #50	; 0x32
 8001820:	d115      	bne.n	800184e <USART2_IRQHandler+0x8a>
 8001822:	4b88      	ldr	r3, [pc, #544]	; (8001a44 <USART2_IRQHandler+0x280>)
 8001824:	7a1b      	ldrb	r3, [r3, #8]
 8001826:	2b33      	cmp	r3, #51	; 0x33
 8001828:	d111      	bne.n	800184e <USART2_IRQHandler+0x8a>
 800182a:	4b86      	ldr	r3, [pc, #536]	; (8001a44 <USART2_IRQHandler+0x280>)
 800182c:	7a5b      	ldrb	r3, [r3, #9]
 800182e:	2b34      	cmp	r3, #52	; 0x34
 8001830:	d10d      	bne.n	800184e <USART2_IRQHandler+0x8a>
			{
				HAL_UART_Transmit(&huart2, options, sizeof(unsigned char) * 108, 1000);
 8001832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001836:	226c      	movs	r2, #108	; 0x6c
 8001838:	4983      	ldr	r1, [pc, #524]	; (8001a48 <USART2_IRQHandler+0x284>)
 800183a:	487f      	ldr	r0, [pc, #508]	; (8001a38 <USART2_IRQHandler+0x274>)
 800183c:	f005 fe3a 	bl	80074b4 <HAL_UART_Transmit>
				adminIn = 1;
 8001840:	4b82      	ldr	r3, [pc, #520]	; (8001a4c <USART2_IRQHandler+0x288>)
 8001842:	2201      	movs	r2, #1
 8001844:	601a      	str	r2, [r3, #0]
				adminReq = 1;
 8001846:	4b82      	ldr	r3, [pc, #520]	; (8001a50 <USART2_IRQHandler+0x28c>)
 8001848:	2201      	movs	r2, #1
 800184a:	601a      	str	r2, [r3, #0]
			if ( buffer[6] == '1' && buffer[7] == '2' && buffer[8] == '3' && buffer[9] == '4' )
 800184c:	e010      	b.n	8001870 <USART2_IRQHandler+0xac>
			} else {
				HAL_UART_Transmit(&huart2, error1, sizeof(unsigned char) * 23, 100);
 800184e:	2364      	movs	r3, #100	; 0x64
 8001850:	2217      	movs	r2, #23
 8001852:	4980      	ldr	r1, [pc, #512]	; (8001a54 <USART2_IRQHandler+0x290>)
 8001854:	4878      	ldr	r0, [pc, #480]	; (8001a38 <USART2_IRQHandler+0x274>)
 8001856:	f005 fe2d 	bl	80074b4 <HAL_UART_Transmit>
			if ( buffer[6] == '1' && buffer[7] == '2' && buffer[8] == '3' && buffer[9] == '4' )
 800185a:	e009      	b.n	8001870 <USART2_IRQHandler+0xac>
			}
		} else if ( adminIn == 0 ) {
 800185c:	4b7b      	ldr	r3, [pc, #492]	; (8001a4c <USART2_IRQHandler+0x288>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d105      	bne.n	8001870 <USART2_IRQHandler+0xac>
			HAL_UART_Transmit(&huart2, error0, sizeof(unsigned char) * 22, 100);
 8001864:	2364      	movs	r3, #100	; 0x64
 8001866:	2216      	movs	r2, #22
 8001868:	497b      	ldr	r1, [pc, #492]	; (8001a58 <USART2_IRQHandler+0x294>)
 800186a:	4873      	ldr	r0, [pc, #460]	; (8001a38 <USART2_IRQHandler+0x274>)
 800186c:	f005 fe22 	bl	80074b4 <HAL_UART_Transmit>
		}



		if ( adminIn == 1 && buffer[0] == 'S' && buffer[1] == 'E' && buffer[2] == 'T' && buffer[3] == ' ' && buffer[4] == 'M'
 8001870:	4b76      	ldr	r3, [pc, #472]	; (8001a4c <USART2_IRQHandler+0x288>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b01      	cmp	r3, #1
 8001876:	f040 8098 	bne.w	80019aa <USART2_IRQHandler+0x1e6>
 800187a:	4b72      	ldr	r3, [pc, #456]	; (8001a44 <USART2_IRQHandler+0x280>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b53      	cmp	r3, #83	; 0x53
 8001880:	f040 8093 	bne.w	80019aa <USART2_IRQHandler+0x1e6>
 8001884:	4b6f      	ldr	r3, [pc, #444]	; (8001a44 <USART2_IRQHandler+0x280>)
 8001886:	785b      	ldrb	r3, [r3, #1]
 8001888:	2b45      	cmp	r3, #69	; 0x45
 800188a:	f040 808e 	bne.w	80019aa <USART2_IRQHandler+0x1e6>
 800188e:	4b6d      	ldr	r3, [pc, #436]	; (8001a44 <USART2_IRQHandler+0x280>)
 8001890:	789b      	ldrb	r3, [r3, #2]
 8001892:	2b54      	cmp	r3, #84	; 0x54
 8001894:	f040 8089 	bne.w	80019aa <USART2_IRQHandler+0x1e6>
 8001898:	4b6a      	ldr	r3, [pc, #424]	; (8001a44 <USART2_IRQHandler+0x280>)
 800189a:	78db      	ldrb	r3, [r3, #3]
 800189c:	2b20      	cmp	r3, #32
 800189e:	f040 8084 	bne.w	80019aa <USART2_IRQHandler+0x1e6>
 80018a2:	4b68      	ldr	r3, [pc, #416]	; (8001a44 <USART2_IRQHandler+0x280>)
 80018a4:	791b      	ldrb	r3, [r3, #4]
 80018a6:	2b4d      	cmp	r3, #77	; 0x4d
 80018a8:	d17f      	bne.n	80019aa <USART2_IRQHandler+0x1e6>
					&& buffer[5] == 'A' && buffer[6] == 'X' && buffer[7] == ' ' && buffer[8] == 'L' && buffer[9] == 'E' && buffer[10] == 'V'
 80018aa:	4b66      	ldr	r3, [pc, #408]	; (8001a44 <USART2_IRQHandler+0x280>)
 80018ac:	795b      	ldrb	r3, [r3, #5]
 80018ae:	2b41      	cmp	r3, #65	; 0x41
 80018b0:	d17b      	bne.n	80019aa <USART2_IRQHandler+0x1e6>
 80018b2:	4b64      	ldr	r3, [pc, #400]	; (8001a44 <USART2_IRQHandler+0x280>)
 80018b4:	799b      	ldrb	r3, [r3, #6]
 80018b6:	2b58      	cmp	r3, #88	; 0x58
 80018b8:	d177      	bne.n	80019aa <USART2_IRQHandler+0x1e6>
 80018ba:	4b62      	ldr	r3, [pc, #392]	; (8001a44 <USART2_IRQHandler+0x280>)
 80018bc:	79db      	ldrb	r3, [r3, #7]
 80018be:	2b20      	cmp	r3, #32
 80018c0:	d173      	bne.n	80019aa <USART2_IRQHandler+0x1e6>
 80018c2:	4b60      	ldr	r3, [pc, #384]	; (8001a44 <USART2_IRQHandler+0x280>)
 80018c4:	7a1b      	ldrb	r3, [r3, #8]
 80018c6:	2b4c      	cmp	r3, #76	; 0x4c
 80018c8:	d16f      	bne.n	80019aa <USART2_IRQHandler+0x1e6>
 80018ca:	4b5e      	ldr	r3, [pc, #376]	; (8001a44 <USART2_IRQHandler+0x280>)
 80018cc:	7a5b      	ldrb	r3, [r3, #9]
 80018ce:	2b45      	cmp	r3, #69	; 0x45
 80018d0:	d16b      	bne.n	80019aa <USART2_IRQHandler+0x1e6>
 80018d2:	4b5c      	ldr	r3, [pc, #368]	; (8001a44 <USART2_IRQHandler+0x280>)
 80018d4:	7a9b      	ldrb	r3, [r3, #10]
 80018d6:	2b56      	cmp	r3, #86	; 0x56
 80018d8:	d167      	bne.n	80019aa <USART2_IRQHandler+0x1e6>
							&& buffer[11] == 'E' && buffer[12] == 'L' && buffer[13] == '[' && buffer[15] == ']')
 80018da:	4b5a      	ldr	r3, [pc, #360]	; (8001a44 <USART2_IRQHandler+0x280>)
 80018dc:	7adb      	ldrb	r3, [r3, #11]
 80018de:	2b45      	cmp	r3, #69	; 0x45
 80018e0:	d163      	bne.n	80019aa <USART2_IRQHandler+0x1e6>
 80018e2:	4b58      	ldr	r3, [pc, #352]	; (8001a44 <USART2_IRQHandler+0x280>)
 80018e4:	7b1b      	ldrb	r3, [r3, #12]
 80018e6:	2b4c      	cmp	r3, #76	; 0x4c
 80018e8:	d15f      	bne.n	80019aa <USART2_IRQHandler+0x1e6>
 80018ea:	4b56      	ldr	r3, [pc, #344]	; (8001a44 <USART2_IRQHandler+0x280>)
 80018ec:	7b5b      	ldrb	r3, [r3, #13]
 80018ee:	2b5b      	cmp	r3, #91	; 0x5b
 80018f0:	d15b      	bne.n	80019aa <USART2_IRQHandler+0x1e6>
 80018f2:	4b54      	ldr	r3, [pc, #336]	; (8001a44 <USART2_IRQHandler+0x280>)
 80018f4:	7bdb      	ldrb	r3, [r3, #15]
 80018f6:	2b5d      	cmp	r3, #93	; 0x5d
 80018f8:	d157      	bne.n	80019aa <USART2_IRQHandler+0x1e6>
		{
			int n;
			if ( buffer[14] == '0' )
 80018fa:	4b52      	ldr	r3, [pc, #328]	; (8001a44 <USART2_IRQHandler+0x280>)
 80018fc:	7b9b      	ldrb	r3, [r3, #14]
 80018fe:	2b30      	cmp	r3, #48	; 0x30
 8001900:	d102      	bne.n	8001908 <USART2_IRQHandler+0x144>
			{
				n = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	637b      	str	r3, [r7, #52]	; 0x34
 8001906:	e040      	b.n	800198a <USART2_IRQHandler+0x1c6>
			} else if ( buffer[14] == '1' ) {
 8001908:	4b4e      	ldr	r3, [pc, #312]	; (8001a44 <USART2_IRQHandler+0x280>)
 800190a:	7b9b      	ldrb	r3, [r3, #14]
 800190c:	2b31      	cmp	r3, #49	; 0x31
 800190e:	d102      	bne.n	8001916 <USART2_IRQHandler+0x152>
				n = 1;
 8001910:	2301      	movs	r3, #1
 8001912:	637b      	str	r3, [r7, #52]	; 0x34
 8001914:	e039      	b.n	800198a <USART2_IRQHandler+0x1c6>
			} else if ( buffer[14] == '2' ) {
 8001916:	4b4b      	ldr	r3, [pc, #300]	; (8001a44 <USART2_IRQHandler+0x280>)
 8001918:	7b9b      	ldrb	r3, [r3, #14]
 800191a:	2b32      	cmp	r3, #50	; 0x32
 800191c:	d102      	bne.n	8001924 <USART2_IRQHandler+0x160>
				n = 2;
 800191e:	2302      	movs	r3, #2
 8001920:	637b      	str	r3, [r7, #52]	; 0x34
 8001922:	e032      	b.n	800198a <USART2_IRQHandler+0x1c6>
			} else if ( buffer[14] == '3' ) {
 8001924:	4b47      	ldr	r3, [pc, #284]	; (8001a44 <USART2_IRQHandler+0x280>)
 8001926:	7b9b      	ldrb	r3, [r3, #14]
 8001928:	2b33      	cmp	r3, #51	; 0x33
 800192a:	d102      	bne.n	8001932 <USART2_IRQHandler+0x16e>
				n = 3;
 800192c:	2303      	movs	r3, #3
 800192e:	637b      	str	r3, [r7, #52]	; 0x34
 8001930:	e02b      	b.n	800198a <USART2_IRQHandler+0x1c6>
			} else if ( buffer[14] == '4' ) {
 8001932:	4b44      	ldr	r3, [pc, #272]	; (8001a44 <USART2_IRQHandler+0x280>)
 8001934:	7b9b      	ldrb	r3, [r3, #14]
 8001936:	2b34      	cmp	r3, #52	; 0x34
 8001938:	d102      	bne.n	8001940 <USART2_IRQHandler+0x17c>
				n = 4;
 800193a:	2304      	movs	r3, #4
 800193c:	637b      	str	r3, [r7, #52]	; 0x34
 800193e:	e024      	b.n	800198a <USART2_IRQHandler+0x1c6>
			} else if ( buffer[14] == '5' ) {
 8001940:	4b40      	ldr	r3, [pc, #256]	; (8001a44 <USART2_IRQHandler+0x280>)
 8001942:	7b9b      	ldrb	r3, [r3, #14]
 8001944:	2b35      	cmp	r3, #53	; 0x35
 8001946:	d102      	bne.n	800194e <USART2_IRQHandler+0x18a>
				n = 5;
 8001948:	2305      	movs	r3, #5
 800194a:	637b      	str	r3, [r7, #52]	; 0x34
 800194c:	e01d      	b.n	800198a <USART2_IRQHandler+0x1c6>
			} else if ( buffer[14] == '6' ) {
 800194e:	4b3d      	ldr	r3, [pc, #244]	; (8001a44 <USART2_IRQHandler+0x280>)
 8001950:	7b9b      	ldrb	r3, [r3, #14]
 8001952:	2b36      	cmp	r3, #54	; 0x36
 8001954:	d102      	bne.n	800195c <USART2_IRQHandler+0x198>
				n = 6;
 8001956:	2306      	movs	r3, #6
 8001958:	637b      	str	r3, [r7, #52]	; 0x34
 800195a:	e016      	b.n	800198a <USART2_IRQHandler+0x1c6>
			} else if ( buffer[14] == '7' ) {
 800195c:	4b39      	ldr	r3, [pc, #228]	; (8001a44 <USART2_IRQHandler+0x280>)
 800195e:	7b9b      	ldrb	r3, [r3, #14]
 8001960:	2b37      	cmp	r3, #55	; 0x37
 8001962:	d102      	bne.n	800196a <USART2_IRQHandler+0x1a6>
				n = 7;
 8001964:	2307      	movs	r3, #7
 8001966:	637b      	str	r3, [r7, #52]	; 0x34
 8001968:	e00f      	b.n	800198a <USART2_IRQHandler+0x1c6>
			} else if ( buffer[14] == '8' ) {
 800196a:	4b36      	ldr	r3, [pc, #216]	; (8001a44 <USART2_IRQHandler+0x280>)
 800196c:	7b9b      	ldrb	r3, [r3, #14]
 800196e:	2b38      	cmp	r3, #56	; 0x38
 8001970:	d102      	bne.n	8001978 <USART2_IRQHandler+0x1b4>
				n = 8;
 8001972:	2308      	movs	r3, #8
 8001974:	637b      	str	r3, [r7, #52]	; 0x34
 8001976:	e008      	b.n	800198a <USART2_IRQHandler+0x1c6>
			} else if ( buffer[14] == '9' ) {
 8001978:	4b32      	ldr	r3, [pc, #200]	; (8001a44 <USART2_IRQHandler+0x280>)
 800197a:	7b9b      	ldrb	r3, [r3, #14]
 800197c:	2b39      	cmp	r3, #57	; 0x39
 800197e:	d102      	bne.n	8001986 <USART2_IRQHandler+0x1c2>
				n = 9;
 8001980:	2309      	movs	r3, #9
 8001982:	637b      	str	r3, [r7, #52]	; 0x34
 8001984:	e001      	b.n	800198a <USART2_IRQHandler+0x1c6>
			} else {
				n = 9;
 8001986:	2309      	movs	r3, #9
 8001988:	637b      	str	r3, [r7, #52]	; 0x34
			}

			set_max_level(n);
 800198a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800198c:	f7ff fd68 	bl	8001460 <set_max_level>
			HAL_UART_Transmit(&huart2, correct3, sizeof(unsigned char) * 36, 100);
 8001990:	2364      	movs	r3, #100	; 0x64
 8001992:	2224      	movs	r2, #36	; 0x24
 8001994:	4931      	ldr	r1, [pc, #196]	; (8001a5c <USART2_IRQHandler+0x298>)
 8001996:	4828      	ldr	r0, [pc, #160]	; (8001a38 <USART2_IRQHandler+0x274>)
 8001998:	f005 fd8c 	bl	80074b4 <HAL_UART_Transmit>
			removeAll();
 800199c:	f7ff fd16 	bl	80013cc <removeAll>
			adminReq = 1;
 80019a0:	4b2b      	ldr	r3, [pc, #172]	; (8001a50 <USART2_IRQHandler+0x28c>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	601a      	str	r2, [r3, #0]
		{
 80019a6:	f002 b810 	b.w	80039ca <USART2_IRQHandler+0x2206>

		} else if ( adminIn == 1  && buffer[0] == 'S' && buffer[1] == 'E' && buffer[2] == 'T' && buffer[3] == ' ' && buffer[4] == 'L'
 80019aa:	4b28      	ldr	r3, [pc, #160]	; (8001a4c <USART2_IRQHandler+0x288>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	f040 80ac 	bne.w	8001b0c <USART2_IRQHandler+0x348>
 80019b4:	4b23      	ldr	r3, [pc, #140]	; (8001a44 <USART2_IRQHandler+0x280>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b53      	cmp	r3, #83	; 0x53
 80019ba:	f040 80a7 	bne.w	8001b0c <USART2_IRQHandler+0x348>
 80019be:	4b21      	ldr	r3, [pc, #132]	; (8001a44 <USART2_IRQHandler+0x280>)
 80019c0:	785b      	ldrb	r3, [r3, #1]
 80019c2:	2b45      	cmp	r3, #69	; 0x45
 80019c4:	f040 80a2 	bne.w	8001b0c <USART2_IRQHandler+0x348>
 80019c8:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <USART2_IRQHandler+0x280>)
 80019ca:	789b      	ldrb	r3, [r3, #2]
 80019cc:	2b54      	cmp	r3, #84	; 0x54
 80019ce:	f040 809d 	bne.w	8001b0c <USART2_IRQHandler+0x348>
 80019d2:	4b1c      	ldr	r3, [pc, #112]	; (8001a44 <USART2_IRQHandler+0x280>)
 80019d4:	78db      	ldrb	r3, [r3, #3]
 80019d6:	2b20      	cmp	r3, #32
 80019d8:	f040 8098 	bne.w	8001b0c <USART2_IRQHandler+0x348>
 80019dc:	4b19      	ldr	r3, [pc, #100]	; (8001a44 <USART2_IRQHandler+0x280>)
 80019de:	791b      	ldrb	r3, [r3, #4]
 80019e0:	2b4c      	cmp	r3, #76	; 0x4c
 80019e2:	f040 8093 	bne.w	8001b0c <USART2_IRQHandler+0x348>
				&& buffer[5] == 'E' && buffer[6] == 'V' && buffer[7] == 'E' && buffer[8] == 'L' && buffer[9] == '[' && buffer[11] == ']') {
 80019e6:	4b17      	ldr	r3, [pc, #92]	; (8001a44 <USART2_IRQHandler+0x280>)
 80019e8:	795b      	ldrb	r3, [r3, #5]
 80019ea:	2b45      	cmp	r3, #69	; 0x45
 80019ec:	f040 808e 	bne.w	8001b0c <USART2_IRQHandler+0x348>
 80019f0:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <USART2_IRQHandler+0x280>)
 80019f2:	799b      	ldrb	r3, [r3, #6]
 80019f4:	2b56      	cmp	r3, #86	; 0x56
 80019f6:	f040 8089 	bne.w	8001b0c <USART2_IRQHandler+0x348>
 80019fa:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <USART2_IRQHandler+0x280>)
 80019fc:	79db      	ldrb	r3, [r3, #7]
 80019fe:	2b45      	cmp	r3, #69	; 0x45
 8001a00:	f040 8084 	bne.w	8001b0c <USART2_IRQHandler+0x348>
 8001a04:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <USART2_IRQHandler+0x280>)
 8001a06:	7a1b      	ldrb	r3, [r3, #8]
 8001a08:	2b4c      	cmp	r3, #76	; 0x4c
 8001a0a:	d17f      	bne.n	8001b0c <USART2_IRQHandler+0x348>
 8001a0c:	4b0d      	ldr	r3, [pc, #52]	; (8001a44 <USART2_IRQHandler+0x280>)
 8001a0e:	7a5b      	ldrb	r3, [r3, #9]
 8001a10:	2b5b      	cmp	r3, #91	; 0x5b
 8001a12:	d17b      	bne.n	8001b0c <USART2_IRQHandler+0x348>
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <USART2_IRQHandler+0x280>)
 8001a16:	7adb      	ldrb	r3, [r3, #11]
 8001a18:	2b5d      	cmp	r3, #93	; 0x5d
 8001a1a:	d177      	bne.n	8001b0c <USART2_IRQHandler+0x348>

			int n;
			if ( buffer[10] == '0' )
 8001a1c:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <USART2_IRQHandler+0x280>)
 8001a1e:	7a9b      	ldrb	r3, [r3, #10]
 8001a20:	2b30      	cmp	r3, #48	; 0x30
 8001a22:	d102      	bne.n	8001a2a <USART2_IRQHandler+0x266>
			{
				n = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	633b      	str	r3, [r7, #48]	; 0x30
 8001a28:	e054      	b.n	8001ad4 <USART2_IRQHandler+0x310>
			} else if ( buffer[10] == '1' ) {
 8001a2a:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <USART2_IRQHandler+0x280>)
 8001a2c:	7a9b      	ldrb	r3, [r3, #10]
 8001a2e:	2b31      	cmp	r3, #49	; 0x31
 8001a30:	d116      	bne.n	8001a60 <USART2_IRQHandler+0x29c>
				n = 1;
 8001a32:	2301      	movs	r3, #1
 8001a34:	633b      	str	r3, [r7, #48]	; 0x30
 8001a36:	e04d      	b.n	8001ad4 <USART2_IRQHandler+0x310>
 8001a38:	2000053c 	.word	0x2000053c
 8001a3c:	200004d4 	.word	0x200004d4
 8001a40:	2000038c 	.word	0x2000038c
 8001a44:	2000030c 	.word	0x2000030c
 8001a48:	20000030 	.word	0x20000030
 8001a4c:	20000390 	.word	0x20000390
 8001a50:	20000394 	.word	0x20000394
 8001a54:	20000018 	.word	0x20000018
 8001a58:	20000000 	.word	0x20000000
 8001a5c:	2000027c 	.word	0x2000027c
			} else if ( buffer[10] == '2' ) {
 8001a60:	4ba2      	ldr	r3, [pc, #648]	; (8001cec <USART2_IRQHandler+0x528>)
 8001a62:	7a9b      	ldrb	r3, [r3, #10]
 8001a64:	2b32      	cmp	r3, #50	; 0x32
 8001a66:	d102      	bne.n	8001a6e <USART2_IRQHandler+0x2aa>
				n = 2;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	633b      	str	r3, [r7, #48]	; 0x30
 8001a6c:	e032      	b.n	8001ad4 <USART2_IRQHandler+0x310>
			} else if ( buffer[10] == '3' ) {
 8001a6e:	4b9f      	ldr	r3, [pc, #636]	; (8001cec <USART2_IRQHandler+0x528>)
 8001a70:	7a9b      	ldrb	r3, [r3, #10]
 8001a72:	2b33      	cmp	r3, #51	; 0x33
 8001a74:	d102      	bne.n	8001a7c <USART2_IRQHandler+0x2b8>
				n = 3;
 8001a76:	2303      	movs	r3, #3
 8001a78:	633b      	str	r3, [r7, #48]	; 0x30
 8001a7a:	e02b      	b.n	8001ad4 <USART2_IRQHandler+0x310>
			} else if ( buffer[10] == '4' ) {
 8001a7c:	4b9b      	ldr	r3, [pc, #620]	; (8001cec <USART2_IRQHandler+0x528>)
 8001a7e:	7a9b      	ldrb	r3, [r3, #10]
 8001a80:	2b34      	cmp	r3, #52	; 0x34
 8001a82:	d102      	bne.n	8001a8a <USART2_IRQHandler+0x2c6>
				n = 4;
 8001a84:	2304      	movs	r3, #4
 8001a86:	633b      	str	r3, [r7, #48]	; 0x30
 8001a88:	e024      	b.n	8001ad4 <USART2_IRQHandler+0x310>
			} else if ( buffer[10] == '5' ) {
 8001a8a:	4b98      	ldr	r3, [pc, #608]	; (8001cec <USART2_IRQHandler+0x528>)
 8001a8c:	7a9b      	ldrb	r3, [r3, #10]
 8001a8e:	2b35      	cmp	r3, #53	; 0x35
 8001a90:	d102      	bne.n	8001a98 <USART2_IRQHandler+0x2d4>
				n = 5;
 8001a92:	2305      	movs	r3, #5
 8001a94:	633b      	str	r3, [r7, #48]	; 0x30
 8001a96:	e01d      	b.n	8001ad4 <USART2_IRQHandler+0x310>
			} else if ( buffer[10] == '6' ) {
 8001a98:	4b94      	ldr	r3, [pc, #592]	; (8001cec <USART2_IRQHandler+0x528>)
 8001a9a:	7a9b      	ldrb	r3, [r3, #10]
 8001a9c:	2b36      	cmp	r3, #54	; 0x36
 8001a9e:	d102      	bne.n	8001aa6 <USART2_IRQHandler+0x2e2>
				n = 6;
 8001aa0:	2306      	movs	r3, #6
 8001aa2:	633b      	str	r3, [r7, #48]	; 0x30
 8001aa4:	e016      	b.n	8001ad4 <USART2_IRQHandler+0x310>
			} else if ( buffer[10] == '7' ) {
 8001aa6:	4b91      	ldr	r3, [pc, #580]	; (8001cec <USART2_IRQHandler+0x528>)
 8001aa8:	7a9b      	ldrb	r3, [r3, #10]
 8001aaa:	2b37      	cmp	r3, #55	; 0x37
 8001aac:	d102      	bne.n	8001ab4 <USART2_IRQHandler+0x2f0>
				n = 7;
 8001aae:	2307      	movs	r3, #7
 8001ab0:	633b      	str	r3, [r7, #48]	; 0x30
 8001ab2:	e00f      	b.n	8001ad4 <USART2_IRQHandler+0x310>
			} else if ( buffer[10] == '8' ) {
 8001ab4:	4b8d      	ldr	r3, [pc, #564]	; (8001cec <USART2_IRQHandler+0x528>)
 8001ab6:	7a9b      	ldrb	r3, [r3, #10]
 8001ab8:	2b38      	cmp	r3, #56	; 0x38
 8001aba:	d102      	bne.n	8001ac2 <USART2_IRQHandler+0x2fe>
				n = 8;
 8001abc:	2308      	movs	r3, #8
 8001abe:	633b      	str	r3, [r7, #48]	; 0x30
 8001ac0:	e008      	b.n	8001ad4 <USART2_IRQHandler+0x310>
			} else if ( buffer[10] == '9' ) {
 8001ac2:	4b8a      	ldr	r3, [pc, #552]	; (8001cec <USART2_IRQHandler+0x528>)
 8001ac4:	7a9b      	ldrb	r3, [r3, #10]
 8001ac6:	2b39      	cmp	r3, #57	; 0x39
 8001ac8:	d102      	bne.n	8001ad0 <USART2_IRQHandler+0x30c>
				n = 9;
 8001aca:	2309      	movs	r3, #9
 8001acc:	633b      	str	r3, [r7, #48]	; 0x30
 8001ace:	e001      	b.n	8001ad4 <USART2_IRQHandler+0x310>
			} else {
				n = 9;
 8001ad0:	2309      	movs	r3, #9
 8001ad2:	633b      	str	r3, [r7, #48]	; 0x30
			}
			if ( n <= sizeFloor ) {
 8001ad4:	4b86      	ldr	r3, [pc, #536]	; (8001cf0 <USART2_IRQHandler+0x52c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ada:	429a      	cmp	r2, r3
 8001adc:	dc0b      	bgt.n	8001af6 <USART2_IRQHandler+0x332>
				set_level(n);
 8001ade:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ae0:	f7ff fcd8 	bl	8001494 <set_level>
				HAL_UART_Transmit(&huart2, correct2, sizeof(unsigned char) * 43, 100);
 8001ae4:	2364      	movs	r3, #100	; 0x64
 8001ae6:	222b      	movs	r2, #43	; 0x2b
 8001ae8:	4982      	ldr	r1, [pc, #520]	; (8001cf4 <USART2_IRQHandler+0x530>)
 8001aea:	4883      	ldr	r0, [pc, #524]	; (8001cf8 <USART2_IRQHandler+0x534>)
 8001aec:	f005 fce2 	bl	80074b4 <HAL_UART_Transmit>
				removeAll();
 8001af0:	f7ff fc6c 	bl	80013cc <removeAll>
 8001af4:	e005      	b.n	8001b02 <USART2_IRQHandler+0x33e>
			} else {
				HAL_UART_Transmit(&huart2, error2, sizeof(unsigned char) * 59, 100);
 8001af6:	2364      	movs	r3, #100	; 0x64
 8001af8:	223b      	movs	r2, #59	; 0x3b
 8001afa:	4980      	ldr	r1, [pc, #512]	; (8001cfc <USART2_IRQHandler+0x538>)
 8001afc:	487e      	ldr	r0, [pc, #504]	; (8001cf8 <USART2_IRQHandler+0x534>)
 8001afe:	f005 fcd9 	bl	80074b4 <HAL_UART_Transmit>
			}
			adminReq = 1;
 8001b02:	4b7f      	ldr	r3, [pc, #508]	; (8001d00 <USART2_IRQHandler+0x53c>)
 8001b04:	2201      	movs	r2, #1
 8001b06:	601a      	str	r2, [r3, #0]
				&& buffer[5] == 'E' && buffer[6] == 'V' && buffer[7] == 'E' && buffer[8] == 'L' && buffer[9] == '[' && buffer[11] == ']') {
 8001b08:	f001 bf5f 	b.w	80039ca <USART2_IRQHandler+0x2206>

		} else if ( adminIn == 1 && buffer[0] == 'S' && buffer[1] == 'E' && buffer[2] == 'T' && buffer[3] == ' ' && buffer[4] == 'W'
 8001b0c:	4b7d      	ldr	r3, [pc, #500]	; (8001d04 <USART2_IRQHandler+0x540>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	f041 84f9 	bne.w	8003508 <USART2_IRQHandler+0x1d44>
 8001b16:	4b75      	ldr	r3, [pc, #468]	; (8001cec <USART2_IRQHandler+0x528>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b53      	cmp	r3, #83	; 0x53
 8001b1c:	f041 84f4 	bne.w	8003508 <USART2_IRQHandler+0x1d44>
 8001b20:	4b72      	ldr	r3, [pc, #456]	; (8001cec <USART2_IRQHandler+0x528>)
 8001b22:	785b      	ldrb	r3, [r3, #1]
 8001b24:	2b45      	cmp	r3, #69	; 0x45
 8001b26:	f041 84ef 	bne.w	8003508 <USART2_IRQHandler+0x1d44>
 8001b2a:	4b70      	ldr	r3, [pc, #448]	; (8001cec <USART2_IRQHandler+0x528>)
 8001b2c:	789b      	ldrb	r3, [r3, #2]
 8001b2e:	2b54      	cmp	r3, #84	; 0x54
 8001b30:	f041 84ea 	bne.w	8003508 <USART2_IRQHandler+0x1d44>
 8001b34:	4b6d      	ldr	r3, [pc, #436]	; (8001cec <USART2_IRQHandler+0x528>)
 8001b36:	78db      	ldrb	r3, [r3, #3]
 8001b38:	2b20      	cmp	r3, #32
 8001b3a:	f041 84e5 	bne.w	8003508 <USART2_IRQHandler+0x1d44>
 8001b3e:	4b6b      	ldr	r3, [pc, #428]	; (8001cec <USART2_IRQHandler+0x528>)
 8001b40:	791b      	ldrb	r3, [r3, #4]
 8001b42:	2b57      	cmp	r3, #87	; 0x57
 8001b44:	f041 84e0 	bne.w	8003508 <USART2_IRQHandler+0x1d44>
				&& buffer[5] == 'A' && buffer[6] == 'I' && buffer[7] == 'T' && buffer[8] == '[') {
 8001b48:	4b68      	ldr	r3, [pc, #416]	; (8001cec <USART2_IRQHandler+0x528>)
 8001b4a:	795b      	ldrb	r3, [r3, #5]
 8001b4c:	2b41      	cmp	r3, #65	; 0x41
 8001b4e:	f041 84db 	bne.w	8003508 <USART2_IRQHandler+0x1d44>
 8001b52:	4b66      	ldr	r3, [pc, #408]	; (8001cec <USART2_IRQHandler+0x528>)
 8001b54:	799b      	ldrb	r3, [r3, #6]
 8001b56:	2b49      	cmp	r3, #73	; 0x49
 8001b58:	f041 84d6 	bne.w	8003508 <USART2_IRQHandler+0x1d44>
 8001b5c:	4b63      	ldr	r3, [pc, #396]	; (8001cec <USART2_IRQHandler+0x528>)
 8001b5e:	79db      	ldrb	r3, [r3, #7]
 8001b60:	2b54      	cmp	r3, #84	; 0x54
 8001b62:	f041 84d1 	bne.w	8003508 <USART2_IRQHandler+0x1d44>
 8001b66:	4b61      	ldr	r3, [pc, #388]	; (8001cec <USART2_IRQHandler+0x528>)
 8001b68:	7a1b      	ldrb	r3, [r3, #8]
 8001b6a:	2b5b      	cmp	r3, #91	; 0x5b
 8001b6c:	f041 84cc 	bne.w	8003508 <USART2_IRQHandler+0x1d44>

			int n;
			if ( buffer[9] == '0' )
 8001b70:	4b5e      	ldr	r3, [pc, #376]	; (8001cec <USART2_IRQHandler+0x528>)
 8001b72:	7a5b      	ldrb	r3, [r3, #9]
 8001b74:	2b30      	cmp	r3, #48	; 0x30
 8001b76:	d103      	bne.n	8001b80 <USART2_IRQHandler+0x3bc>
			{
				n = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b7c:	f001 bc8b 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
			} else if ( buffer[9] == '1' ) {
 8001b80:	4b5a      	ldr	r3, [pc, #360]	; (8001cec <USART2_IRQHandler+0x528>)
 8001b82:	7a5b      	ldrb	r3, [r3, #9]
 8001b84:	2b31      	cmp	r3, #49	; 0x31
 8001b86:	f040 816f 	bne.w	8001e68 <USART2_IRQHandler+0x6a4>
				n = 1;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
				if ( buffer[10] == '0' )
 8001b8e:	4b57      	ldr	r3, [pc, #348]	; (8001cec <USART2_IRQHandler+0x528>)
 8001b90:	7a9b      	ldrb	r3, [r3, #10]
 8001b92:	2b30      	cmp	r3, #48	; 0x30
 8001b94:	d11d      	bne.n	8001bd2 <USART2_IRQHandler+0x40e>
				{
					n = n*10;
 8001b96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b98:	4613      	mov	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8001ba2:	4b52      	ldr	r3, [pc, #328]	; (8001cec <USART2_IRQHandler+0x528>)
 8001ba4:	7adb      	ldrb	r3, [r3, #11]
 8001ba6:	2b30      	cmp	r3, #48	; 0x30
 8001ba8:	f041 8475 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8001bac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bae:	4613      	mov	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4413      	add	r3, r2
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8001bb8:	4b4c      	ldr	r3, [pc, #304]	; (8001cec <USART2_IRQHandler+0x528>)
 8001bba:	7b1b      	ldrb	r3, [r3, #12]
 8001bbc:	2b30      	cmp	r3, #48	; 0x30
 8001bbe:	f041 846a 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8001bc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bce:	f001 bc62 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '1' ) {
 8001bd2:	4b46      	ldr	r3, [pc, #280]	; (8001cec <USART2_IRQHandler+0x528>)
 8001bd4:	7a9b      	ldrb	r3, [r3, #10]
 8001bd6:	2b31      	cmp	r3, #49	; 0x31
 8001bd8:	d11e      	bne.n	8001c18 <USART2_IRQHandler+0x454>
					n = n*10 + 1;
 8001bda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bdc:	4613      	mov	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	3301      	adds	r3, #1
 8001be6:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8001be8:	4b40      	ldr	r3, [pc, #256]	; (8001cec <USART2_IRQHandler+0x528>)
 8001bea:	7adb      	ldrb	r3, [r3, #11]
 8001bec:	2b30      	cmp	r3, #48	; 0x30
 8001bee:	f041 8452 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8001bf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8001bfe:	4b3b      	ldr	r3, [pc, #236]	; (8001cec <USART2_IRQHandler+0x528>)
 8001c00:	7b1b      	ldrb	r3, [r3, #12]
 8001c02:	2b30      	cmp	r3, #48	; 0x30
 8001c04:	f041 8447 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8001c08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4413      	add	r3, r2
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c14:	f001 bc3f 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '2' ) {
 8001c18:	4b34      	ldr	r3, [pc, #208]	; (8001cec <USART2_IRQHandler+0x528>)
 8001c1a:	7a9b      	ldrb	r3, [r3, #10]
 8001c1c:	2b32      	cmp	r3, #50	; 0x32
 8001c1e:	d11e      	bne.n	8001c5e <USART2_IRQHandler+0x49a>
					n = n*10 + 2;
 8001c20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c22:	4613      	mov	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	3302      	adds	r3, #2
 8001c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8001c2e:	4b2f      	ldr	r3, [pc, #188]	; (8001cec <USART2_IRQHandler+0x528>)
 8001c30:	7adb      	ldrb	r3, [r3, #11]
 8001c32:	2b30      	cmp	r3, #48	; 0x30
 8001c34:	f041 842f 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8001c38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8001c44:	4b29      	ldr	r3, [pc, #164]	; (8001cec <USART2_IRQHandler+0x528>)
 8001c46:	7b1b      	ldrb	r3, [r3, #12]
 8001c48:	2b30      	cmp	r3, #48	; 0x30
 8001c4a:	f041 8424 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8001c4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c50:	4613      	mov	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c5a:	f001 bc1c 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '3' ) {
 8001c5e:	4b23      	ldr	r3, [pc, #140]	; (8001cec <USART2_IRQHandler+0x528>)
 8001c60:	7a9b      	ldrb	r3, [r3, #10]
 8001c62:	2b33      	cmp	r3, #51	; 0x33
 8001c64:	d11e      	bne.n	8001ca4 <USART2_IRQHandler+0x4e0>
					n = n*10 + 3;
 8001c66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c68:	4613      	mov	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	3303      	adds	r3, #3
 8001c72:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8001c74:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <USART2_IRQHandler+0x528>)
 8001c76:	7adb      	ldrb	r3, [r3, #11]
 8001c78:	2b30      	cmp	r3, #48	; 0x30
 8001c7a:	f041 840c 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8001c7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c80:	4613      	mov	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8001c8a:	4b18      	ldr	r3, [pc, #96]	; (8001cec <USART2_IRQHandler+0x528>)
 8001c8c:	7b1b      	ldrb	r3, [r3, #12]
 8001c8e:	2b30      	cmp	r3, #48	; 0x30
 8001c90:	f041 8401 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8001c94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c96:	4613      	mov	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ca0:	f001 bbf9 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '4' ) {
 8001ca4:	4b11      	ldr	r3, [pc, #68]	; (8001cec <USART2_IRQHandler+0x528>)
 8001ca6:	7a9b      	ldrb	r3, [r3, #10]
 8001ca8:	2b34      	cmp	r3, #52	; 0x34
 8001caa:	d12d      	bne.n	8001d08 <USART2_IRQHandler+0x544>
					n = n*10 + 4;
 8001cac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cae:	4613      	mov	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	3304      	adds	r3, #4
 8001cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8001cba:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <USART2_IRQHandler+0x528>)
 8001cbc:	7adb      	ldrb	r3, [r3, #11]
 8001cbe:	2b30      	cmp	r3, #48	; 0x30
 8001cc0:	f041 83e9 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8001cc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8001cd0:	4b06      	ldr	r3, [pc, #24]	; (8001cec <USART2_IRQHandler+0x528>)
 8001cd2:	7b1b      	ldrb	r3, [r3, #12]
 8001cd4:	2b30      	cmp	r3, #48	; 0x30
 8001cd6:	f041 83de 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8001cda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cdc:	4613      	mov	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ce6:	f001 bbd6 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
 8001cea:	bf00      	nop
 8001cec:	2000030c 	.word	0x2000030c
 8001cf0:	200002c8 	.word	0x200002c8
 8001cf4:	20000250 	.word	0x20000250
 8001cf8:	2000053c 	.word	0x2000053c
 8001cfc:	200000a4 	.word	0x200000a4
 8001d00:	20000394 	.word	0x20000394
 8001d04:	20000390 	.word	0x20000390
						}
					}
				} else if ( buffer[10] == '5' ) {
 8001d08:	4bb2      	ldr	r3, [pc, #712]	; (8001fd4 <USART2_IRQHandler+0x810>)
 8001d0a:	7a9b      	ldrb	r3, [r3, #10]
 8001d0c:	2b35      	cmp	r3, #53	; 0x35
 8001d0e:	d11e      	bne.n	8001d4e <USART2_IRQHandler+0x58a>
					n = n*10 + 5;
 8001d10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d12:	4613      	mov	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	3305      	adds	r3, #5
 8001d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8001d1e:	4bad      	ldr	r3, [pc, #692]	; (8001fd4 <USART2_IRQHandler+0x810>)
 8001d20:	7adb      	ldrb	r3, [r3, #11]
 8001d22:	2b30      	cmp	r3, #48	; 0x30
 8001d24:	f041 83b7 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8001d28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8001d34:	4ba7      	ldr	r3, [pc, #668]	; (8001fd4 <USART2_IRQHandler+0x810>)
 8001d36:	7b1b      	ldrb	r3, [r3, #12]
 8001d38:	2b30      	cmp	r3, #48	; 0x30
 8001d3a:	f041 83ac 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8001d3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d4a:	f001 bba4 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '6' ) {
 8001d4e:	4ba1      	ldr	r3, [pc, #644]	; (8001fd4 <USART2_IRQHandler+0x810>)
 8001d50:	7a9b      	ldrb	r3, [r3, #10]
 8001d52:	2b36      	cmp	r3, #54	; 0x36
 8001d54:	d11e      	bne.n	8001d94 <USART2_IRQHandler+0x5d0>
					n = n*10 + 6;
 8001d56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d58:	4613      	mov	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	3306      	adds	r3, #6
 8001d62:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8001d64:	4b9b      	ldr	r3, [pc, #620]	; (8001fd4 <USART2_IRQHandler+0x810>)
 8001d66:	7adb      	ldrb	r3, [r3, #11]
 8001d68:	2b30      	cmp	r3, #48	; 0x30
 8001d6a:	f041 8394 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8001d6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d70:	4613      	mov	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8001d7a:	4b96      	ldr	r3, [pc, #600]	; (8001fd4 <USART2_IRQHandler+0x810>)
 8001d7c:	7b1b      	ldrb	r3, [r3, #12]
 8001d7e:	2b30      	cmp	r3, #48	; 0x30
 8001d80:	f041 8389 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8001d84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d86:	4613      	mov	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4413      	add	r3, r2
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d90:	f001 bb81 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '7' ) {
 8001d94:	4b8f      	ldr	r3, [pc, #572]	; (8001fd4 <USART2_IRQHandler+0x810>)
 8001d96:	7a9b      	ldrb	r3, [r3, #10]
 8001d98:	2b37      	cmp	r3, #55	; 0x37
 8001d9a:	d11e      	bne.n	8001dda <USART2_IRQHandler+0x616>
					n = n*10 + 7;
 8001d9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d9e:	4613      	mov	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	3307      	adds	r3, #7
 8001da8:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8001daa:	4b8a      	ldr	r3, [pc, #552]	; (8001fd4 <USART2_IRQHandler+0x810>)
 8001dac:	7adb      	ldrb	r3, [r3, #11]
 8001dae:	2b30      	cmp	r3, #48	; 0x30
 8001db0:	f041 8371 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8001db4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001db6:	4613      	mov	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	4413      	add	r3, r2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8001dc0:	4b84      	ldr	r3, [pc, #528]	; (8001fd4 <USART2_IRQHandler+0x810>)
 8001dc2:	7b1b      	ldrb	r3, [r3, #12]
 8001dc4:	2b30      	cmp	r3, #48	; 0x30
 8001dc6:	f041 8366 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8001dca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dcc:	4613      	mov	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dd6:	f001 bb5e 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '8' ) {
 8001dda:	4b7e      	ldr	r3, [pc, #504]	; (8001fd4 <USART2_IRQHandler+0x810>)
 8001ddc:	7a9b      	ldrb	r3, [r3, #10]
 8001dde:	2b38      	cmp	r3, #56	; 0x38
 8001de0:	d11e      	bne.n	8001e20 <USART2_IRQHandler+0x65c>
					n = n*10 + 8;
 8001de2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001de4:	4613      	mov	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4413      	add	r3, r2
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	3308      	adds	r3, #8
 8001dee:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8001df0:	4b78      	ldr	r3, [pc, #480]	; (8001fd4 <USART2_IRQHandler+0x810>)
 8001df2:	7adb      	ldrb	r3, [r3, #11]
 8001df4:	2b30      	cmp	r3, #48	; 0x30
 8001df6:	f041 834e 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8001dfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8001e06:	4b73      	ldr	r3, [pc, #460]	; (8001fd4 <USART2_IRQHandler+0x810>)
 8001e08:	7b1b      	ldrb	r3, [r3, #12]
 8001e0a:	2b30      	cmp	r3, #48	; 0x30
 8001e0c:	f041 8343 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8001e10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e12:	4613      	mov	r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4413      	add	r3, r2
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e1c:	f001 bb3b 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '9' ) {
 8001e20:	4b6c      	ldr	r3, [pc, #432]	; (8001fd4 <USART2_IRQHandler+0x810>)
 8001e22:	7a9b      	ldrb	r3, [r3, #10]
 8001e24:	2b39      	cmp	r3, #57	; 0x39
 8001e26:	f041 8336 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
					n = n*10 + 9;
 8001e2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	3309      	adds	r3, #9
 8001e36:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8001e38:	4b66      	ldr	r3, [pc, #408]	; (8001fd4 <USART2_IRQHandler+0x810>)
 8001e3a:	7adb      	ldrb	r3, [r3, #11]
 8001e3c:	2b30      	cmp	r3, #48	; 0x30
 8001e3e:	f041 832a 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8001e42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e44:	4613      	mov	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8001e4e:	4b61      	ldr	r3, [pc, #388]	; (8001fd4 <USART2_IRQHandler+0x810>)
 8001e50:	7b1b      	ldrb	r3, [r3, #12]
 8001e52:	2b30      	cmp	r3, #48	; 0x30
 8001e54:	f041 831f 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8001e58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e64:	f001 bb17 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				}
			} else if ( buffer[9] == '2' ) {
 8001e68:	4b5a      	ldr	r3, [pc, #360]	; (8001fd4 <USART2_IRQHandler+0x810>)
 8001e6a:	7a5b      	ldrb	r3, [r3, #9]
 8001e6c:	2b32      	cmp	r3, #50	; 0x32
 8001e6e:	f040 8163 	bne.w	8002138 <USART2_IRQHandler+0x974>
				n = 2;
 8001e72:	2302      	movs	r3, #2
 8001e74:	62fb      	str	r3, [r7, #44]	; 0x2c
				if ( buffer[10] == '0' )
 8001e76:	4b57      	ldr	r3, [pc, #348]	; (8001fd4 <USART2_IRQHandler+0x810>)
 8001e78:	7a9b      	ldrb	r3, [r3, #10]
 8001e7a:	2b30      	cmp	r3, #48	; 0x30
 8001e7c:	d11d      	bne.n	8001eba <USART2_IRQHandler+0x6f6>
				{
					n = n*10;
 8001e7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e80:	4613      	mov	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	4413      	add	r3, r2
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8001e8a:	4b52      	ldr	r3, [pc, #328]	; (8001fd4 <USART2_IRQHandler+0x810>)
 8001e8c:	7adb      	ldrb	r3, [r3, #11]
 8001e8e:	2b30      	cmp	r3, #48	; 0x30
 8001e90:	f041 8301 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8001e94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e96:	4613      	mov	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8001ea0:	4b4c      	ldr	r3, [pc, #304]	; (8001fd4 <USART2_IRQHandler+0x810>)
 8001ea2:	7b1b      	ldrb	r3, [r3, #12]
 8001ea4:	2b30      	cmp	r3, #48	; 0x30
 8001ea6:	f041 82f6 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8001eaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001eac:	4613      	mov	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eb6:	f001 baee 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '1' ) {
 8001eba:	4b46      	ldr	r3, [pc, #280]	; (8001fd4 <USART2_IRQHandler+0x810>)
 8001ebc:	7a9b      	ldrb	r3, [r3, #10]
 8001ebe:	2b31      	cmp	r3, #49	; 0x31
 8001ec0:	d11e      	bne.n	8001f00 <USART2_IRQHandler+0x73c>
					n = n*10 + 1;
 8001ec2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	3301      	adds	r3, #1
 8001ece:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8001ed0:	4b40      	ldr	r3, [pc, #256]	; (8001fd4 <USART2_IRQHandler+0x810>)
 8001ed2:	7adb      	ldrb	r3, [r3, #11]
 8001ed4:	2b30      	cmp	r3, #48	; 0x30
 8001ed6:	f041 82de 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8001eda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001edc:	4613      	mov	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4413      	add	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8001ee6:	4b3b      	ldr	r3, [pc, #236]	; (8001fd4 <USART2_IRQHandler+0x810>)
 8001ee8:	7b1b      	ldrb	r3, [r3, #12]
 8001eea:	2b30      	cmp	r3, #48	; 0x30
 8001eec:	f041 82d3 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8001ef0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001efc:	f001 bacb 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '2' ) {
 8001f00:	4b34      	ldr	r3, [pc, #208]	; (8001fd4 <USART2_IRQHandler+0x810>)
 8001f02:	7a9b      	ldrb	r3, [r3, #10]
 8001f04:	2b32      	cmp	r3, #50	; 0x32
 8001f06:	d11e      	bne.n	8001f46 <USART2_IRQHandler+0x782>
					n = n*10 + 2;
 8001f08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	3302      	adds	r3, #2
 8001f14:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8001f16:	4b2f      	ldr	r3, [pc, #188]	; (8001fd4 <USART2_IRQHandler+0x810>)
 8001f18:	7adb      	ldrb	r3, [r3, #11]
 8001f1a:	2b30      	cmp	r3, #48	; 0x30
 8001f1c:	f041 82bb 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8001f20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f22:	4613      	mov	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8001f2c:	4b29      	ldr	r3, [pc, #164]	; (8001fd4 <USART2_IRQHandler+0x810>)
 8001f2e:	7b1b      	ldrb	r3, [r3, #12]
 8001f30:	2b30      	cmp	r3, #48	; 0x30
 8001f32:	f041 82b0 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8001f36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f38:	4613      	mov	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f42:	f001 baa8 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '3' ) {
 8001f46:	4b23      	ldr	r3, [pc, #140]	; (8001fd4 <USART2_IRQHandler+0x810>)
 8001f48:	7a9b      	ldrb	r3, [r3, #10]
 8001f4a:	2b33      	cmp	r3, #51	; 0x33
 8001f4c:	d11e      	bne.n	8001f8c <USART2_IRQHandler+0x7c8>
					n = n*10 + 3;
 8001f4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	3303      	adds	r3, #3
 8001f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8001f5c:	4b1d      	ldr	r3, [pc, #116]	; (8001fd4 <USART2_IRQHandler+0x810>)
 8001f5e:	7adb      	ldrb	r3, [r3, #11]
 8001f60:	2b30      	cmp	r3, #48	; 0x30
 8001f62:	f041 8298 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8001f66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f68:	4613      	mov	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8001f72:	4b18      	ldr	r3, [pc, #96]	; (8001fd4 <USART2_IRQHandler+0x810>)
 8001f74:	7b1b      	ldrb	r3, [r3, #12]
 8001f76:	2b30      	cmp	r3, #48	; 0x30
 8001f78:	f041 828d 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8001f7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f7e:	4613      	mov	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f88:	f001 ba85 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '4' ) {
 8001f8c:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <USART2_IRQHandler+0x810>)
 8001f8e:	7a9b      	ldrb	r3, [r3, #10]
 8001f90:	2b34      	cmp	r3, #52	; 0x34
 8001f92:	d121      	bne.n	8001fd8 <USART2_IRQHandler+0x814>
					n = n*10 + 4;
 8001f94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f96:	4613      	mov	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	3304      	adds	r3, #4
 8001fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8001fa2:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <USART2_IRQHandler+0x810>)
 8001fa4:	7adb      	ldrb	r3, [r3, #11]
 8001fa6:	2b30      	cmp	r3, #48	; 0x30
 8001fa8:	f041 8275 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8001fac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fae:	4613      	mov	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8001fb8:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <USART2_IRQHandler+0x810>)
 8001fba:	7b1b      	ldrb	r3, [r3, #12]
 8001fbc:	2b30      	cmp	r3, #48	; 0x30
 8001fbe:	f041 826a 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8001fc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4413      	add	r3, r2
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fce:	f001 ba62 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
 8001fd2:	bf00      	nop
 8001fd4:	2000030c 	.word	0x2000030c
						}
					}
				} else if ( buffer[10] == '5' ) {
 8001fd8:	4bb2      	ldr	r3, [pc, #712]	; (80022a4 <USART2_IRQHandler+0xae0>)
 8001fda:	7a9b      	ldrb	r3, [r3, #10]
 8001fdc:	2b35      	cmp	r3, #53	; 0x35
 8001fde:	d11e      	bne.n	800201e <USART2_IRQHandler+0x85a>
					n = n*10 + 5;
 8001fe0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4413      	add	r3, r2
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	3305      	adds	r3, #5
 8001fec:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8001fee:	4bad      	ldr	r3, [pc, #692]	; (80022a4 <USART2_IRQHandler+0xae0>)
 8001ff0:	7adb      	ldrb	r3, [r3, #11]
 8001ff2:	2b30      	cmp	r3, #48	; 0x30
 8001ff4:	f041 824f 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8001ff8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8002004:	4ba7      	ldr	r3, [pc, #668]	; (80022a4 <USART2_IRQHandler+0xae0>)
 8002006:	7b1b      	ldrb	r3, [r3, #12]
 8002008:	2b30      	cmp	r3, #48	; 0x30
 800200a:	f041 8244 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 800200e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	62fb      	str	r3, [r7, #44]	; 0x2c
 800201a:	f001 ba3c 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '6' ) {
 800201e:	4ba1      	ldr	r3, [pc, #644]	; (80022a4 <USART2_IRQHandler+0xae0>)
 8002020:	7a9b      	ldrb	r3, [r3, #10]
 8002022:	2b36      	cmp	r3, #54	; 0x36
 8002024:	d11e      	bne.n	8002064 <USART2_IRQHandler+0x8a0>
					n = n*10 + 6;
 8002026:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	3306      	adds	r3, #6
 8002032:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8002034:	4b9b      	ldr	r3, [pc, #620]	; (80022a4 <USART2_IRQHandler+0xae0>)
 8002036:	7adb      	ldrb	r3, [r3, #11]
 8002038:	2b30      	cmp	r3, #48	; 0x30
 800203a:	f041 822c 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 800203e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002040:	4613      	mov	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 800204a:	4b96      	ldr	r3, [pc, #600]	; (80022a4 <USART2_IRQHandler+0xae0>)
 800204c:	7b1b      	ldrb	r3, [r3, #12]
 800204e:	2b30      	cmp	r3, #48	; 0x30
 8002050:	f041 8221 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8002054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002056:	4613      	mov	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002060:	f001 ba19 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '7' ) {
 8002064:	4b8f      	ldr	r3, [pc, #572]	; (80022a4 <USART2_IRQHandler+0xae0>)
 8002066:	7a9b      	ldrb	r3, [r3, #10]
 8002068:	2b37      	cmp	r3, #55	; 0x37
 800206a:	d11e      	bne.n	80020aa <USART2_IRQHandler+0x8e6>
					n = n*10 + 7;
 800206c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	3307      	adds	r3, #7
 8002078:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 800207a:	4b8a      	ldr	r3, [pc, #552]	; (80022a4 <USART2_IRQHandler+0xae0>)
 800207c:	7adb      	ldrb	r3, [r3, #11]
 800207e:	2b30      	cmp	r3, #48	; 0x30
 8002080:	f041 8209 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8002084:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002086:	4613      	mov	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8002090:	4b84      	ldr	r3, [pc, #528]	; (80022a4 <USART2_IRQHandler+0xae0>)
 8002092:	7b1b      	ldrb	r3, [r3, #12]
 8002094:	2b30      	cmp	r3, #48	; 0x30
 8002096:	f041 81fe 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 800209a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800209c:	4613      	mov	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020a6:	f001 b9f6 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '8' ) {
 80020aa:	4b7e      	ldr	r3, [pc, #504]	; (80022a4 <USART2_IRQHandler+0xae0>)
 80020ac:	7a9b      	ldrb	r3, [r3, #10]
 80020ae:	2b38      	cmp	r3, #56	; 0x38
 80020b0:	d11e      	bne.n	80020f0 <USART2_IRQHandler+0x92c>
					n = n*10 + 8;
 80020b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020b4:	4613      	mov	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	3308      	adds	r3, #8
 80020be:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 80020c0:	4b78      	ldr	r3, [pc, #480]	; (80022a4 <USART2_IRQHandler+0xae0>)
 80020c2:	7adb      	ldrb	r3, [r3, #11]
 80020c4:	2b30      	cmp	r3, #48	; 0x30
 80020c6:	f041 81e6 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 80020ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020cc:	4613      	mov	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4413      	add	r3, r2
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 80020d6:	4b73      	ldr	r3, [pc, #460]	; (80022a4 <USART2_IRQHandler+0xae0>)
 80020d8:	7b1b      	ldrb	r3, [r3, #12]
 80020da:	2b30      	cmp	r3, #48	; 0x30
 80020dc:	f041 81db 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 80020e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020ec:	f001 b9d3 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '9' ) {
 80020f0:	4b6c      	ldr	r3, [pc, #432]	; (80022a4 <USART2_IRQHandler+0xae0>)
 80020f2:	7a9b      	ldrb	r3, [r3, #10]
 80020f4:	2b39      	cmp	r3, #57	; 0x39
 80020f6:	f041 81ce 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
					n = n*10 + 9;
 80020fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020fc:	4613      	mov	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	3309      	adds	r3, #9
 8002106:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8002108:	4b66      	ldr	r3, [pc, #408]	; (80022a4 <USART2_IRQHandler+0xae0>)
 800210a:	7adb      	ldrb	r3, [r3, #11]
 800210c:	2b30      	cmp	r3, #48	; 0x30
 800210e:	f041 81c2 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8002112:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002114:	4613      	mov	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 800211e:	4b61      	ldr	r3, [pc, #388]	; (80022a4 <USART2_IRQHandler+0xae0>)
 8002120:	7b1b      	ldrb	r3, [r3, #12]
 8002122:	2b30      	cmp	r3, #48	; 0x30
 8002124:	f041 81b7 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8002128:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800212a:	4613      	mov	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002134:	f001 b9af 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				}
			} else if ( buffer[9] == '3' ) {
 8002138:	4b5a      	ldr	r3, [pc, #360]	; (80022a4 <USART2_IRQHandler+0xae0>)
 800213a:	7a5b      	ldrb	r3, [r3, #9]
 800213c:	2b33      	cmp	r3, #51	; 0x33
 800213e:	f040 8163 	bne.w	8002408 <USART2_IRQHandler+0xc44>
				n = 3;
 8002142:	2303      	movs	r3, #3
 8002144:	62fb      	str	r3, [r7, #44]	; 0x2c
				if ( buffer[10] == '0' )
 8002146:	4b57      	ldr	r3, [pc, #348]	; (80022a4 <USART2_IRQHandler+0xae0>)
 8002148:	7a9b      	ldrb	r3, [r3, #10]
 800214a:	2b30      	cmp	r3, #48	; 0x30
 800214c:	d11d      	bne.n	800218a <USART2_IRQHandler+0x9c6>
				{
					n = n*10;
 800214e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 800215a:	4b52      	ldr	r3, [pc, #328]	; (80022a4 <USART2_IRQHandler+0xae0>)
 800215c:	7adb      	ldrb	r3, [r3, #11]
 800215e:	2b30      	cmp	r3, #48	; 0x30
 8002160:	f041 8199 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8002164:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002166:	4613      	mov	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8002170:	4b4c      	ldr	r3, [pc, #304]	; (80022a4 <USART2_IRQHandler+0xae0>)
 8002172:	7b1b      	ldrb	r3, [r3, #12]
 8002174:	2b30      	cmp	r3, #48	; 0x30
 8002176:	f041 818e 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 800217a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800217c:	4613      	mov	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002186:	f001 b986 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '1' ) {
 800218a:	4b46      	ldr	r3, [pc, #280]	; (80022a4 <USART2_IRQHandler+0xae0>)
 800218c:	7a9b      	ldrb	r3, [r3, #10]
 800218e:	2b31      	cmp	r3, #49	; 0x31
 8002190:	d11e      	bne.n	80021d0 <USART2_IRQHandler+0xa0c>
					n = n*10 + 1;
 8002192:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	3301      	adds	r3, #1
 800219e:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 80021a0:	4b40      	ldr	r3, [pc, #256]	; (80022a4 <USART2_IRQHandler+0xae0>)
 80021a2:	7adb      	ldrb	r3, [r3, #11]
 80021a4:	2b30      	cmp	r3, #48	; 0x30
 80021a6:	f041 8176 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 80021aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021ac:	4613      	mov	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 80021b6:	4b3b      	ldr	r3, [pc, #236]	; (80022a4 <USART2_IRQHandler+0xae0>)
 80021b8:	7b1b      	ldrb	r3, [r3, #12]
 80021ba:	2b30      	cmp	r3, #48	; 0x30
 80021bc:	f041 816b 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 80021c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021c2:	4613      	mov	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021cc:	f001 b963 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '2' ) {
 80021d0:	4b34      	ldr	r3, [pc, #208]	; (80022a4 <USART2_IRQHandler+0xae0>)
 80021d2:	7a9b      	ldrb	r3, [r3, #10]
 80021d4:	2b32      	cmp	r3, #50	; 0x32
 80021d6:	d11e      	bne.n	8002216 <USART2_IRQHandler+0xa52>
					n = n*10 + 2;
 80021d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021da:	4613      	mov	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	3302      	adds	r3, #2
 80021e4:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 80021e6:	4b2f      	ldr	r3, [pc, #188]	; (80022a4 <USART2_IRQHandler+0xae0>)
 80021e8:	7adb      	ldrb	r3, [r3, #11]
 80021ea:	2b30      	cmp	r3, #48	; 0x30
 80021ec:	f041 8153 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 80021f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021f2:	4613      	mov	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 80021fc:	4b29      	ldr	r3, [pc, #164]	; (80022a4 <USART2_IRQHandler+0xae0>)
 80021fe:	7b1b      	ldrb	r3, [r3, #12]
 8002200:	2b30      	cmp	r3, #48	; 0x30
 8002202:	f041 8148 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8002206:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002208:	4613      	mov	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002212:	f001 b940 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '3' ) {
 8002216:	4b23      	ldr	r3, [pc, #140]	; (80022a4 <USART2_IRQHandler+0xae0>)
 8002218:	7a9b      	ldrb	r3, [r3, #10]
 800221a:	2b33      	cmp	r3, #51	; 0x33
 800221c:	d11e      	bne.n	800225c <USART2_IRQHandler+0xa98>
					n = n*10 + 3;
 800221e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002220:	4613      	mov	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	3303      	adds	r3, #3
 800222a:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 800222c:	4b1d      	ldr	r3, [pc, #116]	; (80022a4 <USART2_IRQHandler+0xae0>)
 800222e:	7adb      	ldrb	r3, [r3, #11]
 8002230:	2b30      	cmp	r3, #48	; 0x30
 8002232:	f041 8130 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8002236:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002238:	4613      	mov	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8002242:	4b18      	ldr	r3, [pc, #96]	; (80022a4 <USART2_IRQHandler+0xae0>)
 8002244:	7b1b      	ldrb	r3, [r3, #12]
 8002246:	2b30      	cmp	r3, #48	; 0x30
 8002248:	f041 8125 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 800224c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800224e:	4613      	mov	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002258:	f001 b91d 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '4' ) {
 800225c:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <USART2_IRQHandler+0xae0>)
 800225e:	7a9b      	ldrb	r3, [r3, #10]
 8002260:	2b34      	cmp	r3, #52	; 0x34
 8002262:	d121      	bne.n	80022a8 <USART2_IRQHandler+0xae4>
					n = n*10 + 4;
 8002264:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002266:	4613      	mov	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	3304      	adds	r3, #4
 8002270:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8002272:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <USART2_IRQHandler+0xae0>)
 8002274:	7adb      	ldrb	r3, [r3, #11]
 8002276:	2b30      	cmp	r3, #48	; 0x30
 8002278:	f041 810d 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 800227c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800227e:	4613      	mov	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8002288:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <USART2_IRQHandler+0xae0>)
 800228a:	7b1b      	ldrb	r3, [r3, #12]
 800228c:	2b30      	cmp	r3, #48	; 0x30
 800228e:	f041 8102 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8002292:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002294:	4613      	mov	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800229e:	f001 b8fa 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
 80022a2:	bf00      	nop
 80022a4:	2000030c 	.word	0x2000030c
						}
					}
				} else if ( buffer[10] == '5' ) {
 80022a8:	4bb2      	ldr	r3, [pc, #712]	; (8002574 <USART2_IRQHandler+0xdb0>)
 80022aa:	7a9b      	ldrb	r3, [r3, #10]
 80022ac:	2b35      	cmp	r3, #53	; 0x35
 80022ae:	d11e      	bne.n	80022ee <USART2_IRQHandler+0xb2a>
					n = n*10 + 5;
 80022b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	3305      	adds	r3, #5
 80022bc:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 80022be:	4bad      	ldr	r3, [pc, #692]	; (8002574 <USART2_IRQHandler+0xdb0>)
 80022c0:	7adb      	ldrb	r3, [r3, #11]
 80022c2:	2b30      	cmp	r3, #48	; 0x30
 80022c4:	f041 80e7 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 80022c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022ca:	4613      	mov	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 80022d4:	4ba7      	ldr	r3, [pc, #668]	; (8002574 <USART2_IRQHandler+0xdb0>)
 80022d6:	7b1b      	ldrb	r3, [r3, #12]
 80022d8:	2b30      	cmp	r3, #48	; 0x30
 80022da:	f041 80dc 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 80022de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022e0:	4613      	mov	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4413      	add	r3, r2
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022ea:	f001 b8d4 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '6' ) {
 80022ee:	4ba1      	ldr	r3, [pc, #644]	; (8002574 <USART2_IRQHandler+0xdb0>)
 80022f0:	7a9b      	ldrb	r3, [r3, #10]
 80022f2:	2b36      	cmp	r3, #54	; 0x36
 80022f4:	d11e      	bne.n	8002334 <USART2_IRQHandler+0xb70>
					n = n*10 + 6;
 80022f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	3306      	adds	r3, #6
 8002302:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8002304:	4b9b      	ldr	r3, [pc, #620]	; (8002574 <USART2_IRQHandler+0xdb0>)
 8002306:	7adb      	ldrb	r3, [r3, #11]
 8002308:	2b30      	cmp	r3, #48	; 0x30
 800230a:	f041 80c4 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 800230e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 800231a:	4b96      	ldr	r3, [pc, #600]	; (8002574 <USART2_IRQHandler+0xdb0>)
 800231c:	7b1b      	ldrb	r3, [r3, #12]
 800231e:	2b30      	cmp	r3, #48	; 0x30
 8002320:	f041 80b9 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8002324:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002326:	4613      	mov	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002330:	f001 b8b1 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '7' ) {
 8002334:	4b8f      	ldr	r3, [pc, #572]	; (8002574 <USART2_IRQHandler+0xdb0>)
 8002336:	7a9b      	ldrb	r3, [r3, #10]
 8002338:	2b37      	cmp	r3, #55	; 0x37
 800233a:	d11e      	bne.n	800237a <USART2_IRQHandler+0xbb6>
					n = n*10 + 7;
 800233c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800233e:	4613      	mov	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	3307      	adds	r3, #7
 8002348:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 800234a:	4b8a      	ldr	r3, [pc, #552]	; (8002574 <USART2_IRQHandler+0xdb0>)
 800234c:	7adb      	ldrb	r3, [r3, #11]
 800234e:	2b30      	cmp	r3, #48	; 0x30
 8002350:	f041 80a1 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8002354:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002356:	4613      	mov	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8002360:	4b84      	ldr	r3, [pc, #528]	; (8002574 <USART2_IRQHandler+0xdb0>)
 8002362:	7b1b      	ldrb	r3, [r3, #12]
 8002364:	2b30      	cmp	r3, #48	; 0x30
 8002366:	f041 8096 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 800236a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800236c:	4613      	mov	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4413      	add	r3, r2
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002376:	f001 b88e 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '8' ) {
 800237a:	4b7e      	ldr	r3, [pc, #504]	; (8002574 <USART2_IRQHandler+0xdb0>)
 800237c:	7a9b      	ldrb	r3, [r3, #10]
 800237e:	2b38      	cmp	r3, #56	; 0x38
 8002380:	d11e      	bne.n	80023c0 <USART2_IRQHandler+0xbfc>
					n = n*10 + 8;
 8002382:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	3308      	adds	r3, #8
 800238e:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8002390:	4b78      	ldr	r3, [pc, #480]	; (8002574 <USART2_IRQHandler+0xdb0>)
 8002392:	7adb      	ldrb	r3, [r3, #11]
 8002394:	2b30      	cmp	r3, #48	; 0x30
 8002396:	f041 807e 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 800239a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800239c:	4613      	mov	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4413      	add	r3, r2
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 80023a6:	4b73      	ldr	r3, [pc, #460]	; (8002574 <USART2_IRQHandler+0xdb0>)
 80023a8:	7b1b      	ldrb	r3, [r3, #12]
 80023aa:	2b30      	cmp	r3, #48	; 0x30
 80023ac:	f041 8073 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 80023b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023b2:	4613      	mov	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023bc:	f001 b86b 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '9' ) {
 80023c0:	4b6c      	ldr	r3, [pc, #432]	; (8002574 <USART2_IRQHandler+0xdb0>)
 80023c2:	7a9b      	ldrb	r3, [r3, #10]
 80023c4:	2b39      	cmp	r3, #57	; 0x39
 80023c6:	f041 8066 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
					n = n*10 + 9;
 80023ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	3309      	adds	r3, #9
 80023d6:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 80023d8:	4b66      	ldr	r3, [pc, #408]	; (8002574 <USART2_IRQHandler+0xdb0>)
 80023da:	7adb      	ldrb	r3, [r3, #11]
 80023dc:	2b30      	cmp	r3, #48	; 0x30
 80023de:	f041 805a 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 80023e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023e4:	4613      	mov	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 80023ee:	4b61      	ldr	r3, [pc, #388]	; (8002574 <USART2_IRQHandler+0xdb0>)
 80023f0:	7b1b      	ldrb	r3, [r3, #12]
 80023f2:	2b30      	cmp	r3, #48	; 0x30
 80023f4:	f041 804f 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 80023f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023fa:	4613      	mov	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002404:	f001 b847 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				}
			} else if ( buffer[9] == '4' ) {
 8002408:	4b5a      	ldr	r3, [pc, #360]	; (8002574 <USART2_IRQHandler+0xdb0>)
 800240a:	7a5b      	ldrb	r3, [r3, #9]
 800240c:	2b34      	cmp	r3, #52	; 0x34
 800240e:	f040 8163 	bne.w	80026d8 <USART2_IRQHandler+0xf14>
				n = 4;
 8002412:	2304      	movs	r3, #4
 8002414:	62fb      	str	r3, [r7, #44]	; 0x2c
				if ( buffer[10] == '0' )
 8002416:	4b57      	ldr	r3, [pc, #348]	; (8002574 <USART2_IRQHandler+0xdb0>)
 8002418:	7a9b      	ldrb	r3, [r3, #10]
 800241a:	2b30      	cmp	r3, #48	; 0x30
 800241c:	d11d      	bne.n	800245a <USART2_IRQHandler+0xc96>
				{
					n = n*10;
 800241e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002420:	4613      	mov	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 800242a:	4b52      	ldr	r3, [pc, #328]	; (8002574 <USART2_IRQHandler+0xdb0>)
 800242c:	7adb      	ldrb	r3, [r3, #11]
 800242e:	2b30      	cmp	r3, #48	; 0x30
 8002430:	f041 8031 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8002434:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002436:	4613      	mov	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8002440:	4b4c      	ldr	r3, [pc, #304]	; (8002574 <USART2_IRQHandler+0xdb0>)
 8002442:	7b1b      	ldrb	r3, [r3, #12]
 8002444:	2b30      	cmp	r3, #48	; 0x30
 8002446:	f041 8026 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 800244a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800244c:	4613      	mov	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4413      	add	r3, r2
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002456:	f001 b81e 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '1' ) {
 800245a:	4b46      	ldr	r3, [pc, #280]	; (8002574 <USART2_IRQHandler+0xdb0>)
 800245c:	7a9b      	ldrb	r3, [r3, #10]
 800245e:	2b31      	cmp	r3, #49	; 0x31
 8002460:	d11e      	bne.n	80024a0 <USART2_IRQHandler+0xcdc>
					n = n*10 + 1;
 8002462:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002464:	4613      	mov	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	3301      	adds	r3, #1
 800246e:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8002470:	4b40      	ldr	r3, [pc, #256]	; (8002574 <USART2_IRQHandler+0xdb0>)
 8002472:	7adb      	ldrb	r3, [r3, #11]
 8002474:	2b30      	cmp	r3, #48	; 0x30
 8002476:	f041 800e 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 800247a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8002486:	4b3b      	ldr	r3, [pc, #236]	; (8002574 <USART2_IRQHandler+0xdb0>)
 8002488:	7b1b      	ldrb	r3, [r3, #12]
 800248a:	2b30      	cmp	r3, #48	; 0x30
 800248c:	f041 8003 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8002490:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002492:	4613      	mov	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800249c:	f000 bffb 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '2' ) {
 80024a0:	4b34      	ldr	r3, [pc, #208]	; (8002574 <USART2_IRQHandler+0xdb0>)
 80024a2:	7a9b      	ldrb	r3, [r3, #10]
 80024a4:	2b32      	cmp	r3, #50	; 0x32
 80024a6:	d11e      	bne.n	80024e6 <USART2_IRQHandler+0xd22>
					n = n*10 + 2;
 80024a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024aa:	4613      	mov	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	3302      	adds	r3, #2
 80024b4:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 80024b6:	4b2f      	ldr	r3, [pc, #188]	; (8002574 <USART2_IRQHandler+0xdb0>)
 80024b8:	7adb      	ldrb	r3, [r3, #11]
 80024ba:	2b30      	cmp	r3, #48	; 0x30
 80024bc:	f040 87eb 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 80024c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024c2:	4613      	mov	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 80024cc:	4b29      	ldr	r3, [pc, #164]	; (8002574 <USART2_IRQHandler+0xdb0>)
 80024ce:	7b1b      	ldrb	r3, [r3, #12]
 80024d0:	2b30      	cmp	r3, #48	; 0x30
 80024d2:	f040 87e0 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 80024d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024d8:	4613      	mov	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024e2:	f000 bfd8 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '3' ) {
 80024e6:	4b23      	ldr	r3, [pc, #140]	; (8002574 <USART2_IRQHandler+0xdb0>)
 80024e8:	7a9b      	ldrb	r3, [r3, #10]
 80024ea:	2b33      	cmp	r3, #51	; 0x33
 80024ec:	d11e      	bne.n	800252c <USART2_IRQHandler+0xd68>
					n = n*10 + 3;
 80024ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024f0:	4613      	mov	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	3303      	adds	r3, #3
 80024fa:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 80024fc:	4b1d      	ldr	r3, [pc, #116]	; (8002574 <USART2_IRQHandler+0xdb0>)
 80024fe:	7adb      	ldrb	r3, [r3, #11]
 8002500:	2b30      	cmp	r3, #48	; 0x30
 8002502:	f040 87c8 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8002506:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002508:	4613      	mov	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8002512:	4b18      	ldr	r3, [pc, #96]	; (8002574 <USART2_IRQHandler+0xdb0>)
 8002514:	7b1b      	ldrb	r3, [r3, #12]
 8002516:	2b30      	cmp	r3, #48	; 0x30
 8002518:	f040 87bd 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 800251c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800251e:	4613      	mov	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002528:	f000 bfb5 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '4' ) {
 800252c:	4b11      	ldr	r3, [pc, #68]	; (8002574 <USART2_IRQHandler+0xdb0>)
 800252e:	7a9b      	ldrb	r3, [r3, #10]
 8002530:	2b34      	cmp	r3, #52	; 0x34
 8002532:	d121      	bne.n	8002578 <USART2_IRQHandler+0xdb4>
					n = n*10 + 4;
 8002534:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002536:	4613      	mov	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	3304      	adds	r3, #4
 8002540:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8002542:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <USART2_IRQHandler+0xdb0>)
 8002544:	7adb      	ldrb	r3, [r3, #11]
 8002546:	2b30      	cmp	r3, #48	; 0x30
 8002548:	f040 87a5 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 800254c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800254e:	4613      	mov	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4413      	add	r3, r2
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8002558:	4b06      	ldr	r3, [pc, #24]	; (8002574 <USART2_IRQHandler+0xdb0>)
 800255a:	7b1b      	ldrb	r3, [r3, #12]
 800255c:	2b30      	cmp	r3, #48	; 0x30
 800255e:	f040 879a 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8002562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002564:	4613      	mov	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800256e:	f000 bf92 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
 8002572:	bf00      	nop
 8002574:	2000030c 	.word	0x2000030c
						}
					}
				} else if ( buffer[10] == '5' ) {
 8002578:	4bb2      	ldr	r3, [pc, #712]	; (8002844 <USART2_IRQHandler+0x1080>)
 800257a:	7a9b      	ldrb	r3, [r3, #10]
 800257c:	2b35      	cmp	r3, #53	; 0x35
 800257e:	d11e      	bne.n	80025be <USART2_IRQHandler+0xdfa>
					n = n*10 + 5;
 8002580:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002582:	4613      	mov	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	3305      	adds	r3, #5
 800258c:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 800258e:	4bad      	ldr	r3, [pc, #692]	; (8002844 <USART2_IRQHandler+0x1080>)
 8002590:	7adb      	ldrb	r3, [r3, #11]
 8002592:	2b30      	cmp	r3, #48	; 0x30
 8002594:	f040 877f 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8002598:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800259a:	4613      	mov	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 80025a4:	4ba7      	ldr	r3, [pc, #668]	; (8002844 <USART2_IRQHandler+0x1080>)
 80025a6:	7b1b      	ldrb	r3, [r3, #12]
 80025a8:	2b30      	cmp	r3, #48	; 0x30
 80025aa:	f040 8774 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 80025ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025b0:	4613      	mov	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025ba:	f000 bf6c 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '6' ) {
 80025be:	4ba1      	ldr	r3, [pc, #644]	; (8002844 <USART2_IRQHandler+0x1080>)
 80025c0:	7a9b      	ldrb	r3, [r3, #10]
 80025c2:	2b36      	cmp	r3, #54	; 0x36
 80025c4:	d11e      	bne.n	8002604 <USART2_IRQHandler+0xe40>
					n = n*10 + 6;
 80025c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025c8:	4613      	mov	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	3306      	adds	r3, #6
 80025d2:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 80025d4:	4b9b      	ldr	r3, [pc, #620]	; (8002844 <USART2_IRQHandler+0x1080>)
 80025d6:	7adb      	ldrb	r3, [r3, #11]
 80025d8:	2b30      	cmp	r3, #48	; 0x30
 80025da:	f040 875c 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 80025de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025e0:	4613      	mov	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 80025ea:	4b96      	ldr	r3, [pc, #600]	; (8002844 <USART2_IRQHandler+0x1080>)
 80025ec:	7b1b      	ldrb	r3, [r3, #12]
 80025ee:	2b30      	cmp	r3, #48	; 0x30
 80025f0:	f040 8751 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 80025f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025f6:	4613      	mov	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002600:	f000 bf49 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '7' ) {
 8002604:	4b8f      	ldr	r3, [pc, #572]	; (8002844 <USART2_IRQHandler+0x1080>)
 8002606:	7a9b      	ldrb	r3, [r3, #10]
 8002608:	2b37      	cmp	r3, #55	; 0x37
 800260a:	d11e      	bne.n	800264a <USART2_IRQHandler+0xe86>
					n = n*10 + 7;
 800260c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800260e:	4613      	mov	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	3307      	adds	r3, #7
 8002618:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 800261a:	4b8a      	ldr	r3, [pc, #552]	; (8002844 <USART2_IRQHandler+0x1080>)
 800261c:	7adb      	ldrb	r3, [r3, #11]
 800261e:	2b30      	cmp	r3, #48	; 0x30
 8002620:	f040 8739 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8002624:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002626:	4613      	mov	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8002630:	4b84      	ldr	r3, [pc, #528]	; (8002844 <USART2_IRQHandler+0x1080>)
 8002632:	7b1b      	ldrb	r3, [r3, #12]
 8002634:	2b30      	cmp	r3, #48	; 0x30
 8002636:	f040 872e 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 800263a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800263c:	4613      	mov	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002646:	f000 bf26 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '8' ) {
 800264a:	4b7e      	ldr	r3, [pc, #504]	; (8002844 <USART2_IRQHandler+0x1080>)
 800264c:	7a9b      	ldrb	r3, [r3, #10]
 800264e:	2b38      	cmp	r3, #56	; 0x38
 8002650:	d11e      	bne.n	8002690 <USART2_IRQHandler+0xecc>
					n = n*10 + 8;
 8002652:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002654:	4613      	mov	r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4413      	add	r3, r2
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	3308      	adds	r3, #8
 800265e:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8002660:	4b78      	ldr	r3, [pc, #480]	; (8002844 <USART2_IRQHandler+0x1080>)
 8002662:	7adb      	ldrb	r3, [r3, #11]
 8002664:	2b30      	cmp	r3, #48	; 0x30
 8002666:	f040 8716 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 800266a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800266c:	4613      	mov	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4413      	add	r3, r2
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8002676:	4b73      	ldr	r3, [pc, #460]	; (8002844 <USART2_IRQHandler+0x1080>)
 8002678:	7b1b      	ldrb	r3, [r3, #12]
 800267a:	2b30      	cmp	r3, #48	; 0x30
 800267c:	f040 870b 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8002680:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002682:	4613      	mov	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800268c:	f000 bf03 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '9' ) {
 8002690:	4b6c      	ldr	r3, [pc, #432]	; (8002844 <USART2_IRQHandler+0x1080>)
 8002692:	7a9b      	ldrb	r3, [r3, #10]
 8002694:	2b39      	cmp	r3, #57	; 0x39
 8002696:	f040 86fe 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
					n = n*10 + 9;
 800269a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800269c:	4613      	mov	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	3309      	adds	r3, #9
 80026a6:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 80026a8:	4b66      	ldr	r3, [pc, #408]	; (8002844 <USART2_IRQHandler+0x1080>)
 80026aa:	7adb      	ldrb	r3, [r3, #11]
 80026ac:	2b30      	cmp	r3, #48	; 0x30
 80026ae:	f040 86f2 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 80026b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026b4:	4613      	mov	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 80026be:	4b61      	ldr	r3, [pc, #388]	; (8002844 <USART2_IRQHandler+0x1080>)
 80026c0:	7b1b      	ldrb	r3, [r3, #12]
 80026c2:	2b30      	cmp	r3, #48	; 0x30
 80026c4:	f040 86e7 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 80026c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026ca:	4613      	mov	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026d4:	f000 bedf 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				}
			} else if ( buffer[9] == '5' ) {
 80026d8:	4b5a      	ldr	r3, [pc, #360]	; (8002844 <USART2_IRQHandler+0x1080>)
 80026da:	7a5b      	ldrb	r3, [r3, #9]
 80026dc:	2b35      	cmp	r3, #53	; 0x35
 80026de:	f040 8163 	bne.w	80029a8 <USART2_IRQHandler+0x11e4>
				n = 5;
 80026e2:	2305      	movs	r3, #5
 80026e4:	62fb      	str	r3, [r7, #44]	; 0x2c
				if ( buffer[10] == '0' )
 80026e6:	4b57      	ldr	r3, [pc, #348]	; (8002844 <USART2_IRQHandler+0x1080>)
 80026e8:	7a9b      	ldrb	r3, [r3, #10]
 80026ea:	2b30      	cmp	r3, #48	; 0x30
 80026ec:	d11d      	bne.n	800272a <USART2_IRQHandler+0xf66>
				{
					n = n*10;
 80026ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026f0:	4613      	mov	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4413      	add	r3, r2
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 80026fa:	4b52      	ldr	r3, [pc, #328]	; (8002844 <USART2_IRQHandler+0x1080>)
 80026fc:	7adb      	ldrb	r3, [r3, #11]
 80026fe:	2b30      	cmp	r3, #48	; 0x30
 8002700:	f040 86c9 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8002704:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002706:	4613      	mov	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8002710:	4b4c      	ldr	r3, [pc, #304]	; (8002844 <USART2_IRQHandler+0x1080>)
 8002712:	7b1b      	ldrb	r3, [r3, #12]
 8002714:	2b30      	cmp	r3, #48	; 0x30
 8002716:	f040 86be 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 800271a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800271c:	4613      	mov	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002726:	f000 beb6 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '1' ) {
 800272a:	4b46      	ldr	r3, [pc, #280]	; (8002844 <USART2_IRQHandler+0x1080>)
 800272c:	7a9b      	ldrb	r3, [r3, #10]
 800272e:	2b31      	cmp	r3, #49	; 0x31
 8002730:	d11e      	bne.n	8002770 <USART2_IRQHandler+0xfac>
					n = n*10 + 1;
 8002732:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002734:	4613      	mov	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4413      	add	r3, r2
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	3301      	adds	r3, #1
 800273e:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8002740:	4b40      	ldr	r3, [pc, #256]	; (8002844 <USART2_IRQHandler+0x1080>)
 8002742:	7adb      	ldrb	r3, [r3, #11]
 8002744:	2b30      	cmp	r3, #48	; 0x30
 8002746:	f040 86a6 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 800274a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800274c:	4613      	mov	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8002756:	4b3b      	ldr	r3, [pc, #236]	; (8002844 <USART2_IRQHandler+0x1080>)
 8002758:	7b1b      	ldrb	r3, [r3, #12]
 800275a:	2b30      	cmp	r3, #48	; 0x30
 800275c:	f040 869b 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8002760:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002762:	4613      	mov	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4413      	add	r3, r2
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800276c:	f000 be93 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '2' ) {
 8002770:	4b34      	ldr	r3, [pc, #208]	; (8002844 <USART2_IRQHandler+0x1080>)
 8002772:	7a9b      	ldrb	r3, [r3, #10]
 8002774:	2b32      	cmp	r3, #50	; 0x32
 8002776:	d11e      	bne.n	80027b6 <USART2_IRQHandler+0xff2>
					n = n*10 + 2;
 8002778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800277a:	4613      	mov	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	3302      	adds	r3, #2
 8002784:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8002786:	4b2f      	ldr	r3, [pc, #188]	; (8002844 <USART2_IRQHandler+0x1080>)
 8002788:	7adb      	ldrb	r3, [r3, #11]
 800278a:	2b30      	cmp	r3, #48	; 0x30
 800278c:	f040 8683 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8002790:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002792:	4613      	mov	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 800279c:	4b29      	ldr	r3, [pc, #164]	; (8002844 <USART2_IRQHandler+0x1080>)
 800279e:	7b1b      	ldrb	r3, [r3, #12]
 80027a0:	2b30      	cmp	r3, #48	; 0x30
 80027a2:	f040 8678 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 80027a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027a8:	4613      	mov	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027b2:	f000 be70 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '3' ) {
 80027b6:	4b23      	ldr	r3, [pc, #140]	; (8002844 <USART2_IRQHandler+0x1080>)
 80027b8:	7a9b      	ldrb	r3, [r3, #10]
 80027ba:	2b33      	cmp	r3, #51	; 0x33
 80027bc:	d11e      	bne.n	80027fc <USART2_IRQHandler+0x1038>
					n = n*10 + 3;
 80027be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027c0:	4613      	mov	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	3303      	adds	r3, #3
 80027ca:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 80027cc:	4b1d      	ldr	r3, [pc, #116]	; (8002844 <USART2_IRQHandler+0x1080>)
 80027ce:	7adb      	ldrb	r3, [r3, #11]
 80027d0:	2b30      	cmp	r3, #48	; 0x30
 80027d2:	f040 8660 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 80027d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027d8:	4613      	mov	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4413      	add	r3, r2
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 80027e2:	4b18      	ldr	r3, [pc, #96]	; (8002844 <USART2_IRQHandler+0x1080>)
 80027e4:	7b1b      	ldrb	r3, [r3, #12]
 80027e6:	2b30      	cmp	r3, #48	; 0x30
 80027e8:	f040 8655 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 80027ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ee:	4613      	mov	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4413      	add	r3, r2
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027f8:	f000 be4d 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '4' ) {
 80027fc:	4b11      	ldr	r3, [pc, #68]	; (8002844 <USART2_IRQHandler+0x1080>)
 80027fe:	7a9b      	ldrb	r3, [r3, #10]
 8002800:	2b34      	cmp	r3, #52	; 0x34
 8002802:	d121      	bne.n	8002848 <USART2_IRQHandler+0x1084>
					n = n*10 + 4;
 8002804:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002806:	4613      	mov	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4413      	add	r3, r2
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	3304      	adds	r3, #4
 8002810:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8002812:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <USART2_IRQHandler+0x1080>)
 8002814:	7adb      	ldrb	r3, [r3, #11]
 8002816:	2b30      	cmp	r3, #48	; 0x30
 8002818:	f040 863d 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 800281c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800281e:	4613      	mov	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8002828:	4b06      	ldr	r3, [pc, #24]	; (8002844 <USART2_IRQHandler+0x1080>)
 800282a:	7b1b      	ldrb	r3, [r3, #12]
 800282c:	2b30      	cmp	r3, #48	; 0x30
 800282e:	f040 8632 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8002832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800283e:	f000 be2a 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
 8002842:	bf00      	nop
 8002844:	2000030c 	.word	0x2000030c
						}
					}
				} else if ( buffer[10] == '5' ) {
 8002848:	4bb2      	ldr	r3, [pc, #712]	; (8002b14 <USART2_IRQHandler+0x1350>)
 800284a:	7a9b      	ldrb	r3, [r3, #10]
 800284c:	2b35      	cmp	r3, #53	; 0x35
 800284e:	d11e      	bne.n	800288e <USART2_IRQHandler+0x10ca>
					n = n*10 + 5;
 8002850:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002852:	4613      	mov	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	3305      	adds	r3, #5
 800285c:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 800285e:	4bad      	ldr	r3, [pc, #692]	; (8002b14 <USART2_IRQHandler+0x1350>)
 8002860:	7adb      	ldrb	r3, [r3, #11]
 8002862:	2b30      	cmp	r3, #48	; 0x30
 8002864:	f040 8617 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8002868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800286a:	4613      	mov	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8002874:	4ba7      	ldr	r3, [pc, #668]	; (8002b14 <USART2_IRQHandler+0x1350>)
 8002876:	7b1b      	ldrb	r3, [r3, #12]
 8002878:	2b30      	cmp	r3, #48	; 0x30
 800287a:	f040 860c 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 800287e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002880:	4613      	mov	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	62fb      	str	r3, [r7, #44]	; 0x2c
 800288a:	f000 be04 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '6' ) {
 800288e:	4ba1      	ldr	r3, [pc, #644]	; (8002b14 <USART2_IRQHandler+0x1350>)
 8002890:	7a9b      	ldrb	r3, [r3, #10]
 8002892:	2b36      	cmp	r3, #54	; 0x36
 8002894:	d11e      	bne.n	80028d4 <USART2_IRQHandler+0x1110>
					n = n*10 + 6;
 8002896:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002898:	4613      	mov	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	3306      	adds	r3, #6
 80028a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 80028a4:	4b9b      	ldr	r3, [pc, #620]	; (8002b14 <USART2_IRQHandler+0x1350>)
 80028a6:	7adb      	ldrb	r3, [r3, #11]
 80028a8:	2b30      	cmp	r3, #48	; 0x30
 80028aa:	f040 85f4 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 80028ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028b0:	4613      	mov	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 80028ba:	4b96      	ldr	r3, [pc, #600]	; (8002b14 <USART2_IRQHandler+0x1350>)
 80028bc:	7b1b      	ldrb	r3, [r3, #12]
 80028be:	2b30      	cmp	r3, #48	; 0x30
 80028c0:	f040 85e9 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 80028c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028c6:	4613      	mov	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028d0:	f000 bde1 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '7' ) {
 80028d4:	4b8f      	ldr	r3, [pc, #572]	; (8002b14 <USART2_IRQHandler+0x1350>)
 80028d6:	7a9b      	ldrb	r3, [r3, #10]
 80028d8:	2b37      	cmp	r3, #55	; 0x37
 80028da:	d11e      	bne.n	800291a <USART2_IRQHandler+0x1156>
					n = n*10 + 7;
 80028dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028de:	4613      	mov	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	3307      	adds	r3, #7
 80028e8:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 80028ea:	4b8a      	ldr	r3, [pc, #552]	; (8002b14 <USART2_IRQHandler+0x1350>)
 80028ec:	7adb      	ldrb	r3, [r3, #11]
 80028ee:	2b30      	cmp	r3, #48	; 0x30
 80028f0:	f040 85d1 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 80028f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028f6:	4613      	mov	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8002900:	4b84      	ldr	r3, [pc, #528]	; (8002b14 <USART2_IRQHandler+0x1350>)
 8002902:	7b1b      	ldrb	r3, [r3, #12]
 8002904:	2b30      	cmp	r3, #48	; 0x30
 8002906:	f040 85c6 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 800290a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800290c:	4613      	mov	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002916:	f000 bdbe 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '8' ) {
 800291a:	4b7e      	ldr	r3, [pc, #504]	; (8002b14 <USART2_IRQHandler+0x1350>)
 800291c:	7a9b      	ldrb	r3, [r3, #10]
 800291e:	2b38      	cmp	r3, #56	; 0x38
 8002920:	d11e      	bne.n	8002960 <USART2_IRQHandler+0x119c>
					n = n*10 + 8;
 8002922:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002924:	4613      	mov	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4413      	add	r3, r2
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	3308      	adds	r3, #8
 800292e:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8002930:	4b78      	ldr	r3, [pc, #480]	; (8002b14 <USART2_IRQHandler+0x1350>)
 8002932:	7adb      	ldrb	r3, [r3, #11]
 8002934:	2b30      	cmp	r3, #48	; 0x30
 8002936:	f040 85ae 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 800293a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8002946:	4b73      	ldr	r3, [pc, #460]	; (8002b14 <USART2_IRQHandler+0x1350>)
 8002948:	7b1b      	ldrb	r3, [r3, #12]
 800294a:	2b30      	cmp	r3, #48	; 0x30
 800294c:	f040 85a3 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8002950:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800295c:	f000 bd9b 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '9' ) {
 8002960:	4b6c      	ldr	r3, [pc, #432]	; (8002b14 <USART2_IRQHandler+0x1350>)
 8002962:	7a9b      	ldrb	r3, [r3, #10]
 8002964:	2b39      	cmp	r3, #57	; 0x39
 8002966:	f040 8596 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
					n = n*10 + 9;
 800296a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800296c:	4613      	mov	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	3309      	adds	r3, #9
 8002976:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8002978:	4b66      	ldr	r3, [pc, #408]	; (8002b14 <USART2_IRQHandler+0x1350>)
 800297a:	7adb      	ldrb	r3, [r3, #11]
 800297c:	2b30      	cmp	r3, #48	; 0x30
 800297e:	f040 858a 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8002982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002984:	4613      	mov	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4413      	add	r3, r2
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 800298e:	4b61      	ldr	r3, [pc, #388]	; (8002b14 <USART2_IRQHandler+0x1350>)
 8002990:	7b1b      	ldrb	r3, [r3, #12]
 8002992:	2b30      	cmp	r3, #48	; 0x30
 8002994:	f040 857f 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8002998:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800299a:	4613      	mov	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029a4:	f000 bd77 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				}
			} else if ( buffer[9] == '6' ) {
 80029a8:	4b5a      	ldr	r3, [pc, #360]	; (8002b14 <USART2_IRQHandler+0x1350>)
 80029aa:	7a5b      	ldrb	r3, [r3, #9]
 80029ac:	2b36      	cmp	r3, #54	; 0x36
 80029ae:	f040 8163 	bne.w	8002c78 <USART2_IRQHandler+0x14b4>
				n = 6;
 80029b2:	2306      	movs	r3, #6
 80029b4:	62fb      	str	r3, [r7, #44]	; 0x2c
				if ( buffer[10] == '0' )
 80029b6:	4b57      	ldr	r3, [pc, #348]	; (8002b14 <USART2_IRQHandler+0x1350>)
 80029b8:	7a9b      	ldrb	r3, [r3, #10]
 80029ba:	2b30      	cmp	r3, #48	; 0x30
 80029bc:	d11d      	bne.n	80029fa <USART2_IRQHandler+0x1236>
				{
					n = n*10;
 80029be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029c0:	4613      	mov	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 80029ca:	4b52      	ldr	r3, [pc, #328]	; (8002b14 <USART2_IRQHandler+0x1350>)
 80029cc:	7adb      	ldrb	r3, [r3, #11]
 80029ce:	2b30      	cmp	r3, #48	; 0x30
 80029d0:	f040 8561 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 80029d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029d6:	4613      	mov	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 80029e0:	4b4c      	ldr	r3, [pc, #304]	; (8002b14 <USART2_IRQHandler+0x1350>)
 80029e2:	7b1b      	ldrb	r3, [r3, #12]
 80029e4:	2b30      	cmp	r3, #48	; 0x30
 80029e6:	f040 8556 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 80029ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029ec:	4613      	mov	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029f6:	f000 bd4e 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '1' ) {
 80029fa:	4b46      	ldr	r3, [pc, #280]	; (8002b14 <USART2_IRQHandler+0x1350>)
 80029fc:	7a9b      	ldrb	r3, [r3, #10]
 80029fe:	2b31      	cmp	r3, #49	; 0x31
 8002a00:	d11e      	bne.n	8002a40 <USART2_IRQHandler+0x127c>
					n = n*10 + 1;
 8002a02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a04:	4613      	mov	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8002a10:	4b40      	ldr	r3, [pc, #256]	; (8002b14 <USART2_IRQHandler+0x1350>)
 8002a12:	7adb      	ldrb	r3, [r3, #11]
 8002a14:	2b30      	cmp	r3, #48	; 0x30
 8002a16:	f040 853e 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8002a1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8002a26:	4b3b      	ldr	r3, [pc, #236]	; (8002b14 <USART2_IRQHandler+0x1350>)
 8002a28:	7b1b      	ldrb	r3, [r3, #12]
 8002a2a:	2b30      	cmp	r3, #48	; 0x30
 8002a2c:	f040 8533 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8002a30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a32:	4613      	mov	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a3c:	f000 bd2b 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '2' ) {
 8002a40:	4b34      	ldr	r3, [pc, #208]	; (8002b14 <USART2_IRQHandler+0x1350>)
 8002a42:	7a9b      	ldrb	r3, [r3, #10]
 8002a44:	2b32      	cmp	r3, #50	; 0x32
 8002a46:	d11e      	bne.n	8002a86 <USART2_IRQHandler+0x12c2>
					n = n*10 + 2;
 8002a48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	3302      	adds	r3, #2
 8002a54:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8002a56:	4b2f      	ldr	r3, [pc, #188]	; (8002b14 <USART2_IRQHandler+0x1350>)
 8002a58:	7adb      	ldrb	r3, [r3, #11]
 8002a5a:	2b30      	cmp	r3, #48	; 0x30
 8002a5c:	f040 851b 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8002a60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a62:	4613      	mov	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8002a6c:	4b29      	ldr	r3, [pc, #164]	; (8002b14 <USART2_IRQHandler+0x1350>)
 8002a6e:	7b1b      	ldrb	r3, [r3, #12]
 8002a70:	2b30      	cmp	r3, #48	; 0x30
 8002a72:	f040 8510 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8002a76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a78:	4613      	mov	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a82:	f000 bd08 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '3' ) {
 8002a86:	4b23      	ldr	r3, [pc, #140]	; (8002b14 <USART2_IRQHandler+0x1350>)
 8002a88:	7a9b      	ldrb	r3, [r3, #10]
 8002a8a:	2b33      	cmp	r3, #51	; 0x33
 8002a8c:	d11e      	bne.n	8002acc <USART2_IRQHandler+0x1308>
					n = n*10 + 3;
 8002a8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a90:	4613      	mov	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	3303      	adds	r3, #3
 8002a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8002a9c:	4b1d      	ldr	r3, [pc, #116]	; (8002b14 <USART2_IRQHandler+0x1350>)
 8002a9e:	7adb      	ldrb	r3, [r3, #11]
 8002aa0:	2b30      	cmp	r3, #48	; 0x30
 8002aa2:	f040 84f8 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8002aa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8002ab2:	4b18      	ldr	r3, [pc, #96]	; (8002b14 <USART2_IRQHandler+0x1350>)
 8002ab4:	7b1b      	ldrb	r3, [r3, #12]
 8002ab6:	2b30      	cmp	r3, #48	; 0x30
 8002ab8:	f040 84ed 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8002abc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ac8:	f000 bce5 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '4' ) {
 8002acc:	4b11      	ldr	r3, [pc, #68]	; (8002b14 <USART2_IRQHandler+0x1350>)
 8002ace:	7a9b      	ldrb	r3, [r3, #10]
 8002ad0:	2b34      	cmp	r3, #52	; 0x34
 8002ad2:	d121      	bne.n	8002b18 <USART2_IRQHandler+0x1354>
					n = n*10 + 4;
 8002ad4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	3304      	adds	r3, #4
 8002ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8002ae2:	4b0c      	ldr	r3, [pc, #48]	; (8002b14 <USART2_IRQHandler+0x1350>)
 8002ae4:	7adb      	ldrb	r3, [r3, #11]
 8002ae6:	2b30      	cmp	r3, #48	; 0x30
 8002ae8:	f040 84d5 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8002aec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aee:	4613      	mov	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8002af8:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <USART2_IRQHandler+0x1350>)
 8002afa:	7b1b      	ldrb	r3, [r3, #12]
 8002afc:	2b30      	cmp	r3, #48	; 0x30
 8002afe:	f040 84ca 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8002b02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b04:	4613      	mov	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4413      	add	r3, r2
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b0e:	f000 bcc2 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
 8002b12:	bf00      	nop
 8002b14:	2000030c 	.word	0x2000030c
						}
					}
				} else if ( buffer[10] == '5' ) {
 8002b18:	4baf      	ldr	r3, [pc, #700]	; (8002dd8 <USART2_IRQHandler+0x1614>)
 8002b1a:	7a9b      	ldrb	r3, [r3, #10]
 8002b1c:	2b35      	cmp	r3, #53	; 0x35
 8002b1e:	d11e      	bne.n	8002b5e <USART2_IRQHandler+0x139a>
					n = n*10 + 5;
 8002b20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b22:	4613      	mov	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	3305      	adds	r3, #5
 8002b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8002b2e:	4baa      	ldr	r3, [pc, #680]	; (8002dd8 <USART2_IRQHandler+0x1614>)
 8002b30:	7adb      	ldrb	r3, [r3, #11]
 8002b32:	2b30      	cmp	r3, #48	; 0x30
 8002b34:	f040 84af 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8002b38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8002b44:	4ba4      	ldr	r3, [pc, #656]	; (8002dd8 <USART2_IRQHandler+0x1614>)
 8002b46:	7b1b      	ldrb	r3, [r3, #12]
 8002b48:	2b30      	cmp	r3, #48	; 0x30
 8002b4a:	f040 84a4 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8002b4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b50:	4613      	mov	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4413      	add	r3, r2
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b5a:	f000 bc9c 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '6' ) {
 8002b5e:	4b9e      	ldr	r3, [pc, #632]	; (8002dd8 <USART2_IRQHandler+0x1614>)
 8002b60:	7a9b      	ldrb	r3, [r3, #10]
 8002b62:	2b36      	cmp	r3, #54	; 0x36
 8002b64:	d11e      	bne.n	8002ba4 <USART2_IRQHandler+0x13e0>
					n = n*10 + 6;
 8002b66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b68:	4613      	mov	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	3306      	adds	r3, #6
 8002b72:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8002b74:	4b98      	ldr	r3, [pc, #608]	; (8002dd8 <USART2_IRQHandler+0x1614>)
 8002b76:	7adb      	ldrb	r3, [r3, #11]
 8002b78:	2b30      	cmp	r3, #48	; 0x30
 8002b7a:	f040 848c 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8002b7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b80:	4613      	mov	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4413      	add	r3, r2
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8002b8a:	4b93      	ldr	r3, [pc, #588]	; (8002dd8 <USART2_IRQHandler+0x1614>)
 8002b8c:	7b1b      	ldrb	r3, [r3, #12]
 8002b8e:	2b30      	cmp	r3, #48	; 0x30
 8002b90:	f040 8481 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8002b94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b96:	4613      	mov	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ba0:	f000 bc79 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '7' ) {
 8002ba4:	4b8c      	ldr	r3, [pc, #560]	; (8002dd8 <USART2_IRQHandler+0x1614>)
 8002ba6:	7a9b      	ldrb	r3, [r3, #10]
 8002ba8:	2b37      	cmp	r3, #55	; 0x37
 8002baa:	d11e      	bne.n	8002bea <USART2_IRQHandler+0x1426>
					n = n*10 + 7;
 8002bac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bae:	4613      	mov	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4413      	add	r3, r2
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	3307      	adds	r3, #7
 8002bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8002bba:	4b87      	ldr	r3, [pc, #540]	; (8002dd8 <USART2_IRQHandler+0x1614>)
 8002bbc:	7adb      	ldrb	r3, [r3, #11]
 8002bbe:	2b30      	cmp	r3, #48	; 0x30
 8002bc0:	f040 8469 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8002bc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8002bd0:	4b81      	ldr	r3, [pc, #516]	; (8002dd8 <USART2_IRQHandler+0x1614>)
 8002bd2:	7b1b      	ldrb	r3, [r3, #12]
 8002bd4:	2b30      	cmp	r3, #48	; 0x30
 8002bd6:	f040 845e 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8002bda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bdc:	4613      	mov	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002be6:	f000 bc56 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '8' ) {
 8002bea:	4b7b      	ldr	r3, [pc, #492]	; (8002dd8 <USART2_IRQHandler+0x1614>)
 8002bec:	7a9b      	ldrb	r3, [r3, #10]
 8002bee:	2b38      	cmp	r3, #56	; 0x38
 8002bf0:	d11e      	bne.n	8002c30 <USART2_IRQHandler+0x146c>
					n = n*10 + 8;
 8002bf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	3308      	adds	r3, #8
 8002bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8002c00:	4b75      	ldr	r3, [pc, #468]	; (8002dd8 <USART2_IRQHandler+0x1614>)
 8002c02:	7adb      	ldrb	r3, [r3, #11]
 8002c04:	2b30      	cmp	r3, #48	; 0x30
 8002c06:	f040 8446 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8002c0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4413      	add	r3, r2
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8002c16:	4b70      	ldr	r3, [pc, #448]	; (8002dd8 <USART2_IRQHandler+0x1614>)
 8002c18:	7b1b      	ldrb	r3, [r3, #12]
 8002c1a:	2b30      	cmp	r3, #48	; 0x30
 8002c1c:	f040 843b 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8002c20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c22:	4613      	mov	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c2c:	f000 bc33 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '9' ) {
 8002c30:	4b69      	ldr	r3, [pc, #420]	; (8002dd8 <USART2_IRQHandler+0x1614>)
 8002c32:	7a9b      	ldrb	r3, [r3, #10]
 8002c34:	2b39      	cmp	r3, #57	; 0x39
 8002c36:	f040 842e 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
					n = n*10 + 9;
 8002c3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	3309      	adds	r3, #9
 8002c46:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8002c48:	4b63      	ldr	r3, [pc, #396]	; (8002dd8 <USART2_IRQHandler+0x1614>)
 8002c4a:	7adb      	ldrb	r3, [r3, #11]
 8002c4c:	2b30      	cmp	r3, #48	; 0x30
 8002c4e:	f040 8422 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8002c52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c54:	4613      	mov	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8002c5e:	4b5e      	ldr	r3, [pc, #376]	; (8002dd8 <USART2_IRQHandler+0x1614>)
 8002c60:	7b1b      	ldrb	r3, [r3, #12]
 8002c62:	2b30      	cmp	r3, #48	; 0x30
 8002c64:	f040 8417 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8002c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c74:	f000 bc0f 	b.w	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				}
			} else if ( buffer[9] == '7' ) {
 8002c78:	4b57      	ldr	r3, [pc, #348]	; (8002dd8 <USART2_IRQHandler+0x1614>)
 8002c7a:	7a5b      	ldrb	r3, [r3, #9]
 8002c7c:	2b37      	cmp	r3, #55	; 0x37
 8002c7e:	f040 8158 	bne.w	8002f32 <USART2_IRQHandler+0x176e>
				n = 7;
 8002c82:	2307      	movs	r3, #7
 8002c84:	62fb      	str	r3, [r7, #44]	; 0x2c
				if ( buffer[10] == '0' )
 8002c86:	4b54      	ldr	r3, [pc, #336]	; (8002dd8 <USART2_IRQHandler+0x1614>)
 8002c88:	7a9b      	ldrb	r3, [r3, #10]
 8002c8a:	2b30      	cmp	r3, #48	; 0x30
 8002c8c:	d11c      	bne.n	8002cc8 <USART2_IRQHandler+0x1504>
				{
					n = n*10;
 8002c8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c90:	4613      	mov	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8002c9a:	4b4f      	ldr	r3, [pc, #316]	; (8002dd8 <USART2_IRQHandler+0x1614>)
 8002c9c:	7adb      	ldrb	r3, [r3, #11]
 8002c9e:	2b30      	cmp	r3, #48	; 0x30
 8002ca0:	f040 83f9 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8002ca4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8002cb0:	4b49      	ldr	r3, [pc, #292]	; (8002dd8 <USART2_IRQHandler+0x1614>)
 8002cb2:	7b1b      	ldrb	r3, [r3, #12]
 8002cb4:	2b30      	cmp	r3, #48	; 0x30
 8002cb6:	f040 83ee 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8002cba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cc6:	e3e6      	b.n	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '1' ) {
 8002cc8:	4b43      	ldr	r3, [pc, #268]	; (8002dd8 <USART2_IRQHandler+0x1614>)
 8002cca:	7a9b      	ldrb	r3, [r3, #10]
 8002ccc:	2b31      	cmp	r3, #49	; 0x31
 8002cce:	d11d      	bne.n	8002d0c <USART2_IRQHandler+0x1548>
					n = n*10 + 1;
 8002cd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	3301      	adds	r3, #1
 8002cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8002cde:	4b3e      	ldr	r3, [pc, #248]	; (8002dd8 <USART2_IRQHandler+0x1614>)
 8002ce0:	7adb      	ldrb	r3, [r3, #11]
 8002ce2:	2b30      	cmp	r3, #48	; 0x30
 8002ce4:	f040 83d7 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8002ce8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cea:	4613      	mov	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4413      	add	r3, r2
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8002cf4:	4b38      	ldr	r3, [pc, #224]	; (8002dd8 <USART2_IRQHandler+0x1614>)
 8002cf6:	7b1b      	ldrb	r3, [r3, #12]
 8002cf8:	2b30      	cmp	r3, #48	; 0x30
 8002cfa:	f040 83cc 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8002cfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d00:	4613      	mov	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d0a:	e3c4      	b.n	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '2' ) {
 8002d0c:	4b32      	ldr	r3, [pc, #200]	; (8002dd8 <USART2_IRQHandler+0x1614>)
 8002d0e:	7a9b      	ldrb	r3, [r3, #10]
 8002d10:	2b32      	cmp	r3, #50	; 0x32
 8002d12:	d11d      	bne.n	8002d50 <USART2_IRQHandler+0x158c>
					n = n*10 + 2;
 8002d14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d16:	4613      	mov	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4413      	add	r3, r2
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	3302      	adds	r3, #2
 8002d20:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8002d22:	4b2d      	ldr	r3, [pc, #180]	; (8002dd8 <USART2_IRQHandler+0x1614>)
 8002d24:	7adb      	ldrb	r3, [r3, #11]
 8002d26:	2b30      	cmp	r3, #48	; 0x30
 8002d28:	f040 83b5 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8002d2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d2e:	4613      	mov	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4413      	add	r3, r2
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8002d38:	4b27      	ldr	r3, [pc, #156]	; (8002dd8 <USART2_IRQHandler+0x1614>)
 8002d3a:	7b1b      	ldrb	r3, [r3, #12]
 8002d3c:	2b30      	cmp	r3, #48	; 0x30
 8002d3e:	f040 83aa 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8002d42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d44:	4613      	mov	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d4e:	e3a2      	b.n	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '3' ) {
 8002d50:	4b21      	ldr	r3, [pc, #132]	; (8002dd8 <USART2_IRQHandler+0x1614>)
 8002d52:	7a9b      	ldrb	r3, [r3, #10]
 8002d54:	2b33      	cmp	r3, #51	; 0x33
 8002d56:	d11d      	bne.n	8002d94 <USART2_IRQHandler+0x15d0>
					n = n*10 + 3;
 8002d58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	3303      	adds	r3, #3
 8002d64:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8002d66:	4b1c      	ldr	r3, [pc, #112]	; (8002dd8 <USART2_IRQHandler+0x1614>)
 8002d68:	7adb      	ldrb	r3, [r3, #11]
 8002d6a:	2b30      	cmp	r3, #48	; 0x30
 8002d6c:	f040 8393 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8002d70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d72:	4613      	mov	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8002d7c:	4b16      	ldr	r3, [pc, #88]	; (8002dd8 <USART2_IRQHandler+0x1614>)
 8002d7e:	7b1b      	ldrb	r3, [r3, #12]
 8002d80:	2b30      	cmp	r3, #48	; 0x30
 8002d82:	f040 8388 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8002d86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d88:	4613      	mov	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d92:	e380      	b.n	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '4' ) {
 8002d94:	4b10      	ldr	r3, [pc, #64]	; (8002dd8 <USART2_IRQHandler+0x1614>)
 8002d96:	7a9b      	ldrb	r3, [r3, #10]
 8002d98:	2b34      	cmp	r3, #52	; 0x34
 8002d9a:	d11f      	bne.n	8002ddc <USART2_IRQHandler+0x1618>
					n = n*10 + 4;
 8002d9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d9e:	4613      	mov	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	3304      	adds	r3, #4
 8002da8:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8002daa:	4b0b      	ldr	r3, [pc, #44]	; (8002dd8 <USART2_IRQHandler+0x1614>)
 8002dac:	7adb      	ldrb	r3, [r3, #11]
 8002dae:	2b30      	cmp	r3, #48	; 0x30
 8002db0:	f040 8371 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8002db4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002db6:	4613      	mov	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8002dc0:	4b05      	ldr	r3, [pc, #20]	; (8002dd8 <USART2_IRQHandler+0x1614>)
 8002dc2:	7b1b      	ldrb	r3, [r3, #12]
 8002dc4:	2b30      	cmp	r3, #48	; 0x30
 8002dc6:	f040 8366 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8002dca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dcc:	4613      	mov	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dd6:	e35e      	b.n	8003496 <USART2_IRQHandler+0x1cd2>
 8002dd8:	2000030c 	.word	0x2000030c
						}
					}
				} else if ( buffer[10] == '5' ) {
 8002ddc:	4bad      	ldr	r3, [pc, #692]	; (8003094 <USART2_IRQHandler+0x18d0>)
 8002dde:	7a9b      	ldrb	r3, [r3, #10]
 8002de0:	2b35      	cmp	r3, #53	; 0x35
 8002de2:	d11d      	bne.n	8002e20 <USART2_IRQHandler+0x165c>
					n = n*10 + 5;
 8002de4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002de6:	4613      	mov	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	3305      	adds	r3, #5
 8002df0:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8002df2:	4ba8      	ldr	r3, [pc, #672]	; (8003094 <USART2_IRQHandler+0x18d0>)
 8002df4:	7adb      	ldrb	r3, [r3, #11]
 8002df6:	2b30      	cmp	r3, #48	; 0x30
 8002df8:	f040 834d 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8002dfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dfe:	4613      	mov	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8002e08:	4ba2      	ldr	r3, [pc, #648]	; (8003094 <USART2_IRQHandler+0x18d0>)
 8002e0a:	7b1b      	ldrb	r3, [r3, #12]
 8002e0c:	2b30      	cmp	r3, #48	; 0x30
 8002e0e:	f040 8342 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8002e12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e14:	4613      	mov	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	4413      	add	r3, r2
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e1e:	e33a      	b.n	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '6' ) {
 8002e20:	4b9c      	ldr	r3, [pc, #624]	; (8003094 <USART2_IRQHandler+0x18d0>)
 8002e22:	7a9b      	ldrb	r3, [r3, #10]
 8002e24:	2b36      	cmp	r3, #54	; 0x36
 8002e26:	d11d      	bne.n	8002e64 <USART2_IRQHandler+0x16a0>
					n = n*10 + 6;
 8002e28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	3306      	adds	r3, #6
 8002e34:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8002e36:	4b97      	ldr	r3, [pc, #604]	; (8003094 <USART2_IRQHandler+0x18d0>)
 8002e38:	7adb      	ldrb	r3, [r3, #11]
 8002e3a:	2b30      	cmp	r3, #48	; 0x30
 8002e3c:	f040 832b 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8002e40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e42:	4613      	mov	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8002e4c:	4b91      	ldr	r3, [pc, #580]	; (8003094 <USART2_IRQHandler+0x18d0>)
 8002e4e:	7b1b      	ldrb	r3, [r3, #12]
 8002e50:	2b30      	cmp	r3, #48	; 0x30
 8002e52:	f040 8320 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8002e56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e58:	4613      	mov	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4413      	add	r3, r2
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e62:	e318      	b.n	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '7' ) {
 8002e64:	4b8b      	ldr	r3, [pc, #556]	; (8003094 <USART2_IRQHandler+0x18d0>)
 8002e66:	7a9b      	ldrb	r3, [r3, #10]
 8002e68:	2b37      	cmp	r3, #55	; 0x37
 8002e6a:	d11d      	bne.n	8002ea8 <USART2_IRQHandler+0x16e4>
					n = n*10 + 7;
 8002e6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e6e:	4613      	mov	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	3307      	adds	r3, #7
 8002e78:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8002e7a:	4b86      	ldr	r3, [pc, #536]	; (8003094 <USART2_IRQHandler+0x18d0>)
 8002e7c:	7adb      	ldrb	r3, [r3, #11]
 8002e7e:	2b30      	cmp	r3, #48	; 0x30
 8002e80:	f040 8309 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8002e84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e86:	4613      	mov	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4413      	add	r3, r2
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8002e90:	4b80      	ldr	r3, [pc, #512]	; (8003094 <USART2_IRQHandler+0x18d0>)
 8002e92:	7b1b      	ldrb	r3, [r3, #12]
 8002e94:	2b30      	cmp	r3, #48	; 0x30
 8002e96:	f040 82fe 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8002e9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ea6:	e2f6      	b.n	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '8' ) {
 8002ea8:	4b7a      	ldr	r3, [pc, #488]	; (8003094 <USART2_IRQHandler+0x18d0>)
 8002eaa:	7a9b      	ldrb	r3, [r3, #10]
 8002eac:	2b38      	cmp	r3, #56	; 0x38
 8002eae:	d11d      	bne.n	8002eec <USART2_IRQHandler+0x1728>
					n = n*10 + 8;
 8002eb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	3308      	adds	r3, #8
 8002ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8002ebe:	4b75      	ldr	r3, [pc, #468]	; (8003094 <USART2_IRQHandler+0x18d0>)
 8002ec0:	7adb      	ldrb	r3, [r3, #11]
 8002ec2:	2b30      	cmp	r3, #48	; 0x30
 8002ec4:	f040 82e7 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8002ec8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eca:	4613      	mov	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8002ed4:	4b6f      	ldr	r3, [pc, #444]	; (8003094 <USART2_IRQHandler+0x18d0>)
 8002ed6:	7b1b      	ldrb	r3, [r3, #12]
 8002ed8:	2b30      	cmp	r3, #48	; 0x30
 8002eda:	f040 82dc 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8002ede:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4413      	add	r3, r2
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eea:	e2d4      	b.n	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '9' ) {
 8002eec:	4b69      	ldr	r3, [pc, #420]	; (8003094 <USART2_IRQHandler+0x18d0>)
 8002eee:	7a9b      	ldrb	r3, [r3, #10]
 8002ef0:	2b39      	cmp	r3, #57	; 0x39
 8002ef2:	f040 82d0 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
					n = n*10 + 9;
 8002ef6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ef8:	4613      	mov	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	3309      	adds	r3, #9
 8002f02:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8002f04:	4b63      	ldr	r3, [pc, #396]	; (8003094 <USART2_IRQHandler+0x18d0>)
 8002f06:	7adb      	ldrb	r3, [r3, #11]
 8002f08:	2b30      	cmp	r3, #48	; 0x30
 8002f0a:	f040 82c4 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8002f0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f10:	4613      	mov	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8002f1a:	4b5e      	ldr	r3, [pc, #376]	; (8003094 <USART2_IRQHandler+0x18d0>)
 8002f1c:	7b1b      	ldrb	r3, [r3, #12]
 8002f1e:	2b30      	cmp	r3, #48	; 0x30
 8002f20:	f040 82b9 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8002f24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f26:	4613      	mov	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f30:	e2b1      	b.n	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				}
			} else if ( buffer[9] == '8' ) {
 8002f32:	4b58      	ldr	r3, [pc, #352]	; (8003094 <USART2_IRQHandler+0x18d0>)
 8002f34:	7a5b      	ldrb	r3, [r3, #9]
 8002f36:	2b38      	cmp	r3, #56	; 0x38
 8002f38:	f040 8159 	bne.w	80031ee <USART2_IRQHandler+0x1a2a>
				n = 8;
 8002f3c:	2308      	movs	r3, #8
 8002f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
				if ( buffer[10] == '0' )
 8002f40:	4b54      	ldr	r3, [pc, #336]	; (8003094 <USART2_IRQHandler+0x18d0>)
 8002f42:	7a9b      	ldrb	r3, [r3, #10]
 8002f44:	2b30      	cmp	r3, #48	; 0x30
 8002f46:	d11c      	bne.n	8002f82 <USART2_IRQHandler+0x17be>
				{
					n = n*10;
 8002f48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4413      	add	r3, r2
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8002f54:	4b4f      	ldr	r3, [pc, #316]	; (8003094 <USART2_IRQHandler+0x18d0>)
 8002f56:	7adb      	ldrb	r3, [r3, #11]
 8002f58:	2b30      	cmp	r3, #48	; 0x30
 8002f5a:	f040 829c 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8002f5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f60:	4613      	mov	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8002f6a:	4b4a      	ldr	r3, [pc, #296]	; (8003094 <USART2_IRQHandler+0x18d0>)
 8002f6c:	7b1b      	ldrb	r3, [r3, #12]
 8002f6e:	2b30      	cmp	r3, #48	; 0x30
 8002f70:	f040 8291 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8002f74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f76:	4613      	mov	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4413      	add	r3, r2
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f80:	e289      	b.n	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '1' ) {
 8002f82:	4b44      	ldr	r3, [pc, #272]	; (8003094 <USART2_IRQHandler+0x18d0>)
 8002f84:	7a9b      	ldrb	r3, [r3, #10]
 8002f86:	2b31      	cmp	r3, #49	; 0x31
 8002f88:	d11d      	bne.n	8002fc6 <USART2_IRQHandler+0x1802>
					n = n*10 + 1;
 8002f8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	3301      	adds	r3, #1
 8002f96:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8002f98:	4b3e      	ldr	r3, [pc, #248]	; (8003094 <USART2_IRQHandler+0x18d0>)
 8002f9a:	7adb      	ldrb	r3, [r3, #11]
 8002f9c:	2b30      	cmp	r3, #48	; 0x30
 8002f9e:	f040 827a 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8002fa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8002fae:	4b39      	ldr	r3, [pc, #228]	; (8003094 <USART2_IRQHandler+0x18d0>)
 8002fb0:	7b1b      	ldrb	r3, [r3, #12]
 8002fb2:	2b30      	cmp	r3, #48	; 0x30
 8002fb4:	f040 826f 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8002fb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fba:	4613      	mov	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fc4:	e267      	b.n	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '2' ) {
 8002fc6:	4b33      	ldr	r3, [pc, #204]	; (8003094 <USART2_IRQHandler+0x18d0>)
 8002fc8:	7a9b      	ldrb	r3, [r3, #10]
 8002fca:	2b32      	cmp	r3, #50	; 0x32
 8002fcc:	d11d      	bne.n	800300a <USART2_IRQHandler+0x1846>
					n = n*10 + 2;
 8002fce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4413      	add	r3, r2
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	3302      	adds	r3, #2
 8002fda:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8002fdc:	4b2d      	ldr	r3, [pc, #180]	; (8003094 <USART2_IRQHandler+0x18d0>)
 8002fde:	7adb      	ldrb	r3, [r3, #11]
 8002fe0:	2b30      	cmp	r3, #48	; 0x30
 8002fe2:	f040 8258 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8002fe6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fe8:	4613      	mov	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8002ff2:	4b28      	ldr	r3, [pc, #160]	; (8003094 <USART2_IRQHandler+0x18d0>)
 8002ff4:	7b1b      	ldrb	r3, [r3, #12]
 8002ff6:	2b30      	cmp	r3, #48	; 0x30
 8002ff8:	f040 824d 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8002ffc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ffe:	4613      	mov	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003008:	e245      	b.n	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '3' ) {
 800300a:	4b22      	ldr	r3, [pc, #136]	; (8003094 <USART2_IRQHandler+0x18d0>)
 800300c:	7a9b      	ldrb	r3, [r3, #10]
 800300e:	2b33      	cmp	r3, #51	; 0x33
 8003010:	d11d      	bne.n	800304e <USART2_IRQHandler+0x188a>
					n = n*10 + 3;
 8003012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003014:	4613      	mov	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	3303      	adds	r3, #3
 800301e:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8003020:	4b1c      	ldr	r3, [pc, #112]	; (8003094 <USART2_IRQHandler+0x18d0>)
 8003022:	7adb      	ldrb	r3, [r3, #11]
 8003024:	2b30      	cmp	r3, #48	; 0x30
 8003026:	f040 8236 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 800302a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800302c:	4613      	mov	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4413      	add	r3, r2
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8003036:	4b17      	ldr	r3, [pc, #92]	; (8003094 <USART2_IRQHandler+0x18d0>)
 8003038:	7b1b      	ldrb	r3, [r3, #12]
 800303a:	2b30      	cmp	r3, #48	; 0x30
 800303c:	f040 822b 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8003040:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003042:	4613      	mov	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4413      	add	r3, r2
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800304c:	e223      	b.n	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '4' ) {
 800304e:	4b11      	ldr	r3, [pc, #68]	; (8003094 <USART2_IRQHandler+0x18d0>)
 8003050:	7a9b      	ldrb	r3, [r3, #10]
 8003052:	2b34      	cmp	r3, #52	; 0x34
 8003054:	d120      	bne.n	8003098 <USART2_IRQHandler+0x18d4>
					n = n*10 + 4;
 8003056:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003058:	4613      	mov	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	3304      	adds	r3, #4
 8003062:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8003064:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <USART2_IRQHandler+0x18d0>)
 8003066:	7adb      	ldrb	r3, [r3, #11]
 8003068:	2b30      	cmp	r3, #48	; 0x30
 800306a:	f040 8214 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 800306e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003070:	4613      	mov	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 800307a:	4b06      	ldr	r3, [pc, #24]	; (8003094 <USART2_IRQHandler+0x18d0>)
 800307c:	7b1b      	ldrb	r3, [r3, #12]
 800307e:	2b30      	cmp	r3, #48	; 0x30
 8003080:	f040 8209 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8003084:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003086:	4613      	mov	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4413      	add	r3, r2
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003090:	e201      	b.n	8003496 <USART2_IRQHandler+0x1cd2>
 8003092:	bf00      	nop
 8003094:	2000030c 	.word	0x2000030c
						}
					}
				} else if ( buffer[10] == '5' ) {
 8003098:	4bad      	ldr	r3, [pc, #692]	; (8003350 <USART2_IRQHandler+0x1b8c>)
 800309a:	7a9b      	ldrb	r3, [r3, #10]
 800309c:	2b35      	cmp	r3, #53	; 0x35
 800309e:	d11d      	bne.n	80030dc <USART2_IRQHandler+0x1918>
					n = n*10 + 5;
 80030a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030a2:	4613      	mov	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4413      	add	r3, r2
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	3305      	adds	r3, #5
 80030ac:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 80030ae:	4ba8      	ldr	r3, [pc, #672]	; (8003350 <USART2_IRQHandler+0x1b8c>)
 80030b0:	7adb      	ldrb	r3, [r3, #11]
 80030b2:	2b30      	cmp	r3, #48	; 0x30
 80030b4:	f040 81ef 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 80030b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030ba:	4613      	mov	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4413      	add	r3, r2
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 80030c4:	4ba2      	ldr	r3, [pc, #648]	; (8003350 <USART2_IRQHandler+0x1b8c>)
 80030c6:	7b1b      	ldrb	r3, [r3, #12]
 80030c8:	2b30      	cmp	r3, #48	; 0x30
 80030ca:	f040 81e4 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 80030ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030d0:	4613      	mov	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030da:	e1dc      	b.n	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '6' ) {
 80030dc:	4b9c      	ldr	r3, [pc, #624]	; (8003350 <USART2_IRQHandler+0x1b8c>)
 80030de:	7a9b      	ldrb	r3, [r3, #10]
 80030e0:	2b36      	cmp	r3, #54	; 0x36
 80030e2:	d11d      	bne.n	8003120 <USART2_IRQHandler+0x195c>
					n = n*10 + 6;
 80030e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030e6:	4613      	mov	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	4413      	add	r3, r2
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	3306      	adds	r3, #6
 80030f0:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 80030f2:	4b97      	ldr	r3, [pc, #604]	; (8003350 <USART2_IRQHandler+0x1b8c>)
 80030f4:	7adb      	ldrb	r3, [r3, #11]
 80030f6:	2b30      	cmp	r3, #48	; 0x30
 80030f8:	f040 81cd 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 80030fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030fe:	4613      	mov	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4413      	add	r3, r2
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8003108:	4b91      	ldr	r3, [pc, #580]	; (8003350 <USART2_IRQHandler+0x1b8c>)
 800310a:	7b1b      	ldrb	r3, [r3, #12]
 800310c:	2b30      	cmp	r3, #48	; 0x30
 800310e:	f040 81c2 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8003112:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003114:	4613      	mov	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	4413      	add	r3, r2
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800311e:	e1ba      	b.n	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '7' ) {
 8003120:	4b8b      	ldr	r3, [pc, #556]	; (8003350 <USART2_IRQHandler+0x1b8c>)
 8003122:	7a9b      	ldrb	r3, [r3, #10]
 8003124:	2b37      	cmp	r3, #55	; 0x37
 8003126:	d11d      	bne.n	8003164 <USART2_IRQHandler+0x19a0>
					n = n*10 + 7;
 8003128:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800312a:	4613      	mov	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4413      	add	r3, r2
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	3307      	adds	r3, #7
 8003134:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8003136:	4b86      	ldr	r3, [pc, #536]	; (8003350 <USART2_IRQHandler+0x1b8c>)
 8003138:	7adb      	ldrb	r3, [r3, #11]
 800313a:	2b30      	cmp	r3, #48	; 0x30
 800313c:	f040 81ab 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8003140:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003142:	4613      	mov	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4413      	add	r3, r2
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 800314c:	4b80      	ldr	r3, [pc, #512]	; (8003350 <USART2_IRQHandler+0x1b8c>)
 800314e:	7b1b      	ldrb	r3, [r3, #12]
 8003150:	2b30      	cmp	r3, #48	; 0x30
 8003152:	f040 81a0 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8003156:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003158:	4613      	mov	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003162:	e198      	b.n	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '8' ) {
 8003164:	4b7a      	ldr	r3, [pc, #488]	; (8003350 <USART2_IRQHandler+0x1b8c>)
 8003166:	7a9b      	ldrb	r3, [r3, #10]
 8003168:	2b38      	cmp	r3, #56	; 0x38
 800316a:	d11d      	bne.n	80031a8 <USART2_IRQHandler+0x19e4>
					n = n*10 + 8;
 800316c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800316e:	4613      	mov	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4413      	add	r3, r2
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	3308      	adds	r3, #8
 8003178:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 800317a:	4b75      	ldr	r3, [pc, #468]	; (8003350 <USART2_IRQHandler+0x1b8c>)
 800317c:	7adb      	ldrb	r3, [r3, #11]
 800317e:	2b30      	cmp	r3, #48	; 0x30
 8003180:	f040 8189 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8003184:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003186:	4613      	mov	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	4413      	add	r3, r2
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8003190:	4b6f      	ldr	r3, [pc, #444]	; (8003350 <USART2_IRQHandler+0x1b8c>)
 8003192:	7b1b      	ldrb	r3, [r3, #12]
 8003194:	2b30      	cmp	r3, #48	; 0x30
 8003196:	f040 817e 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 800319a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800319c:	4613      	mov	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031a6:	e176      	b.n	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '9' ) {
 80031a8:	4b69      	ldr	r3, [pc, #420]	; (8003350 <USART2_IRQHandler+0x1b8c>)
 80031aa:	7a9b      	ldrb	r3, [r3, #10]
 80031ac:	2b39      	cmp	r3, #57	; 0x39
 80031ae:	f040 8172 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
					n = n*10 + 9;
 80031b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031b4:	4613      	mov	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	3309      	adds	r3, #9
 80031be:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 80031c0:	4b63      	ldr	r3, [pc, #396]	; (8003350 <USART2_IRQHandler+0x1b8c>)
 80031c2:	7adb      	ldrb	r3, [r3, #11]
 80031c4:	2b30      	cmp	r3, #48	; 0x30
 80031c6:	f040 8166 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 80031ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031cc:	4613      	mov	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 80031d6:	4b5e      	ldr	r3, [pc, #376]	; (8003350 <USART2_IRQHandler+0x1b8c>)
 80031d8:	7b1b      	ldrb	r3, [r3, #12]
 80031da:	2b30      	cmp	r3, #48	; 0x30
 80031dc:	f040 815b 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 80031e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031e2:	4613      	mov	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031ec:	e153      	b.n	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				}
			} else if ( buffer[9] == '9' ) {
 80031ee:	4b58      	ldr	r3, [pc, #352]	; (8003350 <USART2_IRQHandler+0x1b8c>)
 80031f0:	7a5b      	ldrb	r3, [r3, #9]
 80031f2:	2b39      	cmp	r3, #57	; 0x39
 80031f4:	f040 814f 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
				n = 9;
 80031f8:	2309      	movs	r3, #9
 80031fa:	62fb      	str	r3, [r7, #44]	; 0x2c
				if ( buffer[10] == '0' )
 80031fc:	4b54      	ldr	r3, [pc, #336]	; (8003350 <USART2_IRQHandler+0x1b8c>)
 80031fe:	7a9b      	ldrb	r3, [r3, #10]
 8003200:	2b30      	cmp	r3, #48	; 0x30
 8003202:	d11c      	bne.n	800323e <USART2_IRQHandler+0x1a7a>
				{
					n = n*10;
 8003204:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003206:	4613      	mov	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4413      	add	r3, r2
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8003210:	4b4f      	ldr	r3, [pc, #316]	; (8003350 <USART2_IRQHandler+0x1b8c>)
 8003212:	7adb      	ldrb	r3, [r3, #11]
 8003214:	2b30      	cmp	r3, #48	; 0x30
 8003216:	f040 813e 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 800321a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800321c:	4613      	mov	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8003226:	4b4a      	ldr	r3, [pc, #296]	; (8003350 <USART2_IRQHandler+0x1b8c>)
 8003228:	7b1b      	ldrb	r3, [r3, #12]
 800322a:	2b30      	cmp	r3, #48	; 0x30
 800322c:	f040 8133 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8003230:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003232:	4613      	mov	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4413      	add	r3, r2
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800323c:	e12b      	b.n	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '1' ) {
 800323e:	4b44      	ldr	r3, [pc, #272]	; (8003350 <USART2_IRQHandler+0x1b8c>)
 8003240:	7a9b      	ldrb	r3, [r3, #10]
 8003242:	2b31      	cmp	r3, #49	; 0x31
 8003244:	d11d      	bne.n	8003282 <USART2_IRQHandler+0x1abe>
					n = n*10 + 1;
 8003246:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003248:	4613      	mov	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	3301      	adds	r3, #1
 8003252:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8003254:	4b3e      	ldr	r3, [pc, #248]	; (8003350 <USART2_IRQHandler+0x1b8c>)
 8003256:	7adb      	ldrb	r3, [r3, #11]
 8003258:	2b30      	cmp	r3, #48	; 0x30
 800325a:	f040 811c 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 800325e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003260:	4613      	mov	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 800326a:	4b39      	ldr	r3, [pc, #228]	; (8003350 <USART2_IRQHandler+0x1b8c>)
 800326c:	7b1b      	ldrb	r3, [r3, #12]
 800326e:	2b30      	cmp	r3, #48	; 0x30
 8003270:	f040 8111 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8003274:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003276:	4613      	mov	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4413      	add	r3, r2
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003280:	e109      	b.n	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '2' ) {
 8003282:	4b33      	ldr	r3, [pc, #204]	; (8003350 <USART2_IRQHandler+0x1b8c>)
 8003284:	7a9b      	ldrb	r3, [r3, #10]
 8003286:	2b32      	cmp	r3, #50	; 0x32
 8003288:	d11d      	bne.n	80032c6 <USART2_IRQHandler+0x1b02>
					n = n*10 + 2;
 800328a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800328c:	4613      	mov	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	3302      	adds	r3, #2
 8003296:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8003298:	4b2d      	ldr	r3, [pc, #180]	; (8003350 <USART2_IRQHandler+0x1b8c>)
 800329a:	7adb      	ldrb	r3, [r3, #11]
 800329c:	2b30      	cmp	r3, #48	; 0x30
 800329e:	f040 80fa 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 80032a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032a4:	4613      	mov	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4413      	add	r3, r2
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 80032ae:	4b28      	ldr	r3, [pc, #160]	; (8003350 <USART2_IRQHandler+0x1b8c>)
 80032b0:	7b1b      	ldrb	r3, [r3, #12]
 80032b2:	2b30      	cmp	r3, #48	; 0x30
 80032b4:	f040 80ef 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 80032b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032ba:	4613      	mov	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032c4:	e0e7      	b.n	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '3' ) {
 80032c6:	4b22      	ldr	r3, [pc, #136]	; (8003350 <USART2_IRQHandler+0x1b8c>)
 80032c8:	7a9b      	ldrb	r3, [r3, #10]
 80032ca:	2b33      	cmp	r3, #51	; 0x33
 80032cc:	d11d      	bne.n	800330a <USART2_IRQHandler+0x1b46>
					n = n*10 + 3;
 80032ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032d0:	4613      	mov	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	3303      	adds	r3, #3
 80032da:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 80032dc:	4b1c      	ldr	r3, [pc, #112]	; (8003350 <USART2_IRQHandler+0x1b8c>)
 80032de:	7adb      	ldrb	r3, [r3, #11]
 80032e0:	2b30      	cmp	r3, #48	; 0x30
 80032e2:	f040 80d8 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 80032e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032e8:	4613      	mov	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4413      	add	r3, r2
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 80032f2:	4b17      	ldr	r3, [pc, #92]	; (8003350 <USART2_IRQHandler+0x1b8c>)
 80032f4:	7b1b      	ldrb	r3, [r3, #12]
 80032f6:	2b30      	cmp	r3, #48	; 0x30
 80032f8:	f040 80cd 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 80032fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032fe:	4613      	mov	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003308:	e0c5      	b.n	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '4' ) {
 800330a:	4b11      	ldr	r3, [pc, #68]	; (8003350 <USART2_IRQHandler+0x1b8c>)
 800330c:	7a9b      	ldrb	r3, [r3, #10]
 800330e:	2b34      	cmp	r3, #52	; 0x34
 8003310:	d120      	bne.n	8003354 <USART2_IRQHandler+0x1b90>
					n = n*10 + 4;
 8003312:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003314:	4613      	mov	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	3304      	adds	r3, #4
 800331e:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 8003320:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <USART2_IRQHandler+0x1b8c>)
 8003322:	7adb      	ldrb	r3, [r3, #11]
 8003324:	2b30      	cmp	r3, #48	; 0x30
 8003326:	f040 80b6 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 800332a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800332c:	4613      	mov	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8003336:	4b06      	ldr	r3, [pc, #24]	; (8003350 <USART2_IRQHandler+0x1b8c>)
 8003338:	7b1b      	ldrb	r3, [r3, #12]
 800333a:	2b30      	cmp	r3, #48	; 0x30
 800333c:	f040 80ab 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 8003340:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003342:	4613      	mov	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800334c:	e0a3      	b.n	8003496 <USART2_IRQHandler+0x1cd2>
 800334e:	bf00      	nop
 8003350:	2000030c 	.word	0x2000030c
						}
					}
				} else if ( buffer[10] == '5' ) {
 8003354:	4b95      	ldr	r3, [pc, #596]	; (80035ac <USART2_IRQHandler+0x1de8>)
 8003356:	7a9b      	ldrb	r3, [r3, #10]
 8003358:	2b35      	cmp	r3, #53	; 0x35
 800335a:	d11d      	bne.n	8003398 <USART2_IRQHandler+0x1bd4>
					n = n*10 + 5;
 800335c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800335e:	4613      	mov	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	3305      	adds	r3, #5
 8003368:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 800336a:	4b90      	ldr	r3, [pc, #576]	; (80035ac <USART2_IRQHandler+0x1de8>)
 800336c:	7adb      	ldrb	r3, [r3, #11]
 800336e:	2b30      	cmp	r3, #48	; 0x30
 8003370:	f040 8091 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8003374:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003376:	4613      	mov	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4413      	add	r3, r2
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8003380:	4b8a      	ldr	r3, [pc, #552]	; (80035ac <USART2_IRQHandler+0x1de8>)
 8003382:	7b1b      	ldrb	r3, [r3, #12]
 8003384:	2b30      	cmp	r3, #48	; 0x30
 8003386:	f040 8086 	bne.w	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 800338a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800338c:	4613      	mov	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4413      	add	r3, r2
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003396:	e07e      	b.n	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '6' ) {
 8003398:	4b84      	ldr	r3, [pc, #528]	; (80035ac <USART2_IRQHandler+0x1de8>)
 800339a:	7a9b      	ldrb	r3, [r3, #10]
 800339c:	2b36      	cmp	r3, #54	; 0x36
 800339e:	d11b      	bne.n	80033d8 <USART2_IRQHandler+0x1c14>
					n = n*10 + 6;
 80033a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033a2:	4613      	mov	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	3306      	adds	r3, #6
 80033ac:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 80033ae:	4b7f      	ldr	r3, [pc, #508]	; (80035ac <USART2_IRQHandler+0x1de8>)
 80033b0:	7adb      	ldrb	r3, [r3, #11]
 80033b2:	2b30      	cmp	r3, #48	; 0x30
 80033b4:	d16f      	bne.n	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 80033b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033b8:	4613      	mov	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 80033c2:	4b7a      	ldr	r3, [pc, #488]	; (80035ac <USART2_IRQHandler+0x1de8>)
 80033c4:	7b1b      	ldrb	r3, [r3, #12]
 80033c6:	2b30      	cmp	r3, #48	; 0x30
 80033c8:	d165      	bne.n	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 80033ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033cc:	4613      	mov	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033d6:	e05e      	b.n	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '7' ) {
 80033d8:	4b74      	ldr	r3, [pc, #464]	; (80035ac <USART2_IRQHandler+0x1de8>)
 80033da:	7a9b      	ldrb	r3, [r3, #10]
 80033dc:	2b37      	cmp	r3, #55	; 0x37
 80033de:	d11b      	bne.n	8003418 <USART2_IRQHandler+0x1c54>
					n = n*10 + 7;
 80033e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033e2:	4613      	mov	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	3307      	adds	r3, #7
 80033ec:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 80033ee:	4b6f      	ldr	r3, [pc, #444]	; (80035ac <USART2_IRQHandler+0x1de8>)
 80033f0:	7adb      	ldrb	r3, [r3, #11]
 80033f2:	2b30      	cmp	r3, #48	; 0x30
 80033f4:	d14f      	bne.n	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 80033f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033f8:	4613      	mov	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8003402:	4b6a      	ldr	r3, [pc, #424]	; (80035ac <USART2_IRQHandler+0x1de8>)
 8003404:	7b1b      	ldrb	r3, [r3, #12]
 8003406:	2b30      	cmp	r3, #48	; 0x30
 8003408:	d145      	bne.n	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 800340a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800340c:	4613      	mov	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003416:	e03e      	b.n	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '8' ) {
 8003418:	4b64      	ldr	r3, [pc, #400]	; (80035ac <USART2_IRQHandler+0x1de8>)
 800341a:	7a9b      	ldrb	r3, [r3, #10]
 800341c:	2b38      	cmp	r3, #56	; 0x38
 800341e:	d11b      	bne.n	8003458 <USART2_IRQHandler+0x1c94>
					n = n*10 + 8;
 8003420:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003422:	4613      	mov	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	3308      	adds	r3, #8
 800342c:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 800342e:	4b5f      	ldr	r3, [pc, #380]	; (80035ac <USART2_IRQHandler+0x1de8>)
 8003430:	7adb      	ldrb	r3, [r3, #11]
 8003432:	2b30      	cmp	r3, #48	; 0x30
 8003434:	d12f      	bne.n	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8003436:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003438:	4613      	mov	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8003442:	4b5a      	ldr	r3, [pc, #360]	; (80035ac <USART2_IRQHandler+0x1de8>)
 8003444:	7b1b      	ldrb	r3, [r3, #12]
 8003446:	2b30      	cmp	r3, #48	; 0x30
 8003448:	d125      	bne.n	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 800344a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800344c:	4613      	mov	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4413      	add	r3, r2
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003456:	e01e      	b.n	8003496 <USART2_IRQHandler+0x1cd2>
						}
					}
				} else if ( buffer[10] == '9' ) {
 8003458:	4b54      	ldr	r3, [pc, #336]	; (80035ac <USART2_IRQHandler+0x1de8>)
 800345a:	7a9b      	ldrb	r3, [r3, #10]
 800345c:	2b39      	cmp	r3, #57	; 0x39
 800345e:	d11a      	bne.n	8003496 <USART2_IRQHandler+0x1cd2>
					n = n*10 + 9;
 8003460:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003462:	4613      	mov	r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4413      	add	r3, r2
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	3309      	adds	r3, #9
 800346c:	62fb      	str	r3, [r7, #44]	; 0x2c
					if( buffer[11] == '0' ) {
 800346e:	4b4f      	ldr	r3, [pc, #316]	; (80035ac <USART2_IRQHandler+0x1de8>)
 8003470:	7adb      	ldrb	r3, [r3, #11]
 8003472:	2b30      	cmp	r3, #48	; 0x30
 8003474:	d10f      	bne.n	8003496 <USART2_IRQHandler+0x1cd2>
						n = n * 10;
 8003476:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003478:	4613      	mov	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	62fb      	str	r3, [r7, #44]	; 0x2c
						if( buffer[12] == '0' ) {
 8003482:	4b4a      	ldr	r3, [pc, #296]	; (80035ac <USART2_IRQHandler+0x1de8>)
 8003484:	7b1b      	ldrb	r3, [r3, #12]
 8003486:	2b30      	cmp	r3, #48	; 0x30
 8003488:	d105      	bne.n	8003496 <USART2_IRQHandler+0x1cd2>
							n = n * 10;
 800348a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800348c:	4613      	mov	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4413      	add	r3, r2
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	62fb      	str	r3, [r7, #44]	; 0x2c
					}
				}
			}


			if ( n % 100 == 0 ) {
 8003496:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003498:	4b45      	ldr	r3, [pc, #276]	; (80035b0 <USART2_IRQHandler+0x1dec>)
 800349a:	fb83 1302 	smull	r1, r3, r3, r2
 800349e:	1159      	asrs	r1, r3, #5
 80034a0:	17d3      	asrs	r3, r2, #31
 80034a2:	1acb      	subs	r3, r1, r3
 80034a4:	2164      	movs	r1, #100	; 0x64
 80034a6:	fb01 f303 	mul.w	r3, r1, r3
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d121      	bne.n	80034f4 <USART2_IRQHandler+0x1d30>
				if( n >= 500 && n <= 5000 && ( buffer[12] == ']' || buffer[13] == ']') )
 80034b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80034b6:	db16      	blt.n	80034e6 <USART2_IRQHandler+0x1d22>
 80034b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80034be:	4293      	cmp	r3, r2
 80034c0:	dc11      	bgt.n	80034e6 <USART2_IRQHandler+0x1d22>
 80034c2:	4b3a      	ldr	r3, [pc, #232]	; (80035ac <USART2_IRQHandler+0x1de8>)
 80034c4:	7b1b      	ldrb	r3, [r3, #12]
 80034c6:	2b5d      	cmp	r3, #93	; 0x5d
 80034c8:	d003      	beq.n	80034d2 <USART2_IRQHandler+0x1d0e>
 80034ca:	4b38      	ldr	r3, [pc, #224]	; (80035ac <USART2_IRQHandler+0x1de8>)
 80034cc:	7b5b      	ldrb	r3, [r3, #13]
 80034ce:	2b5d      	cmp	r3, #93	; 0x5d
 80034d0:	d109      	bne.n	80034e6 <USART2_IRQHandler+0x1d22>
				{
					set_wait(n);
 80034d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80034d4:	f7fd ffee 	bl	80014b4 <set_wait>
					HAL_UART_Transmit(&huart2, correct1, sizeof(unsigned char) * 45, 100);
 80034d8:	2364      	movs	r3, #100	; 0x64
 80034da:	222d      	movs	r2, #45	; 0x2d
 80034dc:	4935      	ldr	r1, [pc, #212]	; (80035b4 <USART2_IRQHandler+0x1df0>)
 80034de:	4836      	ldr	r0, [pc, #216]	; (80035b8 <USART2_IRQHandler+0x1df4>)
 80034e0:	f003 ffe8 	bl	80074b4 <HAL_UART_Transmit>
 80034e4:	e00c      	b.n	8003500 <USART2_IRQHandler+0x1d3c>
				} else {
					HAL_UART_Transmit(&huart2, error4, sizeof(unsigned char) * 47, 100);
 80034e6:	2364      	movs	r3, #100	; 0x64
 80034e8:	222f      	movs	r2, #47	; 0x2f
 80034ea:	4934      	ldr	r1, [pc, #208]	; (80035bc <USART2_IRQHandler+0x1df8>)
 80034ec:	4832      	ldr	r0, [pc, #200]	; (80035b8 <USART2_IRQHandler+0x1df4>)
 80034ee:	f003 ffe1 	bl	80074b4 <HAL_UART_Transmit>
 80034f2:	e005      	b.n	8003500 <USART2_IRQHandler+0x1d3c>
				}
			} else {
				HAL_UART_Transmit(&huart2, error3, sizeof(unsigned char) * 50, 100);
 80034f4:	2364      	movs	r3, #100	; 0x64
 80034f6:	2232      	movs	r2, #50	; 0x32
 80034f8:	4931      	ldr	r1, [pc, #196]	; (80035c0 <USART2_IRQHandler+0x1dfc>)
 80034fa:	482f      	ldr	r0, [pc, #188]	; (80035b8 <USART2_IRQHandler+0x1df4>)
 80034fc:	f003 ffda 	bl	80074b4 <HAL_UART_Transmit>
			}


			adminReq = 1;
 8003500:	4b30      	ldr	r3, [pc, #192]	; (80035c4 <USART2_IRQHandler+0x1e00>)
 8003502:	2201      	movs	r2, #1
 8003504:	601a      	str	r2, [r3, #0]
				&& buffer[5] == 'A' && buffer[6] == 'I' && buffer[7] == 'T' && buffer[8] == '[') {
 8003506:	e260      	b.n	80039ca <USART2_IRQHandler+0x2206>

		} else if ( adminIn == 1 && buffer[0] == 'S' && buffer[1] == 'E' && buffer[2] == 'T' && buffer[3] == ' ' && buffer[4] == 'L'
 8003508:	4b2f      	ldr	r3, [pc, #188]	; (80035c8 <USART2_IRQHandler+0x1e04>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d161      	bne.n	80035d4 <USART2_IRQHandler+0x1e10>
 8003510:	4b26      	ldr	r3, [pc, #152]	; (80035ac <USART2_IRQHandler+0x1de8>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	2b53      	cmp	r3, #83	; 0x53
 8003516:	d15d      	bne.n	80035d4 <USART2_IRQHandler+0x1e10>
 8003518:	4b24      	ldr	r3, [pc, #144]	; (80035ac <USART2_IRQHandler+0x1de8>)
 800351a:	785b      	ldrb	r3, [r3, #1]
 800351c:	2b45      	cmp	r3, #69	; 0x45
 800351e:	d159      	bne.n	80035d4 <USART2_IRQHandler+0x1e10>
 8003520:	4b22      	ldr	r3, [pc, #136]	; (80035ac <USART2_IRQHandler+0x1de8>)
 8003522:	789b      	ldrb	r3, [r3, #2]
 8003524:	2b54      	cmp	r3, #84	; 0x54
 8003526:	d155      	bne.n	80035d4 <USART2_IRQHandler+0x1e10>
 8003528:	4b20      	ldr	r3, [pc, #128]	; (80035ac <USART2_IRQHandler+0x1de8>)
 800352a:	78db      	ldrb	r3, [r3, #3]
 800352c:	2b20      	cmp	r3, #32
 800352e:	d151      	bne.n	80035d4 <USART2_IRQHandler+0x1e10>
 8003530:	4b1e      	ldr	r3, [pc, #120]	; (80035ac <USART2_IRQHandler+0x1de8>)
 8003532:	791b      	ldrb	r3, [r3, #4]
 8003534:	2b4c      	cmp	r3, #76	; 0x4c
 8003536:	d14d      	bne.n	80035d4 <USART2_IRQHandler+0x1e10>
				&& buffer[5] == 'E' && buffer[6] == 'D' ) {
 8003538:	4b1c      	ldr	r3, [pc, #112]	; (80035ac <USART2_IRQHandler+0x1de8>)
 800353a:	795b      	ldrb	r3, [r3, #5]
 800353c:	2b45      	cmp	r3, #69	; 0x45
 800353e:	d149      	bne.n	80035d4 <USART2_IRQHandler+0x1e10>
 8003540:	4b1a      	ldr	r3, [pc, #104]	; (80035ac <USART2_IRQHandler+0x1de8>)
 8003542:	799b      	ldrb	r3, [r3, #6]
 8003544:	2b44      	cmp	r3, #68	; 0x44
 8003546:	d145      	bne.n	80035d4 <USART2_IRQHandler+0x1e10>

			adminReq = 1;
 8003548:	4b1e      	ldr	r3, [pc, #120]	; (80035c4 <USART2_IRQHandler+0x1e00>)
 800354a:	2201      	movs	r2, #1
 800354c:	601a      	str	r2, [r3, #0]
			int on;
			if ( buffer[8] == 'O' && buffer[9] == 'F' && buffer[10] == 'F')
 800354e:	4b17      	ldr	r3, [pc, #92]	; (80035ac <USART2_IRQHandler+0x1de8>)
 8003550:	7a1b      	ldrb	r3, [r3, #8]
 8003552:	2b4f      	cmp	r3, #79	; 0x4f
 8003554:	d113      	bne.n	800357e <USART2_IRQHandler+0x1dba>
 8003556:	4b15      	ldr	r3, [pc, #84]	; (80035ac <USART2_IRQHandler+0x1de8>)
 8003558:	7a5b      	ldrb	r3, [r3, #9]
 800355a:	2b46      	cmp	r3, #70	; 0x46
 800355c:	d10f      	bne.n	800357e <USART2_IRQHandler+0x1dba>
 800355e:	4b13      	ldr	r3, [pc, #76]	; (80035ac <USART2_IRQHandler+0x1de8>)
 8003560:	7a9b      	ldrb	r3, [r3, #10]
 8003562:	2b46      	cmp	r3, #70	; 0x46
 8003564:	d10b      	bne.n	800357e <USART2_IRQHandler+0x1dba>
			{
				on = 0;
 8003566:	2300      	movs	r3, #0
 8003568:	617b      	str	r3, [r7, #20]
				set_LED(on);
 800356a:	6978      	ldr	r0, [r7, #20]
 800356c:	f7fd ffb2 	bl	80014d4 <set_LED>
				HAL_UART_Transmit(&huart2, ledoff, sizeof(unsigned char) * 16, 100);
 8003570:	2364      	movs	r3, #100	; 0x64
 8003572:	2210      	movs	r2, #16
 8003574:	4915      	ldr	r1, [pc, #84]	; (80035cc <USART2_IRQHandler+0x1e08>)
 8003576:	4810      	ldr	r0, [pc, #64]	; (80035b8 <USART2_IRQHandler+0x1df4>)
 8003578:	f003 ff9c 	bl	80074b4 <HAL_UART_Transmit>
				&& buffer[5] == 'E' && buffer[6] == 'D' ) {
 800357c:	e224      	b.n	80039c8 <USART2_IRQHandler+0x2204>
			} else if ( buffer[8] == 'O' && buffer[9] == 'N')
 800357e:	4b0b      	ldr	r3, [pc, #44]	; (80035ac <USART2_IRQHandler+0x1de8>)
 8003580:	7a1b      	ldrb	r3, [r3, #8]
 8003582:	2b4f      	cmp	r3, #79	; 0x4f
 8003584:	f040 8220 	bne.w	80039c8 <USART2_IRQHandler+0x2204>
 8003588:	4b08      	ldr	r3, [pc, #32]	; (80035ac <USART2_IRQHandler+0x1de8>)
 800358a:	7a5b      	ldrb	r3, [r3, #9]
 800358c:	2b4e      	cmp	r3, #78	; 0x4e
 800358e:	f040 821b 	bne.w	80039c8 <USART2_IRQHandler+0x2204>
			{
				on = 1;
 8003592:	2301      	movs	r3, #1
 8003594:	617b      	str	r3, [r7, #20]
				set_LED(on);
 8003596:	6978      	ldr	r0, [r7, #20]
 8003598:	f7fd ff9c 	bl	80014d4 <set_LED>
				HAL_UART_Transmit(&huart2, ledon, sizeof(unsigned char) * 15, 100);
 800359c:	2364      	movs	r3, #100	; 0x64
 800359e:	220f      	movs	r2, #15
 80035a0:	490b      	ldr	r1, [pc, #44]	; (80035d0 <USART2_IRQHandler+0x1e0c>)
 80035a2:	4805      	ldr	r0, [pc, #20]	; (80035b8 <USART2_IRQHandler+0x1df4>)
 80035a4:	f003 ff86 	bl	80074b4 <HAL_UART_Transmit>
				&& buffer[5] == 'E' && buffer[6] == 'D' ) {
 80035a8:	e20e      	b.n	80039c8 <USART2_IRQHandler+0x2204>
 80035aa:	bf00      	nop
 80035ac:	2000030c 	.word	0x2000030c
 80035b0:	51eb851f 	.word	0x51eb851f
 80035b4:	20000220 	.word	0x20000220
 80035b8:	2000053c 	.word	0x2000053c
 80035bc:	20000114 	.word	0x20000114
 80035c0:	200000e0 	.word	0x200000e0
 80035c4:	20000394 	.word	0x20000394
 80035c8:	20000390 	.word	0x20000390
 80035cc:	200001fc 	.word	0x200001fc
 80035d0:	20000210 	.word	0x20000210
			}

		} else if ( adminIn == 1 && buffer[0] == 'T' && buffer[1] == 'E' && buffer[2] == 'S' && buffer[3] == 'T' && buffer[4] == '#') {
 80035d4:	4baa      	ldr	r3, [pc, #680]	; (8003880 <USART2_IRQHandler+0x20bc>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	f040 81bc 	bne.w	8003956 <USART2_IRQHandler+0x2192>
 80035de:	4ba9      	ldr	r3, [pc, #676]	; (8003884 <USART2_IRQHandler+0x20c0>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	2b54      	cmp	r3, #84	; 0x54
 80035e4:	f040 81b7 	bne.w	8003956 <USART2_IRQHandler+0x2192>
 80035e8:	4ba6      	ldr	r3, [pc, #664]	; (8003884 <USART2_IRQHandler+0x20c0>)
 80035ea:	785b      	ldrb	r3, [r3, #1]
 80035ec:	2b45      	cmp	r3, #69	; 0x45
 80035ee:	f040 81b2 	bne.w	8003956 <USART2_IRQHandler+0x2192>
 80035f2:	4ba4      	ldr	r3, [pc, #656]	; (8003884 <USART2_IRQHandler+0x20c0>)
 80035f4:	789b      	ldrb	r3, [r3, #2]
 80035f6:	2b53      	cmp	r3, #83	; 0x53
 80035f8:	f040 81ad 	bne.w	8003956 <USART2_IRQHandler+0x2192>
 80035fc:	4ba1      	ldr	r3, [pc, #644]	; (8003884 <USART2_IRQHandler+0x20c0>)
 80035fe:	78db      	ldrb	r3, [r3, #3]
 8003600:	2b54      	cmp	r3, #84	; 0x54
 8003602:	f040 81a8 	bne.w	8003956 <USART2_IRQHandler+0x2192>
 8003606:	4b9f      	ldr	r3, [pc, #636]	; (8003884 <USART2_IRQHandler+0x20c0>)
 8003608:	791b      	ldrb	r3, [r3, #4]
 800360a:	2b23      	cmp	r3, #35	; 0x23
 800360c:	f040 81a3 	bne.w	8003956 <USART2_IRQHandler+0x2192>

			int floor[5];
			floor[0] = -1;
 8003610:	f04f 33ff 	mov.w	r3, #4294967295
 8003614:	603b      	str	r3, [r7, #0]
			floor[1] = -2;
 8003616:	f06f 0301 	mvn.w	r3, #1
 800361a:	607b      	str	r3, [r7, #4]
			floor[2] = -3;
 800361c:	f06f 0302 	mvn.w	r3, #2
 8003620:	60bb      	str	r3, [r7, #8]
			floor[3] = -4;
 8003622:	f06f 0303 	mvn.w	r3, #3
 8003626:	60fb      	str	r3, [r7, #12]
			floor[4] = -5;
 8003628:	f06f 0304 	mvn.w	r3, #4
 800362c:	613b      	str	r3, [r7, #16]
			int i;
			int j = 0;
 800362e:	2300      	movs	r3, #0
 8003630:	627b      	str	r3, [r7, #36]	; 0x24
			for ( i = 5; i < position+1; i++ )
 8003632:	2305      	movs	r3, #5
 8003634:	62bb      	str	r3, [r7, #40]	; 0x28
 8003636:	e0b5      	b.n	80037a4 <USART2_IRQHandler+0x1fe0>
			{
				if ( buffer[i] == '0' )
 8003638:	4a92      	ldr	r2, [pc, #584]	; (8003884 <USART2_IRQHandler+0x20c0>)
 800363a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800363c:	4413      	add	r3, r2
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2b30      	cmp	r3, #48	; 0x30
 8003642:	d10b      	bne.n	800365c <USART2_IRQHandler+0x1e98>
				{
					floor[j] = 0;
 8003644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800364c:	4413      	add	r3, r2
 800364e:	2200      	movs	r2, #0
 8003650:	f843 2c38 	str.w	r2, [r3, #-56]
					j++;
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	3301      	adds	r3, #1
 8003658:	627b      	str	r3, [r7, #36]	; 0x24
 800365a:	e0a0      	b.n	800379e <USART2_IRQHandler+0x1fda>
				} else if ( buffer[i] == '1' ) {
 800365c:	4a89      	ldr	r2, [pc, #548]	; (8003884 <USART2_IRQHandler+0x20c0>)
 800365e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003660:	4413      	add	r3, r2
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	2b31      	cmp	r3, #49	; 0x31
 8003666:	d10b      	bne.n	8003680 <USART2_IRQHandler+0x1ebc>
					floor[j] = 1;
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003670:	4413      	add	r3, r2
 8003672:	2201      	movs	r2, #1
 8003674:	f843 2c38 	str.w	r2, [r3, #-56]
					j++;
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367a:	3301      	adds	r3, #1
 800367c:	627b      	str	r3, [r7, #36]	; 0x24
 800367e:	e08e      	b.n	800379e <USART2_IRQHandler+0x1fda>
				} else if ( buffer[i] == '2' ) {
 8003680:	4a80      	ldr	r2, [pc, #512]	; (8003884 <USART2_IRQHandler+0x20c0>)
 8003682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003684:	4413      	add	r3, r2
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	2b32      	cmp	r3, #50	; 0x32
 800368a:	d10b      	bne.n	80036a4 <USART2_IRQHandler+0x1ee0>
					floor[j] = 2;
 800368c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003694:	4413      	add	r3, r2
 8003696:	2202      	movs	r2, #2
 8003698:	f843 2c38 	str.w	r2, [r3, #-56]
					j++;
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	3301      	adds	r3, #1
 80036a0:	627b      	str	r3, [r7, #36]	; 0x24
 80036a2:	e07c      	b.n	800379e <USART2_IRQHandler+0x1fda>
				} else if ( buffer[i] == '3' ) {
 80036a4:	4a77      	ldr	r2, [pc, #476]	; (8003884 <USART2_IRQHandler+0x20c0>)
 80036a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a8:	4413      	add	r3, r2
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	2b33      	cmp	r3, #51	; 0x33
 80036ae:	d10b      	bne.n	80036c8 <USART2_IRQHandler+0x1f04>
					floor[j] = 3;
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80036b8:	4413      	add	r3, r2
 80036ba:	2203      	movs	r2, #3
 80036bc:	f843 2c38 	str.w	r2, [r3, #-56]
					j++;
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	3301      	adds	r3, #1
 80036c4:	627b      	str	r3, [r7, #36]	; 0x24
 80036c6:	e06a      	b.n	800379e <USART2_IRQHandler+0x1fda>
				} else if ( buffer[i] == '4' ) {
 80036c8:	4a6e      	ldr	r2, [pc, #440]	; (8003884 <USART2_IRQHandler+0x20c0>)
 80036ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036cc:	4413      	add	r3, r2
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	2b34      	cmp	r3, #52	; 0x34
 80036d2:	d10b      	bne.n	80036ec <USART2_IRQHandler+0x1f28>
					floor[j] = 4;
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80036dc:	4413      	add	r3, r2
 80036de:	2204      	movs	r2, #4
 80036e0:	f843 2c38 	str.w	r2, [r3, #-56]
					j++;
 80036e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e6:	3301      	adds	r3, #1
 80036e8:	627b      	str	r3, [r7, #36]	; 0x24
 80036ea:	e058      	b.n	800379e <USART2_IRQHandler+0x1fda>
				} else if ( buffer[i] == '5' ) {
 80036ec:	4a65      	ldr	r2, [pc, #404]	; (8003884 <USART2_IRQHandler+0x20c0>)
 80036ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f0:	4413      	add	r3, r2
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	2b35      	cmp	r3, #53	; 0x35
 80036f6:	d10b      	bne.n	8003710 <USART2_IRQHandler+0x1f4c>
					floor[j] = 5;
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003700:	4413      	add	r3, r2
 8003702:	2205      	movs	r2, #5
 8003704:	f843 2c38 	str.w	r2, [r3, #-56]
					j++;
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370a:	3301      	adds	r3, #1
 800370c:	627b      	str	r3, [r7, #36]	; 0x24
 800370e:	e046      	b.n	800379e <USART2_IRQHandler+0x1fda>
				} else if ( buffer[i] == '6' ) {
 8003710:	4a5c      	ldr	r2, [pc, #368]	; (8003884 <USART2_IRQHandler+0x20c0>)
 8003712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003714:	4413      	add	r3, r2
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b36      	cmp	r3, #54	; 0x36
 800371a:	d10b      	bne.n	8003734 <USART2_IRQHandler+0x1f70>
					floor[j] = 6;
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003724:	4413      	add	r3, r2
 8003726:	2206      	movs	r2, #6
 8003728:	f843 2c38 	str.w	r2, [r3, #-56]
					j++;
 800372c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372e:	3301      	adds	r3, #1
 8003730:	627b      	str	r3, [r7, #36]	; 0x24
 8003732:	e034      	b.n	800379e <USART2_IRQHandler+0x1fda>
				} else if ( buffer[i] == '7' ) {
 8003734:	4a53      	ldr	r2, [pc, #332]	; (8003884 <USART2_IRQHandler+0x20c0>)
 8003736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003738:	4413      	add	r3, r2
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	2b37      	cmp	r3, #55	; 0x37
 800373e:	d10b      	bne.n	8003758 <USART2_IRQHandler+0x1f94>
					floor[j] = 7;
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003748:	4413      	add	r3, r2
 800374a:	2207      	movs	r2, #7
 800374c:	f843 2c38 	str.w	r2, [r3, #-56]
					j++;
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	3301      	adds	r3, #1
 8003754:	627b      	str	r3, [r7, #36]	; 0x24
 8003756:	e022      	b.n	800379e <USART2_IRQHandler+0x1fda>
				} else if ( buffer[i] == '8' ) {
 8003758:	4a4a      	ldr	r2, [pc, #296]	; (8003884 <USART2_IRQHandler+0x20c0>)
 800375a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375c:	4413      	add	r3, r2
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	2b38      	cmp	r3, #56	; 0x38
 8003762:	d10b      	bne.n	800377c <USART2_IRQHandler+0x1fb8>
					floor[j] = 8;
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800376c:	4413      	add	r3, r2
 800376e:	2208      	movs	r2, #8
 8003770:	f843 2c38 	str.w	r2, [r3, #-56]
					j++;
 8003774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003776:	3301      	adds	r3, #1
 8003778:	627b      	str	r3, [r7, #36]	; 0x24
 800377a:	e010      	b.n	800379e <USART2_IRQHandler+0x1fda>
				} else if ( buffer[i] == '9' ) {
 800377c:	4a41      	ldr	r2, [pc, #260]	; (8003884 <USART2_IRQHandler+0x20c0>)
 800377e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003780:	4413      	add	r3, r2
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	2b39      	cmp	r3, #57	; 0x39
 8003786:	d10a      	bne.n	800379e <USART2_IRQHandler+0x1fda>
					floor[j] = 9;
 8003788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003790:	4413      	add	r3, r2
 8003792:	2209      	movs	r2, #9
 8003794:	f843 2c38 	str.w	r2, [r3, #-56]
					j++;
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379a:	3301      	adds	r3, #1
 800379c:	627b      	str	r3, [r7, #36]	; 0x24
			for ( i = 5; i < position+1; i++ )
 800379e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a0:	3301      	adds	r3, #1
 80037a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80037a4:	4b38      	ldr	r3, [pc, #224]	; (8003888 <USART2_IRQHandler+0x20c4>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037aa:	429a      	cmp	r2, r3
 80037ac:	f77f af44 	ble.w	8003638 <USART2_IRQHandler+0x1e74>
				}
			}

			int equal = 0;
 80037b0:	2300      	movs	r3, #0
 80037b2:	623b      	str	r3, [r7, #32]
			int k = 0;
 80037b4:	2300      	movs	r3, #0
 80037b6:	61fb      	str	r3, [r7, #28]
			int l = 0;
 80037b8:	2300      	movs	r3, #0
 80037ba:	61bb      	str	r3, [r7, #24]
			for ( k = 0; k < 5; k++ )
 80037bc:	2300      	movs	r3, #0
 80037be:	61fb      	str	r3, [r7, #28]
 80037c0:	e01e      	b.n	8003800 <USART2_IRQHandler+0x203c>
			{
				for ( l = k+1; l < 5; l++ )
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	3301      	adds	r3, #1
 80037c6:	61bb      	str	r3, [r7, #24]
 80037c8:	e014      	b.n	80037f4 <USART2_IRQHandler+0x2030>
				{
					if ( floor[k] == floor[l] )
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80037d2:	4413      	add	r3, r2
 80037d4:	f853 2c38 	ldr.w	r2, [r3, #-56]
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80037e0:	440b      	add	r3, r1
 80037e2:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d101      	bne.n	80037ee <USART2_IRQHandler+0x202a>
					{
						equal = 1;
 80037ea:	2301      	movs	r3, #1
 80037ec:	623b      	str	r3, [r7, #32]
				for ( l = k+1; l < 5; l++ )
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	3301      	adds	r3, #1
 80037f2:	61bb      	str	r3, [r7, #24]
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	dde7      	ble.n	80037ca <USART2_IRQHandler+0x2006>
			for ( k = 0; k < 5; k++ )
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	3301      	adds	r3, #1
 80037fe:	61fb      	str	r3, [r7, #28]
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	2b04      	cmp	r3, #4
 8003804:	dddd      	ble.n	80037c2 <USART2_IRQHandler+0x1ffe>
					}
				}
			}

			if ( j == 1 && floor[0] > sizeFloor )
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	2b01      	cmp	r3, #1
 800380a:	d10b      	bne.n	8003824 <USART2_IRQHandler+0x2060>
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	4b1f      	ldr	r3, [pc, #124]	; (800388c <USART2_IRQHandler+0x20c8>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	429a      	cmp	r2, r3
 8003814:	dd06      	ble.n	8003824 <USART2_IRQHandler+0x2060>
			{
				HAL_UART_Transmit(&huart2, error5, sizeof(unsigned char) * 54, 100);
 8003816:	2364      	movs	r3, #100	; 0x64
 8003818:	2236      	movs	r2, #54	; 0x36
 800381a:	491d      	ldr	r1, [pc, #116]	; (8003890 <USART2_IRQHandler+0x20cc>)
 800381c:	481d      	ldr	r0, [pc, #116]	; (8003894 <USART2_IRQHandler+0x20d0>)
 800381e:	f003 fe49 	bl	80074b4 <HAL_UART_Transmit>
 8003822:	e094      	b.n	800394e <USART2_IRQHandler+0x218a>
			} else if ( j == 2 && (floor[0] > sizeFloor || floor[1] > sizeFloor) ) {
 8003824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003826:	2b02      	cmp	r3, #2
 8003828:	d110      	bne.n	800384c <USART2_IRQHandler+0x2088>
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	4b17      	ldr	r3, [pc, #92]	; (800388c <USART2_IRQHandler+0x20c8>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	429a      	cmp	r2, r3
 8003832:	dc04      	bgt.n	800383e <USART2_IRQHandler+0x207a>
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	4b15      	ldr	r3, [pc, #84]	; (800388c <USART2_IRQHandler+0x20c8>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	429a      	cmp	r2, r3
 800383c:	dd06      	ble.n	800384c <USART2_IRQHandler+0x2088>
				HAL_UART_Transmit(&huart2, error5, sizeof(unsigned char) * 54, 100);
 800383e:	2364      	movs	r3, #100	; 0x64
 8003840:	2236      	movs	r2, #54	; 0x36
 8003842:	4913      	ldr	r1, [pc, #76]	; (8003890 <USART2_IRQHandler+0x20cc>)
 8003844:	4813      	ldr	r0, [pc, #76]	; (8003894 <USART2_IRQHandler+0x20d0>)
 8003846:	f003 fe35 	bl	80074b4 <HAL_UART_Transmit>
 800384a:	e080      	b.n	800394e <USART2_IRQHandler+0x218a>
			} else if ( j == 3 && (floor[0] > sizeFloor || floor[1] > sizeFloor || floor[2] > sizeFloor) ) {
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	2b03      	cmp	r3, #3
 8003850:	d122      	bne.n	8003898 <USART2_IRQHandler+0x20d4>
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	4b0d      	ldr	r3, [pc, #52]	; (800388c <USART2_IRQHandler+0x20c8>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	429a      	cmp	r2, r3
 800385a:	dc09      	bgt.n	8003870 <USART2_IRQHandler+0x20ac>
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	4b0b      	ldr	r3, [pc, #44]	; (800388c <USART2_IRQHandler+0x20c8>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	dc04      	bgt.n	8003870 <USART2_IRQHandler+0x20ac>
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	4b08      	ldr	r3, [pc, #32]	; (800388c <USART2_IRQHandler+0x20c8>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	429a      	cmp	r2, r3
 800386e:	dd13      	ble.n	8003898 <USART2_IRQHandler+0x20d4>
				HAL_UART_Transmit(&huart2, error5, sizeof(unsigned char) * 54, 100);
 8003870:	2364      	movs	r3, #100	; 0x64
 8003872:	2236      	movs	r2, #54	; 0x36
 8003874:	4906      	ldr	r1, [pc, #24]	; (8003890 <USART2_IRQHandler+0x20cc>)
 8003876:	4807      	ldr	r0, [pc, #28]	; (8003894 <USART2_IRQHandler+0x20d0>)
 8003878:	f003 fe1c 	bl	80074b4 <HAL_UART_Transmit>
 800387c:	e067      	b.n	800394e <USART2_IRQHandler+0x218a>
 800387e:	bf00      	nop
 8003880:	20000390 	.word	0x20000390
 8003884:	2000030c 	.word	0x2000030c
 8003888:	20000370 	.word	0x20000370
 800388c:	200002c8 	.word	0x200002c8
 8003890:	20000144 	.word	0x20000144
 8003894:	2000053c 	.word	0x2000053c
			} else if ( j == 4 && (floor[0] > sizeFloor || floor[1] > sizeFloor || floor[2] > sizeFloor || floor[3] > sizeFloor) ) {
 8003898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389a:	2b04      	cmp	r3, #4
 800389c:	d11a      	bne.n	80038d4 <USART2_IRQHandler+0x2110>
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	4b5d      	ldr	r3, [pc, #372]	; (8003a18 <USART2_IRQHandler+0x2254>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	dc0e      	bgt.n	80038c6 <USART2_IRQHandler+0x2102>
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	4b5b      	ldr	r3, [pc, #364]	; (8003a18 <USART2_IRQHandler+0x2254>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	dc09      	bgt.n	80038c6 <USART2_IRQHandler+0x2102>
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	4b58      	ldr	r3, [pc, #352]	; (8003a18 <USART2_IRQHandler+0x2254>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	dc04      	bgt.n	80038c6 <USART2_IRQHandler+0x2102>
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	4b56      	ldr	r3, [pc, #344]	; (8003a18 <USART2_IRQHandler+0x2254>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	dd06      	ble.n	80038d4 <USART2_IRQHandler+0x2110>
				HAL_UART_Transmit(&huart2, error5, sizeof(unsigned char) * 54, 100);
 80038c6:	2364      	movs	r3, #100	; 0x64
 80038c8:	2236      	movs	r2, #54	; 0x36
 80038ca:	4954      	ldr	r1, [pc, #336]	; (8003a1c <USART2_IRQHandler+0x2258>)
 80038cc:	4854      	ldr	r0, [pc, #336]	; (8003a20 <USART2_IRQHandler+0x225c>)
 80038ce:	f003 fdf1 	bl	80074b4 <HAL_UART_Transmit>
 80038d2:	e03c      	b.n	800394e <USART2_IRQHandler+0x218a>
			} else if ( j == 5 && (floor[0] > sizeFloor || floor[1] > sizeFloor || floor[2] > sizeFloor || floor[3] > sizeFloor || floor[4] > sizeFloor) ) {
 80038d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d6:	2b05      	cmp	r3, #5
 80038d8:	d11f      	bne.n	800391a <USART2_IRQHandler+0x2156>
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	4b4e      	ldr	r3, [pc, #312]	; (8003a18 <USART2_IRQHandler+0x2254>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	dc13      	bgt.n	800390c <USART2_IRQHandler+0x2148>
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	4b4c      	ldr	r3, [pc, #304]	; (8003a18 <USART2_IRQHandler+0x2254>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	dc0e      	bgt.n	800390c <USART2_IRQHandler+0x2148>
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	4b49      	ldr	r3, [pc, #292]	; (8003a18 <USART2_IRQHandler+0x2254>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	dc09      	bgt.n	800390c <USART2_IRQHandler+0x2148>
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	4b47      	ldr	r3, [pc, #284]	; (8003a18 <USART2_IRQHandler+0x2254>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	429a      	cmp	r2, r3
 8003900:	dc04      	bgt.n	800390c <USART2_IRQHandler+0x2148>
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	4b44      	ldr	r3, [pc, #272]	; (8003a18 <USART2_IRQHandler+0x2254>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	429a      	cmp	r2, r3
 800390a:	dd06      	ble.n	800391a <USART2_IRQHandler+0x2156>
				HAL_UART_Transmit(&huart2, error5, sizeof(unsigned char) * 54, 100);
 800390c:	2364      	movs	r3, #100	; 0x64
 800390e:	2236      	movs	r2, #54	; 0x36
 8003910:	4942      	ldr	r1, [pc, #264]	; (8003a1c <USART2_IRQHandler+0x2258>)
 8003912:	4843      	ldr	r0, [pc, #268]	; (8003a20 <USART2_IRQHandler+0x225c>)
 8003914:	f003 fdce 	bl	80074b4 <HAL_UART_Transmit>
 8003918:	e019      	b.n	800394e <USART2_IRQHandler+0x218a>
			} else if ( equal == 1 ) {
 800391a:	6a3b      	ldr	r3, [r7, #32]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d106      	bne.n	800392e <USART2_IRQHandler+0x216a>
				HAL_UART_Transmit(&huart2, error6, sizeof(unsigned char) * 32, 100);
 8003920:	2364      	movs	r3, #100	; 0x64
 8003922:	2220      	movs	r2, #32
 8003924:	493f      	ldr	r1, [pc, #252]	; (8003a24 <USART2_IRQHandler+0x2260>)
 8003926:	483e      	ldr	r0, [pc, #248]	; (8003a20 <USART2_IRQHandler+0x225c>)
 8003928:	f003 fdc4 	bl	80074b4 <HAL_UART_Transmit>
 800392c:	e00f      	b.n	800394e <USART2_IRQHandler+0x218a>
			} else {
				test(floor);
 800392e:	463b      	mov	r3, r7
 8003930:	4618      	mov	r0, r3
 8003932:	f7fd fddf 	bl	80014f4 <test>
				HAL_UART_Transmit(&huart2, correct0, sizeof(unsigned char) * 37, 100);
 8003936:	2364      	movs	r3, #100	; 0x64
 8003938:	2225      	movs	r2, #37	; 0x25
 800393a:	493b      	ldr	r1, [pc, #236]	; (8003a28 <USART2_IRQHandler+0x2264>)
 800393c:	4838      	ldr	r0, [pc, #224]	; (8003a20 <USART2_IRQHandler+0x225c>)
 800393e:	f003 fdb9 	bl	80074b4 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, start0, sizeof(unsigned char) * 34, 100);
 8003942:	2364      	movs	r3, #100	; 0x64
 8003944:	2222      	movs	r2, #34	; 0x22
 8003946:	4939      	ldr	r1, [pc, #228]	; (8003a2c <USART2_IRQHandler+0x2268>)
 8003948:	4835      	ldr	r0, [pc, #212]	; (8003a20 <USART2_IRQHandler+0x225c>)
 800394a:	f003 fdb3 	bl	80074b4 <HAL_UART_Transmit>
			}

			adminReq = 1;
 800394e:	4b38      	ldr	r3, [pc, #224]	; (8003a30 <USART2_IRQHandler+0x226c>)
 8003950:	2201      	movs	r2, #1
 8003952:	601a      	str	r2, [r3, #0]
		} else if ( adminIn == 1 && buffer[0] == 'T' && buffer[1] == 'E' && buffer[2] == 'S' && buffer[3] == 'T' && buffer[4] == '#') {
 8003954:	e039      	b.n	80039ca <USART2_IRQHandler+0x2206>

		} else if ( adminIn == 1 && buffer[0] == 'S' && buffer[1] == 'T' && buffer[2] == 'A' && buffer[3] == 'R' && buffer[4] == 'T') {
 8003956:	4b37      	ldr	r3, [pc, #220]	; (8003a34 <USART2_IRQHandler+0x2270>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d125      	bne.n	80039aa <USART2_IRQHandler+0x21e6>
 800395e:	4b36      	ldr	r3, [pc, #216]	; (8003a38 <USART2_IRQHandler+0x2274>)
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	2b53      	cmp	r3, #83	; 0x53
 8003964:	d121      	bne.n	80039aa <USART2_IRQHandler+0x21e6>
 8003966:	4b34      	ldr	r3, [pc, #208]	; (8003a38 <USART2_IRQHandler+0x2274>)
 8003968:	785b      	ldrb	r3, [r3, #1]
 800396a:	2b54      	cmp	r3, #84	; 0x54
 800396c:	d11d      	bne.n	80039aa <USART2_IRQHandler+0x21e6>
 800396e:	4b32      	ldr	r3, [pc, #200]	; (8003a38 <USART2_IRQHandler+0x2274>)
 8003970:	789b      	ldrb	r3, [r3, #2]
 8003972:	2b41      	cmp	r3, #65	; 0x41
 8003974:	d119      	bne.n	80039aa <USART2_IRQHandler+0x21e6>
 8003976:	4b30      	ldr	r3, [pc, #192]	; (8003a38 <USART2_IRQHandler+0x2274>)
 8003978:	78db      	ldrb	r3, [r3, #3]
 800397a:	2b52      	cmp	r3, #82	; 0x52
 800397c:	d115      	bne.n	80039aa <USART2_IRQHandler+0x21e6>
 800397e:	4b2e      	ldr	r3, [pc, #184]	; (8003a38 <USART2_IRQHandler+0x2274>)
 8003980:	791b      	ldrb	r3, [r3, #4]
 8003982:	2b54      	cmp	r3, #84	; 0x54
 8003984:	d111      	bne.n	80039aa <USART2_IRQHandler+0x21e6>

			start();
 8003986:	f7fd fdf1 	bl	800156c <start>
			HAL_UART_Transmit(&huart2, running, sizeof(unsigned char) * 12, 100);
 800398a:	2364      	movs	r3, #100	; 0x64
 800398c:	220c      	movs	r2, #12
 800398e:	492b      	ldr	r1, [pc, #172]	; (8003a3c <USART2_IRQHandler+0x2278>)
 8003990:	4823      	ldr	r0, [pc, #140]	; (8003a20 <USART2_IRQHandler+0x225c>)
 8003992:	f003 fd8f 	bl	80074b4 <HAL_UART_Transmit>
			adminIn = 0;
 8003996:	4b27      	ldr	r3, [pc, #156]	; (8003a34 <USART2_IRQHandler+0x2270>)
 8003998:	2200      	movs	r2, #0
 800399a:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, out, sizeof(unsigned char) * 27, 100);
 800399c:	2364      	movs	r3, #100	; 0x64
 800399e:	221b      	movs	r2, #27
 80039a0:	4927      	ldr	r1, [pc, #156]	; (8003a40 <USART2_IRQHandler+0x227c>)
 80039a2:	481f      	ldr	r0, [pc, #124]	; (8003a20 <USART2_IRQHandler+0x225c>)
 80039a4:	f003 fd86 	bl	80074b4 <HAL_UART_Transmit>
 80039a8:	e00f      	b.n	80039ca <USART2_IRQHandler+0x2206>

		} else if ( adminIn == 1 && adminReq == 0) {
 80039aa:	4b22      	ldr	r3, [pc, #136]	; (8003a34 <USART2_IRQHandler+0x2270>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d10b      	bne.n	80039ca <USART2_IRQHandler+0x2206>
 80039b2:	4b1f      	ldr	r3, [pc, #124]	; (8003a30 <USART2_IRQHandler+0x226c>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d107      	bne.n	80039ca <USART2_IRQHandler+0x2206>
			HAL_UART_Transmit(&huart2, error0, sizeof(unsigned char) * 22, 100);
 80039ba:	2364      	movs	r3, #100	; 0x64
 80039bc:	2216      	movs	r2, #22
 80039be:	4921      	ldr	r1, [pc, #132]	; (8003a44 <USART2_IRQHandler+0x2280>)
 80039c0:	4817      	ldr	r0, [pc, #92]	; (8003a20 <USART2_IRQHandler+0x225c>)
 80039c2:	f003 fd77 	bl	80074b4 <HAL_UART_Transmit>
 80039c6:	e000      	b.n	80039ca <USART2_IRQHandler+0x2206>
				&& buffer[5] == 'E' && buffer[6] == 'D' ) {
 80039c8:	bf00      	nop
		}
		adminReq = 0;
 80039ca:	4b19      	ldr	r3, [pc, #100]	; (8003a30 <USART2_IRQHandler+0x226c>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]


		//HAL_UART_Transmit(&huart2, buffer, position, 100);
		position = 0;
 80039d0:	4b1d      	ldr	r3, [pc, #116]	; (8003a48 <USART2_IRQHandler+0x2284>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	601a      	str	r2, [r3, #0]
		break;
 80039d6:	e015      	b.n	8003a04 <USART2_IRQHandler+0x2240>
	default:
		if ( position < 100 )
 80039d8:	4b1b      	ldr	r3, [pc, #108]	; (8003a48 <USART2_IRQHandler+0x2284>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2b63      	cmp	r3, #99	; 0x63
 80039de:	dc10      	bgt.n	8003a02 <USART2_IRQHandler+0x223e>
		{
			buffer[position] = data[0];
 80039e0:	4b19      	ldr	r3, [pc, #100]	; (8003a48 <USART2_IRQHandler+0x2284>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a19      	ldr	r2, [pc, #100]	; (8003a4c <USART2_IRQHandler+0x2288>)
 80039e6:	7811      	ldrb	r1, [r2, #0]
 80039e8:	4a13      	ldr	r2, [pc, #76]	; (8003a38 <USART2_IRQHandler+0x2274>)
 80039ea:	54d1      	strb	r1, [r2, r3]
			buffer[position+1] = '\0';
 80039ec:	4b16      	ldr	r3, [pc, #88]	; (8003a48 <USART2_IRQHandler+0x2284>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	3301      	adds	r3, #1
 80039f2:	4a11      	ldr	r2, [pc, #68]	; (8003a38 <USART2_IRQHandler+0x2274>)
 80039f4:	2100      	movs	r1, #0
 80039f6:	54d1      	strb	r1, [r2, r3]
			position++;
 80039f8:	4b13      	ldr	r3, [pc, #76]	; (8003a48 <USART2_IRQHandler+0x2284>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	3301      	adds	r3, #1
 80039fe:	4a12      	ldr	r2, [pc, #72]	; (8003a48 <USART2_IRQHandler+0x2284>)
 8003a00:	6013      	str	r3, [r2, #0]
		}
		break;
 8003a02:	bf00      	nop
	}

  HAL_UART_Receive_IT(&huart2,data,sizeof(data));
 8003a04:	2201      	movs	r2, #1
 8003a06:	4911      	ldr	r1, [pc, #68]	; (8003a4c <USART2_IRQHandler+0x2288>)
 8003a08:	4805      	ldr	r0, [pc, #20]	; (8003a20 <USART2_IRQHandler+0x225c>)
 8003a0a:	f003 fde7 	bl	80075dc <HAL_UART_Receive_IT>
  /* USER CODE END USART2_IRQn 1 */
}
 8003a0e:	bf00      	nop
 8003a10:	3738      	adds	r7, #56	; 0x38
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	200002c8 	.word	0x200002c8
 8003a1c:	20000144 	.word	0x20000144
 8003a20:	2000053c 	.word	0x2000053c
 8003a24:	2000017c 	.word	0x2000017c
 8003a28:	200001c4 	.word	0x200001c4
 8003a2c:	200001a0 	.word	0x200001a0
 8003a30:	20000394 	.word	0x20000394
 8003a34:	20000390 	.word	0x20000390
 8003a38:	2000030c 	.word	0x2000030c
 8003a3c:	200001ec 	.word	0x200001ec
 8003a40:	200002a4 	.word	0x200002a4
 8003a44:	20000000 	.word	0x20000000
 8003a48:	20000370 	.word	0x20000370
 8003a4c:	200004d4 	.word	0x200004d4

08003a50 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a54:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <SystemInit+0x20>)
 8003a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5a:	4a05      	ldr	r2, [pc, #20]	; (8003a70 <SystemInit+0x20>)
 8003a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a64:	bf00      	nop
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	e000ed00 	.word	0xe000ed00

08003a74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003a74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003aac <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a78:	480d      	ldr	r0, [pc, #52]	; (8003ab0 <LoopForever+0x6>)
  ldr r1, =_edata
 8003a7a:	490e      	ldr	r1, [pc, #56]	; (8003ab4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a7c:	4a0e      	ldr	r2, [pc, #56]	; (8003ab8 <LoopForever+0xe>)
  movs r3, #0
 8003a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a80:	e002      	b.n	8003a88 <LoopCopyDataInit>

08003a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a86:	3304      	adds	r3, #4

08003a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a8c:	d3f9      	bcc.n	8003a82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a8e:	4a0b      	ldr	r2, [pc, #44]	; (8003abc <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a90:	4c0b      	ldr	r4, [pc, #44]	; (8003ac0 <LoopForever+0x16>)
  movs r3, #0
 8003a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a94:	e001      	b.n	8003a9a <LoopFillZerobss>

08003a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a98:	3204      	adds	r2, #4

08003a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a9c:	d3fb      	bcc.n	8003a96 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003a9e:	f7ff ffd7 	bl	8003a50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003aa2:	f004 ff53 	bl	800894c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003aa6:	f7fc fc5b 	bl	8000360 <main>

08003aaa <LoopForever>:

LoopForever:
    b LoopForever
 8003aaa:	e7fe      	b.n	8003aaa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003aac:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8003ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ab4:	200002ec 	.word	0x200002ec
  ldr r2, =_sidata
 8003ab8:	08008a0c 	.word	0x08008a0c
  ldr r2, =_sbss
 8003abc:	200002ec 	.word	0x200002ec
  ldr r4, =_ebss
 8003ac0:	20000a54 	.word	0x20000a54

08003ac4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003ac4:	e7fe      	b.n	8003ac4 <ADC1_2_IRQHandler>
	...

08003ac8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003acc:	4b08      	ldr	r3, [pc, #32]	; (8003af0 <HAL_Init+0x28>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a07      	ldr	r2, [pc, #28]	; (8003af0 <HAL_Init+0x28>)
 8003ad2:	f043 0310 	orr.w	r3, r3, #16
 8003ad6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ad8:	2003      	movs	r0, #3
 8003ada:	f000 f94f 	bl	8003d7c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ade:	2000      	movs	r0, #0
 8003ae0:	f000 f808 	bl	8003af4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ae4:	f7fc ff98 	bl	8000a18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	40022000 	.word	0x40022000

08003af4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003afc:	4b12      	ldr	r3, [pc, #72]	; (8003b48 <HAL_InitTick+0x54>)
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	4b12      	ldr	r3, [pc, #72]	; (8003b4c <HAL_InitTick+0x58>)
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	4619      	mov	r1, r3
 8003b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 f967 	bl	8003de6 <HAL_SYSTICK_Config>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e00e      	b.n	8003b40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b0f      	cmp	r3, #15
 8003b26:	d80a      	bhi.n	8003b3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b28:	2200      	movs	r2, #0
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b30:	f000 f92f 	bl	8003d92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b34:	4a06      	ldr	r2, [pc, #24]	; (8003b50 <HAL_InitTick+0x5c>)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	e000      	b.n	8003b40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	200002e0 	.word	0x200002e0
 8003b4c:	200002e8 	.word	0x200002e8
 8003b50:	200002e4 	.word	0x200002e4

08003b54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b58:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <HAL_IncTick+0x20>)
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	4b06      	ldr	r3, [pc, #24]	; (8003b78 <HAL_IncTick+0x24>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4413      	add	r3, r2
 8003b64:	4a04      	ldr	r2, [pc, #16]	; (8003b78 <HAL_IncTick+0x24>)
 8003b66:	6013      	str	r3, [r2, #0]
}
 8003b68:	bf00      	nop
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	200002e8 	.word	0x200002e8
 8003b78:	20000a50 	.word	0x20000a50

08003b7c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  return uwTick;  
 8003b80:	4b03      	ldr	r3, [pc, #12]	; (8003b90 <HAL_GetTick+0x14>)
 8003b82:	681b      	ldr	r3, [r3, #0]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	20000a50 	.word	0x20000a50

08003b94 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b9c:	f7ff ffee 	bl	8003b7c <HAL_GetTick>
 8003ba0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bac:	d005      	beq.n	8003bba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bae:	4b0a      	ldr	r3, [pc, #40]	; (8003bd8 <HAL_Delay+0x44>)
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003bba:	bf00      	nop
 8003bbc:	f7ff ffde 	bl	8003b7c <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d8f7      	bhi.n	8003bbc <HAL_Delay+0x28>
  {
  }
}
 8003bcc:	bf00      	nop
 8003bce:	bf00      	nop
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	200002e8 	.word	0x200002e8

08003bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f003 0307 	and.w	r3, r3, #7
 8003bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bec:	4b0c      	ldr	r3, [pc, #48]	; (8003c20 <__NVIC_SetPriorityGrouping+0x44>)
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c0e:	4a04      	ldr	r2, [pc, #16]	; (8003c20 <__NVIC_SetPriorityGrouping+0x44>)
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	60d3      	str	r3, [r2, #12]
}
 8003c14:	bf00      	nop
 8003c16:	3714      	adds	r7, #20
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	e000ed00 	.word	0xe000ed00

08003c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c28:	4b04      	ldr	r3, [pc, #16]	; (8003c3c <__NVIC_GetPriorityGrouping+0x18>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	0a1b      	lsrs	r3, r3, #8
 8003c2e:	f003 0307 	and.w	r3, r3, #7
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	e000ed00 	.word	0xe000ed00

08003c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	4603      	mov	r3, r0
 8003c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	db0b      	blt.n	8003c6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c52:	79fb      	ldrb	r3, [r7, #7]
 8003c54:	f003 021f 	and.w	r2, r3, #31
 8003c58:	4907      	ldr	r1, [pc, #28]	; (8003c78 <__NVIC_EnableIRQ+0x38>)
 8003c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c5e:	095b      	lsrs	r3, r3, #5
 8003c60:	2001      	movs	r0, #1
 8003c62:	fa00 f202 	lsl.w	r2, r0, r2
 8003c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c6a:	bf00      	nop
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	e000e100 	.word	0xe000e100

08003c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	4603      	mov	r3, r0
 8003c84:	6039      	str	r1, [r7, #0]
 8003c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	db0a      	blt.n	8003ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	b2da      	uxtb	r2, r3
 8003c94:	490c      	ldr	r1, [pc, #48]	; (8003cc8 <__NVIC_SetPriority+0x4c>)
 8003c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9a:	0112      	lsls	r2, r2, #4
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	440b      	add	r3, r1
 8003ca0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ca4:	e00a      	b.n	8003cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	4908      	ldr	r1, [pc, #32]	; (8003ccc <__NVIC_SetPriority+0x50>)
 8003cac:	79fb      	ldrb	r3, [r7, #7]
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	3b04      	subs	r3, #4
 8003cb4:	0112      	lsls	r2, r2, #4
 8003cb6:	b2d2      	uxtb	r2, r2
 8003cb8:	440b      	add	r3, r1
 8003cba:	761a      	strb	r2, [r3, #24]
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	e000e100 	.word	0xe000e100
 8003ccc:	e000ed00 	.word	0xe000ed00

08003cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b089      	sub	sp, #36	; 0x24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f003 0307 	and.w	r3, r3, #7
 8003ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f1c3 0307 	rsb	r3, r3, #7
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	bf28      	it	cs
 8003cee:	2304      	movcs	r3, #4
 8003cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	2b06      	cmp	r3, #6
 8003cf8:	d902      	bls.n	8003d00 <NVIC_EncodePriority+0x30>
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	3b03      	subs	r3, #3
 8003cfe:	e000      	b.n	8003d02 <NVIC_EncodePriority+0x32>
 8003d00:	2300      	movs	r3, #0
 8003d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d04:	f04f 32ff 	mov.w	r2, #4294967295
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	43da      	mvns	r2, r3
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	401a      	ands	r2, r3
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d18:	f04f 31ff 	mov.w	r1, #4294967295
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d22:	43d9      	mvns	r1, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d28:	4313      	orrs	r3, r2
         );
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3724      	adds	r7, #36	; 0x24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
	...

08003d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	3b01      	subs	r3, #1
 8003d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d48:	d301      	bcc.n	8003d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e00f      	b.n	8003d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d4e:	4a0a      	ldr	r2, [pc, #40]	; (8003d78 <SysTick_Config+0x40>)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3b01      	subs	r3, #1
 8003d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d56:	210f      	movs	r1, #15
 8003d58:	f04f 30ff 	mov.w	r0, #4294967295
 8003d5c:	f7ff ff8e 	bl	8003c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d60:	4b05      	ldr	r3, [pc, #20]	; (8003d78 <SysTick_Config+0x40>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d66:	4b04      	ldr	r3, [pc, #16]	; (8003d78 <SysTick_Config+0x40>)
 8003d68:	2207      	movs	r2, #7
 8003d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	e000e010 	.word	0xe000e010

08003d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7ff ff29 	bl	8003bdc <__NVIC_SetPriorityGrouping>
}
 8003d8a:	bf00      	nop
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b086      	sub	sp, #24
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	4603      	mov	r3, r0
 8003d9a:	60b9      	str	r1, [r7, #8]
 8003d9c:	607a      	str	r2, [r7, #4]
 8003d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003da4:	f7ff ff3e 	bl	8003c24 <__NVIC_GetPriorityGrouping>
 8003da8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	68b9      	ldr	r1, [r7, #8]
 8003dae:	6978      	ldr	r0, [r7, #20]
 8003db0:	f7ff ff8e 	bl	8003cd0 <NVIC_EncodePriority>
 8003db4:	4602      	mov	r2, r0
 8003db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dba:	4611      	mov	r1, r2
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7ff ff5d 	bl	8003c7c <__NVIC_SetPriority>
}
 8003dc2:	bf00      	nop
 8003dc4:	3718      	adds	r7, #24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b082      	sub	sp, #8
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7ff ff31 	bl	8003c40 <__NVIC_EnableIRQ>
}
 8003dde:	bf00      	nop
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b082      	sub	sp, #8
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7ff ffa2 	bl	8003d38 <SysTick_Config>
 8003df4:	4603      	mov	r3, r0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d008      	beq.n	8003e22 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2204      	movs	r2, #4
 8003e14:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e020      	b.n	8003e64 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 020e 	bic.w	r2, r2, #14
 8003e30:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0201 	bic.w	r2, r2, #1
 8003e40:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e50:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d005      	beq.n	8003e92 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2204      	movs	r2, #4
 8003e8a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	73fb      	strb	r3, [r7, #15]
 8003e90:	e027      	b.n	8003ee2 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 020e 	bic.w	r2, r2, #14
 8003ea0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 0201 	bic.w	r2, r2, #1
 8003eb0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eba:	2101      	movs	r1, #1
 8003ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ec0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	4798      	blx	r3
    } 
  }
  return status;
 8003ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003efa:	e154      	b.n	80041a6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	2101      	movs	r1, #1
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	fa01 f303 	lsl.w	r3, r1, r3
 8003f08:	4013      	ands	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f000 8146 	beq.w	80041a0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f003 0303 	and.w	r3, r3, #3
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d005      	beq.n	8003f2c <HAL_GPIO_Init+0x40>
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f003 0303 	and.w	r3, r3, #3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d130      	bne.n	8003f8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	2203      	movs	r2, #3
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	4013      	ands	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	68da      	ldr	r2, [r3, #12]
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f62:	2201      	movs	r2, #1
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6a:	43db      	mvns	r3, r3
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	091b      	lsrs	r3, r3, #4
 8003f78:	f003 0201 	and.w	r2, r3, #1
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f003 0303 	and.w	r3, r3, #3
 8003f96:	2b03      	cmp	r3, #3
 8003f98:	d017      	beq.n	8003fca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	2203      	movs	r2, #3
 8003fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003faa:	43db      	mvns	r3, r3
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	4013      	ands	r3, r2
 8003fb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	689a      	ldr	r2, [r3, #8]
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f003 0303 	and.w	r3, r3, #3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d123      	bne.n	800401e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	08da      	lsrs	r2, r3, #3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	3208      	adds	r2, #8
 8003fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	f003 0307 	and.w	r3, r3, #7
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	220f      	movs	r2, #15
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	43db      	mvns	r3, r3
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	691a      	ldr	r2, [r3, #16]
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	fa02 f303 	lsl.w	r3, r2, r3
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	4313      	orrs	r3, r2
 800400e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	08da      	lsrs	r2, r3, #3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3208      	adds	r2, #8
 8004018:	6939      	ldr	r1, [r7, #16]
 800401a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	2203      	movs	r2, #3
 800402a:	fa02 f303 	lsl.w	r3, r2, r3
 800402e:	43db      	mvns	r3, r3
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	4013      	ands	r3, r2
 8004034:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f003 0203 	and.w	r2, r3, #3
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	fa02 f303 	lsl.w	r3, r2, r3
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	4313      	orrs	r3, r2
 800404a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800405a:	2b00      	cmp	r3, #0
 800405c:	f000 80a0 	beq.w	80041a0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004060:	4b58      	ldr	r3, [pc, #352]	; (80041c4 <HAL_GPIO_Init+0x2d8>)
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	4a57      	ldr	r2, [pc, #348]	; (80041c4 <HAL_GPIO_Init+0x2d8>)
 8004066:	f043 0301 	orr.w	r3, r3, #1
 800406a:	6193      	str	r3, [r2, #24]
 800406c:	4b55      	ldr	r3, [pc, #340]	; (80041c4 <HAL_GPIO_Init+0x2d8>)
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	60bb      	str	r3, [r7, #8]
 8004076:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004078:	4a53      	ldr	r2, [pc, #332]	; (80041c8 <HAL_GPIO_Init+0x2dc>)
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	089b      	lsrs	r3, r3, #2
 800407e:	3302      	adds	r3, #2
 8004080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004084:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f003 0303 	and.w	r3, r3, #3
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	220f      	movs	r2, #15
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	43db      	mvns	r3, r3
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	4013      	ands	r3, r2
 800409a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80040a2:	d019      	beq.n	80040d8 <HAL_GPIO_Init+0x1ec>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a49      	ldr	r2, [pc, #292]	; (80041cc <HAL_GPIO_Init+0x2e0>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d013      	beq.n	80040d4 <HAL_GPIO_Init+0x1e8>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a48      	ldr	r2, [pc, #288]	; (80041d0 <HAL_GPIO_Init+0x2e4>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d00d      	beq.n	80040d0 <HAL_GPIO_Init+0x1e4>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a47      	ldr	r2, [pc, #284]	; (80041d4 <HAL_GPIO_Init+0x2e8>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d007      	beq.n	80040cc <HAL_GPIO_Init+0x1e0>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a46      	ldr	r2, [pc, #280]	; (80041d8 <HAL_GPIO_Init+0x2ec>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d101      	bne.n	80040c8 <HAL_GPIO_Init+0x1dc>
 80040c4:	2304      	movs	r3, #4
 80040c6:	e008      	b.n	80040da <HAL_GPIO_Init+0x1ee>
 80040c8:	2305      	movs	r3, #5
 80040ca:	e006      	b.n	80040da <HAL_GPIO_Init+0x1ee>
 80040cc:	2303      	movs	r3, #3
 80040ce:	e004      	b.n	80040da <HAL_GPIO_Init+0x1ee>
 80040d0:	2302      	movs	r3, #2
 80040d2:	e002      	b.n	80040da <HAL_GPIO_Init+0x1ee>
 80040d4:	2301      	movs	r3, #1
 80040d6:	e000      	b.n	80040da <HAL_GPIO_Init+0x1ee>
 80040d8:	2300      	movs	r3, #0
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	f002 0203 	and.w	r2, r2, #3
 80040e0:	0092      	lsls	r2, r2, #2
 80040e2:	4093      	lsls	r3, r2
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80040ea:	4937      	ldr	r1, [pc, #220]	; (80041c8 <HAL_GPIO_Init+0x2dc>)
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	089b      	lsrs	r3, r3, #2
 80040f0:	3302      	adds	r3, #2
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040f8:	4b38      	ldr	r3, [pc, #224]	; (80041dc <HAL_GPIO_Init+0x2f0>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	43db      	mvns	r3, r3
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	4013      	ands	r3, r2
 8004106:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	4313      	orrs	r3, r2
 800411a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800411c:	4a2f      	ldr	r2, [pc, #188]	; (80041dc <HAL_GPIO_Init+0x2f0>)
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004122:	4b2e      	ldr	r3, [pc, #184]	; (80041dc <HAL_GPIO_Init+0x2f0>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	43db      	mvns	r3, r3
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	4013      	ands	r3, r2
 8004130:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4313      	orrs	r3, r2
 8004144:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004146:	4a25      	ldr	r2, [pc, #148]	; (80041dc <HAL_GPIO_Init+0x2f0>)
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800414c:	4b23      	ldr	r3, [pc, #140]	; (80041dc <HAL_GPIO_Init+0x2f0>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	43db      	mvns	r3, r3
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	4013      	ands	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d003      	beq.n	8004170 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	4313      	orrs	r3, r2
 800416e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004170:	4a1a      	ldr	r2, [pc, #104]	; (80041dc <HAL_GPIO_Init+0x2f0>)
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004176:	4b19      	ldr	r3, [pc, #100]	; (80041dc <HAL_GPIO_Init+0x2f0>)
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	43db      	mvns	r3, r3
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	4013      	ands	r3, r2
 8004184:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4313      	orrs	r3, r2
 8004198:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800419a:	4a10      	ldr	r2, [pc, #64]	; (80041dc <HAL_GPIO_Init+0x2f0>)
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	3301      	adds	r3, #1
 80041a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	fa22 f303 	lsr.w	r3, r2, r3
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f47f aea3 	bne.w	8003efc <HAL_GPIO_Init+0x10>
  }
}
 80041b6:	bf00      	nop
 80041b8:	bf00      	nop
 80041ba:	371c      	adds	r7, #28
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	40021000 	.word	0x40021000
 80041c8:	40010000 	.word	0x40010000
 80041cc:	48000400 	.word	0x48000400
 80041d0:	48000800 	.word	0x48000800
 80041d4:	48000c00 	.word	0x48000c00
 80041d8:	48001000 	.word	0x48001000
 80041dc:	40010400 	.word	0x40010400

080041e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	460b      	mov	r3, r1
 80041ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	691a      	ldr	r2, [r3, #16]
 80041f0:	887b      	ldrh	r3, [r7, #2]
 80041f2:	4013      	ands	r3, r2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d002      	beq.n	80041fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041f8:	2301      	movs	r3, #1
 80041fa:	73fb      	strb	r3, [r7, #15]
 80041fc:	e001      	b.n	8004202 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041fe:	2300      	movs	r3, #0
 8004200:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004202:	7bfb      	ldrb	r3, [r7, #15]
}
 8004204:	4618      	mov	r0, r3
 8004206:	3714      	adds	r7, #20
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	460b      	mov	r3, r1
 800421a:	807b      	strh	r3, [r7, #2]
 800421c:	4613      	mov	r3, r2
 800421e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004220:	787b      	ldrb	r3, [r7, #1]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d003      	beq.n	800422e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004226:	887a      	ldrh	r2, [r7, #2]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800422c:	e002      	b.n	8004234 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800422e:	887a      	ldrh	r2, [r7, #2]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	4603      	mov	r3, r0
 8004248:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800424a:	4b08      	ldr	r3, [pc, #32]	; (800426c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800424c:	695a      	ldr	r2, [r3, #20]
 800424e:	88fb      	ldrh	r3, [r7, #6]
 8004250:	4013      	ands	r3, r2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d006      	beq.n	8004264 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004256:	4a05      	ldr	r2, [pc, #20]	; (800426c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004258:	88fb      	ldrh	r3, [r7, #6]
 800425a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800425c:	88fb      	ldrh	r3, [r7, #6]
 800425e:	4618      	mov	r0, r3
 8004260:	f000 f806 	bl	8004270 <HAL_GPIO_EXTI_Callback>
  }
}
 8004264:	bf00      	nop
 8004266:	3708      	adds	r7, #8
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	40010400 	.word	0x40010400

08004270 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	4603      	mov	r3, r0
 8004278:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800427a:	bf00      	nop
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b082      	sub	sp, #8
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d101      	bne.n	8004298 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e081      	b.n	800439c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d106      	bne.n	80042b2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f7fc fbd7 	bl	8000a60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2224      	movs	r2, #36	; 0x24
 80042b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f022 0201 	bic.w	r2, r2, #1
 80042c8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80042d6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689a      	ldr	r2, [r3, #8]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042e6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d107      	bne.n	8004300 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689a      	ldr	r2, [r3, #8]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042fc:	609a      	str	r2, [r3, #8]
 80042fe:	e006      	b.n	800430e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800430c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	2b02      	cmp	r3, #2
 8004314:	d104      	bne.n	8004320 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800431e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	6812      	ldr	r2, [r2, #0]
 800432a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800432e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004332:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68da      	ldr	r2, [r3, #12]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004342:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	691a      	ldr	r2, [r3, #16]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	69d9      	ldr	r1, [r3, #28]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1a      	ldr	r2, [r3, #32]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f042 0201 	orr.w	r2, r2, #1
 800437c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2220      	movs	r2, #32
 8004388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3708      	adds	r7, #8
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b20      	cmp	r3, #32
 80043b8:	d138      	bne.n	800442c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d101      	bne.n	80043c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80043c4:	2302      	movs	r3, #2
 80043c6:	e032      	b.n	800442e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2224      	movs	r2, #36	; 0x24
 80043d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 0201 	bic.w	r2, r2, #1
 80043e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80043f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6819      	ldr	r1, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	430a      	orrs	r2, r1
 8004406:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f042 0201 	orr.w	r2, r2, #1
 8004416:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2220      	movs	r2, #32
 800441c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004428:	2300      	movs	r3, #0
 800442a:	e000      	b.n	800442e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800442c:	2302      	movs	r3, #2
  }
}
 800442e:	4618      	mov	r0, r3
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800443a:	b480      	push	{r7}
 800443c:	b085      	sub	sp, #20
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
 8004442:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800444a:	b2db      	uxtb	r3, r3
 800444c:	2b20      	cmp	r3, #32
 800444e:	d139      	bne.n	80044c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004456:	2b01      	cmp	r3, #1
 8004458:	d101      	bne.n	800445e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800445a:	2302      	movs	r3, #2
 800445c:	e033      	b.n	80044c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2224      	movs	r2, #36	; 0x24
 800446a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 0201 	bic.w	r2, r2, #1
 800447c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800448c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	021b      	lsls	r3, r3, #8
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	4313      	orrs	r3, r2
 8004496:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f042 0201 	orr.w	r2, r2, #1
 80044ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2220      	movs	r2, #32
 80044b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044c0:	2300      	movs	r3, #0
 80044c2:	e000      	b.n	80044c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80044c4:	2302      	movs	r3, #2
  }
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3714      	adds	r7, #20
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr

080044d2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80044d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044d4:	b08b      	sub	sp, #44	; 0x2c
 80044d6:	af06      	add	r7, sp, #24
 80044d8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d101      	bne.n	80044e4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e0d0      	b.n	8004686 <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d106      	bne.n	80044fe <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f7fc fc37 	bl	8000d6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2203      	movs	r2, #3
 8004502:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4618      	mov	r0, r3
 800450c:	f004 f9e1 	bl	80088d2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004510:	2300      	movs	r3, #0
 8004512:	73fb      	strb	r3, [r7, #15]
 8004514:	e04c      	b.n	80045b0 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004516:	7bfb      	ldrb	r3, [r7, #15]
 8004518:	6879      	ldr	r1, [r7, #4]
 800451a:	1c5a      	adds	r2, r3, #1
 800451c:	4613      	mov	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4413      	add	r3, r2
 8004522:	00db      	lsls	r3, r3, #3
 8004524:	440b      	add	r3, r1
 8004526:	3301      	adds	r3, #1
 8004528:	2201      	movs	r2, #1
 800452a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800452c:	7bfb      	ldrb	r3, [r7, #15]
 800452e:	6879      	ldr	r1, [r7, #4]
 8004530:	1c5a      	adds	r2, r3, #1
 8004532:	4613      	mov	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4413      	add	r3, r2
 8004538:	00db      	lsls	r3, r3, #3
 800453a:	440b      	add	r3, r1
 800453c:	7bfa      	ldrb	r2, [r7, #15]
 800453e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004540:	7bfa      	ldrb	r2, [r7, #15]
 8004542:	7bfb      	ldrb	r3, [r7, #15]
 8004544:	b298      	uxth	r0, r3
 8004546:	6879      	ldr	r1, [r7, #4]
 8004548:	4613      	mov	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	4413      	add	r3, r2
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	440b      	add	r3, r1
 8004552:	3336      	adds	r3, #54	; 0x36
 8004554:	4602      	mov	r2, r0
 8004556:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004558:	7bfb      	ldrb	r3, [r7, #15]
 800455a:	6879      	ldr	r1, [r7, #4]
 800455c:	1c5a      	adds	r2, r3, #1
 800455e:	4613      	mov	r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	4413      	add	r3, r2
 8004564:	00db      	lsls	r3, r3, #3
 8004566:	440b      	add	r3, r1
 8004568:	3303      	adds	r3, #3
 800456a:	2200      	movs	r2, #0
 800456c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800456e:	7bfa      	ldrb	r2, [r7, #15]
 8004570:	6879      	ldr	r1, [r7, #4]
 8004572:	4613      	mov	r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	00db      	lsls	r3, r3, #3
 800457a:	440b      	add	r3, r1
 800457c:	3338      	adds	r3, #56	; 0x38
 800457e:	2200      	movs	r2, #0
 8004580:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004582:	7bfa      	ldrb	r2, [r7, #15]
 8004584:	6879      	ldr	r1, [r7, #4]
 8004586:	4613      	mov	r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4413      	add	r3, r2
 800458c:	00db      	lsls	r3, r3, #3
 800458e:	440b      	add	r3, r1
 8004590:	333c      	adds	r3, #60	; 0x3c
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004596:	7bfa      	ldrb	r2, [r7, #15]
 8004598:	6879      	ldr	r1, [r7, #4]
 800459a:	4613      	mov	r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	4413      	add	r3, r2
 80045a0:	00db      	lsls	r3, r3, #3
 80045a2:	440b      	add	r3, r1
 80045a4:	3340      	adds	r3, #64	; 0x40
 80045a6:	2200      	movs	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045aa:	7bfb      	ldrb	r3, [r7, #15]
 80045ac:	3301      	adds	r3, #1
 80045ae:	73fb      	strb	r3, [r7, #15]
 80045b0:	7bfa      	ldrb	r2, [r7, #15]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d3ad      	bcc.n	8004516 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045ba:	2300      	movs	r3, #0
 80045bc:	73fb      	strb	r3, [r7, #15]
 80045be:	e044      	b.n	800464a <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80045c0:	7bfa      	ldrb	r2, [r7, #15]
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	4613      	mov	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	4413      	add	r3, r2
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	440b      	add	r3, r1
 80045ce:	f203 1369 	addw	r3, r3, #361	; 0x169
 80045d2:	2200      	movs	r2, #0
 80045d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80045d6:	7bfa      	ldrb	r2, [r7, #15]
 80045d8:	6879      	ldr	r1, [r7, #4]
 80045da:	4613      	mov	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	4413      	add	r3, r2
 80045e0:	00db      	lsls	r3, r3, #3
 80045e2:	440b      	add	r3, r1
 80045e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80045e8:	7bfa      	ldrb	r2, [r7, #15]
 80045ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80045ec:	7bfa      	ldrb	r2, [r7, #15]
 80045ee:	6879      	ldr	r1, [r7, #4]
 80045f0:	4613      	mov	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4413      	add	r3, r2
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	440b      	add	r3, r1
 80045fa:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80045fe:	2200      	movs	r2, #0
 8004600:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004602:	7bfa      	ldrb	r2, [r7, #15]
 8004604:	6879      	ldr	r1, [r7, #4]
 8004606:	4613      	mov	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	4413      	add	r3, r2
 800460c:	00db      	lsls	r3, r3, #3
 800460e:	440b      	add	r3, r1
 8004610:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004614:	2200      	movs	r2, #0
 8004616:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004618:	7bfa      	ldrb	r2, [r7, #15]
 800461a:	6879      	ldr	r1, [r7, #4]
 800461c:	4613      	mov	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4413      	add	r3, r2
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	440b      	add	r3, r1
 8004626:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800462a:	2200      	movs	r2, #0
 800462c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800462e:	7bfa      	ldrb	r2, [r7, #15]
 8004630:	6879      	ldr	r1, [r7, #4]
 8004632:	4613      	mov	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4413      	add	r3, r2
 8004638:	00db      	lsls	r3, r3, #3
 800463a:	440b      	add	r3, r1
 800463c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004640:	2200      	movs	r2, #0
 8004642:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004644:	7bfb      	ldrb	r3, [r7, #15]
 8004646:	3301      	adds	r3, #1
 8004648:	73fb      	strb	r3, [r7, #15]
 800464a:	7bfa      	ldrb	r2, [r7, #15]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	429a      	cmp	r2, r3
 8004652:	d3b5      	bcc.n	80045c0 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	603b      	str	r3, [r7, #0]
 800465a:	687e      	ldr	r6, [r7, #4]
 800465c:	466d      	mov	r5, sp
 800465e:	f106 0410 	add.w	r4, r6, #16
 8004662:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004664:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004666:	6823      	ldr	r3, [r4, #0]
 8004668:	602b      	str	r3, [r5, #0]
 800466a:	1d33      	adds	r3, r6, #4
 800466c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800466e:	6838      	ldr	r0, [r7, #0]
 8004670:	f004 f94a 	bl	8008908 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3714      	adds	r7, #20
 800468a:	46bd      	mov	sp, r7
 800468c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004690 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8004696:	af00      	add	r7, sp, #0
 8004698:	1d3b      	adds	r3, r7, #4
 800469a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800469c:	1d3b      	adds	r3, r7, #4
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d102      	bne.n	80046aa <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	f000 bef4 	b.w	8005492 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046aa:	1d3b      	adds	r3, r7, #4
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f000 816a 	beq.w	800498e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80046ba:	4bb3      	ldr	r3, [pc, #716]	; (8004988 <HAL_RCC_OscConfig+0x2f8>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f003 030c 	and.w	r3, r3, #12
 80046c2:	2b04      	cmp	r3, #4
 80046c4:	d00c      	beq.n	80046e0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80046c6:	4bb0      	ldr	r3, [pc, #704]	; (8004988 <HAL_RCC_OscConfig+0x2f8>)
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f003 030c 	and.w	r3, r3, #12
 80046ce:	2b08      	cmp	r3, #8
 80046d0:	d159      	bne.n	8004786 <HAL_RCC_OscConfig+0xf6>
 80046d2:	4bad      	ldr	r3, [pc, #692]	; (8004988 <HAL_RCC_OscConfig+0x2f8>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046de:	d152      	bne.n	8004786 <HAL_RCC_OscConfig+0xf6>
 80046e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046e4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80046ec:	fa93 f3a3 	rbit	r3, r3
 80046f0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80046f4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046f8:	fab3 f383 	clz	r3, r3
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	095b      	lsrs	r3, r3, #5
 8004700:	b2db      	uxtb	r3, r3
 8004702:	f043 0301 	orr.w	r3, r3, #1
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b01      	cmp	r3, #1
 800470a:	d102      	bne.n	8004712 <HAL_RCC_OscConfig+0x82>
 800470c:	4b9e      	ldr	r3, [pc, #632]	; (8004988 <HAL_RCC_OscConfig+0x2f8>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	e015      	b.n	800473e <HAL_RCC_OscConfig+0xae>
 8004712:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004716:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800471a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800471e:	fa93 f3a3 	rbit	r3, r3
 8004722:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004726:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800472a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800472e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8004732:	fa93 f3a3 	rbit	r3, r3
 8004736:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800473a:	4b93      	ldr	r3, [pc, #588]	; (8004988 <HAL_RCC_OscConfig+0x2f8>)
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004742:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004746:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800474a:	fa92 f2a2 	rbit	r2, r2
 800474e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004752:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004756:	fab2 f282 	clz	r2, r2
 800475a:	b2d2      	uxtb	r2, r2
 800475c:	f042 0220 	orr.w	r2, r2, #32
 8004760:	b2d2      	uxtb	r2, r2
 8004762:	f002 021f 	and.w	r2, r2, #31
 8004766:	2101      	movs	r1, #1
 8004768:	fa01 f202 	lsl.w	r2, r1, r2
 800476c:	4013      	ands	r3, r2
 800476e:	2b00      	cmp	r3, #0
 8004770:	f000 810c 	beq.w	800498c <HAL_RCC_OscConfig+0x2fc>
 8004774:	1d3b      	adds	r3, r7, #4
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	f040 8106 	bne.w	800498c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	f000 be86 	b.w	8005492 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004786:	1d3b      	adds	r3, r7, #4
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004790:	d106      	bne.n	80047a0 <HAL_RCC_OscConfig+0x110>
 8004792:	4b7d      	ldr	r3, [pc, #500]	; (8004988 <HAL_RCC_OscConfig+0x2f8>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a7c      	ldr	r2, [pc, #496]	; (8004988 <HAL_RCC_OscConfig+0x2f8>)
 8004798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800479c:	6013      	str	r3, [r2, #0]
 800479e:	e030      	b.n	8004802 <HAL_RCC_OscConfig+0x172>
 80047a0:	1d3b      	adds	r3, r7, #4
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10c      	bne.n	80047c4 <HAL_RCC_OscConfig+0x134>
 80047aa:	4b77      	ldr	r3, [pc, #476]	; (8004988 <HAL_RCC_OscConfig+0x2f8>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a76      	ldr	r2, [pc, #472]	; (8004988 <HAL_RCC_OscConfig+0x2f8>)
 80047b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047b4:	6013      	str	r3, [r2, #0]
 80047b6:	4b74      	ldr	r3, [pc, #464]	; (8004988 <HAL_RCC_OscConfig+0x2f8>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a73      	ldr	r2, [pc, #460]	; (8004988 <HAL_RCC_OscConfig+0x2f8>)
 80047bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047c0:	6013      	str	r3, [r2, #0]
 80047c2:	e01e      	b.n	8004802 <HAL_RCC_OscConfig+0x172>
 80047c4:	1d3b      	adds	r3, r7, #4
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047ce:	d10c      	bne.n	80047ea <HAL_RCC_OscConfig+0x15a>
 80047d0:	4b6d      	ldr	r3, [pc, #436]	; (8004988 <HAL_RCC_OscConfig+0x2f8>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a6c      	ldr	r2, [pc, #432]	; (8004988 <HAL_RCC_OscConfig+0x2f8>)
 80047d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047da:	6013      	str	r3, [r2, #0]
 80047dc:	4b6a      	ldr	r3, [pc, #424]	; (8004988 <HAL_RCC_OscConfig+0x2f8>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a69      	ldr	r2, [pc, #420]	; (8004988 <HAL_RCC_OscConfig+0x2f8>)
 80047e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047e6:	6013      	str	r3, [r2, #0]
 80047e8:	e00b      	b.n	8004802 <HAL_RCC_OscConfig+0x172>
 80047ea:	4b67      	ldr	r3, [pc, #412]	; (8004988 <HAL_RCC_OscConfig+0x2f8>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a66      	ldr	r2, [pc, #408]	; (8004988 <HAL_RCC_OscConfig+0x2f8>)
 80047f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047f4:	6013      	str	r3, [r2, #0]
 80047f6:	4b64      	ldr	r3, [pc, #400]	; (8004988 <HAL_RCC_OscConfig+0x2f8>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a63      	ldr	r2, [pc, #396]	; (8004988 <HAL_RCC_OscConfig+0x2f8>)
 80047fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004800:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004802:	4b61      	ldr	r3, [pc, #388]	; (8004988 <HAL_RCC_OscConfig+0x2f8>)
 8004804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004806:	f023 020f 	bic.w	r2, r3, #15
 800480a:	1d3b      	adds	r3, r7, #4
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	495d      	ldr	r1, [pc, #372]	; (8004988 <HAL_RCC_OscConfig+0x2f8>)
 8004812:	4313      	orrs	r3, r2
 8004814:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004816:	1d3b      	adds	r3, r7, #4
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d059      	beq.n	80048d4 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004820:	f7ff f9ac 	bl	8003b7c <HAL_GetTick>
 8004824:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004828:	e00a      	b.n	8004840 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800482a:	f7ff f9a7 	bl	8003b7c <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b64      	cmp	r3, #100	; 0x64
 8004838:	d902      	bls.n	8004840 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	f000 be29 	b.w	8005492 <HAL_RCC_OscConfig+0xe02>
 8004840:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004844:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004848:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800484c:	fa93 f3a3 	rbit	r3, r3
 8004850:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004854:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004858:	fab3 f383 	clz	r3, r3
 800485c:	b2db      	uxtb	r3, r3
 800485e:	095b      	lsrs	r3, r3, #5
 8004860:	b2db      	uxtb	r3, r3
 8004862:	f043 0301 	orr.w	r3, r3, #1
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b01      	cmp	r3, #1
 800486a:	d102      	bne.n	8004872 <HAL_RCC_OscConfig+0x1e2>
 800486c:	4b46      	ldr	r3, [pc, #280]	; (8004988 <HAL_RCC_OscConfig+0x2f8>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	e015      	b.n	800489e <HAL_RCC_OscConfig+0x20e>
 8004872:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004876:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800487e:	fa93 f3a3 	rbit	r3, r3
 8004882:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004886:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800488a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800488e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004892:	fa93 f3a3 	rbit	r3, r3
 8004896:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800489a:	4b3b      	ldr	r3, [pc, #236]	; (8004988 <HAL_RCC_OscConfig+0x2f8>)
 800489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80048a2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80048a6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80048aa:	fa92 f2a2 	rbit	r2, r2
 80048ae:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80048b2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80048b6:	fab2 f282 	clz	r2, r2
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	f042 0220 	orr.w	r2, r2, #32
 80048c0:	b2d2      	uxtb	r2, r2
 80048c2:	f002 021f 	and.w	r2, r2, #31
 80048c6:	2101      	movs	r1, #1
 80048c8:	fa01 f202 	lsl.w	r2, r1, r2
 80048cc:	4013      	ands	r3, r2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d0ab      	beq.n	800482a <HAL_RCC_OscConfig+0x19a>
 80048d2:	e05c      	b.n	800498e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d4:	f7ff f952 	bl	8003b7c <HAL_GetTick>
 80048d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048dc:	e00a      	b.n	80048f4 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048de:	f7ff f94d 	bl	8003b7c <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b64      	cmp	r3, #100	; 0x64
 80048ec:	d902      	bls.n	80048f4 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	f000 bdcf 	b.w	8005492 <HAL_RCC_OscConfig+0xe02>
 80048f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048f8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048fc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8004900:	fa93 f3a3 	rbit	r3, r3
 8004904:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8004908:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800490c:	fab3 f383 	clz	r3, r3
 8004910:	b2db      	uxtb	r3, r3
 8004912:	095b      	lsrs	r3, r3, #5
 8004914:	b2db      	uxtb	r3, r3
 8004916:	f043 0301 	orr.w	r3, r3, #1
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b01      	cmp	r3, #1
 800491e:	d102      	bne.n	8004926 <HAL_RCC_OscConfig+0x296>
 8004920:	4b19      	ldr	r3, [pc, #100]	; (8004988 <HAL_RCC_OscConfig+0x2f8>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	e015      	b.n	8004952 <HAL_RCC_OscConfig+0x2c2>
 8004926:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800492a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800492e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004932:	fa93 f3a3 	rbit	r3, r3
 8004936:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800493a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800493e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004942:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004946:	fa93 f3a3 	rbit	r3, r3
 800494a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800494e:	4b0e      	ldr	r3, [pc, #56]	; (8004988 <HAL_RCC_OscConfig+0x2f8>)
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004956:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800495a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800495e:	fa92 f2a2 	rbit	r2, r2
 8004962:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004966:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800496a:	fab2 f282 	clz	r2, r2
 800496e:	b2d2      	uxtb	r2, r2
 8004970:	f042 0220 	orr.w	r2, r2, #32
 8004974:	b2d2      	uxtb	r2, r2
 8004976:	f002 021f 	and.w	r2, r2, #31
 800497a:	2101      	movs	r1, #1
 800497c:	fa01 f202 	lsl.w	r2, r1, r2
 8004980:	4013      	ands	r3, r2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1ab      	bne.n	80048de <HAL_RCC_OscConfig+0x24e>
 8004986:	e002      	b.n	800498e <HAL_RCC_OscConfig+0x2fe>
 8004988:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800498c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800498e:	1d3b      	adds	r3, r7, #4
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b00      	cmp	r3, #0
 800499a:	f000 816f 	beq.w	8004c7c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800499e:	4bd0      	ldr	r3, [pc, #832]	; (8004ce0 <HAL_RCC_OscConfig+0x650>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f003 030c 	and.w	r3, r3, #12
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00b      	beq.n	80049c2 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80049aa:	4bcd      	ldr	r3, [pc, #820]	; (8004ce0 <HAL_RCC_OscConfig+0x650>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f003 030c 	and.w	r3, r3, #12
 80049b2:	2b08      	cmp	r3, #8
 80049b4:	d16c      	bne.n	8004a90 <HAL_RCC_OscConfig+0x400>
 80049b6:	4bca      	ldr	r3, [pc, #808]	; (8004ce0 <HAL_RCC_OscConfig+0x650>)
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d166      	bne.n	8004a90 <HAL_RCC_OscConfig+0x400>
 80049c2:	2302      	movs	r3, #2
 80049c4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80049cc:	fa93 f3a3 	rbit	r3, r3
 80049d0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80049d4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049d8:	fab3 f383 	clz	r3, r3
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	095b      	lsrs	r3, r3, #5
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	f043 0301 	orr.w	r3, r3, #1
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d102      	bne.n	80049f2 <HAL_RCC_OscConfig+0x362>
 80049ec:	4bbc      	ldr	r3, [pc, #752]	; (8004ce0 <HAL_RCC_OscConfig+0x650>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	e013      	b.n	8004a1a <HAL_RCC_OscConfig+0x38a>
 80049f2:	2302      	movs	r3, #2
 80049f4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80049fc:	fa93 f3a3 	rbit	r3, r3
 8004a00:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004a04:	2302      	movs	r3, #2
 8004a06:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004a0a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004a0e:	fa93 f3a3 	rbit	r3, r3
 8004a12:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004a16:	4bb2      	ldr	r3, [pc, #712]	; (8004ce0 <HAL_RCC_OscConfig+0x650>)
 8004a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004a20:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004a24:	fa92 f2a2 	rbit	r2, r2
 8004a28:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004a2c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004a30:	fab2 f282 	clz	r2, r2
 8004a34:	b2d2      	uxtb	r2, r2
 8004a36:	f042 0220 	orr.w	r2, r2, #32
 8004a3a:	b2d2      	uxtb	r2, r2
 8004a3c:	f002 021f 	and.w	r2, r2, #31
 8004a40:	2101      	movs	r1, #1
 8004a42:	fa01 f202 	lsl.w	r2, r1, r2
 8004a46:	4013      	ands	r3, r2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d007      	beq.n	8004a5c <HAL_RCC_OscConfig+0x3cc>
 8004a4c:	1d3b      	adds	r3, r7, #4
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d002      	beq.n	8004a5c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	f000 bd1b 	b.w	8005492 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a5c:	4ba0      	ldr	r3, [pc, #640]	; (8004ce0 <HAL_RCC_OscConfig+0x650>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a64:	1d3b      	adds	r3, r7, #4
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	21f8      	movs	r1, #248	; 0xf8
 8004a6c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a70:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004a74:	fa91 f1a1 	rbit	r1, r1
 8004a78:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004a7c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004a80:	fab1 f181 	clz	r1, r1
 8004a84:	b2c9      	uxtb	r1, r1
 8004a86:	408b      	lsls	r3, r1
 8004a88:	4995      	ldr	r1, [pc, #596]	; (8004ce0 <HAL_RCC_OscConfig+0x650>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a8e:	e0f5      	b.n	8004c7c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a90:	1d3b      	adds	r3, r7, #4
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f000 8085 	beq.w	8004ba6 <HAL_RCC_OscConfig+0x516>
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004aa6:	fa93 f3a3 	rbit	r3, r3
 8004aaa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004aae:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ab2:	fab3 f383 	clz	r3, r3
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004abc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac8:	f7ff f858 	bl	8003b7c <HAL_GetTick>
 8004acc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ad0:	e00a      	b.n	8004ae8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ad2:	f7ff f853 	bl	8003b7c <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d902      	bls.n	8004ae8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	f000 bcd5 	b.w	8005492 <HAL_RCC_OscConfig+0xe02>
 8004ae8:	2302      	movs	r3, #2
 8004aea:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aee:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004af2:	fa93 f3a3 	rbit	r3, r3
 8004af6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004afa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004afe:	fab3 f383 	clz	r3, r3
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	095b      	lsrs	r3, r3, #5
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	f043 0301 	orr.w	r3, r3, #1
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d102      	bne.n	8004b18 <HAL_RCC_OscConfig+0x488>
 8004b12:	4b73      	ldr	r3, [pc, #460]	; (8004ce0 <HAL_RCC_OscConfig+0x650>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	e013      	b.n	8004b40 <HAL_RCC_OscConfig+0x4b0>
 8004b18:	2302      	movs	r3, #2
 8004b1a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b1e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004b22:	fa93 f3a3 	rbit	r3, r3
 8004b26:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004b30:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004b34:	fa93 f3a3 	rbit	r3, r3
 8004b38:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004b3c:	4b68      	ldr	r3, [pc, #416]	; (8004ce0 <HAL_RCC_OscConfig+0x650>)
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b40:	2202      	movs	r2, #2
 8004b42:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004b46:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004b4a:	fa92 f2a2 	rbit	r2, r2
 8004b4e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004b52:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004b56:	fab2 f282 	clz	r2, r2
 8004b5a:	b2d2      	uxtb	r2, r2
 8004b5c:	f042 0220 	orr.w	r2, r2, #32
 8004b60:	b2d2      	uxtb	r2, r2
 8004b62:	f002 021f 	and.w	r2, r2, #31
 8004b66:	2101      	movs	r1, #1
 8004b68:	fa01 f202 	lsl.w	r2, r1, r2
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d0af      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b72:	4b5b      	ldr	r3, [pc, #364]	; (8004ce0 <HAL_RCC_OscConfig+0x650>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b7a:	1d3b      	adds	r3, r7, #4
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	695b      	ldr	r3, [r3, #20]
 8004b80:	21f8      	movs	r1, #248	; 0xf8
 8004b82:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b86:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004b8a:	fa91 f1a1 	rbit	r1, r1
 8004b8e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004b92:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004b96:	fab1 f181 	clz	r1, r1
 8004b9a:	b2c9      	uxtb	r1, r1
 8004b9c:	408b      	lsls	r3, r1
 8004b9e:	4950      	ldr	r1, [pc, #320]	; (8004ce0 <HAL_RCC_OscConfig+0x650>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	600b      	str	r3, [r1, #0]
 8004ba4:	e06a      	b.n	8004c7c <HAL_RCC_OscConfig+0x5ec>
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bac:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004bb0:	fa93 f3a3 	rbit	r3, r3
 8004bb4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004bb8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bbc:	fab3 f383 	clz	r3, r3
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004bc6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	461a      	mov	r2, r3
 8004bce:	2300      	movs	r3, #0
 8004bd0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd2:	f7fe ffd3 	bl	8003b7c <HAL_GetTick>
 8004bd6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bda:	e00a      	b.n	8004bf2 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bdc:	f7fe ffce 	bl	8003b7c <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d902      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	f000 bc50 	b.w	8005492 <HAL_RCC_OscConfig+0xe02>
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004bfc:	fa93 f3a3 	rbit	r3, r3
 8004c00:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004c04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c08:	fab3 f383 	clz	r3, r3
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	095b      	lsrs	r3, r3, #5
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	f043 0301 	orr.w	r3, r3, #1
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d102      	bne.n	8004c22 <HAL_RCC_OscConfig+0x592>
 8004c1c:	4b30      	ldr	r3, [pc, #192]	; (8004ce0 <HAL_RCC_OscConfig+0x650>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	e013      	b.n	8004c4a <HAL_RCC_OscConfig+0x5ba>
 8004c22:	2302      	movs	r3, #2
 8004c24:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c28:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c2c:	fa93 f3a3 	rbit	r3, r3
 8004c30:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004c34:	2302      	movs	r3, #2
 8004c36:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004c3a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004c3e:	fa93 f3a3 	rbit	r3, r3
 8004c42:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004c46:	4b26      	ldr	r3, [pc, #152]	; (8004ce0 <HAL_RCC_OscConfig+0x650>)
 8004c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004c50:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004c54:	fa92 f2a2 	rbit	r2, r2
 8004c58:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004c5c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004c60:	fab2 f282 	clz	r2, r2
 8004c64:	b2d2      	uxtb	r2, r2
 8004c66:	f042 0220 	orr.w	r2, r2, #32
 8004c6a:	b2d2      	uxtb	r2, r2
 8004c6c:	f002 021f 	and.w	r2, r2, #31
 8004c70:	2101      	movs	r1, #1
 8004c72:	fa01 f202 	lsl.w	r2, r1, r2
 8004c76:	4013      	ands	r3, r2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1af      	bne.n	8004bdc <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c7c:	1d3b      	adds	r3, r7, #4
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0308 	and.w	r3, r3, #8
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f000 80da 	beq.w	8004e40 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c8c:	1d3b      	adds	r3, r7, #4
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d069      	beq.n	8004d6a <HAL_RCC_OscConfig+0x6da>
 8004c96:	2301      	movs	r3, #1
 8004c98:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c9c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004ca0:	fa93 f3a3 	rbit	r3, r3
 8004ca4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004ca8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cac:	fab3 f383 	clz	r3, r3
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	4b0b      	ldr	r3, [pc, #44]	; (8004ce4 <HAL_RCC_OscConfig+0x654>)
 8004cb6:	4413      	add	r3, r2
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	461a      	mov	r2, r3
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cc0:	f7fe ff5c 	bl	8003b7c <HAL_GetTick>
 8004cc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cc8:	e00e      	b.n	8004ce8 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cca:	f7fe ff57 	bl	8003b7c <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d906      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e3d9      	b.n	8005492 <HAL_RCC_OscConfig+0xe02>
 8004cde:	bf00      	nop
 8004ce0:	40021000 	.word	0x40021000
 8004ce4:	10908120 	.word	0x10908120
 8004ce8:	2302      	movs	r3, #2
 8004cea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004cf2:	fa93 f3a3 	rbit	r3, r3
 8004cf6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004cfa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004cfe:	2202      	movs	r2, #2
 8004d00:	601a      	str	r2, [r3, #0]
 8004d02:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	fa93 f2a3 	rbit	r2, r3
 8004d0c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004d10:	601a      	str	r2, [r3, #0]
 8004d12:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004d16:	2202      	movs	r2, #2
 8004d18:	601a      	str	r2, [r3, #0]
 8004d1a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	fa93 f2a3 	rbit	r2, r3
 8004d24:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004d28:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d2a:	4ba5      	ldr	r3, [pc, #660]	; (8004fc0 <HAL_RCC_OscConfig+0x930>)
 8004d2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d2e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004d32:	2102      	movs	r1, #2
 8004d34:	6019      	str	r1, [r3, #0]
 8004d36:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	fa93 f1a3 	rbit	r1, r3
 8004d40:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004d44:	6019      	str	r1, [r3, #0]
  return result;
 8004d46:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	fab3 f383 	clz	r3, r3
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	f003 031f 	and.w	r3, r3, #31
 8004d5c:	2101      	movs	r1, #1
 8004d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d62:	4013      	ands	r3, r2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d0b0      	beq.n	8004cca <HAL_RCC_OscConfig+0x63a>
 8004d68:	e06a      	b.n	8004e40 <HAL_RCC_OscConfig+0x7b0>
 8004d6a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004d6e:	2201      	movs	r2, #1
 8004d70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d72:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	fa93 f2a3 	rbit	r2, r3
 8004d7c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004d80:	601a      	str	r2, [r3, #0]
  return result;
 8004d82:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004d86:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d88:	fab3 f383 	clz	r3, r3
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	461a      	mov	r2, r3
 8004d90:	4b8c      	ldr	r3, [pc, #560]	; (8004fc4 <HAL_RCC_OscConfig+0x934>)
 8004d92:	4413      	add	r3, r2
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	461a      	mov	r2, r3
 8004d98:	2300      	movs	r3, #0
 8004d9a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d9c:	f7fe feee 	bl	8003b7c <HAL_GetTick>
 8004da0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004da4:	e009      	b.n	8004dba <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004da6:	f7fe fee9 	bl	8003b7c <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e36b      	b.n	8005492 <HAL_RCC_OscConfig+0xe02>
 8004dba:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	fa93 f2a3 	rbit	r2, r3
 8004dcc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004dd0:	601a      	str	r2, [r3, #0]
 8004dd2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	601a      	str	r2, [r3, #0]
 8004dda:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	fa93 f2a3 	rbit	r2, r3
 8004de4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004dee:	2202      	movs	r2, #2
 8004df0:	601a      	str	r2, [r3, #0]
 8004df2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	fa93 f2a3 	rbit	r2, r3
 8004dfc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004e00:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e02:	4b6f      	ldr	r3, [pc, #444]	; (8004fc0 <HAL_RCC_OscConfig+0x930>)
 8004e04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e06:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004e0a:	2102      	movs	r1, #2
 8004e0c:	6019      	str	r1, [r3, #0]
 8004e0e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	fa93 f1a3 	rbit	r1, r3
 8004e18:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004e1c:	6019      	str	r1, [r3, #0]
  return result;
 8004e1e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	fab3 f383 	clz	r3, r3
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	f003 031f 	and.w	r3, r3, #31
 8004e34:	2101      	movs	r1, #1
 8004e36:	fa01 f303 	lsl.w	r3, r1, r3
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1b2      	bne.n	8004da6 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e40:	1d3b      	adds	r3, r7, #4
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0304 	and.w	r3, r3, #4
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f000 8158 	beq.w	8005100 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e50:	2300      	movs	r3, #0
 8004e52:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e56:	4b5a      	ldr	r3, [pc, #360]	; (8004fc0 <HAL_RCC_OscConfig+0x930>)
 8004e58:	69db      	ldr	r3, [r3, #28]
 8004e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d112      	bne.n	8004e88 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e62:	4b57      	ldr	r3, [pc, #348]	; (8004fc0 <HAL_RCC_OscConfig+0x930>)
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	4a56      	ldr	r2, [pc, #344]	; (8004fc0 <HAL_RCC_OscConfig+0x930>)
 8004e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e6c:	61d3      	str	r3, [r2, #28]
 8004e6e:	4b54      	ldr	r3, [pc, #336]	; (8004fc0 <HAL_RCC_OscConfig+0x930>)
 8004e70:	69db      	ldr	r3, [r3, #28]
 8004e72:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004e76:	f107 0308 	add.w	r3, r7, #8
 8004e7a:	601a      	str	r2, [r3, #0]
 8004e7c:	f107 0308 	add.w	r3, r7, #8
 8004e80:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004e82:	2301      	movs	r3, #1
 8004e84:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e88:	4b4f      	ldr	r3, [pc, #316]	; (8004fc8 <HAL_RCC_OscConfig+0x938>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d11a      	bne.n	8004eca <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e94:	4b4c      	ldr	r3, [pc, #304]	; (8004fc8 <HAL_RCC_OscConfig+0x938>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a4b      	ldr	r2, [pc, #300]	; (8004fc8 <HAL_RCC_OscConfig+0x938>)
 8004e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e9e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ea0:	f7fe fe6c 	bl	8003b7c <HAL_GetTick>
 8004ea4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ea8:	e009      	b.n	8004ebe <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eaa:	f7fe fe67 	bl	8003b7c <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b64      	cmp	r3, #100	; 0x64
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e2e9      	b.n	8005492 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ebe:	4b42      	ldr	r3, [pc, #264]	; (8004fc8 <HAL_RCC_OscConfig+0x938>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d0ef      	beq.n	8004eaa <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004eca:	1d3b      	adds	r3, r7, #4
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d106      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x852>
 8004ed4:	4b3a      	ldr	r3, [pc, #232]	; (8004fc0 <HAL_RCC_OscConfig+0x930>)
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	4a39      	ldr	r2, [pc, #228]	; (8004fc0 <HAL_RCC_OscConfig+0x930>)
 8004eda:	f043 0301 	orr.w	r3, r3, #1
 8004ede:	6213      	str	r3, [r2, #32]
 8004ee0:	e02f      	b.n	8004f42 <HAL_RCC_OscConfig+0x8b2>
 8004ee2:	1d3b      	adds	r3, r7, #4
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10c      	bne.n	8004f06 <HAL_RCC_OscConfig+0x876>
 8004eec:	4b34      	ldr	r3, [pc, #208]	; (8004fc0 <HAL_RCC_OscConfig+0x930>)
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	4a33      	ldr	r2, [pc, #204]	; (8004fc0 <HAL_RCC_OscConfig+0x930>)
 8004ef2:	f023 0301 	bic.w	r3, r3, #1
 8004ef6:	6213      	str	r3, [r2, #32]
 8004ef8:	4b31      	ldr	r3, [pc, #196]	; (8004fc0 <HAL_RCC_OscConfig+0x930>)
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	4a30      	ldr	r2, [pc, #192]	; (8004fc0 <HAL_RCC_OscConfig+0x930>)
 8004efe:	f023 0304 	bic.w	r3, r3, #4
 8004f02:	6213      	str	r3, [r2, #32]
 8004f04:	e01d      	b.n	8004f42 <HAL_RCC_OscConfig+0x8b2>
 8004f06:	1d3b      	adds	r3, r7, #4
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	2b05      	cmp	r3, #5
 8004f0e:	d10c      	bne.n	8004f2a <HAL_RCC_OscConfig+0x89a>
 8004f10:	4b2b      	ldr	r3, [pc, #172]	; (8004fc0 <HAL_RCC_OscConfig+0x930>)
 8004f12:	6a1b      	ldr	r3, [r3, #32]
 8004f14:	4a2a      	ldr	r2, [pc, #168]	; (8004fc0 <HAL_RCC_OscConfig+0x930>)
 8004f16:	f043 0304 	orr.w	r3, r3, #4
 8004f1a:	6213      	str	r3, [r2, #32]
 8004f1c:	4b28      	ldr	r3, [pc, #160]	; (8004fc0 <HAL_RCC_OscConfig+0x930>)
 8004f1e:	6a1b      	ldr	r3, [r3, #32]
 8004f20:	4a27      	ldr	r2, [pc, #156]	; (8004fc0 <HAL_RCC_OscConfig+0x930>)
 8004f22:	f043 0301 	orr.w	r3, r3, #1
 8004f26:	6213      	str	r3, [r2, #32]
 8004f28:	e00b      	b.n	8004f42 <HAL_RCC_OscConfig+0x8b2>
 8004f2a:	4b25      	ldr	r3, [pc, #148]	; (8004fc0 <HAL_RCC_OscConfig+0x930>)
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	4a24      	ldr	r2, [pc, #144]	; (8004fc0 <HAL_RCC_OscConfig+0x930>)
 8004f30:	f023 0301 	bic.w	r3, r3, #1
 8004f34:	6213      	str	r3, [r2, #32]
 8004f36:	4b22      	ldr	r3, [pc, #136]	; (8004fc0 <HAL_RCC_OscConfig+0x930>)
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	4a21      	ldr	r2, [pc, #132]	; (8004fc0 <HAL_RCC_OscConfig+0x930>)
 8004f3c:	f023 0304 	bic.w	r3, r3, #4
 8004f40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f42:	1d3b      	adds	r3, r7, #4
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d06b      	beq.n	8005024 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f4c:	f7fe fe16 	bl	8003b7c <HAL_GetTick>
 8004f50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f54:	e00b      	b.n	8004f6e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f56:	f7fe fe11 	bl	8003b7c <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e291      	b.n	8005492 <HAL_RCC_OscConfig+0xe02>
 8004f6e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004f72:	2202      	movs	r2, #2
 8004f74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f76:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	fa93 f2a3 	rbit	r2, r3
 8004f80:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004f84:	601a      	str	r2, [r3, #0]
 8004f86:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	601a      	str	r2, [r3, #0]
 8004f8e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	fa93 f2a3 	rbit	r2, r3
 8004f98:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004f9c:	601a      	str	r2, [r3, #0]
  return result;
 8004f9e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004fa2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fa4:	fab3 f383 	clz	r3, r3
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	095b      	lsrs	r3, r3, #5
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	f043 0302 	orr.w	r3, r3, #2
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d109      	bne.n	8004fcc <HAL_RCC_OscConfig+0x93c>
 8004fb8:	4b01      	ldr	r3, [pc, #4]	; (8004fc0 <HAL_RCC_OscConfig+0x930>)
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	e014      	b.n	8004fe8 <HAL_RCC_OscConfig+0x958>
 8004fbe:	bf00      	nop
 8004fc0:	40021000 	.word	0x40021000
 8004fc4:	10908120 	.word	0x10908120
 8004fc8:	40007000 	.word	0x40007000
 8004fcc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004fd0:	2202      	movs	r2, #2
 8004fd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fd4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	fa93 f2a3 	rbit	r2, r3
 8004fde:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	4bbb      	ldr	r3, [pc, #748]	; (80052d4 <HAL_RCC_OscConfig+0xc44>)
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004fec:	2102      	movs	r1, #2
 8004fee:	6011      	str	r1, [r2, #0]
 8004ff0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004ff4:	6812      	ldr	r2, [r2, #0]
 8004ff6:	fa92 f1a2 	rbit	r1, r2
 8004ffa:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8004ffe:	6011      	str	r1, [r2, #0]
  return result;
 8005000:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8005004:	6812      	ldr	r2, [r2, #0]
 8005006:	fab2 f282 	clz	r2, r2
 800500a:	b2d2      	uxtb	r2, r2
 800500c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005010:	b2d2      	uxtb	r2, r2
 8005012:	f002 021f 	and.w	r2, r2, #31
 8005016:	2101      	movs	r1, #1
 8005018:	fa01 f202 	lsl.w	r2, r1, r2
 800501c:	4013      	ands	r3, r2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d099      	beq.n	8004f56 <HAL_RCC_OscConfig+0x8c6>
 8005022:	e063      	b.n	80050ec <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005024:	f7fe fdaa 	bl	8003b7c <HAL_GetTick>
 8005028:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800502c:	e00b      	b.n	8005046 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800502e:	f7fe fda5 	bl	8003b7c <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	f241 3288 	movw	r2, #5000	; 0x1388
 800503e:	4293      	cmp	r3, r2
 8005040:	d901      	bls.n	8005046 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e225      	b.n	8005492 <HAL_RCC_OscConfig+0xe02>
 8005046:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800504a:	2202      	movs	r2, #2
 800504c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800504e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	fa93 f2a3 	rbit	r2, r3
 8005058:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800505c:	601a      	str	r2, [r3, #0]
 800505e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005062:	2202      	movs	r2, #2
 8005064:	601a      	str	r2, [r3, #0]
 8005066:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	fa93 f2a3 	rbit	r2, r3
 8005070:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005074:	601a      	str	r2, [r3, #0]
  return result;
 8005076:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800507a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800507c:	fab3 f383 	clz	r3, r3
 8005080:	b2db      	uxtb	r3, r3
 8005082:	095b      	lsrs	r3, r3, #5
 8005084:	b2db      	uxtb	r3, r3
 8005086:	f043 0302 	orr.w	r3, r3, #2
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b02      	cmp	r3, #2
 800508e:	d102      	bne.n	8005096 <HAL_RCC_OscConfig+0xa06>
 8005090:	4b90      	ldr	r3, [pc, #576]	; (80052d4 <HAL_RCC_OscConfig+0xc44>)
 8005092:	6a1b      	ldr	r3, [r3, #32]
 8005094:	e00d      	b.n	80050b2 <HAL_RCC_OscConfig+0xa22>
 8005096:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800509a:	2202      	movs	r2, #2
 800509c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800509e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	fa93 f2a3 	rbit	r2, r3
 80050a8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80050ac:	601a      	str	r2, [r3, #0]
 80050ae:	4b89      	ldr	r3, [pc, #548]	; (80052d4 <HAL_RCC_OscConfig+0xc44>)
 80050b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80050b6:	2102      	movs	r1, #2
 80050b8:	6011      	str	r1, [r2, #0]
 80050ba:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80050be:	6812      	ldr	r2, [r2, #0]
 80050c0:	fa92 f1a2 	rbit	r1, r2
 80050c4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80050c8:	6011      	str	r1, [r2, #0]
  return result;
 80050ca:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80050ce:	6812      	ldr	r2, [r2, #0]
 80050d0:	fab2 f282 	clz	r2, r2
 80050d4:	b2d2      	uxtb	r2, r2
 80050d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050da:	b2d2      	uxtb	r2, r2
 80050dc:	f002 021f 	and.w	r2, r2, #31
 80050e0:	2101      	movs	r1, #1
 80050e2:	fa01 f202 	lsl.w	r2, r1, r2
 80050e6:	4013      	ands	r3, r2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1a0      	bne.n	800502e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80050ec:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d105      	bne.n	8005100 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050f4:	4b77      	ldr	r3, [pc, #476]	; (80052d4 <HAL_RCC_OscConfig+0xc44>)
 80050f6:	69db      	ldr	r3, [r3, #28]
 80050f8:	4a76      	ldr	r2, [pc, #472]	; (80052d4 <HAL_RCC_OscConfig+0xc44>)
 80050fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050fe:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005100:	1d3b      	adds	r3, r7, #4
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	69db      	ldr	r3, [r3, #28]
 8005106:	2b00      	cmp	r3, #0
 8005108:	f000 81c2 	beq.w	8005490 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800510c:	4b71      	ldr	r3, [pc, #452]	; (80052d4 <HAL_RCC_OscConfig+0xc44>)
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f003 030c 	and.w	r3, r3, #12
 8005114:	2b08      	cmp	r3, #8
 8005116:	f000 819c 	beq.w	8005452 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800511a:	1d3b      	adds	r3, r7, #4
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	69db      	ldr	r3, [r3, #28]
 8005120:	2b02      	cmp	r3, #2
 8005122:	f040 8114 	bne.w	800534e <HAL_RCC_OscConfig+0xcbe>
 8005126:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800512a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800512e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005130:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	fa93 f2a3 	rbit	r2, r3
 800513a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800513e:	601a      	str	r2, [r3, #0]
  return result;
 8005140:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005144:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005146:	fab3 f383 	clz	r3, r3
 800514a:	b2db      	uxtb	r3, r3
 800514c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005150:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	461a      	mov	r2, r3
 8005158:	2300      	movs	r3, #0
 800515a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800515c:	f7fe fd0e 	bl	8003b7c <HAL_GetTick>
 8005160:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005164:	e009      	b.n	800517a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005166:	f7fe fd09 	bl	8003b7c <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	2b02      	cmp	r3, #2
 8005174:	d901      	bls.n	800517a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e18b      	b.n	8005492 <HAL_RCC_OscConfig+0xe02>
 800517a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800517e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005182:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005184:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	fa93 f2a3 	rbit	r2, r3
 800518e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005192:	601a      	str	r2, [r3, #0]
  return result;
 8005194:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005198:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800519a:	fab3 f383 	clz	r3, r3
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	095b      	lsrs	r3, r3, #5
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	f043 0301 	orr.w	r3, r3, #1
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d102      	bne.n	80051b4 <HAL_RCC_OscConfig+0xb24>
 80051ae:	4b49      	ldr	r3, [pc, #292]	; (80052d4 <HAL_RCC_OscConfig+0xc44>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	e01b      	b.n	80051ec <HAL_RCC_OscConfig+0xb5c>
 80051b4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80051b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051be:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	fa93 f2a3 	rbit	r2, r3
 80051c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80051d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80051d6:	601a      	str	r2, [r3, #0]
 80051d8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	fa93 f2a3 	rbit	r2, r3
 80051e2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	4b3a      	ldr	r3, [pc, #232]	; (80052d4 <HAL_RCC_OscConfig+0xc44>)
 80051ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ec:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80051f0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80051f4:	6011      	str	r1, [r2, #0]
 80051f6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80051fa:	6812      	ldr	r2, [r2, #0]
 80051fc:	fa92 f1a2 	rbit	r1, r2
 8005200:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8005204:	6011      	str	r1, [r2, #0]
  return result;
 8005206:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800520a:	6812      	ldr	r2, [r2, #0]
 800520c:	fab2 f282 	clz	r2, r2
 8005210:	b2d2      	uxtb	r2, r2
 8005212:	f042 0220 	orr.w	r2, r2, #32
 8005216:	b2d2      	uxtb	r2, r2
 8005218:	f002 021f 	and.w	r2, r2, #31
 800521c:	2101      	movs	r1, #1
 800521e:	fa01 f202 	lsl.w	r2, r1, r2
 8005222:	4013      	ands	r3, r2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d19e      	bne.n	8005166 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005228:	4b2a      	ldr	r3, [pc, #168]	; (80052d4 <HAL_RCC_OscConfig+0xc44>)
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005230:	1d3b      	adds	r3, r7, #4
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005236:	1d3b      	adds	r3, r7, #4
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	430b      	orrs	r3, r1
 800523e:	4925      	ldr	r1, [pc, #148]	; (80052d4 <HAL_RCC_OscConfig+0xc44>)
 8005240:	4313      	orrs	r3, r2
 8005242:	604b      	str	r3, [r1, #4]
 8005244:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005248:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800524c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800524e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	fa93 f2a3 	rbit	r2, r3
 8005258:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800525c:	601a      	str	r2, [r3, #0]
  return result;
 800525e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005262:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005264:	fab3 f383 	clz	r3, r3
 8005268:	b2db      	uxtb	r3, r3
 800526a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800526e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	461a      	mov	r2, r3
 8005276:	2301      	movs	r3, #1
 8005278:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800527a:	f7fe fc7f 	bl	8003b7c <HAL_GetTick>
 800527e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005282:	e009      	b.n	8005298 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005284:	f7fe fc7a 	bl	8003b7c <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	2b02      	cmp	r3, #2
 8005292:	d901      	bls.n	8005298 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e0fc      	b.n	8005492 <HAL_RCC_OscConfig+0xe02>
 8005298:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800529c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	fa93 f2a3 	rbit	r2, r3
 80052ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80052b0:	601a      	str	r2, [r3, #0]
  return result;
 80052b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80052b6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052b8:	fab3 f383 	clz	r3, r3
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	095b      	lsrs	r3, r3, #5
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	f043 0301 	orr.w	r3, r3, #1
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d105      	bne.n	80052d8 <HAL_RCC_OscConfig+0xc48>
 80052cc:	4b01      	ldr	r3, [pc, #4]	; (80052d4 <HAL_RCC_OscConfig+0xc44>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	e01e      	b.n	8005310 <HAL_RCC_OscConfig+0xc80>
 80052d2:	bf00      	nop
 80052d4:	40021000 	.word	0x40021000
 80052d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80052dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	fa93 f2a3 	rbit	r2, r3
 80052ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80052f0:	601a      	str	r2, [r3, #0]
 80052f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80052f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052fa:	601a      	str	r2, [r3, #0]
 80052fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	fa93 f2a3 	rbit	r2, r3
 8005306:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800530a:	601a      	str	r2, [r3, #0]
 800530c:	4b63      	ldr	r3, [pc, #396]	; (800549c <HAL_RCC_OscConfig+0xe0c>)
 800530e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005310:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005314:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005318:	6011      	str	r1, [r2, #0]
 800531a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800531e:	6812      	ldr	r2, [r2, #0]
 8005320:	fa92 f1a2 	rbit	r1, r2
 8005324:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005328:	6011      	str	r1, [r2, #0]
  return result;
 800532a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800532e:	6812      	ldr	r2, [r2, #0]
 8005330:	fab2 f282 	clz	r2, r2
 8005334:	b2d2      	uxtb	r2, r2
 8005336:	f042 0220 	orr.w	r2, r2, #32
 800533a:	b2d2      	uxtb	r2, r2
 800533c:	f002 021f 	and.w	r2, r2, #31
 8005340:	2101      	movs	r1, #1
 8005342:	fa01 f202 	lsl.w	r2, r1, r2
 8005346:	4013      	ands	r3, r2
 8005348:	2b00      	cmp	r3, #0
 800534a:	d09b      	beq.n	8005284 <HAL_RCC_OscConfig+0xbf4>
 800534c:	e0a0      	b.n	8005490 <HAL_RCC_OscConfig+0xe00>
 800534e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005352:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005356:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005358:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	fa93 f2a3 	rbit	r2, r3
 8005362:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005366:	601a      	str	r2, [r3, #0]
  return result;
 8005368:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800536c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800536e:	fab3 f383 	clz	r3, r3
 8005372:	b2db      	uxtb	r3, r3
 8005374:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005378:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	461a      	mov	r2, r3
 8005380:	2300      	movs	r3, #0
 8005382:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005384:	f7fe fbfa 	bl	8003b7c <HAL_GetTick>
 8005388:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800538c:	e009      	b.n	80053a2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800538e:	f7fe fbf5 	bl	8003b7c <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	2b02      	cmp	r3, #2
 800539c:	d901      	bls.n	80053a2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e077      	b.n	8005492 <HAL_RCC_OscConfig+0xe02>
 80053a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	fa93 f2a3 	rbit	r2, r3
 80053b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053ba:	601a      	str	r2, [r3, #0]
  return result;
 80053bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053c0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053c2:	fab3 f383 	clz	r3, r3
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	095b      	lsrs	r3, r3, #5
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	f043 0301 	orr.w	r3, r3, #1
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d102      	bne.n	80053dc <HAL_RCC_OscConfig+0xd4c>
 80053d6:	4b31      	ldr	r3, [pc, #196]	; (800549c <HAL_RCC_OscConfig+0xe0c>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	e01b      	b.n	8005414 <HAL_RCC_OscConfig+0xd84>
 80053dc:	f107 0320 	add.w	r3, r7, #32
 80053e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053e6:	f107 0320 	add.w	r3, r7, #32
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	fa93 f2a3 	rbit	r2, r3
 80053f0:	f107 031c 	add.w	r3, r7, #28
 80053f4:	601a      	str	r2, [r3, #0]
 80053f6:	f107 0318 	add.w	r3, r7, #24
 80053fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053fe:	601a      	str	r2, [r3, #0]
 8005400:	f107 0318 	add.w	r3, r7, #24
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	fa93 f2a3 	rbit	r2, r3
 800540a:	f107 0314 	add.w	r3, r7, #20
 800540e:	601a      	str	r2, [r3, #0]
 8005410:	4b22      	ldr	r3, [pc, #136]	; (800549c <HAL_RCC_OscConfig+0xe0c>)
 8005412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005414:	f107 0210 	add.w	r2, r7, #16
 8005418:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800541c:	6011      	str	r1, [r2, #0]
 800541e:	f107 0210 	add.w	r2, r7, #16
 8005422:	6812      	ldr	r2, [r2, #0]
 8005424:	fa92 f1a2 	rbit	r1, r2
 8005428:	f107 020c 	add.w	r2, r7, #12
 800542c:	6011      	str	r1, [r2, #0]
  return result;
 800542e:	f107 020c 	add.w	r2, r7, #12
 8005432:	6812      	ldr	r2, [r2, #0]
 8005434:	fab2 f282 	clz	r2, r2
 8005438:	b2d2      	uxtb	r2, r2
 800543a:	f042 0220 	orr.w	r2, r2, #32
 800543e:	b2d2      	uxtb	r2, r2
 8005440:	f002 021f 	and.w	r2, r2, #31
 8005444:	2101      	movs	r1, #1
 8005446:	fa01 f202 	lsl.w	r2, r1, r2
 800544a:	4013      	ands	r3, r2
 800544c:	2b00      	cmp	r3, #0
 800544e:	d19e      	bne.n	800538e <HAL_RCC_OscConfig+0xcfe>
 8005450:	e01e      	b.n	8005490 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005452:	1d3b      	adds	r3, r7, #4
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	69db      	ldr	r3, [r3, #28]
 8005458:	2b01      	cmp	r3, #1
 800545a:	d101      	bne.n	8005460 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e018      	b.n	8005492 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005460:	4b0e      	ldr	r3, [pc, #56]	; (800549c <HAL_RCC_OscConfig+0xe0c>)
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005468:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800546c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005470:	1d3b      	adds	r3, r7, #4
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	429a      	cmp	r2, r3
 8005478:	d108      	bne.n	800548c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800547a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800547e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005482:	1d3b      	adds	r3, r7, #4
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005488:	429a      	cmp	r2, r3
 800548a:	d001      	beq.n	8005490 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e000      	b.n	8005492 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	40021000 	.word	0x40021000

080054a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b09e      	sub	sp, #120	; 0x78
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80054aa:	2300      	movs	r3, #0
 80054ac:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d101      	bne.n	80054b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e162      	b.n	800577e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054b8:	4b90      	ldr	r3, [pc, #576]	; (80056fc <HAL_RCC_ClockConfig+0x25c>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0307 	and.w	r3, r3, #7
 80054c0:	683a      	ldr	r2, [r7, #0]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d910      	bls.n	80054e8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054c6:	4b8d      	ldr	r3, [pc, #564]	; (80056fc <HAL_RCC_ClockConfig+0x25c>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f023 0207 	bic.w	r2, r3, #7
 80054ce:	498b      	ldr	r1, [pc, #556]	; (80056fc <HAL_RCC_ClockConfig+0x25c>)
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054d6:	4b89      	ldr	r3, [pc, #548]	; (80056fc <HAL_RCC_ClockConfig+0x25c>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0307 	and.w	r3, r3, #7
 80054de:	683a      	ldr	r2, [r7, #0]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d001      	beq.n	80054e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e14a      	b.n	800577e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0302 	and.w	r3, r3, #2
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d008      	beq.n	8005506 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054f4:	4b82      	ldr	r3, [pc, #520]	; (8005700 <HAL_RCC_ClockConfig+0x260>)
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	497f      	ldr	r1, [pc, #508]	; (8005700 <HAL_RCC_ClockConfig+0x260>)
 8005502:	4313      	orrs	r3, r2
 8005504:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b00      	cmp	r3, #0
 8005510:	f000 80dc 	beq.w	80056cc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d13c      	bne.n	8005596 <HAL_RCC_ClockConfig+0xf6>
 800551c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005520:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005522:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005524:	fa93 f3a3 	rbit	r3, r3
 8005528:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800552a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800552c:	fab3 f383 	clz	r3, r3
 8005530:	b2db      	uxtb	r3, r3
 8005532:	095b      	lsrs	r3, r3, #5
 8005534:	b2db      	uxtb	r3, r3
 8005536:	f043 0301 	orr.w	r3, r3, #1
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b01      	cmp	r3, #1
 800553e:	d102      	bne.n	8005546 <HAL_RCC_ClockConfig+0xa6>
 8005540:	4b6f      	ldr	r3, [pc, #444]	; (8005700 <HAL_RCC_ClockConfig+0x260>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	e00f      	b.n	8005566 <HAL_RCC_ClockConfig+0xc6>
 8005546:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800554a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800554c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800554e:	fa93 f3a3 	rbit	r3, r3
 8005552:	667b      	str	r3, [r7, #100]	; 0x64
 8005554:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005558:	663b      	str	r3, [r7, #96]	; 0x60
 800555a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800555c:	fa93 f3a3 	rbit	r3, r3
 8005560:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005562:	4b67      	ldr	r3, [pc, #412]	; (8005700 <HAL_RCC_ClockConfig+0x260>)
 8005564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005566:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800556a:	65ba      	str	r2, [r7, #88]	; 0x58
 800556c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800556e:	fa92 f2a2 	rbit	r2, r2
 8005572:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005574:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005576:	fab2 f282 	clz	r2, r2
 800557a:	b2d2      	uxtb	r2, r2
 800557c:	f042 0220 	orr.w	r2, r2, #32
 8005580:	b2d2      	uxtb	r2, r2
 8005582:	f002 021f 	and.w	r2, r2, #31
 8005586:	2101      	movs	r1, #1
 8005588:	fa01 f202 	lsl.w	r2, r1, r2
 800558c:	4013      	ands	r3, r2
 800558e:	2b00      	cmp	r3, #0
 8005590:	d17b      	bne.n	800568a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e0f3      	b.n	800577e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	2b02      	cmp	r3, #2
 800559c:	d13c      	bne.n	8005618 <HAL_RCC_ClockConfig+0x178>
 800559e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055a2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055a6:	fa93 f3a3 	rbit	r3, r3
 80055aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80055ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055ae:	fab3 f383 	clz	r3, r3
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	095b      	lsrs	r3, r3, #5
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	f043 0301 	orr.w	r3, r3, #1
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d102      	bne.n	80055c8 <HAL_RCC_ClockConfig+0x128>
 80055c2:	4b4f      	ldr	r3, [pc, #316]	; (8005700 <HAL_RCC_ClockConfig+0x260>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	e00f      	b.n	80055e8 <HAL_RCC_ClockConfig+0x148>
 80055c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055cc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055d0:	fa93 f3a3 	rbit	r3, r3
 80055d4:	647b      	str	r3, [r7, #68]	; 0x44
 80055d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055da:	643b      	str	r3, [r7, #64]	; 0x40
 80055dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055de:	fa93 f3a3 	rbit	r3, r3
 80055e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055e4:	4b46      	ldr	r3, [pc, #280]	; (8005700 <HAL_RCC_ClockConfig+0x260>)
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055ec:	63ba      	str	r2, [r7, #56]	; 0x38
 80055ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055f0:	fa92 f2a2 	rbit	r2, r2
 80055f4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80055f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055f8:	fab2 f282 	clz	r2, r2
 80055fc:	b2d2      	uxtb	r2, r2
 80055fe:	f042 0220 	orr.w	r2, r2, #32
 8005602:	b2d2      	uxtb	r2, r2
 8005604:	f002 021f 	and.w	r2, r2, #31
 8005608:	2101      	movs	r1, #1
 800560a:	fa01 f202 	lsl.w	r2, r1, r2
 800560e:	4013      	ands	r3, r2
 8005610:	2b00      	cmp	r3, #0
 8005612:	d13a      	bne.n	800568a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e0b2      	b.n	800577e <HAL_RCC_ClockConfig+0x2de>
 8005618:	2302      	movs	r3, #2
 800561a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800561c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561e:	fa93 f3a3 	rbit	r3, r3
 8005622:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005626:	fab3 f383 	clz	r3, r3
 800562a:	b2db      	uxtb	r3, r3
 800562c:	095b      	lsrs	r3, r3, #5
 800562e:	b2db      	uxtb	r3, r3
 8005630:	f043 0301 	orr.w	r3, r3, #1
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b01      	cmp	r3, #1
 8005638:	d102      	bne.n	8005640 <HAL_RCC_ClockConfig+0x1a0>
 800563a:	4b31      	ldr	r3, [pc, #196]	; (8005700 <HAL_RCC_ClockConfig+0x260>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	e00d      	b.n	800565c <HAL_RCC_ClockConfig+0x1bc>
 8005640:	2302      	movs	r3, #2
 8005642:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005646:	fa93 f3a3 	rbit	r3, r3
 800564a:	627b      	str	r3, [r7, #36]	; 0x24
 800564c:	2302      	movs	r3, #2
 800564e:	623b      	str	r3, [r7, #32]
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	fa93 f3a3 	rbit	r3, r3
 8005656:	61fb      	str	r3, [r7, #28]
 8005658:	4b29      	ldr	r3, [pc, #164]	; (8005700 <HAL_RCC_ClockConfig+0x260>)
 800565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565c:	2202      	movs	r2, #2
 800565e:	61ba      	str	r2, [r7, #24]
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	fa92 f2a2 	rbit	r2, r2
 8005666:	617a      	str	r2, [r7, #20]
  return result;
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	fab2 f282 	clz	r2, r2
 800566e:	b2d2      	uxtb	r2, r2
 8005670:	f042 0220 	orr.w	r2, r2, #32
 8005674:	b2d2      	uxtb	r2, r2
 8005676:	f002 021f 	and.w	r2, r2, #31
 800567a:	2101      	movs	r1, #1
 800567c:	fa01 f202 	lsl.w	r2, r1, r2
 8005680:	4013      	ands	r3, r2
 8005682:	2b00      	cmp	r3, #0
 8005684:	d101      	bne.n	800568a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e079      	b.n	800577e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800568a:	4b1d      	ldr	r3, [pc, #116]	; (8005700 <HAL_RCC_ClockConfig+0x260>)
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f023 0203 	bic.w	r2, r3, #3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	491a      	ldr	r1, [pc, #104]	; (8005700 <HAL_RCC_ClockConfig+0x260>)
 8005698:	4313      	orrs	r3, r2
 800569a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800569c:	f7fe fa6e 	bl	8003b7c <HAL_GetTick>
 80056a0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056a2:	e00a      	b.n	80056ba <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056a4:	f7fe fa6a 	bl	8003b7c <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d901      	bls.n	80056ba <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e061      	b.n	800577e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ba:	4b11      	ldr	r3, [pc, #68]	; (8005700 <HAL_RCC_ClockConfig+0x260>)
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f003 020c 	and.w	r2, r3, #12
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d1eb      	bne.n	80056a4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056cc:	4b0b      	ldr	r3, [pc, #44]	; (80056fc <HAL_RCC_ClockConfig+0x25c>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0307 	and.w	r3, r3, #7
 80056d4:	683a      	ldr	r2, [r7, #0]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d214      	bcs.n	8005704 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056da:	4b08      	ldr	r3, [pc, #32]	; (80056fc <HAL_RCC_ClockConfig+0x25c>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f023 0207 	bic.w	r2, r3, #7
 80056e2:	4906      	ldr	r1, [pc, #24]	; (80056fc <HAL_RCC_ClockConfig+0x25c>)
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056ea:	4b04      	ldr	r3, [pc, #16]	; (80056fc <HAL_RCC_ClockConfig+0x25c>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0307 	and.w	r3, r3, #7
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d005      	beq.n	8005704 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e040      	b.n	800577e <HAL_RCC_ClockConfig+0x2de>
 80056fc:	40022000 	.word	0x40022000
 8005700:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0304 	and.w	r3, r3, #4
 800570c:	2b00      	cmp	r3, #0
 800570e:	d008      	beq.n	8005722 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005710:	4b1d      	ldr	r3, [pc, #116]	; (8005788 <HAL_RCC_ClockConfig+0x2e8>)
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	491a      	ldr	r1, [pc, #104]	; (8005788 <HAL_RCC_ClockConfig+0x2e8>)
 800571e:	4313      	orrs	r3, r2
 8005720:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0308 	and.w	r3, r3, #8
 800572a:	2b00      	cmp	r3, #0
 800572c:	d009      	beq.n	8005742 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800572e:	4b16      	ldr	r3, [pc, #88]	; (8005788 <HAL_RCC_ClockConfig+0x2e8>)
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	00db      	lsls	r3, r3, #3
 800573c:	4912      	ldr	r1, [pc, #72]	; (8005788 <HAL_RCC_ClockConfig+0x2e8>)
 800573e:	4313      	orrs	r3, r2
 8005740:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005742:	f000 f829 	bl	8005798 <HAL_RCC_GetSysClockFreq>
 8005746:	4601      	mov	r1, r0
 8005748:	4b0f      	ldr	r3, [pc, #60]	; (8005788 <HAL_RCC_ClockConfig+0x2e8>)
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005750:	22f0      	movs	r2, #240	; 0xf0
 8005752:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	fa92 f2a2 	rbit	r2, r2
 800575a:	60fa      	str	r2, [r7, #12]
  return result;
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	fab2 f282 	clz	r2, r2
 8005762:	b2d2      	uxtb	r2, r2
 8005764:	40d3      	lsrs	r3, r2
 8005766:	4a09      	ldr	r2, [pc, #36]	; (800578c <HAL_RCC_ClockConfig+0x2ec>)
 8005768:	5cd3      	ldrb	r3, [r2, r3]
 800576a:	fa21 f303 	lsr.w	r3, r1, r3
 800576e:	4a08      	ldr	r2, [pc, #32]	; (8005790 <HAL_RCC_ClockConfig+0x2f0>)
 8005770:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005772:	4b08      	ldr	r3, [pc, #32]	; (8005794 <HAL_RCC_ClockConfig+0x2f4>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4618      	mov	r0, r3
 8005778:	f7fe f9bc 	bl	8003af4 <HAL_InitTick>
  
  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3778      	adds	r7, #120	; 0x78
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	40021000 	.word	0x40021000
 800578c:	080089cc 	.word	0x080089cc
 8005790:	200002e0 	.word	0x200002e0
 8005794:	200002e4 	.word	0x200002e4

08005798 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005798:	b480      	push	{r7}
 800579a:	b08b      	sub	sp, #44	; 0x2c
 800579c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800579e:	2300      	movs	r3, #0
 80057a0:	61fb      	str	r3, [r7, #28]
 80057a2:	2300      	movs	r3, #0
 80057a4:	61bb      	str	r3, [r7, #24]
 80057a6:	2300      	movs	r3, #0
 80057a8:	627b      	str	r3, [r7, #36]	; 0x24
 80057aa:	2300      	movs	r3, #0
 80057ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80057ae:	2300      	movs	r3, #0
 80057b0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80057b2:	4b29      	ldr	r3, [pc, #164]	; (8005858 <HAL_RCC_GetSysClockFreq+0xc0>)
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	f003 030c 	and.w	r3, r3, #12
 80057be:	2b04      	cmp	r3, #4
 80057c0:	d002      	beq.n	80057c8 <HAL_RCC_GetSysClockFreq+0x30>
 80057c2:	2b08      	cmp	r3, #8
 80057c4:	d003      	beq.n	80057ce <HAL_RCC_GetSysClockFreq+0x36>
 80057c6:	e03c      	b.n	8005842 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80057c8:	4b24      	ldr	r3, [pc, #144]	; (800585c <HAL_RCC_GetSysClockFreq+0xc4>)
 80057ca:	623b      	str	r3, [r7, #32]
      break;
 80057cc:	e03c      	b.n	8005848 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80057d4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80057d8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	fa92 f2a2 	rbit	r2, r2
 80057e0:	607a      	str	r2, [r7, #4]
  return result;
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	fab2 f282 	clz	r2, r2
 80057e8:	b2d2      	uxtb	r2, r2
 80057ea:	40d3      	lsrs	r3, r2
 80057ec:	4a1c      	ldr	r2, [pc, #112]	; (8005860 <HAL_RCC_GetSysClockFreq+0xc8>)
 80057ee:	5cd3      	ldrb	r3, [r2, r3]
 80057f0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80057f2:	4b19      	ldr	r3, [pc, #100]	; (8005858 <HAL_RCC_GetSysClockFreq+0xc0>)
 80057f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f6:	f003 030f 	and.w	r3, r3, #15
 80057fa:	220f      	movs	r2, #15
 80057fc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	fa92 f2a2 	rbit	r2, r2
 8005804:	60fa      	str	r2, [r7, #12]
  return result;
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	fab2 f282 	clz	r2, r2
 800580c:	b2d2      	uxtb	r2, r2
 800580e:	40d3      	lsrs	r3, r2
 8005810:	4a14      	ldr	r2, [pc, #80]	; (8005864 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005812:	5cd3      	ldrb	r3, [r2, r3]
 8005814:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d008      	beq.n	8005832 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005820:	4a0e      	ldr	r2, [pc, #56]	; (800585c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	fbb2 f2f3 	udiv	r2, r2, r3
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	fb02 f303 	mul.w	r3, r2, r3
 800582e:	627b      	str	r3, [r7, #36]	; 0x24
 8005830:	e004      	b.n	800583c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	4a0c      	ldr	r2, [pc, #48]	; (8005868 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005836:	fb02 f303 	mul.w	r3, r2, r3
 800583a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800583c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583e:	623b      	str	r3, [r7, #32]
      break;
 8005840:	e002      	b.n	8005848 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005842:	4b06      	ldr	r3, [pc, #24]	; (800585c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005844:	623b      	str	r3, [r7, #32]
      break;
 8005846:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005848:	6a3b      	ldr	r3, [r7, #32]
}
 800584a:	4618      	mov	r0, r3
 800584c:	372c      	adds	r7, #44	; 0x2c
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	40021000 	.word	0x40021000
 800585c:	007a1200 	.word	0x007a1200
 8005860:	080089e4 	.word	0x080089e4
 8005864:	080089f4 	.word	0x080089f4
 8005868:	003d0900 	.word	0x003d0900

0800586c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800586c:	b480      	push	{r7}
 800586e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005870:	4b03      	ldr	r3, [pc, #12]	; (8005880 <HAL_RCC_GetHCLKFreq+0x14>)
 8005872:	681b      	ldr	r3, [r3, #0]
}
 8005874:	4618      	mov	r0, r3
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	200002e0 	.word	0x200002e0

08005884 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800588a:	f7ff ffef 	bl	800586c <HAL_RCC_GetHCLKFreq>
 800588e:	4601      	mov	r1, r0
 8005890:	4b0b      	ldr	r3, [pc, #44]	; (80058c0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005898:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800589c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	fa92 f2a2 	rbit	r2, r2
 80058a4:	603a      	str	r2, [r7, #0]
  return result;
 80058a6:	683a      	ldr	r2, [r7, #0]
 80058a8:	fab2 f282 	clz	r2, r2
 80058ac:	b2d2      	uxtb	r2, r2
 80058ae:	40d3      	lsrs	r3, r2
 80058b0:	4a04      	ldr	r2, [pc, #16]	; (80058c4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80058b2:	5cd3      	ldrb	r3, [r2, r3]
 80058b4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80058b8:	4618      	mov	r0, r3
 80058ba:	3708      	adds	r7, #8
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	40021000 	.word	0x40021000
 80058c4:	080089dc 	.word	0x080089dc

080058c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80058ce:	f7ff ffcd 	bl	800586c <HAL_RCC_GetHCLKFreq>
 80058d2:	4601      	mov	r1, r0
 80058d4:	4b0b      	ldr	r3, [pc, #44]	; (8005904 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80058dc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80058e0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	fa92 f2a2 	rbit	r2, r2
 80058e8:	603a      	str	r2, [r7, #0]
  return result;
 80058ea:	683a      	ldr	r2, [r7, #0]
 80058ec:	fab2 f282 	clz	r2, r2
 80058f0:	b2d2      	uxtb	r2, r2
 80058f2:	40d3      	lsrs	r3, r2
 80058f4:	4a04      	ldr	r2, [pc, #16]	; (8005908 <HAL_RCC_GetPCLK2Freq+0x40>)
 80058f6:	5cd3      	ldrb	r3, [r2, r3]
 80058f8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80058fc:	4618      	mov	r0, r3
 80058fe:	3708      	adds	r7, #8
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	40021000 	.word	0x40021000
 8005908:	080089dc 	.word	0x080089dc

0800590c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b092      	sub	sp, #72	; 0x48
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005914:	2300      	movs	r3, #0
 8005916:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005918:	2300      	movs	r3, #0
 800591a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800591c:	2300      	movs	r3, #0
 800591e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800592a:	2b00      	cmp	r3, #0
 800592c:	f000 80d4 	beq.w	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005930:	4b4e      	ldr	r3, [pc, #312]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005932:	69db      	ldr	r3, [r3, #28]
 8005934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d10e      	bne.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800593c:	4b4b      	ldr	r3, [pc, #300]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800593e:	69db      	ldr	r3, [r3, #28]
 8005940:	4a4a      	ldr	r2, [pc, #296]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005946:	61d3      	str	r3, [r2, #28]
 8005948:	4b48      	ldr	r3, [pc, #288]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800594a:	69db      	ldr	r3, [r3, #28]
 800594c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005950:	60bb      	str	r3, [r7, #8]
 8005952:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005954:	2301      	movs	r3, #1
 8005956:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800595a:	4b45      	ldr	r3, [pc, #276]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005962:	2b00      	cmp	r3, #0
 8005964:	d118      	bne.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005966:	4b42      	ldr	r3, [pc, #264]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a41      	ldr	r2, [pc, #260]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800596c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005970:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005972:	f7fe f903 	bl	8003b7c <HAL_GetTick>
 8005976:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005978:	e008      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800597a:	f7fe f8ff 	bl	8003b7c <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	2b64      	cmp	r3, #100	; 0x64
 8005986:	d901      	bls.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e169      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800598c:	4b38      	ldr	r3, [pc, #224]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005994:	2b00      	cmp	r3, #0
 8005996:	d0f0      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005998:	4b34      	ldr	r3, [pc, #208]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800599a:	6a1b      	ldr	r3, [r3, #32]
 800599c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80059a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f000 8084 	beq.w	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d07c      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059b8:	4b2c      	ldr	r3, [pc, #176]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059ba:	6a1b      	ldr	r3, [r3, #32]
 80059bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80059c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ca:	fa93 f3a3 	rbit	r3, r3
 80059ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80059d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80059d2:	fab3 f383 	clz	r3, r3
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	461a      	mov	r2, r3
 80059da:	4b26      	ldr	r3, [pc, #152]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80059dc:	4413      	add	r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	461a      	mov	r2, r3
 80059e2:	2301      	movs	r3, #1
 80059e4:	6013      	str	r3, [r2, #0]
 80059e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80059ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ee:	fa93 f3a3 	rbit	r3, r3
 80059f2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80059f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80059f6:	fab3 f383 	clz	r3, r3
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	461a      	mov	r2, r3
 80059fe:	4b1d      	ldr	r3, [pc, #116]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005a00:	4413      	add	r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	461a      	mov	r2, r3
 8005a06:	2300      	movs	r3, #0
 8005a08:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005a0a:	4a18      	ldr	r2, [pc, #96]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a0e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d04b      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a1a:	f7fe f8af 	bl	8003b7c <HAL_GetTick>
 8005a1e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a20:	e00a      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a22:	f7fe f8ab 	bl	8003b7c <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d901      	bls.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e113      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005a38:	2302      	movs	r3, #2
 8005a3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3e:	fa93 f3a3 	rbit	r3, r3
 8005a42:	627b      	str	r3, [r7, #36]	; 0x24
 8005a44:	2302      	movs	r3, #2
 8005a46:	623b      	str	r3, [r7, #32]
 8005a48:	6a3b      	ldr	r3, [r7, #32]
 8005a4a:	fa93 f3a3 	rbit	r3, r3
 8005a4e:	61fb      	str	r3, [r7, #28]
  return result;
 8005a50:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a52:	fab3 f383 	clz	r3, r3
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	095b      	lsrs	r3, r3, #5
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	f043 0302 	orr.w	r3, r3, #2
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d108      	bne.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005a66:	4b01      	ldr	r3, [pc, #4]	; (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	e00d      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005a6c:	40021000 	.word	0x40021000
 8005a70:	40007000 	.word	0x40007000
 8005a74:	10908100 	.word	0x10908100
 8005a78:	2302      	movs	r3, #2
 8005a7a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	fa93 f3a3 	rbit	r3, r3
 8005a82:	617b      	str	r3, [r7, #20]
 8005a84:	4b78      	ldr	r3, [pc, #480]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a88:	2202      	movs	r2, #2
 8005a8a:	613a      	str	r2, [r7, #16]
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	fa92 f2a2 	rbit	r2, r2
 8005a92:	60fa      	str	r2, [r7, #12]
  return result;
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	fab2 f282 	clz	r2, r2
 8005a9a:	b2d2      	uxtb	r2, r2
 8005a9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005aa0:	b2d2      	uxtb	r2, r2
 8005aa2:	f002 021f 	and.w	r2, r2, #31
 8005aa6:	2101      	movs	r1, #1
 8005aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8005aac:	4013      	ands	r3, r2
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d0b7      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005ab2:	4b6d      	ldr	r3, [pc, #436]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	496a      	ldr	r1, [pc, #424]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005ac4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d105      	bne.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005acc:	4b66      	ldr	r3, [pc, #408]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ace:	69db      	ldr	r3, [r3, #28]
 8005ad0:	4a65      	ldr	r2, [pc, #404]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ad2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ad6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0301 	and.w	r3, r3, #1
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d008      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ae4:	4b60      	ldr	r3, [pc, #384]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae8:	f023 0203 	bic.w	r2, r3, #3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	495d      	ldr	r1, [pc, #372]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0302 	and.w	r3, r3, #2
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d008      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b02:	4b59      	ldr	r3, [pc, #356]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b06:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	4956      	ldr	r1, [pc, #344]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0304 	and.w	r3, r3, #4
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d008      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b20:	4b51      	ldr	r3, [pc, #324]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	494e      	ldr	r1, [pc, #312]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0320 	and.w	r3, r3, #32
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d008      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b3e:	4b4a      	ldr	r3, [pc, #296]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b42:	f023 0210 	bic.w	r2, r3, #16
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	69db      	ldr	r3, [r3, #28]
 8005b4a:	4947      	ldr	r1, [pc, #284]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d008      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005b5c:	4b42      	ldr	r3, [pc, #264]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b68:	493f      	ldr	r1, [pc, #252]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d008      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b7a:	4b3b      	ldr	r3, [pc, #236]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b7e:	f023 0220 	bic.w	r2, r3, #32
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a1b      	ldr	r3, [r3, #32]
 8005b86:	4938      	ldr	r1, [pc, #224]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0308 	and.w	r3, r3, #8
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d008      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b98:	4b33      	ldr	r3, [pc, #204]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	695b      	ldr	r3, [r3, #20]
 8005ba4:	4930      	ldr	r1, [pc, #192]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0310 	and.w	r3, r3, #16
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d008      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005bb6:	4b2c      	ldr	r3, [pc, #176]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	4929      	ldr	r1, [pc, #164]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d008      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005bd4:	4b24      	ldr	r3, [pc, #144]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be0:	4921      	ldr	r1, [pc, #132]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d008      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005bf2:	4b1d      	ldr	r3, [pc, #116]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfe:	491a      	ldr	r1, [pc, #104]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c00:	4313      	orrs	r3, r2
 8005c02:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d008      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005c10:	4b15      	ldr	r3, [pc, #84]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c14:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c1c:	4912      	ldr	r1, [pc, #72]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d008      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005c2e:	4b0e      	ldr	r3, [pc, #56]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c3a:	490b      	ldr	r1, [pc, #44]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d008      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005c4c:	4b06      	ldr	r3, [pc, #24]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c50:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c58:	4903      	ldr	r1, [pc, #12]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3748      	adds	r7, #72	; 0x48
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	40021000 	.word	0x40021000

08005c6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e09d      	b.n	8005dba <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d108      	bne.n	8005c98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c8e:	d009      	beq.n	8005ca4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	61da      	str	r2, [r3, #28]
 8005c96:	e005      	b.n	8005ca4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d106      	bne.n	8005cc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f7fa ff12 	bl	8000ae8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cda:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ce4:	d902      	bls.n	8005cec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	60fb      	str	r3, [r7, #12]
 8005cea:	e002      	b.n	8005cf2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005cec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cf0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005cfa:	d007      	beq.n	8005d0c <HAL_SPI_Init+0xa0>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d04:	d002      	beq.n	8005d0c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d1c:	431a      	orrs	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	f003 0302 	and.w	r3, r3, #2
 8005d26:	431a      	orrs	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	695b      	ldr	r3, [r3, #20]
 8005d2c:	f003 0301 	and.w	r3, r3, #1
 8005d30:	431a      	orrs	r2, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d3a:	431a      	orrs	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	69db      	ldr	r3, [r3, #28]
 8005d40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d44:	431a      	orrs	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d4e:	ea42 0103 	orr.w	r1, r2, r3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d56:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	0c1b      	lsrs	r3, r3, #16
 8005d68:	f003 0204 	and.w	r2, r3, #4
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d70:	f003 0310 	and.w	r3, r3, #16
 8005d74:	431a      	orrs	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d7a:	f003 0308 	and.w	r3, r3, #8
 8005d7e:	431a      	orrs	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005d88:	ea42 0103 	orr.w	r1, r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	430a      	orrs	r2, r1
 8005d98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	69da      	ldr	r2, [r3, #28]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005da8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b082      	sub	sp, #8
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d101      	bne.n	8005dd4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e049      	b.n	8005e68 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d106      	bne.n	8005dee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f7fa febf 	bl	8000b6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2202      	movs	r2, #2
 8005df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	3304      	adds	r3, #4
 8005dfe:	4619      	mov	r1, r3
 8005e00:	4610      	mov	r0, r2
 8005e02:	f000 fdc7 	bl	8006994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3708      	adds	r7, #8
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d001      	beq.n	8005e88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e04a      	b.n	8005f1e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2202      	movs	r2, #2
 8005e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68da      	ldr	r2, [r3, #12]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f042 0201 	orr.w	r2, r2, #1
 8005e9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a21      	ldr	r2, [pc, #132]	; (8005f2c <HAL_TIM_Base_Start_IT+0xbc>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d018      	beq.n	8005edc <HAL_TIM_Base_Start_IT+0x6c>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eb2:	d013      	beq.n	8005edc <HAL_TIM_Base_Start_IT+0x6c>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a1d      	ldr	r2, [pc, #116]	; (8005f30 <HAL_TIM_Base_Start_IT+0xc0>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d00e      	beq.n	8005edc <HAL_TIM_Base_Start_IT+0x6c>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a1c      	ldr	r2, [pc, #112]	; (8005f34 <HAL_TIM_Base_Start_IT+0xc4>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d009      	beq.n	8005edc <HAL_TIM_Base_Start_IT+0x6c>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a1a      	ldr	r2, [pc, #104]	; (8005f38 <HAL_TIM_Base_Start_IT+0xc8>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d004      	beq.n	8005edc <HAL_TIM_Base_Start_IT+0x6c>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a19      	ldr	r2, [pc, #100]	; (8005f3c <HAL_TIM_Base_Start_IT+0xcc>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d115      	bne.n	8005f08 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	689a      	ldr	r2, [r3, #8]
 8005ee2:	4b17      	ldr	r3, [pc, #92]	; (8005f40 <HAL_TIM_Base_Start_IT+0xd0>)
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2b06      	cmp	r3, #6
 8005eec:	d015      	beq.n	8005f1a <HAL_TIM_Base_Start_IT+0xaa>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ef4:	d011      	beq.n	8005f1a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f042 0201 	orr.w	r2, r2, #1
 8005f04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f06:	e008      	b.n	8005f1a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f042 0201 	orr.w	r2, r2, #1
 8005f16:	601a      	str	r2, [r3, #0]
 8005f18:	e000      	b.n	8005f1c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f1a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3714      	adds	r7, #20
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	40012c00 	.word	0x40012c00
 8005f30:	40000400 	.word	0x40000400
 8005f34:	40000800 	.word	0x40000800
 8005f38:	40013400 	.word	0x40013400
 8005f3c:	40014000 	.word	0x40014000
 8005f40:	00010007 	.word	0x00010007

08005f44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d101      	bne.n	8005f56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e049      	b.n	8005fea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d106      	bne.n	8005f70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f841 	bl	8005ff2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2202      	movs	r2, #2
 8005f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	3304      	adds	r3, #4
 8005f80:	4619      	mov	r1, r3
 8005f82:	4610      	mov	r0, r2
 8005f84:	f000 fd06 	bl	8006994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3708      	adds	r7, #8
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b083      	sub	sp, #12
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005ffa:	bf00      	nop
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
	...

08006008 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d109      	bne.n	800602c <HAL_TIM_PWM_Start+0x24>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800601e:	b2db      	uxtb	r3, r3
 8006020:	2b01      	cmp	r3, #1
 8006022:	bf14      	ite	ne
 8006024:	2301      	movne	r3, #1
 8006026:	2300      	moveq	r3, #0
 8006028:	b2db      	uxtb	r3, r3
 800602a:	e03c      	b.n	80060a6 <HAL_TIM_PWM_Start+0x9e>
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	2b04      	cmp	r3, #4
 8006030:	d109      	bne.n	8006046 <HAL_TIM_PWM_Start+0x3e>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b01      	cmp	r3, #1
 800603c:	bf14      	ite	ne
 800603e:	2301      	movne	r3, #1
 8006040:	2300      	moveq	r3, #0
 8006042:	b2db      	uxtb	r3, r3
 8006044:	e02f      	b.n	80060a6 <HAL_TIM_PWM_Start+0x9e>
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	2b08      	cmp	r3, #8
 800604a:	d109      	bne.n	8006060 <HAL_TIM_PWM_Start+0x58>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2b01      	cmp	r3, #1
 8006056:	bf14      	ite	ne
 8006058:	2301      	movne	r3, #1
 800605a:	2300      	moveq	r3, #0
 800605c:	b2db      	uxtb	r3, r3
 800605e:	e022      	b.n	80060a6 <HAL_TIM_PWM_Start+0x9e>
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	2b0c      	cmp	r3, #12
 8006064:	d109      	bne.n	800607a <HAL_TIM_PWM_Start+0x72>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b01      	cmp	r3, #1
 8006070:	bf14      	ite	ne
 8006072:	2301      	movne	r3, #1
 8006074:	2300      	moveq	r3, #0
 8006076:	b2db      	uxtb	r3, r3
 8006078:	e015      	b.n	80060a6 <HAL_TIM_PWM_Start+0x9e>
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	2b10      	cmp	r3, #16
 800607e:	d109      	bne.n	8006094 <HAL_TIM_PWM_Start+0x8c>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006086:	b2db      	uxtb	r3, r3
 8006088:	2b01      	cmp	r3, #1
 800608a:	bf14      	ite	ne
 800608c:	2301      	movne	r3, #1
 800608e:	2300      	moveq	r3, #0
 8006090:	b2db      	uxtb	r3, r3
 8006092:	e008      	b.n	80060a6 <HAL_TIM_PWM_Start+0x9e>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800609a:	b2db      	uxtb	r3, r3
 800609c:	2b01      	cmp	r3, #1
 800609e:	bf14      	ite	ne
 80060a0:	2301      	movne	r3, #1
 80060a2:	2300      	moveq	r3, #0
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d001      	beq.n	80060ae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e097      	b.n	80061de <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d104      	bne.n	80060be <HAL_TIM_PWM_Start+0xb6>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2202      	movs	r2, #2
 80060b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060bc:	e023      	b.n	8006106 <HAL_TIM_PWM_Start+0xfe>
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	2b04      	cmp	r3, #4
 80060c2:	d104      	bne.n	80060ce <HAL_TIM_PWM_Start+0xc6>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2202      	movs	r2, #2
 80060c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060cc:	e01b      	b.n	8006106 <HAL_TIM_PWM_Start+0xfe>
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	2b08      	cmp	r3, #8
 80060d2:	d104      	bne.n	80060de <HAL_TIM_PWM_Start+0xd6>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2202      	movs	r2, #2
 80060d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060dc:	e013      	b.n	8006106 <HAL_TIM_PWM_Start+0xfe>
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	2b0c      	cmp	r3, #12
 80060e2:	d104      	bne.n	80060ee <HAL_TIM_PWM_Start+0xe6>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2202      	movs	r2, #2
 80060e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060ec:	e00b      	b.n	8006106 <HAL_TIM_PWM_Start+0xfe>
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	2b10      	cmp	r3, #16
 80060f2:	d104      	bne.n	80060fe <HAL_TIM_PWM_Start+0xf6>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2202      	movs	r2, #2
 80060f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060fc:	e003      	b.n	8006106 <HAL_TIM_PWM_Start+0xfe>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2202      	movs	r2, #2
 8006102:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2201      	movs	r2, #1
 800610c:	6839      	ldr	r1, [r7, #0]
 800610e:	4618      	mov	r0, r3
 8006110:	f001 f840 	bl	8007194 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a33      	ldr	r2, [pc, #204]	; (80061e8 <HAL_TIM_PWM_Start+0x1e0>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d013      	beq.n	8006146 <HAL_TIM_PWM_Start+0x13e>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a32      	ldr	r2, [pc, #200]	; (80061ec <HAL_TIM_PWM_Start+0x1e4>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d00e      	beq.n	8006146 <HAL_TIM_PWM_Start+0x13e>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a30      	ldr	r2, [pc, #192]	; (80061f0 <HAL_TIM_PWM_Start+0x1e8>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d009      	beq.n	8006146 <HAL_TIM_PWM_Start+0x13e>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a2f      	ldr	r2, [pc, #188]	; (80061f4 <HAL_TIM_PWM_Start+0x1ec>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d004      	beq.n	8006146 <HAL_TIM_PWM_Start+0x13e>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a2d      	ldr	r2, [pc, #180]	; (80061f8 <HAL_TIM_PWM_Start+0x1f0>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d101      	bne.n	800614a <HAL_TIM_PWM_Start+0x142>
 8006146:	2301      	movs	r3, #1
 8006148:	e000      	b.n	800614c <HAL_TIM_PWM_Start+0x144>
 800614a:	2300      	movs	r3, #0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d007      	beq.n	8006160 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800615e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a20      	ldr	r2, [pc, #128]	; (80061e8 <HAL_TIM_PWM_Start+0x1e0>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d018      	beq.n	800619c <HAL_TIM_PWM_Start+0x194>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006172:	d013      	beq.n	800619c <HAL_TIM_PWM_Start+0x194>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a20      	ldr	r2, [pc, #128]	; (80061fc <HAL_TIM_PWM_Start+0x1f4>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d00e      	beq.n	800619c <HAL_TIM_PWM_Start+0x194>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a1f      	ldr	r2, [pc, #124]	; (8006200 <HAL_TIM_PWM_Start+0x1f8>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d009      	beq.n	800619c <HAL_TIM_PWM_Start+0x194>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a17      	ldr	r2, [pc, #92]	; (80061ec <HAL_TIM_PWM_Start+0x1e4>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d004      	beq.n	800619c <HAL_TIM_PWM_Start+0x194>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a16      	ldr	r2, [pc, #88]	; (80061f0 <HAL_TIM_PWM_Start+0x1e8>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d115      	bne.n	80061c8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	689a      	ldr	r2, [r3, #8]
 80061a2:	4b18      	ldr	r3, [pc, #96]	; (8006204 <HAL_TIM_PWM_Start+0x1fc>)
 80061a4:	4013      	ands	r3, r2
 80061a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2b06      	cmp	r3, #6
 80061ac:	d015      	beq.n	80061da <HAL_TIM_PWM_Start+0x1d2>
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061b4:	d011      	beq.n	80061da <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f042 0201 	orr.w	r2, r2, #1
 80061c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061c6:	e008      	b.n	80061da <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f042 0201 	orr.w	r2, r2, #1
 80061d6:	601a      	str	r2, [r3, #0]
 80061d8:	e000      	b.n	80061dc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	40012c00 	.word	0x40012c00
 80061ec:	40013400 	.word	0x40013400
 80061f0:	40014000 	.word	0x40014000
 80061f4:	40014400 	.word	0x40014400
 80061f8:	40014800 	.word	0x40014800
 80061fc:	40000400 	.word	0x40000400
 8006200:	40000800 	.word	0x40000800
 8006204:	00010007 	.word	0x00010007

08006208 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2200      	movs	r2, #0
 8006218:	6839      	ldr	r1, [r7, #0]
 800621a:	4618      	mov	r0, r3
 800621c:	f000 ffba 	bl	8007194 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a3e      	ldr	r2, [pc, #248]	; (8006320 <HAL_TIM_PWM_Stop+0x118>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d013      	beq.n	8006252 <HAL_TIM_PWM_Stop+0x4a>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a3d      	ldr	r2, [pc, #244]	; (8006324 <HAL_TIM_PWM_Stop+0x11c>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d00e      	beq.n	8006252 <HAL_TIM_PWM_Stop+0x4a>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a3b      	ldr	r2, [pc, #236]	; (8006328 <HAL_TIM_PWM_Stop+0x120>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d009      	beq.n	8006252 <HAL_TIM_PWM_Stop+0x4a>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a3a      	ldr	r2, [pc, #232]	; (800632c <HAL_TIM_PWM_Stop+0x124>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d004      	beq.n	8006252 <HAL_TIM_PWM_Stop+0x4a>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a38      	ldr	r2, [pc, #224]	; (8006330 <HAL_TIM_PWM_Stop+0x128>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d101      	bne.n	8006256 <HAL_TIM_PWM_Stop+0x4e>
 8006252:	2301      	movs	r3, #1
 8006254:	e000      	b.n	8006258 <HAL_TIM_PWM_Stop+0x50>
 8006256:	2300      	movs	r3, #0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d017      	beq.n	800628c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6a1a      	ldr	r2, [r3, #32]
 8006262:	f241 1311 	movw	r3, #4369	; 0x1111
 8006266:	4013      	ands	r3, r2
 8006268:	2b00      	cmp	r3, #0
 800626a:	d10f      	bne.n	800628c <HAL_TIM_PWM_Stop+0x84>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6a1a      	ldr	r2, [r3, #32]
 8006272:	f240 4344 	movw	r3, #1092	; 0x444
 8006276:	4013      	ands	r3, r2
 8006278:	2b00      	cmp	r3, #0
 800627a:	d107      	bne.n	800628c <HAL_TIM_PWM_Stop+0x84>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800628a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6a1a      	ldr	r2, [r3, #32]
 8006292:	f241 1311 	movw	r3, #4369	; 0x1111
 8006296:	4013      	ands	r3, r2
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10f      	bne.n	80062bc <HAL_TIM_PWM_Stop+0xb4>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	6a1a      	ldr	r2, [r3, #32]
 80062a2:	f240 4344 	movw	r3, #1092	; 0x444
 80062a6:	4013      	ands	r3, r2
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d107      	bne.n	80062bc <HAL_TIM_PWM_Stop+0xb4>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f022 0201 	bic.w	r2, r2, #1
 80062ba:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d104      	bne.n	80062cc <HAL_TIM_PWM_Stop+0xc4>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2201      	movs	r2, #1
 80062c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062ca:	e023      	b.n	8006314 <HAL_TIM_PWM_Stop+0x10c>
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	2b04      	cmp	r3, #4
 80062d0:	d104      	bne.n	80062dc <HAL_TIM_PWM_Stop+0xd4>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062da:	e01b      	b.n	8006314 <HAL_TIM_PWM_Stop+0x10c>
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	2b08      	cmp	r3, #8
 80062e0:	d104      	bne.n	80062ec <HAL_TIM_PWM_Stop+0xe4>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062ea:	e013      	b.n	8006314 <HAL_TIM_PWM_Stop+0x10c>
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	2b0c      	cmp	r3, #12
 80062f0:	d104      	bne.n	80062fc <HAL_TIM_PWM_Stop+0xf4>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2201      	movs	r2, #1
 80062f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80062fa:	e00b      	b.n	8006314 <HAL_TIM_PWM_Stop+0x10c>
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	2b10      	cmp	r3, #16
 8006300:	d104      	bne.n	800630c <HAL_TIM_PWM_Stop+0x104>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800630a:	e003      	b.n	8006314 <HAL_TIM_PWM_Stop+0x10c>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3708      	adds	r7, #8
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	40012c00 	.word	0x40012c00
 8006324:	40013400 	.word	0x40013400
 8006328:	40014000 	.word	0x40014000
 800632c:	40014400 	.word	0x40014400
 8006330:	40014800 	.word	0x40014800

08006334 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	f003 0302 	and.w	r3, r3, #2
 8006346:	2b02      	cmp	r3, #2
 8006348:	d122      	bne.n	8006390 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	f003 0302 	and.w	r3, r3, #2
 8006354:	2b02      	cmp	r3, #2
 8006356:	d11b      	bne.n	8006390 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f06f 0202 	mvn.w	r2, #2
 8006360:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2201      	movs	r2, #1
 8006366:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	f003 0303 	and.w	r3, r3, #3
 8006372:	2b00      	cmp	r3, #0
 8006374:	d003      	beq.n	800637e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 faed 	bl	8006956 <HAL_TIM_IC_CaptureCallback>
 800637c:	e005      	b.n	800638a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 fadf 	bl	8006942 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 faf0 	bl	800696a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	f003 0304 	and.w	r3, r3, #4
 800639a:	2b04      	cmp	r3, #4
 800639c:	d122      	bne.n	80063e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	f003 0304 	and.w	r3, r3, #4
 80063a8:	2b04      	cmp	r3, #4
 80063aa:	d11b      	bne.n	80063e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f06f 0204 	mvn.w	r2, #4
 80063b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2202      	movs	r2, #2
 80063ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d003      	beq.n	80063d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 fac3 	bl	8006956 <HAL_TIM_IC_CaptureCallback>
 80063d0:	e005      	b.n	80063de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fab5 	bl	8006942 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 fac6 	bl	800696a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	f003 0308 	and.w	r3, r3, #8
 80063ee:	2b08      	cmp	r3, #8
 80063f0:	d122      	bne.n	8006438 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	f003 0308 	and.w	r3, r3, #8
 80063fc:	2b08      	cmp	r3, #8
 80063fe:	d11b      	bne.n	8006438 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f06f 0208 	mvn.w	r2, #8
 8006408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2204      	movs	r2, #4
 800640e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	69db      	ldr	r3, [r3, #28]
 8006416:	f003 0303 	and.w	r3, r3, #3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d003      	beq.n	8006426 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fa99 	bl	8006956 <HAL_TIM_IC_CaptureCallback>
 8006424:	e005      	b.n	8006432 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fa8b 	bl	8006942 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fa9c 	bl	800696a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	f003 0310 	and.w	r3, r3, #16
 8006442:	2b10      	cmp	r3, #16
 8006444:	d122      	bne.n	800648c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	f003 0310 	and.w	r3, r3, #16
 8006450:	2b10      	cmp	r3, #16
 8006452:	d11b      	bne.n	800648c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f06f 0210 	mvn.w	r2, #16
 800645c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2208      	movs	r2, #8
 8006462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	69db      	ldr	r3, [r3, #28]
 800646a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 fa6f 	bl	8006956 <HAL_TIM_IC_CaptureCallback>
 8006478:	e005      	b.n	8006486 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 fa61 	bl	8006942 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 fa72 	bl	800696a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	2b01      	cmp	r3, #1
 8006498:	d10e      	bne.n	80064b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	f003 0301 	and.w	r3, r3, #1
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d107      	bne.n	80064b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f06f 0201 	mvn.w	r2, #1
 80064b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 fa3b 	bl	800692e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064c2:	2b80      	cmp	r3, #128	; 0x80
 80064c4:	d10e      	bne.n	80064e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064d0:	2b80      	cmp	r3, #128	; 0x80
 80064d2:	d107      	bne.n	80064e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 ff86 	bl	80073f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064f2:	d10e      	bne.n	8006512 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064fe:	2b80      	cmp	r3, #128	; 0x80
 8006500:	d107      	bne.n	8006512 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800650a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 ff79 	bl	8007404 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800651c:	2b40      	cmp	r3, #64	; 0x40
 800651e:	d10e      	bne.n	800653e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800652a:	2b40      	cmp	r3, #64	; 0x40
 800652c:	d107      	bne.n	800653e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 fa20 	bl	800697e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	f003 0320 	and.w	r3, r3, #32
 8006548:	2b20      	cmp	r3, #32
 800654a:	d10e      	bne.n	800656a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	f003 0320 	and.w	r3, r3, #32
 8006556:	2b20      	cmp	r3, #32
 8006558:	d107      	bne.n	800656a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f06f 0220 	mvn.w	r2, #32
 8006562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 ff39 	bl	80073dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800656a:	bf00      	nop
 800656c:	3708      	adds	r7, #8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
	...

08006574 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b086      	sub	sp, #24
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006580:	2300      	movs	r3, #0
 8006582:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800658a:	2b01      	cmp	r3, #1
 800658c:	d101      	bne.n	8006592 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800658e:	2302      	movs	r3, #2
 8006590:	e0ff      	b.n	8006792 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2201      	movs	r2, #1
 8006596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2b14      	cmp	r3, #20
 800659e:	f200 80f0 	bhi.w	8006782 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80065a2:	a201      	add	r2, pc, #4	; (adr r2, 80065a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80065a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a8:	080065fd 	.word	0x080065fd
 80065ac:	08006783 	.word	0x08006783
 80065b0:	08006783 	.word	0x08006783
 80065b4:	08006783 	.word	0x08006783
 80065b8:	0800663d 	.word	0x0800663d
 80065bc:	08006783 	.word	0x08006783
 80065c0:	08006783 	.word	0x08006783
 80065c4:	08006783 	.word	0x08006783
 80065c8:	0800667f 	.word	0x0800667f
 80065cc:	08006783 	.word	0x08006783
 80065d0:	08006783 	.word	0x08006783
 80065d4:	08006783 	.word	0x08006783
 80065d8:	080066bf 	.word	0x080066bf
 80065dc:	08006783 	.word	0x08006783
 80065e0:	08006783 	.word	0x08006783
 80065e4:	08006783 	.word	0x08006783
 80065e8:	08006701 	.word	0x08006701
 80065ec:	08006783 	.word	0x08006783
 80065f0:	08006783 	.word	0x08006783
 80065f4:	08006783 	.word	0x08006783
 80065f8:	08006741 	.word	0x08006741
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68b9      	ldr	r1, [r7, #8]
 8006602:	4618      	mov	r0, r3
 8006604:	f000 fa56 	bl	8006ab4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	699a      	ldr	r2, [r3, #24]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f042 0208 	orr.w	r2, r2, #8
 8006616:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	699a      	ldr	r2, [r3, #24]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f022 0204 	bic.w	r2, r2, #4
 8006626:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	6999      	ldr	r1, [r3, #24]
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	691a      	ldr	r2, [r3, #16]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	430a      	orrs	r2, r1
 8006638:	619a      	str	r2, [r3, #24]
      break;
 800663a:	e0a5      	b.n	8006788 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68b9      	ldr	r1, [r7, #8]
 8006642:	4618      	mov	r0, r3
 8006644:	f000 fac6 	bl	8006bd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	699a      	ldr	r2, [r3, #24]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006656:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	699a      	ldr	r2, [r3, #24]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006666:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	6999      	ldr	r1, [r3, #24]
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	021a      	lsls	r2, r3, #8
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	430a      	orrs	r2, r1
 800667a:	619a      	str	r2, [r3, #24]
      break;
 800667c:	e084      	b.n	8006788 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68b9      	ldr	r1, [r7, #8]
 8006684:	4618      	mov	r0, r3
 8006686:	f000 fb2f 	bl	8006ce8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	69da      	ldr	r2, [r3, #28]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f042 0208 	orr.w	r2, r2, #8
 8006698:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	69da      	ldr	r2, [r3, #28]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f022 0204 	bic.w	r2, r2, #4
 80066a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	69d9      	ldr	r1, [r3, #28]
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	691a      	ldr	r2, [r3, #16]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	430a      	orrs	r2, r1
 80066ba:	61da      	str	r2, [r3, #28]
      break;
 80066bc:	e064      	b.n	8006788 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68b9      	ldr	r1, [r7, #8]
 80066c4:	4618      	mov	r0, r3
 80066c6:	f000 fb97 	bl	8006df8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	69da      	ldr	r2, [r3, #28]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	69da      	ldr	r2, [r3, #28]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	69d9      	ldr	r1, [r3, #28]
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	021a      	lsls	r2, r3, #8
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	430a      	orrs	r2, r1
 80066fc:	61da      	str	r2, [r3, #28]
      break;
 80066fe:	e043      	b.n	8006788 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68b9      	ldr	r1, [r7, #8]
 8006706:	4618      	mov	r0, r3
 8006708:	f000 fbe0 	bl	8006ecc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f042 0208 	orr.w	r2, r2, #8
 800671a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f022 0204 	bic.w	r2, r2, #4
 800672a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	691a      	ldr	r2, [r3, #16]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	430a      	orrs	r2, r1
 800673c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800673e:	e023      	b.n	8006788 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68b9      	ldr	r1, [r7, #8]
 8006746:	4618      	mov	r0, r3
 8006748:	f000 fc24 	bl	8006f94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800675a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800676a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	021a      	lsls	r2, r3, #8
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	430a      	orrs	r2, r1
 800677e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006780:	e002      	b.n	8006788 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	75fb      	strb	r3, [r7, #23]
      break;
 8006786:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006790:	7dfb      	ldrb	r3, [r7, #23]
}
 8006792:	4618      	mov	r0, r3
 8006794:	3718      	adds	r7, #24
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop

0800679c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067a6:	2300      	movs	r3, #0
 80067a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d101      	bne.n	80067b8 <HAL_TIM_ConfigClockSource+0x1c>
 80067b4:	2302      	movs	r3, #2
 80067b6:	e0b6      	b.n	8006926 <HAL_TIM_ConfigClockSource+0x18a>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2202      	movs	r2, #2
 80067c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80067da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067f4:	d03e      	beq.n	8006874 <HAL_TIM_ConfigClockSource+0xd8>
 80067f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067fa:	f200 8087 	bhi.w	800690c <HAL_TIM_ConfigClockSource+0x170>
 80067fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006802:	f000 8086 	beq.w	8006912 <HAL_TIM_ConfigClockSource+0x176>
 8006806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800680a:	d87f      	bhi.n	800690c <HAL_TIM_ConfigClockSource+0x170>
 800680c:	2b70      	cmp	r3, #112	; 0x70
 800680e:	d01a      	beq.n	8006846 <HAL_TIM_ConfigClockSource+0xaa>
 8006810:	2b70      	cmp	r3, #112	; 0x70
 8006812:	d87b      	bhi.n	800690c <HAL_TIM_ConfigClockSource+0x170>
 8006814:	2b60      	cmp	r3, #96	; 0x60
 8006816:	d050      	beq.n	80068ba <HAL_TIM_ConfigClockSource+0x11e>
 8006818:	2b60      	cmp	r3, #96	; 0x60
 800681a:	d877      	bhi.n	800690c <HAL_TIM_ConfigClockSource+0x170>
 800681c:	2b50      	cmp	r3, #80	; 0x50
 800681e:	d03c      	beq.n	800689a <HAL_TIM_ConfigClockSource+0xfe>
 8006820:	2b50      	cmp	r3, #80	; 0x50
 8006822:	d873      	bhi.n	800690c <HAL_TIM_ConfigClockSource+0x170>
 8006824:	2b40      	cmp	r3, #64	; 0x40
 8006826:	d058      	beq.n	80068da <HAL_TIM_ConfigClockSource+0x13e>
 8006828:	2b40      	cmp	r3, #64	; 0x40
 800682a:	d86f      	bhi.n	800690c <HAL_TIM_ConfigClockSource+0x170>
 800682c:	2b30      	cmp	r3, #48	; 0x30
 800682e:	d064      	beq.n	80068fa <HAL_TIM_ConfigClockSource+0x15e>
 8006830:	2b30      	cmp	r3, #48	; 0x30
 8006832:	d86b      	bhi.n	800690c <HAL_TIM_ConfigClockSource+0x170>
 8006834:	2b20      	cmp	r3, #32
 8006836:	d060      	beq.n	80068fa <HAL_TIM_ConfigClockSource+0x15e>
 8006838:	2b20      	cmp	r3, #32
 800683a:	d867      	bhi.n	800690c <HAL_TIM_ConfigClockSource+0x170>
 800683c:	2b00      	cmp	r3, #0
 800683e:	d05c      	beq.n	80068fa <HAL_TIM_ConfigClockSource+0x15e>
 8006840:	2b10      	cmp	r3, #16
 8006842:	d05a      	beq.n	80068fa <HAL_TIM_ConfigClockSource+0x15e>
 8006844:	e062      	b.n	800690c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6818      	ldr	r0, [r3, #0]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	6899      	ldr	r1, [r3, #8]
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	685a      	ldr	r2, [r3, #4]
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	f000 fc7d 	bl	8007154 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006868:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68ba      	ldr	r2, [r7, #8]
 8006870:	609a      	str	r2, [r3, #8]
      break;
 8006872:	e04f      	b.n	8006914 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6818      	ldr	r0, [r3, #0]
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	6899      	ldr	r1, [r3, #8]
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	685a      	ldr	r2, [r3, #4]
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	f000 fc66 	bl	8007154 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	689a      	ldr	r2, [r3, #8]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006896:	609a      	str	r2, [r3, #8]
      break;
 8006898:	e03c      	b.n	8006914 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6818      	ldr	r0, [r3, #0]
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	6859      	ldr	r1, [r3, #4]
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	461a      	mov	r2, r3
 80068a8:	f000 fbda 	bl	8007060 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2150      	movs	r1, #80	; 0x50
 80068b2:	4618      	mov	r0, r3
 80068b4:	f000 fc33 	bl	800711e <TIM_ITRx_SetConfig>
      break;
 80068b8:	e02c      	b.n	8006914 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6818      	ldr	r0, [r3, #0]
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	6859      	ldr	r1, [r3, #4]
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	461a      	mov	r2, r3
 80068c8:	f000 fbf9 	bl	80070be <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2160      	movs	r1, #96	; 0x60
 80068d2:	4618      	mov	r0, r3
 80068d4:	f000 fc23 	bl	800711e <TIM_ITRx_SetConfig>
      break;
 80068d8:	e01c      	b.n	8006914 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6818      	ldr	r0, [r3, #0]
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	6859      	ldr	r1, [r3, #4]
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	461a      	mov	r2, r3
 80068e8:	f000 fbba 	bl	8007060 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2140      	movs	r1, #64	; 0x40
 80068f2:	4618      	mov	r0, r3
 80068f4:	f000 fc13 	bl	800711e <TIM_ITRx_SetConfig>
      break;
 80068f8:	e00c      	b.n	8006914 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4619      	mov	r1, r3
 8006904:	4610      	mov	r0, r2
 8006906:	f000 fc0a 	bl	800711e <TIM_ITRx_SetConfig>
      break;
 800690a:	e003      	b.n	8006914 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	73fb      	strb	r3, [r7, #15]
      break;
 8006910:	e000      	b.n	8006914 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006912:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006924:	7bfb      	ldrb	r3, [r7, #15]
}
 8006926:	4618      	mov	r0, r3
 8006928:	3710      	adds	r7, #16
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800692e:	b480      	push	{r7}
 8006930:	b083      	sub	sp, #12
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006936:	bf00      	nop
 8006938:	370c      	adds	r7, #12
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr

08006942 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006942:	b480      	push	{r7}
 8006944:	b083      	sub	sp, #12
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800694a:	bf00      	nop
 800694c:	370c      	adds	r7, #12
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr

08006956 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006956:	b480      	push	{r7}
 8006958:	b083      	sub	sp, #12
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800695e:	bf00      	nop
 8006960:	370c      	adds	r7, #12
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr

0800696a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800696a:	b480      	push	{r7}
 800696c:	b083      	sub	sp, #12
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006972:	bf00      	nop
 8006974:	370c      	adds	r7, #12
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800697e:	b480      	push	{r7}
 8006980:	b083      	sub	sp, #12
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006986:	bf00      	nop
 8006988:	370c      	adds	r7, #12
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
	...

08006994 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a3c      	ldr	r2, [pc, #240]	; (8006a98 <TIM_Base_SetConfig+0x104>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d00f      	beq.n	80069cc <TIM_Base_SetConfig+0x38>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069b2:	d00b      	beq.n	80069cc <TIM_Base_SetConfig+0x38>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a39      	ldr	r2, [pc, #228]	; (8006a9c <TIM_Base_SetConfig+0x108>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d007      	beq.n	80069cc <TIM_Base_SetConfig+0x38>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a38      	ldr	r2, [pc, #224]	; (8006aa0 <TIM_Base_SetConfig+0x10c>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d003      	beq.n	80069cc <TIM_Base_SetConfig+0x38>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a37      	ldr	r2, [pc, #220]	; (8006aa4 <TIM_Base_SetConfig+0x110>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d108      	bne.n	80069de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	4313      	orrs	r3, r2
 80069dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a2d      	ldr	r2, [pc, #180]	; (8006a98 <TIM_Base_SetConfig+0x104>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d01b      	beq.n	8006a1e <TIM_Base_SetConfig+0x8a>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069ec:	d017      	beq.n	8006a1e <TIM_Base_SetConfig+0x8a>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a2a      	ldr	r2, [pc, #168]	; (8006a9c <TIM_Base_SetConfig+0x108>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d013      	beq.n	8006a1e <TIM_Base_SetConfig+0x8a>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a29      	ldr	r2, [pc, #164]	; (8006aa0 <TIM_Base_SetConfig+0x10c>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d00f      	beq.n	8006a1e <TIM_Base_SetConfig+0x8a>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a28      	ldr	r2, [pc, #160]	; (8006aa4 <TIM_Base_SetConfig+0x110>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d00b      	beq.n	8006a1e <TIM_Base_SetConfig+0x8a>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a27      	ldr	r2, [pc, #156]	; (8006aa8 <TIM_Base_SetConfig+0x114>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d007      	beq.n	8006a1e <TIM_Base_SetConfig+0x8a>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a26      	ldr	r2, [pc, #152]	; (8006aac <TIM_Base_SetConfig+0x118>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d003      	beq.n	8006a1e <TIM_Base_SetConfig+0x8a>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a25      	ldr	r2, [pc, #148]	; (8006ab0 <TIM_Base_SetConfig+0x11c>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d108      	bne.n	8006a30 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	695b      	ldr	r3, [r3, #20]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	689a      	ldr	r2, [r3, #8]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4a10      	ldr	r2, [pc, #64]	; (8006a98 <TIM_Base_SetConfig+0x104>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d00f      	beq.n	8006a7c <TIM_Base_SetConfig+0xe8>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a11      	ldr	r2, [pc, #68]	; (8006aa4 <TIM_Base_SetConfig+0x110>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d00b      	beq.n	8006a7c <TIM_Base_SetConfig+0xe8>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a10      	ldr	r2, [pc, #64]	; (8006aa8 <TIM_Base_SetConfig+0x114>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d007      	beq.n	8006a7c <TIM_Base_SetConfig+0xe8>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a0f      	ldr	r2, [pc, #60]	; (8006aac <TIM_Base_SetConfig+0x118>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d003      	beq.n	8006a7c <TIM_Base_SetConfig+0xe8>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4a0e      	ldr	r2, [pc, #56]	; (8006ab0 <TIM_Base_SetConfig+0x11c>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d103      	bne.n	8006a84 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	691a      	ldr	r2, [r3, #16]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	615a      	str	r2, [r3, #20]
}
 8006a8a:	bf00      	nop
 8006a8c:	3714      	adds	r7, #20
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	40012c00 	.word	0x40012c00
 8006a9c:	40000400 	.word	0x40000400
 8006aa0:	40000800 	.word	0x40000800
 8006aa4:	40013400 	.word	0x40013400
 8006aa8:	40014000 	.word	0x40014000
 8006aac:	40014400 	.word	0x40014400
 8006ab0:	40014800 	.word	0x40014800

08006ab4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b087      	sub	sp, #28
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
 8006ac2:	f023 0201 	bic.w	r2, r3, #1
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a1b      	ldr	r3, [r3, #32]
 8006ace:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f023 0303 	bic.w	r3, r3, #3
 8006aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	f023 0302 	bic.w	r3, r3, #2
 8006b00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a2c      	ldr	r2, [pc, #176]	; (8006bc0 <TIM_OC1_SetConfig+0x10c>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d00f      	beq.n	8006b34 <TIM_OC1_SetConfig+0x80>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a2b      	ldr	r2, [pc, #172]	; (8006bc4 <TIM_OC1_SetConfig+0x110>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d00b      	beq.n	8006b34 <TIM_OC1_SetConfig+0x80>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a2a      	ldr	r2, [pc, #168]	; (8006bc8 <TIM_OC1_SetConfig+0x114>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d007      	beq.n	8006b34 <TIM_OC1_SetConfig+0x80>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a29      	ldr	r2, [pc, #164]	; (8006bcc <TIM_OC1_SetConfig+0x118>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d003      	beq.n	8006b34 <TIM_OC1_SetConfig+0x80>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a28      	ldr	r2, [pc, #160]	; (8006bd0 <TIM_OC1_SetConfig+0x11c>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d10c      	bne.n	8006b4e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	f023 0308 	bic.w	r3, r3, #8
 8006b3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	697a      	ldr	r2, [r7, #20]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	f023 0304 	bic.w	r3, r3, #4
 8006b4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a1b      	ldr	r2, [pc, #108]	; (8006bc0 <TIM_OC1_SetConfig+0x10c>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d00f      	beq.n	8006b76 <TIM_OC1_SetConfig+0xc2>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a1a      	ldr	r2, [pc, #104]	; (8006bc4 <TIM_OC1_SetConfig+0x110>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d00b      	beq.n	8006b76 <TIM_OC1_SetConfig+0xc2>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a19      	ldr	r2, [pc, #100]	; (8006bc8 <TIM_OC1_SetConfig+0x114>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d007      	beq.n	8006b76 <TIM_OC1_SetConfig+0xc2>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a18      	ldr	r2, [pc, #96]	; (8006bcc <TIM_OC1_SetConfig+0x118>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d003      	beq.n	8006b76 <TIM_OC1_SetConfig+0xc2>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a17      	ldr	r2, [pc, #92]	; (8006bd0 <TIM_OC1_SetConfig+0x11c>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d111      	bne.n	8006b9a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	695b      	ldr	r3, [r3, #20]
 8006b8a:	693a      	ldr	r2, [r7, #16]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	699b      	ldr	r3, [r3, #24]
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	693a      	ldr	r2, [r7, #16]
 8006b9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	685a      	ldr	r2, [r3, #4]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	621a      	str	r2, [r3, #32]
}
 8006bb4:	bf00      	nop
 8006bb6:	371c      	adds	r7, #28
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr
 8006bc0:	40012c00 	.word	0x40012c00
 8006bc4:	40013400 	.word	0x40013400
 8006bc8:	40014000 	.word	0x40014000
 8006bcc:	40014400 	.word	0x40014400
 8006bd0:	40014800 	.word	0x40014800

08006bd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b087      	sub	sp, #28
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a1b      	ldr	r3, [r3, #32]
 8006be2:	f023 0210 	bic.w	r2, r3, #16
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a1b      	ldr	r3, [r3, #32]
 8006bee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	021b      	lsls	r3, r3, #8
 8006c16:	68fa      	ldr	r2, [r7, #12]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	f023 0320 	bic.w	r3, r3, #32
 8006c22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	011b      	lsls	r3, r3, #4
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4a28      	ldr	r2, [pc, #160]	; (8006cd4 <TIM_OC2_SetConfig+0x100>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d003      	beq.n	8006c40 <TIM_OC2_SetConfig+0x6c>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4a27      	ldr	r2, [pc, #156]	; (8006cd8 <TIM_OC2_SetConfig+0x104>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d10d      	bne.n	8006c5c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	011b      	lsls	r3, r3, #4
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a1d      	ldr	r2, [pc, #116]	; (8006cd4 <TIM_OC2_SetConfig+0x100>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d00f      	beq.n	8006c84 <TIM_OC2_SetConfig+0xb0>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a1c      	ldr	r2, [pc, #112]	; (8006cd8 <TIM_OC2_SetConfig+0x104>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d00b      	beq.n	8006c84 <TIM_OC2_SetConfig+0xb0>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a1b      	ldr	r2, [pc, #108]	; (8006cdc <TIM_OC2_SetConfig+0x108>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d007      	beq.n	8006c84 <TIM_OC2_SetConfig+0xb0>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a1a      	ldr	r2, [pc, #104]	; (8006ce0 <TIM_OC2_SetConfig+0x10c>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d003      	beq.n	8006c84 <TIM_OC2_SetConfig+0xb0>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a19      	ldr	r2, [pc, #100]	; (8006ce4 <TIM_OC2_SetConfig+0x110>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d113      	bne.n	8006cac <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c8a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c92:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	695b      	ldr	r3, [r3, #20]
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	693a      	ldr	r2, [r7, #16]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	699b      	ldr	r3, [r3, #24]
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	693a      	ldr	r2, [r7, #16]
 8006cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	685a      	ldr	r2, [r3, #4]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	697a      	ldr	r2, [r7, #20]
 8006cc4:	621a      	str	r2, [r3, #32]
}
 8006cc6:	bf00      	nop
 8006cc8:	371c      	adds	r7, #28
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	40012c00 	.word	0x40012c00
 8006cd8:	40013400 	.word	0x40013400
 8006cdc:	40014000 	.word	0x40014000
 8006ce0:	40014400 	.word	0x40014400
 8006ce4:	40014800 	.word	0x40014800

08006ce8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b087      	sub	sp, #28
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a1b      	ldr	r3, [r3, #32]
 8006d02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	69db      	ldr	r3, [r3, #28]
 8006d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f023 0303 	bic.w	r3, r3, #3
 8006d22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	021b      	lsls	r3, r3, #8
 8006d3c:	697a      	ldr	r2, [r7, #20]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a27      	ldr	r2, [pc, #156]	; (8006de4 <TIM_OC3_SetConfig+0xfc>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d003      	beq.n	8006d52 <TIM_OC3_SetConfig+0x6a>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a26      	ldr	r2, [pc, #152]	; (8006de8 <TIM_OC3_SetConfig+0x100>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d10d      	bne.n	8006d6e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	021b      	lsls	r3, r3, #8
 8006d60:	697a      	ldr	r2, [r7, #20]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d6c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a1c      	ldr	r2, [pc, #112]	; (8006de4 <TIM_OC3_SetConfig+0xfc>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d00f      	beq.n	8006d96 <TIM_OC3_SetConfig+0xae>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a1b      	ldr	r2, [pc, #108]	; (8006de8 <TIM_OC3_SetConfig+0x100>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d00b      	beq.n	8006d96 <TIM_OC3_SetConfig+0xae>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a1a      	ldr	r2, [pc, #104]	; (8006dec <TIM_OC3_SetConfig+0x104>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d007      	beq.n	8006d96 <TIM_OC3_SetConfig+0xae>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a19      	ldr	r2, [pc, #100]	; (8006df0 <TIM_OC3_SetConfig+0x108>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d003      	beq.n	8006d96 <TIM_OC3_SetConfig+0xae>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a18      	ldr	r2, [pc, #96]	; (8006df4 <TIM_OC3_SetConfig+0x10c>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d113      	bne.n	8006dbe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006da4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	695b      	ldr	r3, [r3, #20]
 8006daa:	011b      	lsls	r3, r3, #4
 8006dac:	693a      	ldr	r2, [r7, #16]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	011b      	lsls	r3, r3, #4
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	693a      	ldr	r2, [r7, #16]
 8006dc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	685a      	ldr	r2, [r3, #4]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	697a      	ldr	r2, [r7, #20]
 8006dd6:	621a      	str	r2, [r3, #32]
}
 8006dd8:	bf00      	nop
 8006dda:	371c      	adds	r7, #28
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr
 8006de4:	40012c00 	.word	0x40012c00
 8006de8:	40013400 	.word	0x40013400
 8006dec:	40014000 	.word	0x40014000
 8006df0:	40014400 	.word	0x40014400
 8006df4:	40014800 	.word	0x40014800

08006df8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b087      	sub	sp, #28
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a1b      	ldr	r3, [r3, #32]
 8006e06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a1b      	ldr	r3, [r3, #32]
 8006e12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	69db      	ldr	r3, [r3, #28]
 8006e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	021b      	lsls	r3, r3, #8
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	031b      	lsls	r3, r3, #12
 8006e4e:	693a      	ldr	r2, [r7, #16]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a18      	ldr	r2, [pc, #96]	; (8006eb8 <TIM_OC4_SetConfig+0xc0>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d00f      	beq.n	8006e7c <TIM_OC4_SetConfig+0x84>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a17      	ldr	r2, [pc, #92]	; (8006ebc <TIM_OC4_SetConfig+0xc4>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d00b      	beq.n	8006e7c <TIM_OC4_SetConfig+0x84>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a16      	ldr	r2, [pc, #88]	; (8006ec0 <TIM_OC4_SetConfig+0xc8>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d007      	beq.n	8006e7c <TIM_OC4_SetConfig+0x84>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a15      	ldr	r2, [pc, #84]	; (8006ec4 <TIM_OC4_SetConfig+0xcc>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d003      	beq.n	8006e7c <TIM_OC4_SetConfig+0x84>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a14      	ldr	r2, [pc, #80]	; (8006ec8 <TIM_OC4_SetConfig+0xd0>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d109      	bne.n	8006e90 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	695b      	ldr	r3, [r3, #20]
 8006e88:	019b      	lsls	r3, r3, #6
 8006e8a:	697a      	ldr	r2, [r7, #20]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	697a      	ldr	r2, [r7, #20]
 8006e94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	68fa      	ldr	r2, [r7, #12]
 8006e9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	685a      	ldr	r2, [r3, #4]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	693a      	ldr	r2, [r7, #16]
 8006ea8:	621a      	str	r2, [r3, #32]
}
 8006eaa:	bf00      	nop
 8006eac:	371c      	adds	r7, #28
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop
 8006eb8:	40012c00 	.word	0x40012c00
 8006ebc:	40013400 	.word	0x40013400
 8006ec0:	40014000 	.word	0x40014000
 8006ec4:	40014400 	.word	0x40014400
 8006ec8:	40014800 	.word	0x40014800

08006ecc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b087      	sub	sp, #28
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a1b      	ldr	r3, [r3, #32]
 8006eda:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006efe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006f10:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	041b      	lsls	r3, r3, #16
 8006f18:	693a      	ldr	r2, [r7, #16]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4a17      	ldr	r2, [pc, #92]	; (8006f80 <TIM_OC5_SetConfig+0xb4>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d00f      	beq.n	8006f46 <TIM_OC5_SetConfig+0x7a>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a16      	ldr	r2, [pc, #88]	; (8006f84 <TIM_OC5_SetConfig+0xb8>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d00b      	beq.n	8006f46 <TIM_OC5_SetConfig+0x7a>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4a15      	ldr	r2, [pc, #84]	; (8006f88 <TIM_OC5_SetConfig+0xbc>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d007      	beq.n	8006f46 <TIM_OC5_SetConfig+0x7a>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a14      	ldr	r2, [pc, #80]	; (8006f8c <TIM_OC5_SetConfig+0xc0>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d003      	beq.n	8006f46 <TIM_OC5_SetConfig+0x7a>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a13      	ldr	r2, [pc, #76]	; (8006f90 <TIM_OC5_SetConfig+0xc4>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d109      	bne.n	8006f5a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f4c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	695b      	ldr	r3, [r3, #20]
 8006f52:	021b      	lsls	r3, r3, #8
 8006f54:	697a      	ldr	r2, [r7, #20]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	697a      	ldr	r2, [r7, #20]
 8006f5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	685a      	ldr	r2, [r3, #4]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	693a      	ldr	r2, [r7, #16]
 8006f72:	621a      	str	r2, [r3, #32]
}
 8006f74:	bf00      	nop
 8006f76:	371c      	adds	r7, #28
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr
 8006f80:	40012c00 	.word	0x40012c00
 8006f84:	40013400 	.word	0x40013400
 8006f88:	40014000 	.word	0x40014000
 8006f8c:	40014400 	.word	0x40014400
 8006f90:	40014800 	.word	0x40014800

08006f94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b087      	sub	sp, #28
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a1b      	ldr	r3, [r3, #32]
 8006fae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	021b      	lsls	r3, r3, #8
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006fda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	051b      	lsls	r3, r3, #20
 8006fe2:	693a      	ldr	r2, [r7, #16]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a18      	ldr	r2, [pc, #96]	; (800704c <TIM_OC6_SetConfig+0xb8>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d00f      	beq.n	8007010 <TIM_OC6_SetConfig+0x7c>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a17      	ldr	r2, [pc, #92]	; (8007050 <TIM_OC6_SetConfig+0xbc>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d00b      	beq.n	8007010 <TIM_OC6_SetConfig+0x7c>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a16      	ldr	r2, [pc, #88]	; (8007054 <TIM_OC6_SetConfig+0xc0>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d007      	beq.n	8007010 <TIM_OC6_SetConfig+0x7c>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a15      	ldr	r2, [pc, #84]	; (8007058 <TIM_OC6_SetConfig+0xc4>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d003      	beq.n	8007010 <TIM_OC6_SetConfig+0x7c>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a14      	ldr	r2, [pc, #80]	; (800705c <TIM_OC6_SetConfig+0xc8>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d109      	bne.n	8007024 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007016:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	695b      	ldr	r3, [r3, #20]
 800701c:	029b      	lsls	r3, r3, #10
 800701e:	697a      	ldr	r2, [r7, #20]
 8007020:	4313      	orrs	r3, r2
 8007022:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	697a      	ldr	r2, [r7, #20]
 8007028:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	685a      	ldr	r2, [r3, #4]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	693a      	ldr	r2, [r7, #16]
 800703c:	621a      	str	r2, [r3, #32]
}
 800703e:	bf00      	nop
 8007040:	371c      	adds	r7, #28
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	40012c00 	.word	0x40012c00
 8007050:	40013400 	.word	0x40013400
 8007054:	40014000 	.word	0x40014000
 8007058:	40014400 	.word	0x40014400
 800705c:	40014800 	.word	0x40014800

08007060 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007060:	b480      	push	{r7}
 8007062:	b087      	sub	sp, #28
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6a1b      	ldr	r3, [r3, #32]
 8007070:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6a1b      	ldr	r3, [r3, #32]
 8007076:	f023 0201 	bic.w	r2, r3, #1
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800708a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	011b      	lsls	r3, r3, #4
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	4313      	orrs	r3, r2
 8007094:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	f023 030a 	bic.w	r3, r3, #10
 800709c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	693a      	ldr	r2, [r7, #16]
 80070aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	697a      	ldr	r2, [r7, #20]
 80070b0:	621a      	str	r2, [r3, #32]
}
 80070b2:	bf00      	nop
 80070b4:	371c      	adds	r7, #28
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr

080070be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070be:	b480      	push	{r7}
 80070c0:	b087      	sub	sp, #28
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	60f8      	str	r0, [r7, #12]
 80070c6:	60b9      	str	r1, [r7, #8]
 80070c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6a1b      	ldr	r3, [r3, #32]
 80070ce:	f023 0210 	bic.w	r2, r3, #16
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	699b      	ldr	r3, [r3, #24]
 80070da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6a1b      	ldr	r3, [r3, #32]
 80070e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	031b      	lsls	r3, r3, #12
 80070ee:	697a      	ldr	r2, [r7, #20]
 80070f0:	4313      	orrs	r3, r2
 80070f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80070fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	011b      	lsls	r3, r3, #4
 8007100:	693a      	ldr	r2, [r7, #16]
 8007102:	4313      	orrs	r3, r2
 8007104:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	697a      	ldr	r2, [r7, #20]
 800710a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	621a      	str	r2, [r3, #32]
}
 8007112:	bf00      	nop
 8007114:	371c      	adds	r7, #28
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr

0800711e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800711e:	b480      	push	{r7}
 8007120:	b085      	sub	sp, #20
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
 8007126:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007134:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	4313      	orrs	r3, r2
 800713c:	f043 0307 	orr.w	r3, r3, #7
 8007140:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	609a      	str	r2, [r3, #8]
}
 8007148:	bf00      	nop
 800714a:	3714      	adds	r7, #20
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007154:	b480      	push	{r7}
 8007156:	b087      	sub	sp, #28
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	607a      	str	r2, [r7, #4]
 8007160:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800716e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	021a      	lsls	r2, r3, #8
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	431a      	orrs	r2, r3
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	4313      	orrs	r3, r2
 800717c:	697a      	ldr	r2, [r7, #20]
 800717e:	4313      	orrs	r3, r2
 8007180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	697a      	ldr	r2, [r7, #20]
 8007186:	609a      	str	r2, [r3, #8]
}
 8007188:	bf00      	nop
 800718a:	371c      	adds	r7, #28
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007194:	b480      	push	{r7}
 8007196:	b087      	sub	sp, #28
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	f003 031f 	and.w	r3, r3, #31
 80071a6:	2201      	movs	r2, #1
 80071a8:	fa02 f303 	lsl.w	r3, r2, r3
 80071ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6a1a      	ldr	r2, [r3, #32]
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	43db      	mvns	r3, r3
 80071b6:	401a      	ands	r2, r3
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6a1a      	ldr	r2, [r3, #32]
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	f003 031f 	and.w	r3, r3, #31
 80071c6:	6879      	ldr	r1, [r7, #4]
 80071c8:	fa01 f303 	lsl.w	r3, r1, r3
 80071cc:	431a      	orrs	r2, r3
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	621a      	str	r2, [r3, #32]
}
 80071d2:	bf00      	nop
 80071d4:	371c      	adds	r7, #28
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr
	...

080071e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d101      	bne.n	80071f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071f4:	2302      	movs	r3, #2
 80071f6:	e063      	b.n	80072c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2202      	movs	r2, #2
 8007204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a2b      	ldr	r2, [pc, #172]	; (80072cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d004      	beq.n	800722c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a2a      	ldr	r2, [pc, #168]	; (80072d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d108      	bne.n	800723e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007232:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	4313      	orrs	r3, r2
 800723c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007244:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	4313      	orrs	r3, r2
 800724e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a1b      	ldr	r2, [pc, #108]	; (80072cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d018      	beq.n	8007294 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800726a:	d013      	beq.n	8007294 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a18      	ldr	r2, [pc, #96]	; (80072d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d00e      	beq.n	8007294 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a17      	ldr	r2, [pc, #92]	; (80072d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d009      	beq.n	8007294 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a12      	ldr	r2, [pc, #72]	; (80072d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d004      	beq.n	8007294 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a13      	ldr	r2, [pc, #76]	; (80072dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d10c      	bne.n	80072ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800729a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	68ba      	ldr	r2, [r7, #8]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68ba      	ldr	r2, [r7, #8]
 80072ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2201      	movs	r2, #1
 80072b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3714      	adds	r7, #20
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr
 80072cc:	40012c00 	.word	0x40012c00
 80072d0:	40013400 	.word	0x40013400
 80072d4:	40000400 	.word	0x40000400
 80072d8:	40000800 	.word	0x40000800
 80072dc:	40014000 	.word	0x40014000

080072e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80072ea:	2300      	movs	r3, #0
 80072ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d101      	bne.n	80072fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80072f8:	2302      	movs	r3, #2
 80072fa:	e065      	b.n	80073c8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	4313      	orrs	r3, r2
 8007310:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	4313      	orrs	r3, r2
 800731e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	4313      	orrs	r3, r2
 800732c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4313      	orrs	r3, r2
 800733a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	691b      	ldr	r3, [r3, #16]
 8007346:	4313      	orrs	r3, r2
 8007348:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	695b      	ldr	r3, [r3, #20]
 8007354:	4313      	orrs	r3, r2
 8007356:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007362:	4313      	orrs	r3, r2
 8007364:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	699b      	ldr	r3, [r3, #24]
 8007370:	041b      	lsls	r3, r3, #16
 8007372:	4313      	orrs	r3, r2
 8007374:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a16      	ldr	r2, [pc, #88]	; (80073d4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d004      	beq.n	800738a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a14      	ldr	r2, [pc, #80]	; (80073d8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d115      	bne.n	80073b6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007394:	051b      	lsls	r3, r3, #20
 8007396:	4313      	orrs	r3, r2
 8007398:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	69db      	ldr	r3, [r3, #28]
 80073a4:	4313      	orrs	r3, r2
 80073a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	6a1b      	ldr	r3, [r3, #32]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	68fa      	ldr	r2, [r7, #12]
 80073bc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073c6:	2300      	movs	r3, #0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3714      	adds	r7, #20
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr
 80073d4:	40012c00 	.word	0x40012c00
 80073d8:	40013400 	.word	0x40013400

080073dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80073e4:	bf00      	nop
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073f8:	bf00      	nop
 80073fa:	370c      	adds	r7, #12
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800740c:	bf00      	nop
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d101      	bne.n	800742a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e040      	b.n	80074ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800742e:	2b00      	cmp	r3, #0
 8007430:	d106      	bne.n	8007440 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f7f9 fc2c 	bl	8000c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2224      	movs	r2, #36	; 0x24
 8007444:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f022 0201 	bic.w	r2, r2, #1
 8007454:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 fc16 	bl	8007c88 <UART_SetConfig>
 800745c:	4603      	mov	r3, r0
 800745e:	2b01      	cmp	r3, #1
 8007460:	d101      	bne.n	8007466 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e022      	b.n	80074ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746a:	2b00      	cmp	r3, #0
 800746c:	d002      	beq.n	8007474 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 fdde 	bl	8008030 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	685a      	ldr	r2, [r3, #4]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007482:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	689a      	ldr	r2, [r3, #8]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007492:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f042 0201 	orr.w	r2, r2, #1
 80074a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 fe65 	bl	8008174 <UART_CheckIdleState>
 80074aa:	4603      	mov	r3, r0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3708      	adds	r7, #8
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b08a      	sub	sp, #40	; 0x28
 80074b8:	af02      	add	r7, sp, #8
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	603b      	str	r3, [r7, #0]
 80074c0:	4613      	mov	r3, r2
 80074c2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074c8:	2b20      	cmp	r3, #32
 80074ca:	f040 8082 	bne.w	80075d2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d002      	beq.n	80074da <HAL_UART_Transmit+0x26>
 80074d4:	88fb      	ldrh	r3, [r7, #6]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d101      	bne.n	80074de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e07a      	b.n	80075d4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d101      	bne.n	80074ec <HAL_UART_Transmit+0x38>
 80074e8:	2302      	movs	r3, #2
 80074ea:	e073      	b.n	80075d4 <HAL_UART_Transmit+0x120>
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2200      	movs	r2, #0
 80074f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2221      	movs	r2, #33	; 0x21
 8007500:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007502:	f7fc fb3b 	bl	8003b7c <HAL_GetTick>
 8007506:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	88fa      	ldrh	r2, [r7, #6]
 800750c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	88fa      	ldrh	r2, [r7, #6]
 8007514:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007520:	d108      	bne.n	8007534 <HAL_UART_Transmit+0x80>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	691b      	ldr	r3, [r3, #16]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d104      	bne.n	8007534 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800752a:	2300      	movs	r3, #0
 800752c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	61bb      	str	r3, [r7, #24]
 8007532:	e003      	b.n	800753c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007538:	2300      	movs	r3, #0
 800753a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2200      	movs	r2, #0
 8007540:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007544:	e02d      	b.n	80075a2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	9300      	str	r3, [sp, #0]
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	2200      	movs	r2, #0
 800754e:	2180      	movs	r1, #128	; 0x80
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f000 fe58 	bl	8008206 <UART_WaitOnFlagUntilTimeout>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d001      	beq.n	8007560 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800755c:	2303      	movs	r3, #3
 800755e:	e039      	b.n	80075d4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d10b      	bne.n	800757e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	881a      	ldrh	r2, [r3, #0]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007572:	b292      	uxth	r2, r2
 8007574:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	3302      	adds	r3, #2
 800757a:	61bb      	str	r3, [r7, #24]
 800757c:	e008      	b.n	8007590 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	781a      	ldrb	r2, [r3, #0]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	b292      	uxth	r2, r2
 8007588:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	3301      	adds	r3, #1
 800758e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007596:	b29b      	uxth	r3, r3
 8007598:	3b01      	subs	r3, #1
 800759a:	b29a      	uxth	r2, r3
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d1cb      	bne.n	8007546 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	9300      	str	r3, [sp, #0]
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	2200      	movs	r2, #0
 80075b6:	2140      	movs	r1, #64	; 0x40
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f000 fe24 	bl	8008206 <UART_WaitOnFlagUntilTimeout>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d001      	beq.n	80075c8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80075c4:	2303      	movs	r3, #3
 80075c6:	e005      	b.n	80075d4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2220      	movs	r2, #32
 80075cc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80075ce:	2300      	movs	r3, #0
 80075d0:	e000      	b.n	80075d4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80075d2:	2302      	movs	r3, #2
  }
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3720      	adds	r7, #32
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b08a      	sub	sp, #40	; 0x28
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	4613      	mov	r3, r2
 80075e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075ee:	2b20      	cmp	r3, #32
 80075f0:	d13d      	bne.n	800766e <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d002      	beq.n	80075fe <HAL_UART_Receive_IT+0x22>
 80075f8:	88fb      	ldrh	r3, [r7, #6]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d101      	bne.n	8007602 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	e036      	b.n	8007670 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007608:	2b01      	cmp	r3, #1
 800760a:	d101      	bne.n	8007610 <HAL_UART_Receive_IT+0x34>
 800760c:	2302      	movs	r3, #2
 800760e:	e02f      	b.n	8007670 <HAL_UART_Receive_IT+0x94>
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2200      	movs	r2, #0
 800761c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007628:	2b00      	cmp	r3, #0
 800762a:	d018      	beq.n	800765e <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	e853 3f00 	ldrex	r3, [r3]
 8007638:	613b      	str	r3, [r7, #16]
   return(result);
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007640:	627b      	str	r3, [r7, #36]	; 0x24
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	461a      	mov	r2, r3
 8007648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764a:	623b      	str	r3, [r7, #32]
 800764c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764e:	69f9      	ldr	r1, [r7, #28]
 8007650:	6a3a      	ldr	r2, [r7, #32]
 8007652:	e841 2300 	strex	r3, r2, [r1]
 8007656:	61bb      	str	r3, [r7, #24]
   return(result);
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1e6      	bne.n	800762c <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800765e:	88fb      	ldrh	r3, [r7, #6]
 8007660:	461a      	mov	r2, r3
 8007662:	68b9      	ldr	r1, [r7, #8]
 8007664:	68f8      	ldr	r0, [r7, #12]
 8007666:	f000 fe93 	bl	8008390 <UART_Start_Receive_IT>
 800766a:	4603      	mov	r3, r0
 800766c:	e000      	b.n	8007670 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800766e:	2302      	movs	r3, #2
  }
}
 8007670:	4618      	mov	r0, r3
 8007672:	3728      	adds	r7, #40	; 0x28
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b0ba      	sub	sp, #232	; 0xe8
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	69db      	ldr	r3, [r3, #28]
 8007686:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800769e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80076a2:	f640 030f 	movw	r3, #2063	; 0x80f
 80076a6:	4013      	ands	r3, r2
 80076a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80076ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d115      	bne.n	80076e0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80076b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076b8:	f003 0320 	and.w	r3, r3, #32
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00f      	beq.n	80076e0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80076c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076c4:	f003 0320 	and.w	r3, r3, #32
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d009      	beq.n	80076e0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f000 82a3 	beq.w	8007c1c <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	4798      	blx	r3
      }
      return;
 80076de:	e29d      	b.n	8007c1c <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80076e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	f000 8117 	beq.w	8007918 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80076ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076ee:	f003 0301 	and.w	r3, r3, #1
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d106      	bne.n	8007704 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80076f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80076fa:	4b85      	ldr	r3, [pc, #532]	; (8007910 <HAL_UART_IRQHandler+0x298>)
 80076fc:	4013      	ands	r3, r2
 80076fe:	2b00      	cmp	r3, #0
 8007700:	f000 810a 	beq.w	8007918 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007708:	f003 0301 	and.w	r3, r3, #1
 800770c:	2b00      	cmp	r3, #0
 800770e:	d011      	beq.n	8007734 <HAL_UART_IRQHandler+0xbc>
 8007710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007718:	2b00      	cmp	r3, #0
 800771a:	d00b      	beq.n	8007734 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2201      	movs	r2, #1
 8007722:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800772a:	f043 0201 	orr.w	r2, r3, #1
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007738:	f003 0302 	and.w	r3, r3, #2
 800773c:	2b00      	cmp	r3, #0
 800773e:	d011      	beq.n	8007764 <HAL_UART_IRQHandler+0xec>
 8007740:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007744:	f003 0301 	and.w	r3, r3, #1
 8007748:	2b00      	cmp	r3, #0
 800774a:	d00b      	beq.n	8007764 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2202      	movs	r2, #2
 8007752:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800775a:	f043 0204 	orr.w	r2, r3, #4
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007768:	f003 0304 	and.w	r3, r3, #4
 800776c:	2b00      	cmp	r3, #0
 800776e:	d011      	beq.n	8007794 <HAL_UART_IRQHandler+0x11c>
 8007770:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007774:	f003 0301 	and.w	r3, r3, #1
 8007778:	2b00      	cmp	r3, #0
 800777a:	d00b      	beq.n	8007794 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2204      	movs	r2, #4
 8007782:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800778a:	f043 0202 	orr.w	r2, r3, #2
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007798:	f003 0308 	and.w	r3, r3, #8
 800779c:	2b00      	cmp	r3, #0
 800779e:	d017      	beq.n	80077d0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80077a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077a4:	f003 0320 	and.w	r3, r3, #32
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d105      	bne.n	80077b8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80077ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077b0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00b      	beq.n	80077d0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	2208      	movs	r2, #8
 80077be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077c6:	f043 0208 	orr.w	r2, r3, #8
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80077d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d012      	beq.n	8007802 <HAL_UART_IRQHandler+0x18a>
 80077dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00c      	beq.n	8007802 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077f8:	f043 0220 	orr.w	r2, r3, #32
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007808:	2b00      	cmp	r3, #0
 800780a:	f000 8209 	beq.w	8007c20 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800780e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007812:	f003 0320 	and.w	r3, r3, #32
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00d      	beq.n	8007836 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800781a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800781e:	f003 0320 	and.w	r3, r3, #32
 8007822:	2b00      	cmp	r3, #0
 8007824:	d007      	beq.n	8007836 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800782a:	2b00      	cmp	r3, #0
 800782c:	d003      	beq.n	8007836 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800783c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800784a:	2b40      	cmp	r3, #64	; 0x40
 800784c:	d005      	beq.n	800785a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800784e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007852:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007856:	2b00      	cmp	r3, #0
 8007858:	d04f      	beq.n	80078fa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 fe30 	bl	80084c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800786a:	2b40      	cmp	r3, #64	; 0x40
 800786c:	d141      	bne.n	80078f2 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	3308      	adds	r3, #8
 8007874:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007878:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800787c:	e853 3f00 	ldrex	r3, [r3]
 8007880:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007884:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007888:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800788c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	3308      	adds	r3, #8
 8007896:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800789a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800789e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80078a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80078aa:	e841 2300 	strex	r3, r2, [r1]
 80078ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80078b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1d9      	bne.n	800786e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d013      	beq.n	80078ea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078c6:	4a13      	ldr	r2, [pc, #76]	; (8007914 <HAL_UART_IRQHandler+0x29c>)
 80078c8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7fc face 	bl	8003e70 <HAL_DMA_Abort_IT>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d017      	beq.n	800790a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80078e4:	4610      	mov	r0, r2
 80078e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078e8:	e00f      	b.n	800790a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 f9b6 	bl	8007c5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078f0:	e00b      	b.n	800790a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 f9b2 	bl	8007c5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078f8:	e007      	b.n	800790a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 f9ae 	bl	8007c5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007908:	e18a      	b.n	8007c20 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800790a:	bf00      	nop
    return;
 800790c:	e188      	b.n	8007c20 <HAL_UART_IRQHandler+0x5a8>
 800790e:	bf00      	nop
 8007910:	04000120 	.word	0x04000120
 8007914:	08008587 	.word	0x08008587

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800791c:	2b01      	cmp	r3, #1
 800791e:	f040 8143 	bne.w	8007ba8 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007926:	f003 0310 	and.w	r3, r3, #16
 800792a:	2b00      	cmp	r3, #0
 800792c:	f000 813c 	beq.w	8007ba8 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007934:	f003 0310 	and.w	r3, r3, #16
 8007938:	2b00      	cmp	r3, #0
 800793a:	f000 8135 	beq.w	8007ba8 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	2210      	movs	r2, #16
 8007944:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007950:	2b40      	cmp	r3, #64	; 0x40
 8007952:	f040 80b1 	bne.w	8007ab8 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007962:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007966:	2b00      	cmp	r3, #0
 8007968:	f000 815c 	beq.w	8007c24 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007972:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007976:	429a      	cmp	r2, r3
 8007978:	f080 8154 	bcs.w	8007c24 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007982:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800798a:	699b      	ldr	r3, [r3, #24]
 800798c:	2b20      	cmp	r3, #32
 800798e:	f000 8085 	beq.w	8007a9c <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800799e:	e853 3f00 	ldrex	r3, [r3]
 80079a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80079a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80079aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	461a      	mov	r2, r3
 80079b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80079bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80079c0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80079c8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80079cc:	e841 2300 	strex	r3, r2, [r1]
 80079d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80079d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d1da      	bne.n	8007992 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	3308      	adds	r3, #8
 80079e2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079e6:	e853 3f00 	ldrex	r3, [r3]
 80079ea:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80079ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079ee:	f023 0301 	bic.w	r3, r3, #1
 80079f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	3308      	adds	r3, #8
 80079fc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007a00:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007a04:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a06:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007a08:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a0c:	e841 2300 	strex	r3, r2, [r1]
 8007a10:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007a12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1e1      	bne.n	80079dc <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	3308      	adds	r3, #8
 8007a1e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a22:	e853 3f00 	ldrex	r3, [r3]
 8007a26:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007a28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	3308      	adds	r3, #8
 8007a38:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007a3c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007a3e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a40:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007a42:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007a44:	e841 2300 	strex	r3, r2, [r1]
 8007a48:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007a4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d1e3      	bne.n	8007a18 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2220      	movs	r2, #32
 8007a54:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a64:	e853 3f00 	ldrex	r3, [r3]
 8007a68:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a6c:	f023 0310 	bic.w	r3, r3, #16
 8007a70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	461a      	mov	r2, r3
 8007a7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a80:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a82:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a86:	e841 2300 	strex	r3, r2, [r1]
 8007a8a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007a8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d1e4      	bne.n	8007a5c <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7fc f9b1 	bl	8003dfe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	1ad3      	subs	r3, r2, r3
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	4619      	mov	r1, r3
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 f8dd 	bl	8007c70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ab6:	e0b5      	b.n	8007c24 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	1ad3      	subs	r3, r2, r3
 8007ac8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	f000 80a7 	beq.w	8007c28 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8007ada:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f000 80a2 	beq.w	8007c28 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aec:	e853 3f00 	ldrex	r3, [r3]
 8007af0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007af4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007af8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	461a      	mov	r2, r3
 8007b02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b06:	647b      	str	r3, [r7, #68]	; 0x44
 8007b08:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b0e:	e841 2300 	strex	r3, r2, [r1]
 8007b12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d1e4      	bne.n	8007ae4 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	3308      	adds	r3, #8
 8007b20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b24:	e853 3f00 	ldrex	r3, [r3]
 8007b28:	623b      	str	r3, [r7, #32]
   return(result);
 8007b2a:	6a3b      	ldr	r3, [r7, #32]
 8007b2c:	f023 0301 	bic.w	r3, r3, #1
 8007b30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	3308      	adds	r3, #8
 8007b3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007b3e:	633a      	str	r2, [r7, #48]	; 0x30
 8007b40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b46:	e841 2300 	strex	r3, r2, [r1]
 8007b4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1e3      	bne.n	8007b1a <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2220      	movs	r2, #32
 8007b56:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	e853 3f00 	ldrex	r3, [r3]
 8007b70:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f023 0310 	bic.w	r3, r3, #16
 8007b78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	461a      	mov	r2, r3
 8007b82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007b86:	61fb      	str	r3, [r7, #28]
 8007b88:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8a:	69b9      	ldr	r1, [r7, #24]
 8007b8c:	69fa      	ldr	r2, [r7, #28]
 8007b8e:	e841 2300 	strex	r3, r2, [r1]
 8007b92:	617b      	str	r3, [r7, #20]
   return(result);
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1e4      	bne.n	8007b64 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 f865 	bl	8007c70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ba6:	e03f      	b.n	8007c28 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00e      	beq.n	8007bd2 <HAL_UART_IRQHandler+0x55a>
 8007bb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d008      	beq.n	8007bd2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007bc8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 fe77 	bl	80088be <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007bd0:	e02d      	b.n	8007c2e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00e      	beq.n	8007bfc <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007bde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d008      	beq.n	8007bfc <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d01c      	beq.n	8007c2c <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	4798      	blx	r3
    }
    return;
 8007bfa:	e017      	b.n	8007c2c <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d012      	beq.n	8007c2e <HAL_UART_IRQHandler+0x5b6>
 8007c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d00c      	beq.n	8007c2e <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 fccc 	bl	80085b2 <UART_EndTransmit_IT>
    return;
 8007c1a:	e008      	b.n	8007c2e <HAL_UART_IRQHandler+0x5b6>
      return;
 8007c1c:	bf00      	nop
 8007c1e:	e006      	b.n	8007c2e <HAL_UART_IRQHandler+0x5b6>
    return;
 8007c20:	bf00      	nop
 8007c22:	e004      	b.n	8007c2e <HAL_UART_IRQHandler+0x5b6>
      return;
 8007c24:	bf00      	nop
 8007c26:	e002      	b.n	8007c2e <HAL_UART_IRQHandler+0x5b6>
      return;
 8007c28:	bf00      	nop
 8007c2a:	e000      	b.n	8007c2e <HAL_UART_IRQHandler+0x5b6>
    return;
 8007c2c:	bf00      	nop
  }

}
 8007c2e:	37e8      	adds	r7, #232	; 0xe8
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007c3c:	bf00      	nop
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007c50:	bf00      	nop
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007c64:	bf00      	nop
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	460b      	mov	r3, r1
 8007c7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c7c:	bf00      	nop
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b088      	sub	sp, #32
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c90:	2300      	movs	r3, #0
 8007c92:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	689a      	ldr	r2, [r3, #8]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	431a      	orrs	r2, r3
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	695b      	ldr	r3, [r3, #20]
 8007ca2:	431a      	orrs	r2, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	69db      	ldr	r3, [r3, #28]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007cb6:	f023 030c 	bic.w	r3, r3, #12
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	6812      	ldr	r2, [r2, #0]
 8007cbe:	6979      	ldr	r1, [r7, #20]
 8007cc0:	430b      	orrs	r3, r1
 8007cc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	68da      	ldr	r2, [r3, #12]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	430a      	orrs	r2, r1
 8007cd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	699b      	ldr	r3, [r3, #24]
 8007cde:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6a1b      	ldr	r3, [r3, #32]
 8007ce4:	697a      	ldr	r2, [r7, #20]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	697a      	ldr	r2, [r7, #20]
 8007cfa:	430a      	orrs	r2, r1
 8007cfc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4aae      	ldr	r2, [pc, #696]	; (8007fbc <UART_SetConfig+0x334>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d120      	bne.n	8007d4a <UART_SetConfig+0xc2>
 8007d08:	4bad      	ldr	r3, [pc, #692]	; (8007fc0 <UART_SetConfig+0x338>)
 8007d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d0c:	f003 0303 	and.w	r3, r3, #3
 8007d10:	2b03      	cmp	r3, #3
 8007d12:	d817      	bhi.n	8007d44 <UART_SetConfig+0xbc>
 8007d14:	a201      	add	r2, pc, #4	; (adr r2, 8007d1c <UART_SetConfig+0x94>)
 8007d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1a:	bf00      	nop
 8007d1c:	08007d2d 	.word	0x08007d2d
 8007d20:	08007d39 	.word	0x08007d39
 8007d24:	08007d3f 	.word	0x08007d3f
 8007d28:	08007d33 	.word	0x08007d33
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	77fb      	strb	r3, [r7, #31]
 8007d30:	e0b5      	b.n	8007e9e <UART_SetConfig+0x216>
 8007d32:	2302      	movs	r3, #2
 8007d34:	77fb      	strb	r3, [r7, #31]
 8007d36:	e0b2      	b.n	8007e9e <UART_SetConfig+0x216>
 8007d38:	2304      	movs	r3, #4
 8007d3a:	77fb      	strb	r3, [r7, #31]
 8007d3c:	e0af      	b.n	8007e9e <UART_SetConfig+0x216>
 8007d3e:	2308      	movs	r3, #8
 8007d40:	77fb      	strb	r3, [r7, #31]
 8007d42:	e0ac      	b.n	8007e9e <UART_SetConfig+0x216>
 8007d44:	2310      	movs	r3, #16
 8007d46:	77fb      	strb	r3, [r7, #31]
 8007d48:	e0a9      	b.n	8007e9e <UART_SetConfig+0x216>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a9d      	ldr	r2, [pc, #628]	; (8007fc4 <UART_SetConfig+0x33c>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d124      	bne.n	8007d9e <UART_SetConfig+0x116>
 8007d54:	4b9a      	ldr	r3, [pc, #616]	; (8007fc0 <UART_SetConfig+0x338>)
 8007d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007d5c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007d60:	d011      	beq.n	8007d86 <UART_SetConfig+0xfe>
 8007d62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007d66:	d817      	bhi.n	8007d98 <UART_SetConfig+0x110>
 8007d68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d6c:	d011      	beq.n	8007d92 <UART_SetConfig+0x10a>
 8007d6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d72:	d811      	bhi.n	8007d98 <UART_SetConfig+0x110>
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d003      	beq.n	8007d80 <UART_SetConfig+0xf8>
 8007d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d7c:	d006      	beq.n	8007d8c <UART_SetConfig+0x104>
 8007d7e:	e00b      	b.n	8007d98 <UART_SetConfig+0x110>
 8007d80:	2300      	movs	r3, #0
 8007d82:	77fb      	strb	r3, [r7, #31]
 8007d84:	e08b      	b.n	8007e9e <UART_SetConfig+0x216>
 8007d86:	2302      	movs	r3, #2
 8007d88:	77fb      	strb	r3, [r7, #31]
 8007d8a:	e088      	b.n	8007e9e <UART_SetConfig+0x216>
 8007d8c:	2304      	movs	r3, #4
 8007d8e:	77fb      	strb	r3, [r7, #31]
 8007d90:	e085      	b.n	8007e9e <UART_SetConfig+0x216>
 8007d92:	2308      	movs	r3, #8
 8007d94:	77fb      	strb	r3, [r7, #31]
 8007d96:	e082      	b.n	8007e9e <UART_SetConfig+0x216>
 8007d98:	2310      	movs	r3, #16
 8007d9a:	77fb      	strb	r3, [r7, #31]
 8007d9c:	e07f      	b.n	8007e9e <UART_SetConfig+0x216>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a89      	ldr	r2, [pc, #548]	; (8007fc8 <UART_SetConfig+0x340>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d124      	bne.n	8007df2 <UART_SetConfig+0x16a>
 8007da8:	4b85      	ldr	r3, [pc, #532]	; (8007fc0 <UART_SetConfig+0x338>)
 8007daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dac:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007db0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007db4:	d011      	beq.n	8007dda <UART_SetConfig+0x152>
 8007db6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007dba:	d817      	bhi.n	8007dec <UART_SetConfig+0x164>
 8007dbc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007dc0:	d011      	beq.n	8007de6 <UART_SetConfig+0x15e>
 8007dc2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007dc6:	d811      	bhi.n	8007dec <UART_SetConfig+0x164>
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d003      	beq.n	8007dd4 <UART_SetConfig+0x14c>
 8007dcc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007dd0:	d006      	beq.n	8007de0 <UART_SetConfig+0x158>
 8007dd2:	e00b      	b.n	8007dec <UART_SetConfig+0x164>
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	77fb      	strb	r3, [r7, #31]
 8007dd8:	e061      	b.n	8007e9e <UART_SetConfig+0x216>
 8007dda:	2302      	movs	r3, #2
 8007ddc:	77fb      	strb	r3, [r7, #31]
 8007dde:	e05e      	b.n	8007e9e <UART_SetConfig+0x216>
 8007de0:	2304      	movs	r3, #4
 8007de2:	77fb      	strb	r3, [r7, #31]
 8007de4:	e05b      	b.n	8007e9e <UART_SetConfig+0x216>
 8007de6:	2308      	movs	r3, #8
 8007de8:	77fb      	strb	r3, [r7, #31]
 8007dea:	e058      	b.n	8007e9e <UART_SetConfig+0x216>
 8007dec:	2310      	movs	r3, #16
 8007dee:	77fb      	strb	r3, [r7, #31]
 8007df0:	e055      	b.n	8007e9e <UART_SetConfig+0x216>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a75      	ldr	r2, [pc, #468]	; (8007fcc <UART_SetConfig+0x344>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d124      	bne.n	8007e46 <UART_SetConfig+0x1be>
 8007dfc:	4b70      	ldr	r3, [pc, #448]	; (8007fc0 <UART_SetConfig+0x338>)
 8007dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e00:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007e04:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007e08:	d011      	beq.n	8007e2e <UART_SetConfig+0x1a6>
 8007e0a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007e0e:	d817      	bhi.n	8007e40 <UART_SetConfig+0x1b8>
 8007e10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e14:	d011      	beq.n	8007e3a <UART_SetConfig+0x1b2>
 8007e16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e1a:	d811      	bhi.n	8007e40 <UART_SetConfig+0x1b8>
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d003      	beq.n	8007e28 <UART_SetConfig+0x1a0>
 8007e20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e24:	d006      	beq.n	8007e34 <UART_SetConfig+0x1ac>
 8007e26:	e00b      	b.n	8007e40 <UART_SetConfig+0x1b8>
 8007e28:	2300      	movs	r3, #0
 8007e2a:	77fb      	strb	r3, [r7, #31]
 8007e2c:	e037      	b.n	8007e9e <UART_SetConfig+0x216>
 8007e2e:	2302      	movs	r3, #2
 8007e30:	77fb      	strb	r3, [r7, #31]
 8007e32:	e034      	b.n	8007e9e <UART_SetConfig+0x216>
 8007e34:	2304      	movs	r3, #4
 8007e36:	77fb      	strb	r3, [r7, #31]
 8007e38:	e031      	b.n	8007e9e <UART_SetConfig+0x216>
 8007e3a:	2308      	movs	r3, #8
 8007e3c:	77fb      	strb	r3, [r7, #31]
 8007e3e:	e02e      	b.n	8007e9e <UART_SetConfig+0x216>
 8007e40:	2310      	movs	r3, #16
 8007e42:	77fb      	strb	r3, [r7, #31]
 8007e44:	e02b      	b.n	8007e9e <UART_SetConfig+0x216>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a61      	ldr	r2, [pc, #388]	; (8007fd0 <UART_SetConfig+0x348>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d124      	bne.n	8007e9a <UART_SetConfig+0x212>
 8007e50:	4b5b      	ldr	r3, [pc, #364]	; (8007fc0 <UART_SetConfig+0x338>)
 8007e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e54:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007e58:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007e5c:	d011      	beq.n	8007e82 <UART_SetConfig+0x1fa>
 8007e5e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007e62:	d817      	bhi.n	8007e94 <UART_SetConfig+0x20c>
 8007e64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e68:	d011      	beq.n	8007e8e <UART_SetConfig+0x206>
 8007e6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e6e:	d811      	bhi.n	8007e94 <UART_SetConfig+0x20c>
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d003      	beq.n	8007e7c <UART_SetConfig+0x1f4>
 8007e74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e78:	d006      	beq.n	8007e88 <UART_SetConfig+0x200>
 8007e7a:	e00b      	b.n	8007e94 <UART_SetConfig+0x20c>
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	77fb      	strb	r3, [r7, #31]
 8007e80:	e00d      	b.n	8007e9e <UART_SetConfig+0x216>
 8007e82:	2302      	movs	r3, #2
 8007e84:	77fb      	strb	r3, [r7, #31]
 8007e86:	e00a      	b.n	8007e9e <UART_SetConfig+0x216>
 8007e88:	2304      	movs	r3, #4
 8007e8a:	77fb      	strb	r3, [r7, #31]
 8007e8c:	e007      	b.n	8007e9e <UART_SetConfig+0x216>
 8007e8e:	2308      	movs	r3, #8
 8007e90:	77fb      	strb	r3, [r7, #31]
 8007e92:	e004      	b.n	8007e9e <UART_SetConfig+0x216>
 8007e94:	2310      	movs	r3, #16
 8007e96:	77fb      	strb	r3, [r7, #31]
 8007e98:	e001      	b.n	8007e9e <UART_SetConfig+0x216>
 8007e9a:	2310      	movs	r3, #16
 8007e9c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	69db      	ldr	r3, [r3, #28]
 8007ea2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ea6:	d15c      	bne.n	8007f62 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8007ea8:	7ffb      	ldrb	r3, [r7, #31]
 8007eaa:	2b08      	cmp	r3, #8
 8007eac:	d827      	bhi.n	8007efe <UART_SetConfig+0x276>
 8007eae:	a201      	add	r2, pc, #4	; (adr r2, 8007eb4 <UART_SetConfig+0x22c>)
 8007eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb4:	08007ed9 	.word	0x08007ed9
 8007eb8:	08007ee1 	.word	0x08007ee1
 8007ebc:	08007ee9 	.word	0x08007ee9
 8007ec0:	08007eff 	.word	0x08007eff
 8007ec4:	08007eef 	.word	0x08007eef
 8007ec8:	08007eff 	.word	0x08007eff
 8007ecc:	08007eff 	.word	0x08007eff
 8007ed0:	08007eff 	.word	0x08007eff
 8007ed4:	08007ef7 	.word	0x08007ef7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ed8:	f7fd fcd4 	bl	8005884 <HAL_RCC_GetPCLK1Freq>
 8007edc:	61b8      	str	r0, [r7, #24]
        break;
 8007ede:	e013      	b.n	8007f08 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ee0:	f7fd fcf2 	bl	80058c8 <HAL_RCC_GetPCLK2Freq>
 8007ee4:	61b8      	str	r0, [r7, #24]
        break;
 8007ee6:	e00f      	b.n	8007f08 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ee8:	4b3a      	ldr	r3, [pc, #232]	; (8007fd4 <UART_SetConfig+0x34c>)
 8007eea:	61bb      	str	r3, [r7, #24]
        break;
 8007eec:	e00c      	b.n	8007f08 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007eee:	f7fd fc53 	bl	8005798 <HAL_RCC_GetSysClockFreq>
 8007ef2:	61b8      	str	r0, [r7, #24]
        break;
 8007ef4:	e008      	b.n	8007f08 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ef6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007efa:	61bb      	str	r3, [r7, #24]
        break;
 8007efc:	e004      	b.n	8007f08 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8007efe:	2300      	movs	r3, #0
 8007f00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	77bb      	strb	r3, [r7, #30]
        break;
 8007f06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f08:	69bb      	ldr	r3, [r7, #24]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	f000 8085 	beq.w	800801a <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	005a      	lsls	r2, r3, #1
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	085b      	lsrs	r3, r3, #1
 8007f1a:	441a      	add	r2, r3
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	2b0f      	cmp	r3, #15
 8007f2c:	d916      	bls.n	8007f5c <UART_SetConfig+0x2d4>
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f34:	d212      	bcs.n	8007f5c <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	f023 030f 	bic.w	r3, r3, #15
 8007f3e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	085b      	lsrs	r3, r3, #1
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	f003 0307 	and.w	r3, r3, #7
 8007f4a:	b29a      	uxth	r2, r3
 8007f4c:	89fb      	ldrh	r3, [r7, #14]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	89fa      	ldrh	r2, [r7, #14]
 8007f58:	60da      	str	r2, [r3, #12]
 8007f5a:	e05e      	b.n	800801a <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	77bb      	strb	r3, [r7, #30]
 8007f60:	e05b      	b.n	800801a <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f62:	7ffb      	ldrb	r3, [r7, #31]
 8007f64:	2b08      	cmp	r3, #8
 8007f66:	d837      	bhi.n	8007fd8 <UART_SetConfig+0x350>
 8007f68:	a201      	add	r2, pc, #4	; (adr r2, 8007f70 <UART_SetConfig+0x2e8>)
 8007f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f6e:	bf00      	nop
 8007f70:	08007f95 	.word	0x08007f95
 8007f74:	08007f9d 	.word	0x08007f9d
 8007f78:	08007fa5 	.word	0x08007fa5
 8007f7c:	08007fd9 	.word	0x08007fd9
 8007f80:	08007fab 	.word	0x08007fab
 8007f84:	08007fd9 	.word	0x08007fd9
 8007f88:	08007fd9 	.word	0x08007fd9
 8007f8c:	08007fd9 	.word	0x08007fd9
 8007f90:	08007fb3 	.word	0x08007fb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f94:	f7fd fc76 	bl	8005884 <HAL_RCC_GetPCLK1Freq>
 8007f98:	61b8      	str	r0, [r7, #24]
        break;
 8007f9a:	e022      	b.n	8007fe2 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f9c:	f7fd fc94 	bl	80058c8 <HAL_RCC_GetPCLK2Freq>
 8007fa0:	61b8      	str	r0, [r7, #24]
        break;
 8007fa2:	e01e      	b.n	8007fe2 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fa4:	4b0b      	ldr	r3, [pc, #44]	; (8007fd4 <UART_SetConfig+0x34c>)
 8007fa6:	61bb      	str	r3, [r7, #24]
        break;
 8007fa8:	e01b      	b.n	8007fe2 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007faa:	f7fd fbf5 	bl	8005798 <HAL_RCC_GetSysClockFreq>
 8007fae:	61b8      	str	r0, [r7, #24]
        break;
 8007fb0:	e017      	b.n	8007fe2 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fb6:	61bb      	str	r3, [r7, #24]
        break;
 8007fb8:	e013      	b.n	8007fe2 <UART_SetConfig+0x35a>
 8007fba:	bf00      	nop
 8007fbc:	40013800 	.word	0x40013800
 8007fc0:	40021000 	.word	0x40021000
 8007fc4:	40004400 	.word	0x40004400
 8007fc8:	40004800 	.word	0x40004800
 8007fcc:	40004c00 	.word	0x40004c00
 8007fd0:	40005000 	.word	0x40005000
 8007fd4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	77bb      	strb	r3, [r7, #30]
        break;
 8007fe0:	bf00      	nop
    }

    if (pclk != 0U)
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d018      	beq.n	800801a <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	085a      	lsrs	r2, r3, #1
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	441a      	add	r2, r3
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	2b0f      	cmp	r3, #15
 8008002:	d908      	bls.n	8008016 <UART_SetConfig+0x38e>
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800800a:	d204      	bcs.n	8008016 <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	693a      	ldr	r2, [r7, #16]
 8008012:	60da      	str	r2, [r3, #12]
 8008014:	e001      	b.n	800801a <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008026:	7fbb      	ldrb	r3, [r7, #30]
}
 8008028:	4618      	mov	r0, r3
 800802a:	3720      	adds	r7, #32
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800803c:	f003 0301 	and.w	r3, r3, #1
 8008040:	2b00      	cmp	r3, #0
 8008042:	d00a      	beq.n	800805a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	430a      	orrs	r2, r1
 8008058:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805e:	f003 0302 	and.w	r3, r3, #2
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00a      	beq.n	800807c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	430a      	orrs	r2, r1
 800807a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008080:	f003 0304 	and.w	r3, r3, #4
 8008084:	2b00      	cmp	r3, #0
 8008086:	d00a      	beq.n	800809e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	430a      	orrs	r2, r1
 800809c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a2:	f003 0308 	and.w	r3, r3, #8
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00a      	beq.n	80080c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	430a      	orrs	r2, r1
 80080be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c4:	f003 0310 	and.w	r3, r3, #16
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d00a      	beq.n	80080e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	430a      	orrs	r2, r1
 80080e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e6:	f003 0320 	and.w	r3, r3, #32
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00a      	beq.n	8008104 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	689b      	ldr	r3, [r3, #8]
 80080f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	430a      	orrs	r2, r1
 8008102:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800810c:	2b00      	cmp	r3, #0
 800810e:	d01a      	beq.n	8008146 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	430a      	orrs	r2, r1
 8008124:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800812a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800812e:	d10a      	bne.n	8008146 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	430a      	orrs	r2, r1
 8008144:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00a      	beq.n	8008168 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	430a      	orrs	r2, r1
 8008166:	605a      	str	r2, [r3, #4]
  }
}
 8008168:	bf00      	nop
 800816a:	370c      	adds	r7, #12
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b086      	sub	sp, #24
 8008178:	af02      	add	r7, sp, #8
 800817a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008184:	f7fb fcfa 	bl	8003b7c <HAL_GetTick>
 8008188:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f003 0308 	and.w	r3, r3, #8
 8008194:	2b08      	cmp	r3, #8
 8008196:	d10e      	bne.n	80081b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008198:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800819c:	9300      	str	r3, [sp, #0]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 f82d 	bl	8008206 <UART_WaitOnFlagUntilTimeout>
 80081ac:	4603      	mov	r3, r0
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d001      	beq.n	80081b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081b2:	2303      	movs	r3, #3
 80081b4:	e023      	b.n	80081fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f003 0304 	and.w	r3, r3, #4
 80081c0:	2b04      	cmp	r3, #4
 80081c2:	d10e      	bne.n	80081e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80081c8:	9300      	str	r3, [sp, #0]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2200      	movs	r2, #0
 80081ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 f817 	bl	8008206 <UART_WaitOnFlagUntilTimeout>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d001      	beq.n	80081e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081de:	2303      	movs	r3, #3
 80081e0:	e00d      	b.n	80081fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2220      	movs	r2, #32
 80081e6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2220      	movs	r2, #32
 80081ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2200      	movs	r2, #0
 80081f2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3710      	adds	r7, #16
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}

08008206 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008206:	b580      	push	{r7, lr}
 8008208:	b09c      	sub	sp, #112	; 0x70
 800820a:	af00      	add	r7, sp, #0
 800820c:	60f8      	str	r0, [r7, #12]
 800820e:	60b9      	str	r1, [r7, #8]
 8008210:	603b      	str	r3, [r7, #0]
 8008212:	4613      	mov	r3, r2
 8008214:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008216:	e0a5      	b.n	8008364 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008218:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800821a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800821e:	f000 80a1 	beq.w	8008364 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008222:	f7fb fcab 	bl	8003b7c <HAL_GetTick>
 8008226:	4602      	mov	r2, r0
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	1ad3      	subs	r3, r2, r3
 800822c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800822e:	429a      	cmp	r2, r3
 8008230:	d302      	bcc.n	8008238 <UART_WaitOnFlagUntilTimeout+0x32>
 8008232:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008234:	2b00      	cmp	r3, #0
 8008236:	d13e      	bne.n	80082b6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800823e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008240:	e853 3f00 	ldrex	r3, [r3]
 8008244:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008248:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800824c:	667b      	str	r3, [r7, #100]	; 0x64
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	461a      	mov	r2, r3
 8008254:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008256:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008258:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800825a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800825c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800825e:	e841 2300 	strex	r3, r2, [r1]
 8008262:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008264:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008266:	2b00      	cmp	r3, #0
 8008268:	d1e6      	bne.n	8008238 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	3308      	adds	r3, #8
 8008270:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008274:	e853 3f00 	ldrex	r3, [r3]
 8008278:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800827a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800827c:	f023 0301 	bic.w	r3, r3, #1
 8008280:	663b      	str	r3, [r7, #96]	; 0x60
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	3308      	adds	r3, #8
 8008288:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800828a:	64ba      	str	r2, [r7, #72]	; 0x48
 800828c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008290:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008292:	e841 2300 	strex	r3, r2, [r1]
 8008296:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800829a:	2b00      	cmp	r3, #0
 800829c:	d1e5      	bne.n	800826a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2220      	movs	r2, #32
 80082a2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2220      	movs	r2, #32
 80082a8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2200      	movs	r2, #0
 80082ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80082b2:	2303      	movs	r3, #3
 80082b4:	e067      	b.n	8008386 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f003 0304 	and.w	r3, r3, #4
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d04f      	beq.n	8008364 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	69db      	ldr	r3, [r3, #28]
 80082ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082d2:	d147      	bne.n	8008364 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082dc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e6:	e853 3f00 	ldrex	r3, [r3]
 80082ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80082f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	461a      	mov	r2, r3
 80082fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082fc:	637b      	str	r3, [r7, #52]	; 0x34
 80082fe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008300:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008302:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008304:	e841 2300 	strex	r3, r2, [r1]
 8008308:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800830a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800830c:	2b00      	cmp	r3, #0
 800830e:	d1e6      	bne.n	80082de <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	3308      	adds	r3, #8
 8008316:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	e853 3f00 	ldrex	r3, [r3]
 800831e:	613b      	str	r3, [r7, #16]
   return(result);
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	f023 0301 	bic.w	r3, r3, #1
 8008326:	66bb      	str	r3, [r7, #104]	; 0x68
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	3308      	adds	r3, #8
 800832e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008330:	623a      	str	r2, [r7, #32]
 8008332:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008334:	69f9      	ldr	r1, [r7, #28]
 8008336:	6a3a      	ldr	r2, [r7, #32]
 8008338:	e841 2300 	strex	r3, r2, [r1]
 800833c:	61bb      	str	r3, [r7, #24]
   return(result);
 800833e:	69bb      	ldr	r3, [r7, #24]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d1e5      	bne.n	8008310 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2220      	movs	r2, #32
 8008348:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2220      	movs	r2, #32
 800834e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2220      	movs	r2, #32
 8008354:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2200      	movs	r2, #0
 800835c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008360:	2303      	movs	r3, #3
 8008362:	e010      	b.n	8008386 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	69da      	ldr	r2, [r3, #28]
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	4013      	ands	r3, r2
 800836e:	68ba      	ldr	r2, [r7, #8]
 8008370:	429a      	cmp	r2, r3
 8008372:	bf0c      	ite	eq
 8008374:	2301      	moveq	r3, #1
 8008376:	2300      	movne	r3, #0
 8008378:	b2db      	uxtb	r3, r3
 800837a:	461a      	mov	r2, r3
 800837c:	79fb      	ldrb	r3, [r7, #7]
 800837e:	429a      	cmp	r2, r3
 8008380:	f43f af4a 	beq.w	8008218 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	3770      	adds	r7, #112	; 0x70
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
	...

08008390 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008390:	b480      	push	{r7}
 8008392:	b091      	sub	sp, #68	; 0x44
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	4613      	mov	r3, r2
 800839c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	68ba      	ldr	r2, [r7, #8]
 80083a2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	88fa      	ldrh	r2, [r7, #6]
 80083a8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	88fa      	ldrh	r2, [r7, #6]
 80083b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2200      	movs	r2, #0
 80083b8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083c2:	d10e      	bne.n	80083e2 <UART_Start_Receive_IT+0x52>
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	691b      	ldr	r3, [r3, #16]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d105      	bne.n	80083d8 <UART_Start_Receive_IT+0x48>
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f240 12ff 	movw	r2, #511	; 0x1ff
 80083d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083d6:	e01a      	b.n	800840e <UART_Start_Receive_IT+0x7e>
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	22ff      	movs	r2, #255	; 0xff
 80083dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083e0:	e015      	b.n	800840e <UART_Start_Receive_IT+0x7e>
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d10d      	bne.n	8008406 <UART_Start_Receive_IT+0x76>
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d104      	bne.n	80083fc <UART_Start_Receive_IT+0x6c>
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	22ff      	movs	r2, #255	; 0xff
 80083f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80083fa:	e008      	b.n	800840e <UART_Start_Receive_IT+0x7e>
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	227f      	movs	r2, #127	; 0x7f
 8008400:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008404:	e003      	b.n	800840e <UART_Start_Receive_IT+0x7e>
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2200      	movs	r2, #0
 800840a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2200      	movs	r2, #0
 8008412:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2222      	movs	r2, #34	; 0x22
 800841a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	3308      	adds	r3, #8
 8008422:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008426:	e853 3f00 	ldrex	r3, [r3]
 800842a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800842c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842e:	f043 0301 	orr.w	r3, r3, #1
 8008432:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	3308      	adds	r3, #8
 800843a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800843c:	637a      	str	r2, [r7, #52]	; 0x34
 800843e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008440:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008442:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008444:	e841 2300 	strex	r3, r2, [r1]
 8008448:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800844a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800844c:	2b00      	cmp	r3, #0
 800844e:	d1e5      	bne.n	800841c <UART_Start_Receive_IT+0x8c>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008458:	d107      	bne.n	800846a <UART_Start_Receive_IT+0xda>
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	691b      	ldr	r3, [r3, #16]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d103      	bne.n	800846a <UART_Start_Receive_IT+0xda>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	4a14      	ldr	r2, [pc, #80]	; (80084b8 <UART_Start_Receive_IT+0x128>)
 8008466:	665a      	str	r2, [r3, #100]	; 0x64
 8008468:	e002      	b.n	8008470 <UART_Start_Receive_IT+0xe0>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	4a13      	ldr	r2, [pc, #76]	; (80084bc <UART_Start_Receive_IT+0x12c>)
 800846e:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2200      	movs	r2, #0
 8008474:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	e853 3f00 	ldrex	r3, [r3]
 8008484:	613b      	str	r3, [r7, #16]
   return(result);
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800848c:	63bb      	str	r3, [r7, #56]	; 0x38
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	461a      	mov	r2, r3
 8008494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008496:	623b      	str	r3, [r7, #32]
 8008498:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800849a:	69f9      	ldr	r1, [r7, #28]
 800849c:	6a3a      	ldr	r2, [r7, #32]
 800849e:	e841 2300 	strex	r3, r2, [r1]
 80084a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80084a4:	69bb      	ldr	r3, [r7, #24]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d1e6      	bne.n	8008478 <UART_Start_Receive_IT+0xe8>
  return HAL_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3744      	adds	r7, #68	; 0x44
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr
 80084b8:	08008763 	.word	0x08008763
 80084bc:	08008607 	.word	0x08008607

080084c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b095      	sub	sp, #84	; 0x54
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084d0:	e853 3f00 	ldrex	r3, [r3]
 80084d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80084d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	461a      	mov	r2, r3
 80084e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084e6:	643b      	str	r3, [r7, #64]	; 0x40
 80084e8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80084ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80084ee:	e841 2300 	strex	r3, r2, [r1]
 80084f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80084f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1e6      	bne.n	80084c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	3308      	adds	r3, #8
 8008500:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008502:	6a3b      	ldr	r3, [r7, #32]
 8008504:	e853 3f00 	ldrex	r3, [r3]
 8008508:	61fb      	str	r3, [r7, #28]
   return(result);
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	f023 0301 	bic.w	r3, r3, #1
 8008510:	64bb      	str	r3, [r7, #72]	; 0x48
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	3308      	adds	r3, #8
 8008518:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800851a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800851c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800851e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008520:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008522:	e841 2300 	strex	r3, r2, [r1]
 8008526:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852a:	2b00      	cmp	r3, #0
 800852c:	d1e5      	bne.n	80084fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008532:	2b01      	cmp	r3, #1
 8008534:	d118      	bne.n	8008568 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	e853 3f00 	ldrex	r3, [r3]
 8008542:	60bb      	str	r3, [r7, #8]
   return(result);
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	f023 0310 	bic.w	r3, r3, #16
 800854a:	647b      	str	r3, [r7, #68]	; 0x44
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	461a      	mov	r2, r3
 8008552:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008554:	61bb      	str	r3, [r7, #24]
 8008556:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008558:	6979      	ldr	r1, [r7, #20]
 800855a:	69ba      	ldr	r2, [r7, #24]
 800855c:	e841 2300 	strex	r3, r2, [r1]
 8008560:	613b      	str	r3, [r7, #16]
   return(result);
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d1e6      	bne.n	8008536 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2220      	movs	r2, #32
 800856c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	665a      	str	r2, [r3, #100]	; 0x64
}
 800857a:	bf00      	nop
 800857c:	3754      	adds	r7, #84	; 0x54
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr

08008586 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008586:	b580      	push	{r7, lr}
 8008588:	b084      	sub	sp, #16
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008592:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2200      	movs	r2, #0
 8008598:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2200      	movs	r2, #0
 80085a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085a4:	68f8      	ldr	r0, [r7, #12]
 80085a6:	f7ff fb59 	bl	8007c5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085aa:	bf00      	nop
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}

080085b2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80085b2:	b580      	push	{r7, lr}
 80085b4:	b088      	sub	sp, #32
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	e853 3f00 	ldrex	r3, [r3]
 80085c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085ce:	61fb      	str	r3, [r7, #28]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	461a      	mov	r2, r3
 80085d6:	69fb      	ldr	r3, [r7, #28]
 80085d8:	61bb      	str	r3, [r7, #24]
 80085da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085dc:	6979      	ldr	r1, [r7, #20]
 80085de:	69ba      	ldr	r2, [r7, #24]
 80085e0:	e841 2300 	strex	r3, r2, [r1]
 80085e4:	613b      	str	r3, [r7, #16]
   return(result);
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d1e6      	bne.n	80085ba <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2220      	movs	r2, #32
 80085f0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2200      	movs	r2, #0
 80085f6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f7ff fb1b 	bl	8007c34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085fe:	bf00      	nop
 8008600:	3720      	adds	r7, #32
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b096      	sub	sp, #88	; 0x58
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008614:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800861c:	2b22      	cmp	r3, #34	; 0x22
 800861e:	f040 8094 	bne.w	800874a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008628:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800862c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008630:	b2d9      	uxtb	r1, r3
 8008632:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008636:	b2da      	uxtb	r2, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800863c:	400a      	ands	r2, r1
 800863e:	b2d2      	uxtb	r2, r2
 8008640:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008646:	1c5a      	adds	r2, r3, #1
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008652:	b29b      	uxth	r3, r3
 8008654:	3b01      	subs	r3, #1
 8008656:	b29a      	uxth	r2, r3
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008664:	b29b      	uxth	r3, r3
 8008666:	2b00      	cmp	r3, #0
 8008668:	d177      	bne.n	800875a <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008672:	e853 3f00 	ldrex	r3, [r3]
 8008676:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800867a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800867e:	653b      	str	r3, [r7, #80]	; 0x50
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	461a      	mov	r2, r3
 8008686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008688:	647b      	str	r3, [r7, #68]	; 0x44
 800868a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800868c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800868e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008690:	e841 2300 	strex	r3, r2, [r1]
 8008694:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008698:	2b00      	cmp	r3, #0
 800869a:	d1e6      	bne.n	800866a <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	3308      	adds	r3, #8
 80086a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a6:	e853 3f00 	ldrex	r3, [r3]
 80086aa:	623b      	str	r3, [r7, #32]
   return(result);
 80086ac:	6a3b      	ldr	r3, [r7, #32]
 80086ae:	f023 0301 	bic.w	r3, r3, #1
 80086b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	3308      	adds	r3, #8
 80086ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80086bc:	633a      	str	r2, [r7, #48]	; 0x30
 80086be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086c4:	e841 2300 	strex	r3, r2, [r1]
 80086c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80086ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d1e5      	bne.n	800869c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2220      	movs	r2, #32
 80086d4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d12e      	bne.n	8008742 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	e853 3f00 	ldrex	r3, [r3]
 80086f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f023 0310 	bic.w	r3, r3, #16
 80086fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	461a      	mov	r2, r3
 8008706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008708:	61fb      	str	r3, [r7, #28]
 800870a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800870c:	69b9      	ldr	r1, [r7, #24]
 800870e:	69fa      	ldr	r2, [r7, #28]
 8008710:	e841 2300 	strex	r3, r2, [r1]
 8008714:	617b      	str	r3, [r7, #20]
   return(result);
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d1e6      	bne.n	80086ea <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	69db      	ldr	r3, [r3, #28]
 8008722:	f003 0310 	and.w	r3, r3, #16
 8008726:	2b10      	cmp	r3, #16
 8008728:	d103      	bne.n	8008732 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2210      	movs	r2, #16
 8008730:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008738:	4619      	mov	r1, r3
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f7ff fa98 	bl	8007c70 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008740:	e00b      	b.n	800875a <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f7ff fa80 	bl	8007c48 <HAL_UART_RxCpltCallback>
}
 8008748:	e007      	b.n	800875a <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	699a      	ldr	r2, [r3, #24]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f042 0208 	orr.w	r2, r2, #8
 8008758:	619a      	str	r2, [r3, #24]
}
 800875a:	bf00      	nop
 800875c:	3758      	adds	r7, #88	; 0x58
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b096      	sub	sp, #88	; 0x58
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008770:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008778:	2b22      	cmp	r3, #34	; 0x22
 800877a:	f040 8094 	bne.w	80088a6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008784:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800878c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800878e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008792:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008796:	4013      	ands	r3, r2
 8008798:	b29a      	uxth	r2, r3
 800879a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800879c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087a2:	1c9a      	adds	r2, r3, #2
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	3b01      	subs	r3, #1
 80087b2:	b29a      	uxth	r2, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d177      	bne.n	80088b6 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ce:	e853 3f00 	ldrex	r3, [r3]
 80087d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80087d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	461a      	mov	r2, r3
 80087e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087e4:	643b      	str	r3, [r7, #64]	; 0x40
 80087e6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80087ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087ec:	e841 2300 	strex	r3, r2, [r1]
 80087f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80087f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d1e6      	bne.n	80087c6 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	3308      	adds	r3, #8
 80087fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008800:	6a3b      	ldr	r3, [r7, #32]
 8008802:	e853 3f00 	ldrex	r3, [r3]
 8008806:	61fb      	str	r3, [r7, #28]
   return(result);
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	f023 0301 	bic.w	r3, r3, #1
 800880e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	3308      	adds	r3, #8
 8008816:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008818:	62fa      	str	r2, [r7, #44]	; 0x2c
 800881a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800881c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800881e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008820:	e841 2300 	strex	r3, r2, [r1]
 8008824:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008828:	2b00      	cmp	r3, #0
 800882a:	d1e5      	bne.n	80087f8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2220      	movs	r2, #32
 8008830:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800883c:	2b01      	cmp	r3, #1
 800883e:	d12e      	bne.n	800889e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	e853 3f00 	ldrex	r3, [r3]
 8008852:	60bb      	str	r3, [r7, #8]
   return(result);
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	f023 0310 	bic.w	r3, r3, #16
 800885a:	647b      	str	r3, [r7, #68]	; 0x44
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	461a      	mov	r2, r3
 8008862:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008864:	61bb      	str	r3, [r7, #24]
 8008866:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008868:	6979      	ldr	r1, [r7, #20]
 800886a:	69ba      	ldr	r2, [r7, #24]
 800886c:	e841 2300 	strex	r3, r2, [r1]
 8008870:	613b      	str	r3, [r7, #16]
   return(result);
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d1e6      	bne.n	8008846 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	69db      	ldr	r3, [r3, #28]
 800887e:	f003 0310 	and.w	r3, r3, #16
 8008882:	2b10      	cmp	r3, #16
 8008884:	d103      	bne.n	800888e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2210      	movs	r2, #16
 800888c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008894:	4619      	mov	r1, r3
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f7ff f9ea 	bl	8007c70 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800889c:	e00b      	b.n	80088b6 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f7ff f9d2 	bl	8007c48 <HAL_UART_RxCpltCallback>
}
 80088a4:	e007      	b.n	80088b6 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	699a      	ldr	r2, [r3, #24]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f042 0208 	orr.w	r2, r2, #8
 80088b4:	619a      	str	r2, [r3, #24]
}
 80088b6:	bf00      	nop
 80088b8:	3758      	adds	r7, #88	; 0x58
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}

080088be <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80088be:	b480      	push	{r7}
 80088c0:	b083      	sub	sp, #12
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80088c6:	bf00      	nop
 80088c8:	370c      	adds	r7, #12
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr

080088d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80088d2:	b480      	push	{r7}
 80088d4:	b085      	sub	sp, #20
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80088da:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80088de:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80088e6:	b29a      	uxth	r2, r3
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	43db      	mvns	r3, r3
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	4013      	ands	r3, r2
 80088f2:	b29a      	uxth	r2, r3
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80088fa:	2300      	movs	r3, #0
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3714      	adds	r7, #20
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr

08008908 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008908:	b084      	sub	sp, #16
 800890a:	b480      	push	{r7}
 800890c:	b083      	sub	sp, #12
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
 8008912:	f107 0014 	add.w	r0, r7, #20
 8008916:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2201      	movs	r2, #1
 800891e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2200      	movs	r2, #0
 8008926:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	b004      	add	sp, #16
 8008948:	4770      	bx	lr
	...

0800894c <__libc_init_array>:
 800894c:	b570      	push	{r4, r5, r6, lr}
 800894e:	4d0d      	ldr	r5, [pc, #52]	; (8008984 <__libc_init_array+0x38>)
 8008950:	4c0d      	ldr	r4, [pc, #52]	; (8008988 <__libc_init_array+0x3c>)
 8008952:	1b64      	subs	r4, r4, r5
 8008954:	10a4      	asrs	r4, r4, #2
 8008956:	2600      	movs	r6, #0
 8008958:	42a6      	cmp	r6, r4
 800895a:	d109      	bne.n	8008970 <__libc_init_array+0x24>
 800895c:	4d0b      	ldr	r5, [pc, #44]	; (800898c <__libc_init_array+0x40>)
 800895e:	4c0c      	ldr	r4, [pc, #48]	; (8008990 <__libc_init_array+0x44>)
 8008960:	f000 f820 	bl	80089a4 <_init>
 8008964:	1b64      	subs	r4, r4, r5
 8008966:	10a4      	asrs	r4, r4, #2
 8008968:	2600      	movs	r6, #0
 800896a:	42a6      	cmp	r6, r4
 800896c:	d105      	bne.n	800897a <__libc_init_array+0x2e>
 800896e:	bd70      	pop	{r4, r5, r6, pc}
 8008970:	f855 3b04 	ldr.w	r3, [r5], #4
 8008974:	4798      	blx	r3
 8008976:	3601      	adds	r6, #1
 8008978:	e7ee      	b.n	8008958 <__libc_init_array+0xc>
 800897a:	f855 3b04 	ldr.w	r3, [r5], #4
 800897e:	4798      	blx	r3
 8008980:	3601      	adds	r6, #1
 8008982:	e7f2      	b.n	800896a <__libc_init_array+0x1e>
 8008984:	08008a04 	.word	0x08008a04
 8008988:	08008a04 	.word	0x08008a04
 800898c:	08008a04 	.word	0x08008a04
 8008990:	08008a08 	.word	0x08008a08

08008994 <memset>:
 8008994:	4402      	add	r2, r0
 8008996:	4603      	mov	r3, r0
 8008998:	4293      	cmp	r3, r2
 800899a:	d100      	bne.n	800899e <memset+0xa>
 800899c:	4770      	bx	lr
 800899e:	f803 1b01 	strb.w	r1, [r3], #1
 80089a2:	e7f9      	b.n	8008998 <memset+0x4>

080089a4 <_init>:
 80089a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089a6:	bf00      	nop
 80089a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089aa:	bc08      	pop	{r3}
 80089ac:	469e      	mov	lr, r3
 80089ae:	4770      	bx	lr

080089b0 <_fini>:
 80089b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b2:	bf00      	nop
 80089b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089b6:	bc08      	pop	{r3}
 80089b8:	469e      	mov	lr, r3
 80089ba:	4770      	bx	lr
