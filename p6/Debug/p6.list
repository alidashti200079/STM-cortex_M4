
p6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006760  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080068f0  080068f0  000168f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069d4  080069d4  000200ac  2**0
                  CONTENTS
  4 .ARM          00000000  080069d4  080069d4  000200ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  080069d4  080069d4  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069d4  080069d4  000169d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069d8  080069d8  000169d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  080069dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200ac  2**0
                  CONTENTS
 10 .bss          00000540  200000ac  200000ac  000200ac  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005ec  200005ec  000200ac  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a7b8  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003090  00000000  00000000  0003a894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001510  00000000  00000000  0003d928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013b8  00000000  00000000  0003ee38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020c9f  00000000  00000000  000401f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019f7c  00000000  00000000  00060e8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7cbd  00000000  00000000  0007ae0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00142ac8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005dc4  00000000  00000000  00142b1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000ac 	.word	0x200000ac
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080068d8 	.word	0x080068d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b0 	.word	0x200000b0
 80001cc:	080068d8 	.word	0x080068d8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b08e      	sub	sp, #56	; 0x38
 8000284:	af0a      	add	r7, sp, #40	; 0x28
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	4608      	mov	r0, r1
 800028a:	4611      	mov	r1, r2
 800028c:	461a      	mov	r2, r3
 800028e:	4603      	mov	r3, r0
 8000290:	817b      	strh	r3, [r7, #10]
 8000292:	460b      	mov	r3, r1
 8000294:	813b      	strh	r3, [r7, #8]
 8000296:	4613      	mov	r3, r2
 8000298:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 800029a:	4b1d      	ldr	r3, [pc, #116]	; (8000310 <LiquidCrystal+0x90>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d019      	beq.n	80002d6 <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002a2:	8939      	ldrh	r1, [r7, #8]
 80002a4:	897a      	ldrh	r2, [r7, #10]
 80002a6:	2300      	movs	r3, #0
 80002a8:	9308      	str	r3, [sp, #32]
 80002aa:	2300      	movs	r3, #0
 80002ac:	9307      	str	r3, [sp, #28]
 80002ae:	2300      	movs	r3, #0
 80002b0:	9306      	str	r3, [sp, #24]
 80002b2:	2300      	movs	r3, #0
 80002b4:	9305      	str	r3, [sp, #20]
 80002b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002b8:	9304      	str	r3, [sp, #16]
 80002ba:	8c3b      	ldrh	r3, [r7, #32]
 80002bc:	9303      	str	r3, [sp, #12]
 80002be:	8bbb      	ldrh	r3, [r7, #28]
 80002c0:	9302      	str	r3, [sp, #8]
 80002c2:	8b3b      	ldrh	r3, [r7, #24]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	88fb      	ldrh	r3, [r7, #6]
 80002c8:	9300      	str	r3, [sp, #0]
 80002ca:	460b      	mov	r3, r1
 80002cc:	68f9      	ldr	r1, [r7, #12]
 80002ce:	2001      	movs	r0, #1
 80002d0:	f000 f820 	bl	8000314 <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 80002d4:	e018      	b.n	8000308 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 80002d6:	8939      	ldrh	r1, [r7, #8]
 80002d8:	897a      	ldrh	r2, [r7, #10]
 80002da:	2300      	movs	r3, #0
 80002dc:	9308      	str	r3, [sp, #32]
 80002de:	2300      	movs	r3, #0
 80002e0:	9307      	str	r3, [sp, #28]
 80002e2:	2300      	movs	r3, #0
 80002e4:	9306      	str	r3, [sp, #24]
 80002e6:	2300      	movs	r3, #0
 80002e8:	9305      	str	r3, [sp, #20]
 80002ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80002ec:	9304      	str	r3, [sp, #16]
 80002ee:	8c3b      	ldrh	r3, [r7, #32]
 80002f0:	9303      	str	r3, [sp, #12]
 80002f2:	8bbb      	ldrh	r3, [r7, #28]
 80002f4:	9302      	str	r3, [sp, #8]
 80002f6:	8b3b      	ldrh	r3, [r7, #24]
 80002f8:	9301      	str	r3, [sp, #4]
 80002fa:	88fb      	ldrh	r3, [r7, #6]
 80002fc:	9300      	str	r3, [sp, #0]
 80002fe:	460b      	mov	r3, r1
 8000300:	68f9      	ldr	r1, [r7, #12]
 8000302:	2000      	movs	r0, #0
 8000304:	f000 f806 	bl	8000314 <init>
}
 8000308:	bf00      	nop
 800030a:	3710      	adds	r7, #16
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20000000 	.word	0x20000000

08000314 <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
 800031a:	60b9      	str	r1, [r7, #8]
 800031c:	4611      	mov	r1, r2
 800031e:	461a      	mov	r2, r3
 8000320:	4603      	mov	r3, r0
 8000322:	73fb      	strb	r3, [r7, #15]
 8000324:	460b      	mov	r3, r1
 8000326:	81bb      	strh	r3, [r7, #12]
 8000328:	4613      	mov	r3, r2
 800032a:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 800032c:	4a1a      	ldr	r2, [pc, #104]	; (8000398 <init+0x84>)
 800032e:	89bb      	ldrh	r3, [r7, #12]
 8000330:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 8000332:	4a1a      	ldr	r2, [pc, #104]	; (800039c <init+0x88>)
 8000334:	88fb      	ldrh	r3, [r7, #6]
 8000336:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8000338:	4a19      	ldr	r2, [pc, #100]	; (80003a0 <init+0x8c>)
 800033a:	8b3b      	ldrh	r3, [r7, #24]
 800033c:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 800033e:	4a19      	ldr	r2, [pc, #100]	; (80003a4 <init+0x90>)
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	6013      	str	r3, [r2, #0]
  
  _data_pins[0] = d0;
 8000344:	4a18      	ldr	r2, [pc, #96]	; (80003a8 <init+0x94>)
 8000346:	8bbb      	ldrh	r3, [r7, #28]
 8000348:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 800034a:	4a17      	ldr	r2, [pc, #92]	; (80003a8 <init+0x94>)
 800034c:	8c3b      	ldrh	r3, [r7, #32]
 800034e:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8000350:	4a15      	ldr	r2, [pc, #84]	; (80003a8 <init+0x94>)
 8000352:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000354:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3; 
 8000356:	4a14      	ldr	r2, [pc, #80]	; (80003a8 <init+0x94>)
 8000358:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800035a:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 800035c:	4a12      	ldr	r2, [pc, #72]	; (80003a8 <init+0x94>)
 800035e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000360:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 8000362:	4a11      	ldr	r2, [pc, #68]	; (80003a8 <init+0x94>)
 8000364:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000366:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8000368:	4a0f      	ldr	r2, [pc, #60]	; (80003a8 <init+0x94>)
 800036a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800036c:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 800036e:	4a0e      	ldr	r2, [pc, #56]	; (80003a8 <init+0x94>)
 8000370:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000372:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8000374:	7bfb      	ldrb	r3, [r7, #15]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d003      	beq.n	8000382 <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800037a:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <init+0x98>)
 800037c:	2200      	movs	r2, #0
 800037e:	701a      	strb	r2, [r3, #0]
 8000380:	e002      	b.n	8000388 <init+0x74>
  else 
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000382:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <init+0x98>)
 8000384:	2210      	movs	r2, #16
 8000386:	701a      	strb	r2, [r3, #0]
  
  begin(16, 2);
 8000388:	2102      	movs	r1, #2
 800038a:	2010      	movs	r0, #16
 800038c:	f000 f810 	bl	80003b0 <begin>
}
 8000390:	bf00      	nop
 8000392:	3710      	adds	r7, #16
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	20000104 	.word	0x20000104
 800039c:	200000e4 	.word	0x200000e4
 80003a0:	20000102 	.word	0x20000102
 80003a4:	200000e8 	.word	0x200000e8
 80003a8:	200000f0 	.word	0x200000f0
 80003ac:	20000101 	.word	0x20000101

080003b0 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b088      	sub	sp, #32
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	460a      	mov	r2, r1
 80003ba:	71fb      	strb	r3, [r7, #7]
 80003bc:	4613      	mov	r3, r2
 80003be:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 80003c0:	79bb      	ldrb	r3, [r7, #6]
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d906      	bls.n	80003d4 <begin+0x24>
    _displayfunction |= LCD_2LINE;
 80003c6:	4b77      	ldr	r3, [pc, #476]	; (80005a4 <begin+0x1f4>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	f043 0308 	orr.w	r3, r3, #8
 80003ce:	b2da      	uxtb	r2, r3
 80003d0:	4b74      	ldr	r3, [pc, #464]	; (80005a4 <begin+0x1f4>)
 80003d2:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 80003d4:	4a74      	ldr	r2, [pc, #464]	; (80005a8 <begin+0x1f8>)
 80003d6:	79bb      	ldrb	r3, [r7, #6]
 80003d8:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);  
 80003da:	79fa      	ldrb	r2, [r7, #7]
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	3340      	adds	r3, #64	; 0x40
 80003e0:	2140      	movs	r1, #64	; 0x40
 80003e2:	2000      	movs	r0, #0
 80003e4:	f000 f988 	bl	80006f8 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 80003e8:	4b70      	ldr	r3, [pc, #448]	; (80005ac <begin+0x1fc>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d009      	beq.n	8000404 <begin+0x54>
 80003f0:	79bb      	ldrb	r3, [r7, #6]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d106      	bne.n	8000404 <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 80003f6:	4b6b      	ldr	r3, [pc, #428]	; (80005a4 <begin+0x1f4>)
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	f043 0304 	orr.w	r3, r3, #4
 80003fe:	b2da      	uxtb	r2, r3
 8000400:	4b68      	ldr	r3, [pc, #416]	; (80005a4 <begin+0x1f4>)
 8000402:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8000404:	f000 f8e4 	bl	80005d0 <enableClock>
  
  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8000408:	2303      	movs	r3, #3
 800040a:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 800040c:	2301      	movs	r3, #1
 800040e:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8000410:	4b67      	ldr	r3, [pc, #412]	; (80005b0 <begin+0x200>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d01b      	beq.n	8000450 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8000418:	4b66      	ldr	r3, [pc, #408]	; (80005b4 <begin+0x204>)
 800041a:	881a      	ldrh	r2, [r3, #0]
 800041c:	4b66      	ldr	r3, [pc, #408]	; (80005b8 <begin+0x208>)
 800041e:	881b      	ldrh	r3, [r3, #0]
 8000420:	4313      	orrs	r3, r2
 8000422:	b29a      	uxth	r2, r3
 8000424:	4b65      	ldr	r3, [pc, #404]	; (80005bc <begin+0x20c>)
 8000426:	881b      	ldrh	r3, [r3, #0]
 8000428:	4313      	orrs	r3, r2
 800042a:	b29a      	uxth	r2, r3
 800042c:	4b64      	ldr	r3, [pc, #400]	; (80005c0 <begin+0x210>)
 800042e:	881b      	ldrh	r3, [r3, #0]
 8000430:	4313      	orrs	r3, r2
 8000432:	b29a      	uxth	r2, r3
 8000434:	4b62      	ldr	r3, [pc, #392]	; (80005c0 <begin+0x210>)
 8000436:	885b      	ldrh	r3, [r3, #2]
 8000438:	4313      	orrs	r3, r2
 800043a:	b29a      	uxth	r2, r3
 800043c:	4b60      	ldr	r3, [pc, #384]	; (80005c0 <begin+0x210>)
 800043e:	889b      	ldrh	r3, [r3, #4]
 8000440:	4313      	orrs	r3, r2
 8000442:	b29a      	uxth	r2, r3
 8000444:	4b5e      	ldr	r3, [pc, #376]	; (80005c0 <begin+0x210>)
 8000446:	88db      	ldrh	r3, [r3, #6]
 8000448:	4313      	orrs	r3, r2
 800044a:	b29b      	uxth	r3, r3
 800044c:	60fb      	str	r3, [r7, #12]
 800044e:	e02a      	b.n	80004a6 <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000450:	4b58      	ldr	r3, [pc, #352]	; (80005b4 <begin+0x204>)
 8000452:	881a      	ldrh	r2, [r3, #0]
 8000454:	4b58      	ldr	r3, [pc, #352]	; (80005b8 <begin+0x208>)
 8000456:	881b      	ldrh	r3, [r3, #0]
 8000458:	4313      	orrs	r3, r2
 800045a:	b29a      	uxth	r2, r3
 800045c:	4b57      	ldr	r3, [pc, #348]	; (80005bc <begin+0x20c>)
 800045e:	881b      	ldrh	r3, [r3, #0]
 8000460:	4313      	orrs	r3, r2
 8000462:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000464:	4b56      	ldr	r3, [pc, #344]	; (80005c0 <begin+0x210>)
 8000466:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000468:	4313      	orrs	r3, r2
 800046a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800046c:	4b54      	ldr	r3, [pc, #336]	; (80005c0 <begin+0x210>)
 800046e:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000470:	4313      	orrs	r3, r2
 8000472:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8000474:	4b52      	ldr	r3, [pc, #328]	; (80005c0 <begin+0x210>)
 8000476:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000478:	4313      	orrs	r3, r2
 800047a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800047c:	4b50      	ldr	r3, [pc, #320]	; (80005c0 <begin+0x210>)
 800047e:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8000480:	4313      	orrs	r3, r2
 8000482:	b29a      	uxth	r2, r3
 8000484:	4b4e      	ldr	r3, [pc, #312]	; (80005c0 <begin+0x210>)
 8000486:	891b      	ldrh	r3, [r3, #8]
 8000488:	4313      	orrs	r3, r2
 800048a:	b29a      	uxth	r2, r3
 800048c:	4b4c      	ldr	r3, [pc, #304]	; (80005c0 <begin+0x210>)
 800048e:	895b      	ldrh	r3, [r3, #10]
 8000490:	4313      	orrs	r3, r2
 8000492:	b29a      	uxth	r2, r3
 8000494:	4b4a      	ldr	r3, [pc, #296]	; (80005c0 <begin+0x210>)
 8000496:	899b      	ldrh	r3, [r3, #12]
 8000498:	4313      	orrs	r3, r2
 800049a:	b29a      	uxth	r2, r3
 800049c:	4b48      	ldr	r3, [pc, #288]	; (80005c0 <begin+0x210>)
 800049e:	89db      	ldrh	r3, [r3, #14]
 80004a0:	4313      	orrs	r3, r2
 80004a2:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80004a4:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 80004a6:	4b47      	ldr	r3, [pc, #284]	; (80005c4 <begin+0x214>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f107 020c 	add.w	r2, r7, #12
 80004ae:	4611      	mov	r1, r2
 80004b0:	4618      	mov	r0, r3
 80004b2:	f002 fe85 	bl	80031c0 <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50); 
 80004b6:	2032      	movs	r0, #50	; 0x32
 80004b8:	f001 fa24 	bl	8001904 <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 80004bc:	4b41      	ldr	r3, [pc, #260]	; (80005c4 <begin+0x214>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a3c      	ldr	r2, [pc, #240]	; (80005b4 <begin+0x204>)
 80004c2:	8811      	ldrh	r1, [r2, #0]
 80004c4:	2200      	movs	r2, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f003 f80c 	bl	80034e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80004cc:	4b3d      	ldr	r3, [pc, #244]	; (80005c4 <begin+0x214>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a3a      	ldr	r2, [pc, #232]	; (80005bc <begin+0x20c>)
 80004d2:	8811      	ldrh	r1, [r2, #0]
 80004d4:	2200      	movs	r2, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f003 f804 	bl	80034e4 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) { 
 80004dc:	4b36      	ldr	r3, [pc, #216]	; (80005b8 <begin+0x208>)
 80004de:	881b      	ldrh	r3, [r3, #0]
 80004e0:	2bff      	cmp	r3, #255	; 0xff
 80004e2:	d007      	beq.n	80004f4 <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80004e4:	4b37      	ldr	r3, [pc, #220]	; (80005c4 <begin+0x214>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a33      	ldr	r2, [pc, #204]	; (80005b8 <begin+0x208>)
 80004ea:	8811      	ldrh	r1, [r2, #0]
 80004ec:	2200      	movs	r2, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f002 fff8 	bl	80034e4 <HAL_GPIO_WritePin>
  }
  
  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 80004f4:	4b2b      	ldr	r3, [pc, #172]	; (80005a4 <begin+0x1f4>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	f003 0310 	and.w	r3, r3, #16
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d115      	bne.n	800052c <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 fa45 	bl	8000990 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000506:	2005      	movs	r0, #5
 8000508:	f001 f9fc 	bl	8001904 <HAL_Delay>

    // second try
    write4bits(0x03);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 fa3f 	bl	8000990 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8000512:	2005      	movs	r0, #5
 8000514:	f001 f9f6 	bl	8001904 <HAL_Delay>
    
    // third go!
    write4bits(0x03); 
 8000518:	2003      	movs	r0, #3
 800051a:	f000 fa39 	bl	8000990 <write4bits>
    HAL_Delay(1);
 800051e:	2001      	movs	r0, #1
 8000520:	f001 f9f0 	bl	8001904 <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02); 
 8000524:	2002      	movs	r0, #2
 8000526:	f000 fa33 	bl	8000990 <write4bits>
 800052a:	e01d      	b.n	8000568 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 800052c:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <begin+0x1f4>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	f043 0320 	orr.w	r3, r3, #32
 8000534:	b2db      	uxtb	r3, r3
 8000536:	4618      	mov	r0, r3
 8000538:	f000 f9a4 	bl	8000884 <command>
    HAL_Delay(5);  // wait more than 4.1ms
 800053c:	2005      	movs	r0, #5
 800053e:	f001 f9e1 	bl	8001904 <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8000542:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <begin+0x1f4>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	f043 0320 	orr.w	r3, r3, #32
 800054a:	b2db      	uxtb	r3, r3
 800054c:	4618      	mov	r0, r3
 800054e:	f000 f999 	bl	8000884 <command>
    HAL_Delay(1);
 8000552:	2001      	movs	r0, #1
 8000554:	f001 f9d6 	bl	8001904 <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <begin+0x1f4>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	f043 0320 	orr.w	r3, r3, #32
 8000560:	b2db      	uxtb	r3, r3
 8000562:	4618      	mov	r0, r3
 8000564:	f000 f98e 	bl	8000884 <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);  
 8000568:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <begin+0x1f4>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	f043 0320 	orr.w	r3, r3, #32
 8000570:	b2db      	uxtb	r3, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f986 	bl	8000884 <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;  
 8000578:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <begin+0x218>)
 800057a:	2204      	movs	r2, #4
 800057c:	701a      	strb	r2, [r3, #0]
  display();
 800057e:	f000 f917 	bl	80007b0 <display>

  // clear it off
  clear();
 8000582:	f000 f8d9 	bl	8000738 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <begin+0x21c>)
 8000588:	2202      	movs	r2, #2
 800058a:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <begin+0x21c>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	f043 0304 	orr.w	r3, r3, #4
 8000594:	b2db      	uxtb	r3, r3
 8000596:	4618      	mov	r0, r3
 8000598:	f000 f974 	bl	8000884 <command>

}
 800059c:	bf00      	nop
 800059e:	3720      	adds	r7, #32
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000101 	.word	0x20000101
 80005a8:	200000ed 	.word	0x200000ed
 80005ac:	200000c8 	.word	0x200000c8
 80005b0:	20000000 	.word	0x20000000
 80005b4:	20000104 	.word	0x20000104
 80005b8:	200000e4 	.word	0x200000e4
 80005bc:	20000102 	.word	0x20000102
 80005c0:	200000f0 	.word	0x200000f0
 80005c4:	200000e8 	.word	0x200000e8
 80005c8:	200000ec 	.word	0x200000ec
 80005cc:	20000100 	.word	0x20000100

080005d0 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{  
 80005d0:	b480      	push	{r7}
 80005d2:	b089      	sub	sp, #36	; 0x24
 80005d4:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 80005d6:	4b41      	ldr	r3, [pc, #260]	; (80006dc <enableClock+0x10c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80005de:	d10c      	bne.n	80005fa <enableClock+0x2a>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80005e0:	4b3f      	ldr	r3, [pc, #252]	; (80006e0 <enableClock+0x110>)
 80005e2:	695b      	ldr	r3, [r3, #20]
 80005e4:	4a3e      	ldr	r2, [pc, #248]	; (80006e0 <enableClock+0x110>)
 80005e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ea:	6153      	str	r3, [r2, #20]
 80005ec:	4b3c      	ldr	r3, [pc, #240]	; (80006e0 <enableClock+0x110>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005f4:	61fb      	str	r3, [r7, #28]
 80005f6:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 80005f8:	e06a      	b.n	80006d0 <enableClock+0x100>
  else if(_port == GPIOB)
 80005fa:	4b38      	ldr	r3, [pc, #224]	; (80006dc <enableClock+0x10c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a39      	ldr	r2, [pc, #228]	; (80006e4 <enableClock+0x114>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d10c      	bne.n	800061e <enableClock+0x4e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000604:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <enableClock+0x110>)
 8000606:	695b      	ldr	r3, [r3, #20]
 8000608:	4a35      	ldr	r2, [pc, #212]	; (80006e0 <enableClock+0x110>)
 800060a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800060e:	6153      	str	r3, [r2, #20]
 8000610:	4b33      	ldr	r3, [pc, #204]	; (80006e0 <enableClock+0x110>)
 8000612:	695b      	ldr	r3, [r3, #20]
 8000614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000618:	61bb      	str	r3, [r7, #24]
 800061a:	69bb      	ldr	r3, [r7, #24]
}
 800061c:	e058      	b.n	80006d0 <enableClock+0x100>
  else if(_port == GPIOB)
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <enableClock+0x10c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a30      	ldr	r2, [pc, #192]	; (80006e4 <enableClock+0x114>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d10c      	bne.n	8000642 <enableClock+0x72>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000628:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <enableClock+0x110>)
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	4a2c      	ldr	r2, [pc, #176]	; (80006e0 <enableClock+0x110>)
 800062e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000632:	6153      	str	r3, [r2, #20]
 8000634:	4b2a      	ldr	r3, [pc, #168]	; (80006e0 <enableClock+0x110>)
 8000636:	695b      	ldr	r3, [r3, #20]
 8000638:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	697b      	ldr	r3, [r7, #20]
}
 8000640:	e046      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOC)
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <enableClock+0x10c>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a28      	ldr	r2, [pc, #160]	; (80006e8 <enableClock+0x118>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d10c      	bne.n	8000666 <enableClock+0x96>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800064c:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <enableClock+0x110>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	4a23      	ldr	r2, [pc, #140]	; (80006e0 <enableClock+0x110>)
 8000652:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000656:	6153      	str	r3, [r2, #20]
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <enableClock+0x110>)
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000660:	613b      	str	r3, [r7, #16]
 8000662:	693b      	ldr	r3, [r7, #16]
}
 8000664:	e034      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOD)
 8000666:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <enableClock+0x10c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a20      	ldr	r2, [pc, #128]	; (80006ec <enableClock+0x11c>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d10c      	bne.n	800068a <enableClock+0xba>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <enableClock+0x110>)
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	4a1a      	ldr	r2, [pc, #104]	; (80006e0 <enableClock+0x110>)
 8000676:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800067a:	6153      	str	r3, [r2, #20]
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <enableClock+0x110>)
 800067e:	695b      	ldr	r3, [r3, #20]
 8000680:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fb      	ldr	r3, [r7, #12]
}
 8000688:	e022      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOE)
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <enableClock+0x10c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a18      	ldr	r2, [pc, #96]	; (80006f0 <enableClock+0x120>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d10c      	bne.n	80006ae <enableClock+0xde>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <enableClock+0x110>)
 8000696:	695b      	ldr	r3, [r3, #20]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <enableClock+0x110>)
 800069a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800069e:	6153      	str	r3, [r2, #20]
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <enableClock+0x110>)
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
}
 80006ac:	e010      	b.n	80006d0 <enableClock+0x100>
	else if(_port == GPIOF)
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <enableClock+0x10c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a10      	ldr	r2, [pc, #64]	; (80006f4 <enableClock+0x124>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d10b      	bne.n	80006d0 <enableClock+0x100>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <enableClock+0x110>)
 80006ba:	695b      	ldr	r3, [r3, #20]
 80006bc:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <enableClock+0x110>)
 80006be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006c2:	6153      	str	r3, [r2, #20]
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <enableClock+0x110>)
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
}
 80006d0:	bf00      	nop
 80006d2:	3724      	adds	r7, #36	; 0x24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	200000e8 	.word	0x200000e8
 80006e0:	40021000 	.word	0x40021000
 80006e4:	48000400 	.word	0x48000400
 80006e8:	48000800 	.word	0x48000800
 80006ec:	48000c00 	.word	0x48000c00
 80006f0:	48001000 	.word	0x48001000
 80006f4:	48001400 	.word	0x48001400

080006f8 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
 8000704:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <setRowOffsets+0x3c>)
 800070c:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <setRowOffsets+0x3c>)
 8000714:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <setRowOffsets+0x3c>)
 800071c:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b04      	ldr	r3, [pc, #16]	; (8000734 <setRowOffsets+0x3c>)
 8000724:	70da      	strb	r2, [r3, #3]
}
 8000726:	bf00      	nop
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	200000e0 	.word	0x200000e0

08000738 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 800073c:	2001      	movs	r0, #1
 800073e:	f000 f8a1 	bl	8000884 <command>
  HAL_Delay(2);  // this command takes a long time!
 8000742:	2002      	movs	r0, #2
 8000744:	f001 f8de 	bl	8001904 <HAL_Delay>
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	4613      	mov	r3, r2
 800075a:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 800075c:	2304      	movs	r3, #4
 800075e:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 8000760:	79bb      	ldrb	r3, [r7, #6]
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	429a      	cmp	r2, r3
 8000766:	d803      	bhi.n	8000770 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	b2db      	uxtb	r3, r3
 800076c:	3b01      	subs	r3, #1
 800076e:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8000770:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <setCursor+0x5c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	79ba      	ldrb	r2, [r7, #6]
 8000776:	429a      	cmp	r2, r3
 8000778:	d303      	bcc.n	8000782 <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <setCursor+0x5c>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	3b01      	subs	r3, #1
 8000780:	71bb      	strb	r3, [r7, #6]
  }
  
  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 8000782:	79bb      	ldrb	r3, [r7, #6]
 8000784:	4a09      	ldr	r2, [pc, #36]	; (80007ac <setCursor+0x60>)
 8000786:	5cd2      	ldrb	r2, [r2, r3]
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	4413      	add	r3, r2
 800078c:	b2db      	uxtb	r3, r3
 800078e:	b25b      	sxtb	r3, r3
 8000790:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000794:	b25b      	sxtb	r3, r3
 8000796:	b2db      	uxtb	r3, r3
 8000798:	4618      	mov	r0, r3
 800079a:	f000 f873 	bl	8000884 <command>
}
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200000ed 	.word	0x200000ed
 80007ac:	200000e0 	.word	0x200000e0

080007b0 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <display+0x28>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <display+0x28>)
 80007c0:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <display+0x28>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	f043 0308 	orr.w	r3, r3, #8
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 f859 	bl	8000884 <command>
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200000ec 	.word	0x200000ec

080007dc <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d101      	bne.n	80007ee <print+0x12>
 80007ea:	2300      	movs	r3, #0
 80007ec:	e01d      	b.n	800082a <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff fcec 	bl	80001d0 <strlen>
 80007f8:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]

  while (size--) {
 80007fe:	e00c      	b.n	800081a <print+0x3e>
    if (write(*buffer++)) n++;
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	1c5a      	adds	r2, r3, #1
 8000804:	617a      	str	r2, [r7, #20]
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f000 f849 	bl	80008a0 <write>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d008      	beq.n	8000826 <print+0x4a>
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	3301      	adds	r3, #1
 8000818:	60fb      	str	r3, [r7, #12]
  while (size--) {
 800081a:	693b      	ldr	r3, [r7, #16]
 800081c:	1e5a      	subs	r2, r3, #1
 800081e:	613a      	str	r2, [r7, #16]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d1ed      	bne.n	8000800 <print+0x24>
 8000824:	e000      	b.n	8000828 <print+0x4c>
    else break;
 8000826:	bf00      	nop
  }
  return n;
 8000828:	68fb      	ldr	r3, [r7, #12]
}
 800082a:	4618      	mov	r0, r3
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <createChar>:

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void createChar(uint8_t location, uint8_t charmap[]) {
 8000832:	b580      	push	{r7, lr}
 8000834:	b084      	sub	sp, #16
 8000836:	af00      	add	r7, sp, #0
 8000838:	4603      	mov	r3, r0
 800083a:	6039      	str	r1, [r7, #0]
 800083c:	71fb      	strb	r3, [r7, #7]
  location &= 0x7; // we only have 8 locations 0-7
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	f003 0307 	and.w	r3, r3, #7
 8000844:	71fb      	strb	r3, [r7, #7]
  command(LCD_SETCGRAMADDR | (location << 3));
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	b25b      	sxtb	r3, r3
 800084c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000850:	b25b      	sxtb	r3, r3
 8000852:	b2db      	uxtb	r3, r3
 8000854:	4618      	mov	r0, r3
 8000856:	f000 f815 	bl	8000884 <command>
  for (int i=0; i<8; i++) {
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	e009      	b.n	8000874 <createChar+0x42>
    write(charmap[i]);
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	683a      	ldr	r2, [r7, #0]
 8000864:	4413      	add	r3, r2
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4618      	mov	r0, r3
 800086a:	f000 f819 	bl	80008a0 <write>
  for (int i=0; i<8; i++) {
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	3301      	adds	r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	2b07      	cmp	r3, #7
 8000878:	ddf2      	ble.n	8000860 <createChar+0x2e>
  }
}
 800087a:	bf00      	nop
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <command>:

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f814 	bl	80008c0 <send>
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <write>:

inline size_t write(uint8_t value) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2101      	movs	r1, #1
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f806 	bl	80008c0 <send>
  return 1; // assume sucess
 80008b4:	2301      	movs	r3, #1
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	460a      	mov	r2, r1
 80008ca:	71fb      	strb	r3, [r7, #7]
 80008cc:	4613      	mov	r3, r2
 80008ce:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 80008d0:	4b16      	ldr	r3, [pc, #88]	; (800092c <send+0x6c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a16      	ldr	r2, [pc, #88]	; (8000930 <send+0x70>)
 80008d6:	8811      	ldrh	r1, [r2, #0]
 80008d8:	79ba      	ldrb	r2, [r7, #6]
 80008da:	4618      	mov	r0, r3
 80008dc:	f002 fe02 	bl	80034e4 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <send+0x74>)
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	2bff      	cmp	r3, #255	; 0xff
 80008e6:	d007      	beq.n	80008f8 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <send+0x6c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a11      	ldr	r2, [pc, #68]	; (8000934 <send+0x74>)
 80008ee:	8811      	ldrh	r1, [r2, #0]
 80008f0:	2200      	movs	r2, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f002 fdf6 	bl	80034e4 <HAL_GPIO_WritePin>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <send+0x78>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	f003 0310 	and.w	r3, r3, #16
 8000900:	2b00      	cmp	r3, #0
 8000902:	d004      	beq.n	800090e <send+0x4e>
    write8bits(value); 
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f86c 	bl	80009e4 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 800090c:	e009      	b.n	8000922 <send+0x62>
    write4bits(value>>4);
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	091b      	lsrs	r3, r3, #4
 8000912:	b2db      	uxtb	r3, r3
 8000914:	4618      	mov	r0, r3
 8000916:	f000 f83b 	bl	8000990 <write4bits>
    write4bits(value);
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	4618      	mov	r0, r3
 800091e:	f000 f837 	bl	8000990 <write4bits>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200000e8 	.word	0x200000e8
 8000930:	20000104 	.word	0x20000104
 8000934:	200000e4 	.word	0x200000e4
 8000938:	20000101 	.word	0x20000101

0800093c <pulseEnable>:

void pulseEnable(void) {
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <pulseEnable+0x4c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a11      	ldr	r2, [pc, #68]	; (800098c <pulseEnable+0x50>)
 8000946:	8811      	ldrh	r1, [r2, #0]
 8000948:	2200      	movs	r2, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f002 fdca 	bl	80034e4 <HAL_GPIO_WritePin>
  HAL_Delay(1);    
 8000950:	2001      	movs	r0, #1
 8000952:	f000 ffd7 	bl	8001904 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <pulseEnable+0x4c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a0c      	ldr	r2, [pc, #48]	; (800098c <pulseEnable+0x50>)
 800095c:	8811      	ldrh	r1, [r2, #0]
 800095e:	2201      	movs	r2, #1
 8000960:	4618      	mov	r0, r3
 8000962:	f002 fdbf 	bl	80034e4 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 8000966:	2001      	movs	r0, #1
 8000968:	f000 ffcc 	bl	8001904 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <pulseEnable+0x4c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a06      	ldr	r2, [pc, #24]	; (800098c <pulseEnable+0x50>)
 8000972:	8811      	ldrh	r1, [r2, #0]
 8000974:	2200      	movs	r2, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f002 fdb4 	bl	80034e4 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 800097c:	2001      	movs	r0, #1
 800097e:	f000 ffc1 	bl	8001904 <HAL_Delay>
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200000e8 	.word	0x200000e8
 800098c:	20000102 	.word	0x20000102

08000990 <write4bits>:

void write4bits(uint8_t value) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	e013      	b.n	80009c8 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <write4bits+0x4c>)
 80009a2:	6818      	ldr	r0, [r3, #0]
 80009a4:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <write4bits+0x50>)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80009ac:	79fa      	ldrb	r2, [r7, #7]
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	fa42 f303 	asr.w	r3, r2, r3
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	461a      	mov	r2, r3
 80009be:	f002 fd91 	bl	80034e4 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	3301      	adds	r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	dde8      	ble.n	80009a0 <write4bits+0x10>
  }

  pulseEnable();
 80009ce:	f7ff ffb5 	bl	800093c <pulseEnable>
}
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200000e8 	.word	0x200000e8
 80009e0:	200000f0 	.word	0x200000f0

080009e4 <write8bits>:

void write8bits(uint8_t value) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	e013      	b.n	8000a1c <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <write8bits+0x4c>)
 80009f6:	6818      	ldr	r0, [r3, #0]
 80009f8:	4a0e      	ldr	r2, [pc, #56]	; (8000a34 <write8bits+0x50>)
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000a00:	79fa      	ldrb	r2, [r7, #7]
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	fa42 f303 	asr.w	r3, r2, r3
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	461a      	mov	r2, r3
 8000a12:	f002 fd67 	bl	80034e4 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2b07      	cmp	r3, #7
 8000a20:	dde8      	ble.n	80009f4 <write8bits+0x10>
  }
  
  pulseEnable();
 8000a22:	f7ff ff8b 	bl	800093c <pulseEnable>
}
 8000a26:	bf00      	nop
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200000e8 	.word	0x200000e8
 8000a34:	200000f0 	.word	0x200000f0

08000a38 <warning>:
  0x1F,
  0x00,
  0x0A
};

void warning() {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	//LiquidCrystal(GPIOD, GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11, GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14);

	createChar(0, h);
 8000a3c:	491e      	ldr	r1, [pc, #120]	; (8000ab8 <warning+0x80>)
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f7ff fef7 	bl	8000832 <createChar>
	createChar(1, r);
 8000a44:	491d      	ldr	r1, [pc, #116]	; (8000abc <warning+0x84>)
 8000a46:	2001      	movs	r0, #1
 8000a48:	f7ff fef3 	bl	8000832 <createChar>
	createChar(2, ka);
 8000a4c:	491c      	ldr	r1, [pc, #112]	; (8000ac0 <warning+0x88>)
 8000a4e:	2002      	movs	r0, #2
 8000a50:	f7ff feef 	bl	8000832 <createChar>
	createChar(3, k);
 8000a54:	491b      	ldr	r1, [pc, #108]	; (8000ac4 <warning+0x8c>)
 8000a56:	2003      	movs	r0, #3
 8000a58:	f7ff feeb 	bl	8000832 <createChar>
	createChar(4, t);
 8000a5c:	491a      	ldr	r1, [pc, #104]	; (8000ac8 <warning+0x90>)
 8000a5e:	2004      	movs	r0, #4
 8000a60:	f7ff fee7 	bl	8000832 <createChar>

	createChar(5, d);
 8000a64:	4919      	ldr	r1, [pc, #100]	; (8000acc <warning+0x94>)
 8000a66:	2005      	movs	r0, #5
 8000a68:	f7ff fee3 	bl	8000832 <createChar>
	createChar(6, y);
 8000a6c:	4918      	ldr	r1, [pc, #96]	; (8000ad0 <warning+0x98>)
 8000a6e:	2006      	movs	r0, #6
 8000a70:	f7ff fedf 	bl	8000832 <createChar>
	createChar(7, d);
 8000a74:	4915      	ldr	r1, [pc, #84]	; (8000acc <warning+0x94>)
 8000a76:	2007      	movs	r0, #7
 8000a78:	f7ff fedb 	bl	8000832 <createChar>

	setCursor(6,1);
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	2006      	movs	r0, #6
 8000a80:	f7ff fe64 	bl	800074c <setCursor>
	write(7);
 8000a84:	2007      	movs	r0, #7
 8000a86:	f7ff ff0b 	bl	80008a0 <write>
	write(6);
 8000a8a:	2006      	movs	r0, #6
 8000a8c:	f7ff ff08 	bl	80008a0 <write>
	write(5);
 8000a90:	2005      	movs	r0, #5
 8000a92:	f7ff ff05 	bl	80008a0 <write>

	write(4);
 8000a96:	2004      	movs	r0, #4
 8000a98:	f7ff ff02 	bl	80008a0 <write>
	write(3);
 8000a9c:	2003      	movs	r0, #3
 8000a9e:	f7ff feff 	bl	80008a0 <write>
	write(2);
 8000aa2:	2002      	movs	r0, #2
 8000aa4:	f7ff fefc 	bl	80008a0 <write>
	write(1);
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f7ff fef9 	bl	80008a0 <write>
	write(0);
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f7ff fef6 	bl	80008a0 <write>
}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000004 	.word	0x20000004
 8000abc:	2000000c 	.word	0x2000000c
 8000ac0:	20000014 	.word	0x20000014
 8000ac4:	2000001c 	.word	0x2000001c
 8000ac8:	20000024 	.word	0x20000024
 8000acc:	2000002c 	.word	0x2000002c
 8000ad0:	20000034 	.word	0x20000034

08000ad4 <timeAndDate>:
RTC_DateTypeDef mydate;
RTC_TimeTypeDef mytime;

uint8_t Time[5];
uint8_t Date[9];
void timeAndDate() {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af04      	add	r7, sp, #16
	LiquidCrystal(GPIOD, GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11, GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14);
 8000ada:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ade:	9303      	str	r3, [sp, #12]
 8000ae0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ae4:	9302      	str	r3, [sp, #8]
 8000ae6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aea:	9301      	str	r3, [sp, #4]
 8000aec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000af0:	9300      	str	r3, [sp, #0]
 8000af2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000af6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000afa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000afe:	4811      	ldr	r0, [pc, #68]	; (8000b44 <timeAndDate+0x70>)
 8000b00:	f7ff fbbe 	bl	8000280 <LiquidCrystal>

	mytime.Hours=12;
 8000b04:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <timeAndDate+0x74>)
 8000b06:	220c      	movs	r2, #12
 8000b08:	701a      	strb	r2, [r3, #0]
	mytime.Minutes=8;
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <timeAndDate+0x74>)
 8000b0c:	2208      	movs	r2, #8
 8000b0e:	705a      	strb	r2, [r3, #1]
	mytime.Seconds=50;
 8000b10:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <timeAndDate+0x74>)
 8000b12:	2232      	movs	r2, #50	; 0x32
 8000b14:	709a      	strb	r2, [r3, #2]

	HAL_RTC_SetTime(&hrtc, &mytime, RTC_FORMAT_BIN);
 8000b16:	2200      	movs	r2, #0
 8000b18:	490b      	ldr	r1, [pc, #44]	; (8000b48 <timeAndDate+0x74>)
 8000b1a:	480c      	ldr	r0, [pc, #48]	; (8000b4c <timeAndDate+0x78>)
 8000b1c:	f004 fa51 	bl	8004fc2 <HAL_RTC_SetTime>

	mydate.Year=23;
 8000b20:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <timeAndDate+0x7c>)
 8000b22:	2217      	movs	r2, #23
 8000b24:	70da      	strb	r2, [r3, #3]
	mydate.Month=1;
 8000b26:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <timeAndDate+0x7c>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	705a      	strb	r2, [r3, #1]
	mydate.Date=7;
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <timeAndDate+0x7c>)
 8000b2e:	2207      	movs	r2, #7
 8000b30:	709a      	strb	r2, [r3, #2]

	HAL_RTC_SetDate(&hrtc, &mydate, RTC_FORMAT_BIN);
 8000b32:	2200      	movs	r2, #0
 8000b34:	4906      	ldr	r1, [pc, #24]	; (8000b50 <timeAndDate+0x7c>)
 8000b36:	4805      	ldr	r0, [pc, #20]	; (8000b4c <timeAndDate+0x78>)
 8000b38:	f004 fb5e 	bl	80051f8 <HAL_RTC_SetDate>

}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	48000c00 	.word	0x48000c00
 8000b48:	200005c4 	.word	0x200005c4
 8000b4c:	200001fc 	.word	0x200001fc
 8000b50:	2000021c 	.word	0x2000021c

08000b54 <get_time_date>:

void get_time_date() {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af02      	add	r7, sp, #8
	HAL_RTC_GetTime(&hrtc, &mytime, RTC_FORMAT_BIN);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	4918      	ldr	r1, [pc, #96]	; (8000bc0 <get_time_date+0x6c>)
 8000b5e:	4819      	ldr	r0, [pc, #100]	; (8000bc4 <get_time_date+0x70>)
 8000b60:	f004 faec 	bl	800513c <HAL_RTC_GetTime>
  	HAL_RTC_GetDate(&hrtc, &mydate, RTC_FORMAT_BIN);
 8000b64:	2200      	movs	r2, #0
 8000b66:	4918      	ldr	r1, [pc, #96]	; (8000bc8 <get_time_date+0x74>)
 8000b68:	4816      	ldr	r0, [pc, #88]	; (8000bc4 <get_time_date+0x70>)
 8000b6a:	f004 fbec 	bl	8005346 <HAL_RTC_GetDate>

  	setCursor(0,0);
 8000b6e:	2100      	movs	r1, #0
 8000b70:	2000      	movs	r0, #0
 8000b72:	f7ff fdeb 	bl	800074c <setCursor>
	sprintf(Time, "%2d:%2d:%2d ", mytime.Hours, mytime.Minutes, mytime.Seconds);
 8000b76:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <get_time_date+0x6c>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <get_time_date+0x6c>)
 8000b7e:	785b      	ldrb	r3, [r3, #1]
 8000b80:	4619      	mov	r1, r3
 8000b82:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <get_time_date+0x6c>)
 8000b84:	789b      	ldrb	r3, [r3, #2]
 8000b86:	9300      	str	r3, [sp, #0]
 8000b88:	460b      	mov	r3, r1
 8000b8a:	4910      	ldr	r1, [pc, #64]	; (8000bcc <get_time_date+0x78>)
 8000b8c:	4810      	ldr	r0, [pc, #64]	; (8000bd0 <get_time_date+0x7c>)
 8000b8e:	f005 fa75 	bl	800607c <siprintf>
	print(Time);
 8000b92:	480f      	ldr	r0, [pc, #60]	; (8000bd0 <get_time_date+0x7c>)
 8000b94:	f7ff fe22 	bl	80007dc <print>

	sprintf(Date, "20%d/%d/%d", mydate.Year, mydate.Month, mydate.Date);
 8000b98:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <get_time_date+0x74>)
 8000b9a:	78db      	ldrb	r3, [r3, #3]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <get_time_date+0x74>)
 8000ba0:	785b      	ldrb	r3, [r3, #1]
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <get_time_date+0x74>)
 8000ba6:	789b      	ldrb	r3, [r3, #2]
 8000ba8:	9300      	str	r3, [sp, #0]
 8000baa:	460b      	mov	r3, r1
 8000bac:	4909      	ldr	r1, [pc, #36]	; (8000bd4 <get_time_date+0x80>)
 8000bae:	480a      	ldr	r0, [pc, #40]	; (8000bd8 <get_time_date+0x84>)
 8000bb0:	f005 fa64 	bl	800607c <siprintf>
	print(Date);
 8000bb4:	4808      	ldr	r0, [pc, #32]	; (8000bd8 <get_time_date+0x84>)
 8000bb6:	f7ff fe11 	bl	80007dc <print>
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	200005c4 	.word	0x200005c4
 8000bc4:	200001fc 	.word	0x200001fc
 8000bc8:	2000021c 	.word	0x2000021c
 8000bcc:	080068f0 	.word	0x080068f0
 8000bd0:	200002d0 	.word	0x200002d0
 8000bd4:	08006900 	.word	0x08006900
 8000bd8:	200001a0 	.word	0x200001a0

08000bdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000be0:	f000 fe2a 	bl	8001838 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be4:	f000 f822 	bl	8000c2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be8:	f000 fa92 	bl	8001110 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000bec:	f000 f8f8 	bl	8000de0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000bf0:	f000 f990 	bl	8000f14 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000bf4:	f000 fa6a 	bl	80010cc <MX_USB_PCD_Init>
  MX_ADC1_Init();
 8000bf8:	f000 f882 	bl	8000d00 <MX_ADC1_Init>
  MX_RTC_Init();
 8000bfc:	f000 f930 	bl	8000e60 <MX_RTC_Init>
  MX_TIM2_Init();
 8000c00:	f000 f9c6 	bl	8000f90 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c04:	f000 fa12 	bl	800102c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  timeAndDate();
 8000c08:	f7ff ff64 	bl	8000ad4 <timeAndDate>

  HAL_TIM_Base_Start_IT(&htim2);
 8000c0c:	4804      	ldr	r0, [pc, #16]	; (8000c20 <main+0x44>)
 8000c0e:	f004 fd7b 	bl	8005708 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_IT(&hadc1);
 8000c12:	4804      	ldr	r0, [pc, #16]	; (8000c24 <main+0x48>)
 8000c14:	f001 f898 	bl	8001d48 <HAL_ADC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000c18:	4803      	ldr	r0, [pc, #12]	; (8000c28 <main+0x4c>)
 8000c1a:	f004 fd75 	bl	8005708 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <main+0x42>
 8000c20:	20000284 	.word	0x20000284
 8000c24:	200001ac 	.word	0x200001ac
 8000c28:	20000154 	.word	0x20000154

08000c2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b09e      	sub	sp, #120	; 0x78
 8000c30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c32:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c36:	2228      	movs	r2, #40	; 0x28
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f005 fa16 	bl	800606c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c40:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c50:	463b      	mov	r3, r7
 8000c52:	223c      	movs	r2, #60	; 0x3c
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f005 fa08 	bl	800606c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000c5c:	230b      	movs	r3, #11
 8000c5e:	653b      	str	r3, [r7, #80]	; 0x50
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c60:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c64:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c66:	2300      	movs	r3, #0
 8000c68:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c6e:	2310      	movs	r3, #16
 8000c70:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c72:	2301      	movs	r3, #1
 8000c74:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c76:	2302      	movs	r3, #2
 8000c78:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c7e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000c80:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c84:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c86:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f002 fe6a 	bl	8003964 <HAL_RCC_OscConfig>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c96:	f000 fad7 	bl	8001248 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c9a:	230f      	movs	r3, #15
 8000c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ca6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000caa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cac:	2300      	movs	r3, #0
 8000cae:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000cb0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f003 fd5c 	bl	8004774 <HAL_RCC_ClockConfig>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000cc2:	f000 fac1 	bl	8001248 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 8000cc6:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <SystemClock_Config+0xd0>)
 8000cc8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000cca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000cd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cd8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000cda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cde:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f003 ff2c 	bl	8004b40 <HAL_RCCEx_PeriphCLKConfig>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000cee:	f000 faab 	bl	8001248 <Error_Handler>
  }
}
 8000cf2:	bf00      	nop
 8000cf4:	3778      	adds	r7, #120	; 0x78
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	000300a0 	.word	0x000300a0

08000d00 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	; 0x28
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d06:	f107 031c 	add.w	r3, r7, #28
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
 8000d20:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d22:	4b2e      	ldr	r3, [pc, #184]	; (8000ddc <MX_ADC1_Init+0xdc>)
 8000d24:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d28:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d2a:	4b2c      	ldr	r3, [pc, #176]	; (8000ddc <MX_ADC1_Init+0xdc>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d30:	4b2a      	ldr	r3, [pc, #168]	; (8000ddc <MX_ADC1_Init+0xdc>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d36:	4b29      	ldr	r3, [pc, #164]	; (8000ddc <MX_ADC1_Init+0xdc>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d3c:	4b27      	ldr	r3, [pc, #156]	; (8000ddc <MX_ADC1_Init+0xdc>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d42:	4b26      	ldr	r3, [pc, #152]	; (8000ddc <MX_ADC1_Init+0xdc>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d4a:	4b24      	ldr	r3, [pc, #144]	; (8000ddc <MX_ADC1_Init+0xdc>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d50:	4b22      	ldr	r3, [pc, #136]	; (8000ddc <MX_ADC1_Init+0xdc>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d56:	4b21      	ldr	r3, [pc, #132]	; (8000ddc <MX_ADC1_Init+0xdc>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d5c:	4b1f      	ldr	r3, [pc, #124]	; (8000ddc <MX_ADC1_Init+0xdc>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d62:	4b1e      	ldr	r3, [pc, #120]	; (8000ddc <MX_ADC1_Init+0xdc>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d6a:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <MX_ADC1_Init+0xdc>)
 8000d6c:	2204      	movs	r2, #4
 8000d6e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d70:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <MX_ADC1_Init+0xdc>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d76:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <MX_ADC1_Init+0xdc>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d7c:	4817      	ldr	r0, [pc, #92]	; (8000ddc <MX_ADC1_Init+0xdc>)
 8000d7e:	f000 fe03 	bl	8001988 <HAL_ADC_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000d88:	f000 fa5e 	bl	8001248 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d90:	f107 031c 	add.w	r3, r7, #28
 8000d94:	4619      	mov	r1, r3
 8000d96:	4811      	ldr	r0, [pc, #68]	; (8000ddc <MX_ADC1_Init+0xdc>)
 8000d98:	f001 ff44 	bl	8002c24 <HAL_ADCEx_MultiModeConfigChannel>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000da2:	f000 fa51 	bl	8001248 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000da6:	2302      	movs	r3, #2
 8000da8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000daa:	2301      	movs	r3, #1
 8000dac:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000db2:	2307      	movs	r3, #7
 8000db4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4806      	ldr	r0, [pc, #24]	; (8000ddc <MX_ADC1_Init+0xdc>)
 8000dc4:	f001 fc42 	bl	800264c <HAL_ADC_ConfigChannel>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000dce:	f000 fa3b 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	3728      	adds	r7, #40	; 0x28
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200001ac 	.word	0x200001ac

08000de0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000de4:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000de6:	4a1c      	ldr	r2, [pc, #112]	; (8000e58 <MX_I2C1_Init+0x78>)
 8000de8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000dea:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000dec:	4a1b      	ldr	r2, [pc, #108]	; (8000e5c <MX_I2C1_Init+0x7c>)
 8000dee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000df0:	4b18      	ldr	r3, [pc, #96]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000df6:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dfc:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e02:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e14:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e1a:	480e      	ldr	r0, [pc, #56]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000e1c:	f002 fb9d 	bl	800355a <HAL_I2C_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e26:	f000 fa0f 	bl	8001248 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4809      	ldr	r0, [pc, #36]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000e2e:	f002 fc23 	bl	8003678 <HAL_I2CEx_ConfigAnalogFilter>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e38:	f000 fa06 	bl	8001248 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <MX_I2C1_Init+0x74>)
 8000e40:	f002 fc65 	bl	800370e <HAL_I2CEx_ConfigDigitalFilter>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e4a:	f000 f9fd 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000108 	.word	0x20000108
 8000e58:	40005400 	.word	0x40005400
 8000e5c:	2000090e 	.word	0x2000090e

08000e60 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e74:	2300      	movs	r3, #0
 8000e76:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e78:	4b24      	ldr	r3, [pc, #144]	; (8000f0c <MX_RTC_Init+0xac>)
 8000e7a:	4a25      	ldr	r2, [pc, #148]	; (8000f10 <MX_RTC_Init+0xb0>)
 8000e7c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e7e:	4b23      	ldr	r3, [pc, #140]	; (8000f0c <MX_RTC_Init+0xac>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 39;
 8000e84:	4b21      	ldr	r3, [pc, #132]	; (8000f0c <MX_RTC_Init+0xac>)
 8000e86:	2227      	movs	r2, #39	; 0x27
 8000e88:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 999;
 8000e8a:	4b20      	ldr	r3, [pc, #128]	; (8000f0c <MX_RTC_Init+0xac>)
 8000e8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e90:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e92:	4b1e      	ldr	r3, [pc, #120]	; (8000f0c <MX_RTC_Init+0xac>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e98:	4b1c      	ldr	r3, [pc, #112]	; (8000f0c <MX_RTC_Init+0xac>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e9e:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <MX_RTC_Init+0xac>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ea4:	4819      	ldr	r0, [pc, #100]	; (8000f0c <MX_RTC_Init+0xac>)
 8000ea6:	f003 fffb 	bl	8004ea0 <HAL_RTC_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000eb0:	f000 f9ca 	bl	8001248 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	2201      	movs	r2, #1
 8000ecc:	4619      	mov	r1, r3
 8000ece:	480f      	ldr	r0, [pc, #60]	; (8000f0c <MX_RTC_Init+0xac>)
 8000ed0:	f004 f877 	bl	8004fc2 <HAL_RTC_SetTime>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8000eda:	f000 f9b5 	bl	8001248 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000eee:	463b      	mov	r3, r7
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4805      	ldr	r0, [pc, #20]	; (8000f0c <MX_RTC_Init+0xac>)
 8000ef6:	f004 f97f 	bl	80051f8 <HAL_RTC_SetDate>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8000f00:	f000 f9a2 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f04:	bf00      	nop
 8000f06:	3718      	adds	r7, #24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	200001fc 	.word	0x200001fc
 8000f10:	40002800 	.word	0x40002800

08000f14 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f18:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f1a:	4a1c      	ldr	r2, [pc, #112]	; (8000f8c <MX_SPI1_Init+0x78>)
 8000f1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f1e:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f26:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f2c:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f2e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000f32:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f34:	4b14      	ldr	r3, [pc, #80]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f3a:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f46:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000f48:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f4a:	2208      	movs	r2, #8
 8000f4c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f60:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f62:	2207      	movs	r2, #7
 8000f64:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f66:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f6e:	2208      	movs	r2, #8
 8000f70:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f72:	4805      	ldr	r0, [pc, #20]	; (8000f88 <MX_SPI1_Init+0x74>)
 8000f74:	f004 fac6 	bl	8005504 <HAL_SPI_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f7e:	f000 f963 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000220 	.word	0x20000220
 8000f8c:	40013000 	.word	0x40013000

08000f90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f96:	f107 0310 	add.w	r3, r7, #16
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fae:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <MX_TIM2_Init+0x98>)
 8000fb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fb4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4799;
 8000fb6:	4b1c      	ldr	r3, [pc, #112]	; (8001028 <MX_TIM2_Init+0x98>)
 8000fb8:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000fbc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fbe:	4b1a      	ldr	r3, [pc, #104]	; (8001028 <MX_TIM2_Init+0x98>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000fc4:	4b18      	ldr	r3, [pc, #96]	; (8001028 <MX_TIM2_Init+0x98>)
 8000fc6:	f242 720f 	movw	r2, #9999	; 0x270f
 8000fca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fcc:	4b16      	ldr	r3, [pc, #88]	; (8001028 <MX_TIM2_Init+0x98>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <MX_TIM2_Init+0x98>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fd8:	4813      	ldr	r0, [pc, #76]	; (8001028 <MX_TIM2_Init+0x98>)
 8000fda:	f004 fb3e 	bl	800565a <HAL_TIM_Base_Init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000fe4:	f000 f930 	bl	8001248 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fee:	f107 0310 	add.w	r3, r7, #16
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	480c      	ldr	r0, [pc, #48]	; (8001028 <MX_TIM2_Init+0x98>)
 8000ff6:	f004 fd10 	bl	8005a1a <HAL_TIM_ConfigClockSource>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001000:	f000 f922 	bl	8001248 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001004:	2300      	movs	r3, #0
 8001006:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	4619      	mov	r1, r3
 8001010:	4805      	ldr	r0, [pc, #20]	; (8001028 <MX_TIM2_Init+0x98>)
 8001012:	f004 ff27 	bl	8005e64 <HAL_TIMEx_MasterConfigSynchronization>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800101c:	f000 f914 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001020:	bf00      	nop
 8001022:	3720      	adds	r7, #32
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000284 	.word	0x20000284

0800102c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001032:	f107 0310 	add.w	r3, r7, #16
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800104a:	4b1e      	ldr	r3, [pc, #120]	; (80010c4 <MX_TIM3_Init+0x98>)
 800104c:	4a1e      	ldr	r2, [pc, #120]	; (80010c8 <MX_TIM3_Init+0x9c>)
 800104e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9599;
 8001050:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <MX_TIM3_Init+0x98>)
 8001052:	f242 527f 	movw	r2, #9599	; 0x257f
 8001056:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001058:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <MX_TIM3_Init+0x98>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 800105e:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <MX_TIM3_Init+0x98>)
 8001060:	f242 720f 	movw	r2, #9999	; 0x270f
 8001064:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <MX_TIM3_Init+0x98>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800106c:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <MX_TIM3_Init+0x98>)
 800106e:	2200      	movs	r2, #0
 8001070:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001072:	4814      	ldr	r0, [pc, #80]	; (80010c4 <MX_TIM3_Init+0x98>)
 8001074:	f004 faf1 	bl	800565a <HAL_TIM_Base_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800107e:	f000 f8e3 	bl	8001248 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001086:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001088:	f107 0310 	add.w	r3, r7, #16
 800108c:	4619      	mov	r1, r3
 800108e:	480d      	ldr	r0, [pc, #52]	; (80010c4 <MX_TIM3_Init+0x98>)
 8001090:	f004 fcc3 	bl	8005a1a <HAL_TIM_ConfigClockSource>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800109a:	f000 f8d5 	bl	8001248 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	4619      	mov	r1, r3
 80010aa:	4806      	ldr	r0, [pc, #24]	; (80010c4 <MX_TIM3_Init+0x98>)
 80010ac:	f004 feda 	bl	8005e64 <HAL_TIMEx_MasterConfigSynchronization>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80010b6:	f000 f8c7 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	3720      	adds	r7, #32
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000154 	.word	0x20000154
 80010c8:	40000400 	.word	0x40000400

080010cc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80010d0:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <MX_USB_PCD_Init+0x3c>)
 80010d2:	4a0e      	ldr	r2, [pc, #56]	; (800110c <MX_USB_PCD_Init+0x40>)
 80010d4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80010d6:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <MX_USB_PCD_Init+0x3c>)
 80010d8:	2208      	movs	r2, #8
 80010da:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80010dc:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <MX_USB_PCD_Init+0x3c>)
 80010de:	2202      	movs	r2, #2
 80010e0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <MX_USB_PCD_Init+0x3c>)
 80010e4:	2202      	movs	r2, #2
 80010e6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80010e8:	4b07      	ldr	r3, [pc, #28]	; (8001108 <MX_USB_PCD_Init+0x3c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <MX_USB_PCD_Init+0x3c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80010f4:	4804      	ldr	r0, [pc, #16]	; (8001108 <MX_USB_PCD_Init+0x3c>)
 80010f6:	f002 fb56 	bl	80037a6 <HAL_PCD_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001100:	f000 f8a2 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	200002d8 	.word	0x200002d8
 800110c:	40005c00 	.word	0x40005c00

08001110 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08a      	sub	sp, #40	; 0x28
 8001114:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
 8001124:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001126:	4b45      	ldr	r3, [pc, #276]	; (800123c <MX_GPIO_Init+0x12c>)
 8001128:	695b      	ldr	r3, [r3, #20]
 800112a:	4a44      	ldr	r2, [pc, #272]	; (800123c <MX_GPIO_Init+0x12c>)
 800112c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001130:	6153      	str	r3, [r2, #20]
 8001132:	4b42      	ldr	r3, [pc, #264]	; (800123c <MX_GPIO_Init+0x12c>)
 8001134:	695b      	ldr	r3, [r3, #20]
 8001136:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800113e:	4b3f      	ldr	r3, [pc, #252]	; (800123c <MX_GPIO_Init+0x12c>)
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	4a3e      	ldr	r2, [pc, #248]	; (800123c <MX_GPIO_Init+0x12c>)
 8001144:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001148:	6153      	str	r3, [r2, #20]
 800114a:	4b3c      	ldr	r3, [pc, #240]	; (800123c <MX_GPIO_Init+0x12c>)
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001156:	4b39      	ldr	r3, [pc, #228]	; (800123c <MX_GPIO_Init+0x12c>)
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	4a38      	ldr	r2, [pc, #224]	; (800123c <MX_GPIO_Init+0x12c>)
 800115c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001160:	6153      	str	r3, [r2, #20]
 8001162:	4b36      	ldr	r3, [pc, #216]	; (800123c <MX_GPIO_Init+0x12c>)
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	4b33      	ldr	r3, [pc, #204]	; (800123c <MX_GPIO_Init+0x12c>)
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	4a32      	ldr	r2, [pc, #200]	; (800123c <MX_GPIO_Init+0x12c>)
 8001174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001178:	6153      	str	r3, [r2, #20]
 800117a:	4b30      	ldr	r3, [pc, #192]	; (800123c <MX_GPIO_Init+0x12c>)
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001186:	4b2d      	ldr	r3, [pc, #180]	; (800123c <MX_GPIO_Init+0x12c>)
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	4a2c      	ldr	r2, [pc, #176]	; (800123c <MX_GPIO_Init+0x12c>)
 800118c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001190:	6153      	str	r3, [r2, #20]
 8001192:	4b2a      	ldr	r3, [pc, #168]	; (800123c <MX_GPIO_Init+0x12c>)
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800119a:	603b      	str	r3, [r7, #0]
 800119c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800119e:	2200      	movs	r2, #0
 80011a0:	f64f 7108 	movw	r1, #65288	; 0xff08
 80011a4:	4826      	ldr	r0, [pc, #152]	; (8001240 <MX_GPIO_Init+0x130>)
 80011a6:	f002 f99d 	bl	80034e4 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 80011aa:	2201      	movs	r2, #1
 80011ac:	2140      	movs	r1, #64	; 0x40
 80011ae:	4825      	ldr	r0, [pc, #148]	; (8001244 <MX_GPIO_Init+0x134>)
 80011b0:	f002 f998 	bl	80034e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT2_Pin;
 80011b4:	2336      	movs	r3, #54	; 0x36
 80011b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80011b8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80011bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011c2:	f107 0314 	add.w	r3, r7, #20
 80011c6:	4619      	mov	r1, r3
 80011c8:	481d      	ldr	r0, [pc, #116]	; (8001240 <MX_GPIO_Init+0x130>)
 80011ca:	f001 fff9 	bl	80031c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80011ce:	f64f 7308 	movw	r3, #65288	; 0xff08
 80011d2:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d4:	2301      	movs	r3, #1
 80011d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2300      	movs	r3, #0
 80011de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	4619      	mov	r1, r3
 80011e6:	4816      	ldr	r0, [pc, #88]	; (8001240 <MX_GPIO_Init+0x130>)
 80011e8:	f001 ffea 	bl	80031c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011ec:	2301      	movs	r3, #1
 80011ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011f6:	2302      	movs	r3, #2
 80011f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fa:	f107 0314 	add.w	r3, r7, #20
 80011fe:	4619      	mov	r1, r3
 8001200:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001204:	f001 ffdc 	bl	80031c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001208:	2340      	movs	r3, #64	; 0x40
 800120a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120c:	2301      	movs	r3, #1
 800120e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001210:	2302      	movs	r3, #2
 8001212:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001214:	2303      	movs	r3, #3
 8001216:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	4619      	mov	r1, r3
 800121e:	4809      	ldr	r0, [pc, #36]	; (8001244 <MX_GPIO_Init+0x134>)
 8001220:	f001 ffce 	bl	80031c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8001224:	2200      	movs	r2, #0
 8001226:	2101      	movs	r1, #1
 8001228:	2006      	movs	r0, #6
 800122a:	f001 ff92 	bl	8003152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800122e:	2006      	movs	r0, #6
 8001230:	f001 ffab 	bl	800318a <HAL_NVIC_EnableIRQ>

}
 8001234:	bf00      	nop
 8001236:	3728      	adds	r7, #40	; 0x28
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40021000 	.word	0x40021000
 8001240:	48001000 	.word	0x48001000
 8001244:	48000800 	.word	0x48000800

08001248 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800124c:	b672      	cpsid	i
}
 800124e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001250:	e7fe      	b.n	8001250 <Error_Handler+0x8>
	...

08001254 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125a:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <HAL_MspInit+0x44>)
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	4a0e      	ldr	r2, [pc, #56]	; (8001298 <HAL_MspInit+0x44>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6193      	str	r3, [r2, #24]
 8001266:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <HAL_MspInit+0x44>)
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <HAL_MspInit+0x44>)
 8001274:	69db      	ldr	r3, [r3, #28]
 8001276:	4a08      	ldr	r2, [pc, #32]	; (8001298 <HAL_MspInit+0x44>)
 8001278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800127c:	61d3      	str	r3, [r2, #28]
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_MspInit+0x44>)
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 800128a:	2006      	movs	r0, #6
 800128c:	f001 ff56 	bl	800313c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40021000 	.word	0x40021000

0800129c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012bc:	d12c      	bne.n	8001318 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80012be:	4b18      	ldr	r3, [pc, #96]	; (8001320 <HAL_ADC_MspInit+0x84>)
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	4a17      	ldr	r2, [pc, #92]	; (8001320 <HAL_ADC_MspInit+0x84>)
 80012c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c8:	6153      	str	r3, [r2, #20]
 80012ca:	4b15      	ldr	r3, [pc, #84]	; (8001320 <HAL_ADC_MspInit+0x84>)
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d6:	4b12      	ldr	r3, [pc, #72]	; (8001320 <HAL_ADC_MspInit+0x84>)
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	4a11      	ldr	r2, [pc, #68]	; (8001320 <HAL_ADC_MspInit+0x84>)
 80012dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e0:	6153      	str	r3, [r2, #20]
 80012e2:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <HAL_ADC_MspInit+0x84>)
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012ee:	2302      	movs	r3, #2
 80012f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012f2:	2303      	movs	r3, #3
 80012f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	4619      	mov	r1, r3
 8001300:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001304:	f001 ff5c 	bl	80031c0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8001308:	2200      	movs	r2, #0
 800130a:	2101      	movs	r1, #1
 800130c:	2012      	movs	r0, #18
 800130e:	f001 ff20 	bl	8003152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001312:	2012      	movs	r0, #18
 8001314:	f001 ff39 	bl	800318a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001318:	bf00      	nop
 800131a:	3728      	adds	r7, #40	; 0x28
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40021000 	.word	0x40021000

08001324 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08a      	sub	sp, #40	; 0x28
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a17      	ldr	r2, [pc, #92]	; (80013a0 <HAL_I2C_MspInit+0x7c>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d127      	bne.n	8001396 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001346:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <HAL_I2C_MspInit+0x80>)
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	4a16      	ldr	r2, [pc, #88]	; (80013a4 <HAL_I2C_MspInit+0x80>)
 800134c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001350:	6153      	str	r3, [r2, #20]
 8001352:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <HAL_I2C_MspInit+0x80>)
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800135e:	23c0      	movs	r3, #192	; 0xc0
 8001360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001362:	2312      	movs	r3, #18
 8001364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001366:	2301      	movs	r3, #1
 8001368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800136a:	2303      	movs	r3, #3
 800136c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800136e:	2304      	movs	r3, #4
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001372:	f107 0314 	add.w	r3, r7, #20
 8001376:	4619      	mov	r1, r3
 8001378:	480b      	ldr	r0, [pc, #44]	; (80013a8 <HAL_I2C_MspInit+0x84>)
 800137a:	f001 ff21 	bl	80031c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <HAL_I2C_MspInit+0x80>)
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	4a08      	ldr	r2, [pc, #32]	; (80013a4 <HAL_I2C_MspInit+0x80>)
 8001384:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001388:	61d3      	str	r3, [r2, #28]
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <HAL_I2C_MspInit+0x80>)
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001396:	bf00      	nop
 8001398:	3728      	adds	r7, #40	; 0x28
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40005400 	.word	0x40005400
 80013a4:	40021000 	.word	0x40021000
 80013a8:	48000400 	.word	0x48000400

080013ac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a0d      	ldr	r2, [pc, #52]	; (80013f0 <HAL_RTC_MspInit+0x44>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d111      	bne.n	80013e2 <HAL_RTC_MspInit+0x36>
 80013be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013c2:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	fa93 f3a3 	rbit	r3, r3
 80013ca:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80013cc:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80013ce:	fab3 f383 	clz	r3, r3
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	461a      	mov	r2, r3
 80013d6:	4b07      	ldr	r3, [pc, #28]	; (80013f4 <HAL_RTC_MspInit+0x48>)
 80013d8:	4413      	add	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	461a      	mov	r2, r3
 80013de:	2301      	movs	r3, #1
 80013e0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80013e2:	bf00      	nop
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40002800 	.word	0x40002800
 80013f4:	10908100 	.word	0x10908100

080013f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	; 0x28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a17      	ldr	r2, [pc, #92]	; (8001474 <HAL_SPI_MspInit+0x7c>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d128      	bne.n	800146c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800141a:	4b17      	ldr	r3, [pc, #92]	; (8001478 <HAL_SPI_MspInit+0x80>)
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	4a16      	ldr	r2, [pc, #88]	; (8001478 <HAL_SPI_MspInit+0x80>)
 8001420:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001424:	6193      	str	r3, [r2, #24]
 8001426:	4b14      	ldr	r3, [pc, #80]	; (8001478 <HAL_SPI_MspInit+0x80>)
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	4b11      	ldr	r3, [pc, #68]	; (8001478 <HAL_SPI_MspInit+0x80>)
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	4a10      	ldr	r2, [pc, #64]	; (8001478 <HAL_SPI_MspInit+0x80>)
 8001438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800143c:	6153      	str	r3, [r2, #20]
 800143e:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <HAL_SPI_MspInit+0x80>)
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800144a:	23e0      	movs	r3, #224	; 0xe0
 800144c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	2302      	movs	r3, #2
 8001450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001456:	2303      	movs	r3, #3
 8001458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800145a:	2305      	movs	r3, #5
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	4619      	mov	r1, r3
 8001464:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001468:	f001 feaa 	bl	80031c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800146c:	bf00      	nop
 800146e:	3728      	adds	r7, #40	; 0x28
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40013000 	.word	0x40013000
 8001478:	40021000 	.word	0x40021000

0800147c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800148c:	d114      	bne.n	80014b8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800148e:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <HAL_TIM_Base_MspInit+0x78>)
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	4a18      	ldr	r2, [pc, #96]	; (80014f4 <HAL_TIM_Base_MspInit+0x78>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	61d3      	str	r3, [r2, #28]
 800149a:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <HAL_TIM_Base_MspInit+0x78>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2101      	movs	r1, #1
 80014aa:	201c      	movs	r0, #28
 80014ac:	f001 fe51 	bl	8003152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014b0:	201c      	movs	r0, #28
 80014b2:	f001 fe6a 	bl	800318a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014b6:	e018      	b.n	80014ea <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a0e      	ldr	r2, [pc, #56]	; (80014f8 <HAL_TIM_Base_MspInit+0x7c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d113      	bne.n	80014ea <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014c2:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <HAL_TIM_Base_MspInit+0x78>)
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	4a0b      	ldr	r2, [pc, #44]	; (80014f4 <HAL_TIM_Base_MspInit+0x78>)
 80014c8:	f043 0302 	orr.w	r3, r3, #2
 80014cc:	61d3      	str	r3, [r2, #28]
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <HAL_TIM_Base_MspInit+0x78>)
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80014da:	2200      	movs	r2, #0
 80014dc:	2100      	movs	r1, #0
 80014de:	201d      	movs	r0, #29
 80014e0:	f001 fe37 	bl	8003152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80014e4:	201d      	movs	r0, #29
 80014e6:	f001 fe50 	bl	800318a <HAL_NVIC_EnableIRQ>
}
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40021000 	.word	0x40021000
 80014f8:	40000400 	.word	0x40000400

080014fc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	; 0x28
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a18      	ldr	r2, [pc, #96]	; (800157c <HAL_PCD_MspInit+0x80>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d129      	bne.n	8001572 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151e:	4b18      	ldr	r3, [pc, #96]	; (8001580 <HAL_PCD_MspInit+0x84>)
 8001520:	695b      	ldr	r3, [r3, #20]
 8001522:	4a17      	ldr	r2, [pc, #92]	; (8001580 <HAL_PCD_MspInit+0x84>)
 8001524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001528:	6153      	str	r3, [r2, #20]
 800152a:	4b15      	ldr	r3, [pc, #84]	; (8001580 <HAL_PCD_MspInit+0x84>)
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001536:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800153a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153c:	2302      	movs	r3, #2
 800153e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001544:	2303      	movs	r3, #3
 8001546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001548:	230e      	movs	r3, #14
 800154a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	4619      	mov	r1, r3
 8001552:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001556:	f001 fe33 	bl	80031c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <HAL_PCD_MspInit+0x84>)
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	4a08      	ldr	r2, [pc, #32]	; (8001580 <HAL_PCD_MspInit+0x84>)
 8001560:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001564:	61d3      	str	r3, [r2, #28]
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_PCD_MspInit+0x84>)
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001572:	bf00      	nop
 8001574:	3728      	adds	r7, #40	; 0x28
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40005c00 	.word	0x40005c00
 8001580:	40021000 	.word	0x40021000

08001584 <motionDetection>:

int firstSec = 0;
int Sec = 0;
int led = 0;

void motionDetection(int move) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af02      	add	r7, sp, #8
 800158a:	6078      	str	r0, [r7, #4]
	if ( move > 0 ) {
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	dd36      	ble.n	8001600 <motionDetection+0x7c>
		HAL_RTC_GetTime(&hrtc, &mytime, RTC_FORMAT_BIN);
 8001592:	2200      	movs	r2, #0
 8001594:	491c      	ldr	r1, [pc, #112]	; (8001608 <motionDetection+0x84>)
 8001596:	481d      	ldr	r0, [pc, #116]	; (800160c <motionDetection+0x88>)
 8001598:	f003 fdd0 	bl	800513c <HAL_RTC_GetTime>
	  	HAL_RTC_GetDate(&hrtc, &mydate, RTC_FORMAT_BIN);
 800159c:	2200      	movs	r2, #0
 800159e:	491c      	ldr	r1, [pc, #112]	; (8001610 <motionDetection+0x8c>)
 80015a0:	481a      	ldr	r0, [pc, #104]	; (800160c <motionDetection+0x88>)
 80015a2:	f003 fed0 	bl	8005346 <HAL_RTC_GetDate>

	  	setCursor(20,1);
 80015a6:	2101      	movs	r1, #1
 80015a8:	2014      	movs	r0, #20
 80015aa:	f7ff f8cf 	bl	800074c <setCursor>
		sprintf(Time, "%2d:%2d:%2d ", mytime.Hours, mytime.Minutes, mytime.Seconds);
 80015ae:	4b16      	ldr	r3, [pc, #88]	; (8001608 <motionDetection+0x84>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	461a      	mov	r2, r3
 80015b4:	4b14      	ldr	r3, [pc, #80]	; (8001608 <motionDetection+0x84>)
 80015b6:	785b      	ldrb	r3, [r3, #1]
 80015b8:	4619      	mov	r1, r3
 80015ba:	4b13      	ldr	r3, [pc, #76]	; (8001608 <motionDetection+0x84>)
 80015bc:	789b      	ldrb	r3, [r3, #2]
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	460b      	mov	r3, r1
 80015c2:	4914      	ldr	r1, [pc, #80]	; (8001614 <motionDetection+0x90>)
 80015c4:	4814      	ldr	r0, [pc, #80]	; (8001618 <motionDetection+0x94>)
 80015c6:	f004 fd59 	bl	800607c <siprintf>
		print(Time);
 80015ca:	4813      	ldr	r0, [pc, #76]	; (8001618 <motionDetection+0x94>)
 80015cc:	f7ff f906 	bl	80007dc <print>

		sprintf(Date, "20%d/%d/%d", mydate.Year, mydate.Month, mydate.Date);
 80015d0:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <motionDetection+0x8c>)
 80015d2:	78db      	ldrb	r3, [r3, #3]
 80015d4:	461a      	mov	r2, r3
 80015d6:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <motionDetection+0x8c>)
 80015d8:	785b      	ldrb	r3, [r3, #1]
 80015da:	4619      	mov	r1, r3
 80015dc:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <motionDetection+0x8c>)
 80015de:	789b      	ldrb	r3, [r3, #2]
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	460b      	mov	r3, r1
 80015e4:	490d      	ldr	r1, [pc, #52]	; (800161c <motionDetection+0x98>)
 80015e6:	480e      	ldr	r0, [pc, #56]	; (8001620 <motionDetection+0x9c>)
 80015e8:	f004 fd48 	bl	800607c <siprintf>
		print(Date);
 80015ec:	480c      	ldr	r0, [pc, #48]	; (8001620 <motionDetection+0x9c>)
 80015ee:	f7ff f8f5 	bl	80007dc <print>

		warning();
 80015f2:	f7ff fa21 	bl	8000a38 <warning>

		move = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	607b      	str	r3, [r7, #4]
		led = 1;
 80015fa:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <motionDetection+0xa0>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	601a      	str	r2, [r3, #0]
	}
}
 8001600:	bf00      	nop
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	200005c4 	.word	0x200005c4
 800160c:	200001fc 	.word	0x200001fc
 8001610:	2000021c 	.word	0x2000021c
 8001614:	0800690c 	.word	0x0800690c
 8001618:	200002d0 	.word	0x200002d0
 800161c:	0800691c 	.word	0x0800691c
 8001620:	200001a0 	.word	0x200001a0
 8001624:	200000d0 	.word	0x200000d0

08001628 <changeLED>:

void changeLED() {
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0

	if( led == 1 ) {
 800162c:	4b0b      	ldr	r3, [pc, #44]	; (800165c <changeLED+0x34>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d108      	bne.n	8001646 <changeLED+0x1e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);
 8001634:	2200      	movs	r2, #0
 8001636:	2140      	movs	r1, #64	; 0x40
 8001638:	4809      	ldr	r0, [pc, #36]	; (8001660 <changeLED+0x38>)
 800163a:	f001 ff53 	bl	80034e4 <HAL_GPIO_WritePin>
		led = 0;
 800163e:	4b07      	ldr	r3, [pc, #28]	; (800165c <changeLED+0x34>)
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
	} else if (led == 0 ){
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);
	}

}
 8001644:	e008      	b.n	8001658 <changeLED+0x30>
	} else if (led == 0 ){
 8001646:	4b05      	ldr	r3, [pc, #20]	; (800165c <changeLED+0x34>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d104      	bne.n	8001658 <changeLED+0x30>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);
 800164e:	2201      	movs	r2, #1
 8001650:	2140      	movs	r1, #64	; 0x40
 8001652:	4803      	ldr	r0, [pc, #12]	; (8001660 <changeLED+0x38>)
 8001654:	f001 ff46 	bl	80034e4 <HAL_GPIO_WritePin>
}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}
 800165c:	200000d0 	.word	0x200000d0
 8001660:	48000800 	.word	0x48000800

08001664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <NMI_Handler+0x4>

0800166a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800166e:	e7fe      	b.n	800166e <HardFault_Handler+0x4>

08001670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001674:	e7fe      	b.n	8001674 <MemManage_Handler+0x4>

08001676 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800167a:	e7fe      	b.n	800167a <BusFault_Handler+0x4>

0800167c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001680:	e7fe      	b.n	8001680 <UsageFault_Handler+0x4>

08001682 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016b0:	f000 f908 	bl	80018c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	 if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 80016bc:	2101      	movs	r1, #1
 80016be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c2:	f001 fef7 	bl	80034b4 <HAL_GPIO_ReadPin>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d006      	beq.n	80016da <EXTI0_IRQHandler+0x22>
		 setCursor(0,1);
 80016cc:	2101      	movs	r1, #1
 80016ce:	2000      	movs	r0, #0
 80016d0:	f7ff f83c 	bl	800074c <setCursor>
		 print("                                                                      ");
 80016d4:	4803      	ldr	r0, [pc, #12]	; (80016e4 <EXTI0_IRQHandler+0x2c>)
 80016d6:	f7ff f881 	bl	80007dc <print>
	 }

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80016da:	2001      	movs	r0, #1
 80016dc:	f001 ff1a 	bl	8003514 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	08006928 	.word	0x08006928

080016e8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80016ec:	480b      	ldr	r0, [pc, #44]	; (800171c <ADC1_2_IRQHandler+0x34>)
 80016ee:	f000 fc79 	bl	8001fe4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  	move = HAL_ADC_GetValue(&hadc1);
 80016f2:	480a      	ldr	r0, [pc, #40]	; (800171c <ADC1_2_IRQHandler+0x34>)
 80016f4:	f000 fc68 	bl	8001fc8 <HAL_ADC_GetValue>
 80016f8:	4603      	mov	r3, r0
 80016fa:	461a      	mov	r2, r3
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <ADC1_2_IRQHandler+0x38>)
 80016fe:	601a      	str	r2, [r3, #0]

  	motionDetection(move);
 8001700:	4b07      	ldr	r3, [pc, #28]	; (8001720 <ADC1_2_IRQHandler+0x38>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff ff3d 	bl	8001584 <motionDetection>

	HAL_Delay(10);
 800170a:	200a      	movs	r0, #10
 800170c:	f000 f8fa 	bl	8001904 <HAL_Delay>
	HAL_ADC_Start_IT(&hadc1);
 8001710:	4802      	ldr	r0, [pc, #8]	; (800171c <ADC1_2_IRQHandler+0x34>)
 8001712:	f000 fb19 	bl	8001d48 <HAL_ADC_Start_IT>

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	200001ac 	.word	0x200001ac
 8001720:	200000cc 	.word	0x200000cc

08001724 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	get_time_date();
 8001728:	f7ff fa14 	bl	8000b54 <get_time_date>


  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800172c:	4802      	ldr	r0, [pc, #8]	; (8001738 <TIM2_IRQHandler+0x14>)
 800172e:	f004 f855 	bl	80057dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000284 	.word	0x20000284

0800173c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	changeLED();
 8001740:	f7ff ff72 	bl	8001628 <changeLED>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001744:	4802      	ldr	r0, [pc, #8]	; (8001750 <TIM3_IRQHandler+0x14>)
 8001746:	f004 f849 	bl	80057dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000154 	.word	0x20000154

08001754 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800175c:	4a14      	ldr	r2, [pc, #80]	; (80017b0 <_sbrk+0x5c>)
 800175e:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <_sbrk+0x60>)
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001768:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <_sbrk+0x64>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d102      	bne.n	8001776 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001770:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <_sbrk+0x64>)
 8001772:	4a12      	ldr	r2, [pc, #72]	; (80017bc <_sbrk+0x68>)
 8001774:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001776:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <_sbrk+0x64>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	429a      	cmp	r2, r3
 8001782:	d207      	bcs.n	8001794 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001784:	f004 fc48 	bl	8006018 <__errno>
 8001788:	4603      	mov	r3, r0
 800178a:	220c      	movs	r2, #12
 800178c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800178e:	f04f 33ff 	mov.w	r3, #4294967295
 8001792:	e009      	b.n	80017a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <_sbrk+0x64>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800179a:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <_sbrk+0x64>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4413      	add	r3, r2
 80017a2:	4a05      	ldr	r2, [pc, #20]	; (80017b8 <_sbrk+0x64>)
 80017a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017a6:	68fb      	ldr	r3, [r7, #12]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	2000a000 	.word	0x2000a000
 80017b4:	00000400 	.word	0x00000400
 80017b8:	200000d4 	.word	0x200000d4
 80017bc:	200005f0 	.word	0x200005f0

080017c0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <SystemInit+0x20>)
 80017c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ca:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <SystemInit+0x20>)
 80017cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80017e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800181c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017e8:	480d      	ldr	r0, [pc, #52]	; (8001820 <LoopForever+0x6>)
  ldr r1, =_edata
 80017ea:	490e      	ldr	r1, [pc, #56]	; (8001824 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017ec:	4a0e      	ldr	r2, [pc, #56]	; (8001828 <LoopForever+0xe>)
  movs r3, #0
 80017ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f0:	e002      	b.n	80017f8 <LoopCopyDataInit>

080017f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017f6:	3304      	adds	r3, #4

080017f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017fc:	d3f9      	bcc.n	80017f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017fe:	4a0b      	ldr	r2, [pc, #44]	; (800182c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001800:	4c0b      	ldr	r4, [pc, #44]	; (8001830 <LoopForever+0x16>)
  movs r3, #0
 8001802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001804:	e001      	b.n	800180a <LoopFillZerobss>

08001806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001808:	3204      	adds	r2, #4

0800180a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800180c:	d3fb      	bcc.n	8001806 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800180e:	f7ff ffd7 	bl	80017c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001812:	f004 fc07 	bl	8006024 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001816:	f7ff f9e1 	bl	8000bdc <main>

0800181a <LoopForever>:

LoopForever:
    b LoopForever
 800181a:	e7fe      	b.n	800181a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800181c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001820:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001824:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8001828:	080069dc 	.word	0x080069dc
  ldr r2, =_sbss
 800182c:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8001830:	200005ec 	.word	0x200005ec

08001834 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001834:	e7fe      	b.n	8001834 <ADC3_IRQHandler>
	...

08001838 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800183c:	4b08      	ldr	r3, [pc, #32]	; (8001860 <HAL_Init+0x28>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a07      	ldr	r2, [pc, #28]	; (8001860 <HAL_Init+0x28>)
 8001842:	f043 0310 	orr.w	r3, r3, #16
 8001846:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001848:	2003      	movs	r0, #3
 800184a:	f001 fc77 	bl	800313c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800184e:	2000      	movs	r0, #0
 8001850:	f000 f808 	bl	8001864 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001854:	f7ff fcfe 	bl	8001254 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40022000 	.word	0x40022000

08001864 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <HAL_InitTick+0x54>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	4b12      	ldr	r3, [pc, #72]	; (80018bc <HAL_InitTick+0x58>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	4619      	mov	r1, r3
 8001876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800187a:	fbb3 f3f1 	udiv	r3, r3, r1
 800187e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001882:	4618      	mov	r0, r3
 8001884:	f001 fc8f 	bl	80031a6 <HAL_SYSTICK_Config>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e00e      	b.n	80018b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2b0f      	cmp	r3, #15
 8001896:	d80a      	bhi.n	80018ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001898:	2200      	movs	r2, #0
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	f04f 30ff 	mov.w	r0, #4294967295
 80018a0:	f001 fc57 	bl	8003152 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a4:	4a06      	ldr	r2, [pc, #24]	; (80018c0 <HAL_InitTick+0x5c>)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
 80018ac:	e000      	b.n	80018b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	2000003c 	.word	0x2000003c
 80018bc:	20000044 	.word	0x20000044
 80018c0:	20000040 	.word	0x20000040

080018c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c8:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <HAL_IncTick+0x20>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	461a      	mov	r2, r3
 80018ce:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <HAL_IncTick+0x24>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4413      	add	r3, r2
 80018d4:	4a04      	ldr	r2, [pc, #16]	; (80018e8 <HAL_IncTick+0x24>)
 80018d6:	6013      	str	r3, [r2, #0]
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	20000044 	.word	0x20000044
 80018e8:	200005d8 	.word	0x200005d8

080018ec <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return uwTick;  
 80018f0:	4b03      	ldr	r3, [pc, #12]	; (8001900 <HAL_GetTick+0x14>)
 80018f2:	681b      	ldr	r3, [r3, #0]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	200005d8 	.word	0x200005d8

08001904 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800190c:	f7ff ffee 	bl	80018ec <HAL_GetTick>
 8001910:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800191c:	d005      	beq.n	800192a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800191e:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <HAL_Delay+0x44>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	461a      	mov	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4413      	add	r3, r2
 8001928:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800192a:	bf00      	nop
 800192c:	f7ff ffde 	bl	80018ec <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	429a      	cmp	r2, r3
 800193a:	d8f7      	bhi.n	800192c <HAL_Delay+0x28>
  {
  }
}
 800193c:	bf00      	nop
 800193e:	bf00      	nop
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000044 	.word	0x20000044

0800194c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b09a      	sub	sp, #104	; 0x68
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001990:	2300      	movs	r3, #0
 8001992:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001996:	2300      	movs	r3, #0
 8001998:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800199a:	2300      	movs	r3, #0
 800199c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e1c9      	b.n	8001d3c <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	f003 0310 	and.w	r3, r3, #16
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d176      	bne.n	8001aa8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d152      	bne.n	8001a68 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff fc5d 	bl	800129c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d13b      	bne.n	8001a68 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f001 fa6d 	bl	8002ed0 <ADC_Disable>
 80019f6:	4603      	mov	r3, r0
 80019f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a00:	f003 0310 	and.w	r3, r3, #16
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d12f      	bne.n	8001a68 <HAL_ADC_Init+0xe0>
 8001a08:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d12b      	bne.n	8001a68 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a14:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a18:	f023 0302 	bic.w	r3, r3, #2
 8001a1c:	f043 0202 	orr.w	r2, r3, #2
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	689a      	ldr	r2, [r3, #8]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a32:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	689a      	ldr	r2, [r3, #8]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a42:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a44:	4b86      	ldr	r3, [pc, #536]	; (8001c60 <HAL_ADC_Init+0x2d8>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a86      	ldr	r2, [pc, #536]	; (8001c64 <HAL_ADC_Init+0x2dc>)
 8001a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4e:	0c9a      	lsrs	r2, r3, #18
 8001a50:	4613      	mov	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a5a:	e002      	b.n	8001a62 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1f9      	bne.n	8001a5c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d007      	beq.n	8001a86 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001a80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a84:	d110      	bne.n	8001aa8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f023 0312 	bic.w	r3, r3, #18
 8001a8e:	f043 0210 	orr.w	r2, r3, #16
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9a:	f043 0201 	orr.w	r2, r3, #1
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aac:	f003 0310 	and.w	r3, r3, #16
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f040 8136 	bne.w	8001d22 <HAL_ADC_Init+0x39a>
 8001ab6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f040 8131 	bne.w	8001d22 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f040 8129 	bne.w	8001d22 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ad8:	f043 0202 	orr.w	r2, r3, #2
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ae8:	d004      	beq.n	8001af4 <HAL_ADC_Init+0x16c>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a5e      	ldr	r2, [pc, #376]	; (8001c68 <HAL_ADC_Init+0x2e0>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d101      	bne.n	8001af8 <HAL_ADC_Init+0x170>
 8001af4:	4b5d      	ldr	r3, [pc, #372]	; (8001c6c <HAL_ADC_Init+0x2e4>)
 8001af6:	e000      	b.n	8001afa <HAL_ADC_Init+0x172>
 8001af8:	4b5d      	ldr	r3, [pc, #372]	; (8001c70 <HAL_ADC_Init+0x2e8>)
 8001afa:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b04:	d102      	bne.n	8001b0c <HAL_ADC_Init+0x184>
 8001b06:	4b58      	ldr	r3, [pc, #352]	; (8001c68 <HAL_ADC_Init+0x2e0>)
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	e01a      	b.n	8001b42 <HAL_ADC_Init+0x1ba>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a55      	ldr	r2, [pc, #340]	; (8001c68 <HAL_ADC_Init+0x2e0>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d103      	bne.n	8001b1e <HAL_ADC_Init+0x196>
 8001b16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	e011      	b.n	8001b42 <HAL_ADC_Init+0x1ba>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a54      	ldr	r2, [pc, #336]	; (8001c74 <HAL_ADC_Init+0x2ec>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d102      	bne.n	8001b2e <HAL_ADC_Init+0x1a6>
 8001b28:	4b53      	ldr	r3, [pc, #332]	; (8001c78 <HAL_ADC_Init+0x2f0>)
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	e009      	b.n	8001b42 <HAL_ADC_Init+0x1ba>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a51      	ldr	r2, [pc, #324]	; (8001c78 <HAL_ADC_Init+0x2f0>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d102      	bne.n	8001b3e <HAL_ADC_Init+0x1b6>
 8001b38:	4b4e      	ldr	r3, [pc, #312]	; (8001c74 <HAL_ADC_Init+0x2ec>)
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	e001      	b.n	8001b42 <HAL_ADC_Init+0x1ba>
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 0303 	and.w	r3, r3, #3
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d108      	bne.n	8001b62 <HAL_ADC_Init+0x1da>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d101      	bne.n	8001b62 <HAL_ADC_Init+0x1da>
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <HAL_ADC_Init+0x1dc>
 8001b62:	2300      	movs	r3, #0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d11c      	bne.n	8001ba2 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b68:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d010      	beq.n	8001b90 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d107      	bne.n	8001b8a <HAL_ADC_Init+0x202>
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d101      	bne.n	8001b8a <HAL_ADC_Init+0x202>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <HAL_ADC_Init+0x204>
 8001b8a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d108      	bne.n	8001ba2 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001b90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ba0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	7e5b      	ldrb	r3, [r3, #25]
 8001ba6:	035b      	lsls	r3, r3, #13
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bac:	2a01      	cmp	r2, #1
 8001bae:	d002      	beq.n	8001bb6 <HAL_ADC_Init+0x22e>
 8001bb0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bb4:	e000      	b.n	8001bb8 <HAL_ADC_Init+0x230>
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	431a      	orrs	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d11b      	bne.n	8001c0e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	7e5b      	ldrb	r3, [r3, #25]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d109      	bne.n	8001bf2 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be2:	3b01      	subs	r3, #1
 8001be4:	045a      	lsls	r2, r3, #17
 8001be6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001be8:	4313      	orrs	r3, r2
 8001bea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bee:	663b      	str	r3, [r7, #96]	; 0x60
 8001bf0:	e00d      	b.n	8001c0e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001bfa:	f043 0220 	orr.w	r2, r3, #32
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	f043 0201 	orr.w	r2, r3, #1
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d03a      	beq.n	8001c8c <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a16      	ldr	r2, [pc, #88]	; (8001c74 <HAL_ADC_Init+0x2ec>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d004      	beq.n	8001c2a <HAL_ADC_Init+0x2a2>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a14      	ldr	r2, [pc, #80]	; (8001c78 <HAL_ADC_Init+0x2f0>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d128      	bne.n	8001c7c <HAL_ADC_Init+0x2f4>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001c32:	d012      	beq.n	8001c5a <HAL_ADC_Init+0x2d2>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c3c:	d00a      	beq.n	8001c54 <HAL_ADC_Init+0x2cc>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c42:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001c46:	d002      	beq.n	8001c4e <HAL_ADC_Init+0x2c6>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4c:	e018      	b.n	8001c80 <HAL_ADC_Init+0x2f8>
 8001c4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c52:	e015      	b.n	8001c80 <HAL_ADC_Init+0x2f8>
 8001c54:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001c58:	e012      	b.n	8001c80 <HAL_ADC_Init+0x2f8>
 8001c5a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001c5e:	e00f      	b.n	8001c80 <HAL_ADC_Init+0x2f8>
 8001c60:	2000003c 	.word	0x2000003c
 8001c64:	431bde83 	.word	0x431bde83
 8001c68:	50000100 	.word	0x50000100
 8001c6c:	50000300 	.word	0x50000300
 8001c70:	50000700 	.word	0x50000700
 8001c74:	50000400 	.word	0x50000400
 8001c78:	50000500 	.word	0x50000500
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c84:	4313      	orrs	r3, r2
 8001c86:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 030c 	and.w	r3, r3, #12
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d114      	bne.n	8001cc4 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	6812      	ldr	r2, [r2, #0]
 8001ca4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ca8:	f023 0302 	bic.w	r3, r3, #2
 8001cac:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	7e1b      	ldrb	r3, [r3, #24]
 8001cb2:	039a      	lsls	r2, r3, #14
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68da      	ldr	r2, [r3, #12]
 8001cca:	4b1e      	ldr	r3, [pc, #120]	; (8001d44 <HAL_ADC_Init+0x3bc>)
 8001ccc:	4013      	ands	r3, r2
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6812      	ldr	r2, [r2, #0]
 8001cd2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001cd4:	430b      	orrs	r3, r1
 8001cd6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d10c      	bne.n	8001cfa <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	f023 010f 	bic.w	r1, r3, #15
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	1e5a      	subs	r2, r3, #1
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	631a      	str	r2, [r3, #48]	; 0x30
 8001cf8:	e007      	b.n	8001d0a <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 020f 	bic.w	r2, r2, #15
 8001d08:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	f023 0303 	bic.w	r3, r3, #3
 8001d18:	f043 0201 	orr.w	r2, r3, #1
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	641a      	str	r2, [r3, #64]	; 0x40
 8001d20:	e00a      	b.n	8001d38 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	f023 0312 	bic.w	r3, r3, #18
 8001d2a:	f043 0210 	orr.w	r2, r3, #16
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001d32:	2301      	movs	r3, #1
 8001d34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001d38:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3768      	adds	r7, #104	; 0x68
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	fff0c007 	.word	0xfff0c007

08001d48 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d50:	2300      	movs	r3, #0
 8001d52:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 0304 	and.w	r3, r3, #4
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f040 8123 	bne.w	8001faa <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d101      	bne.n	8001d72 <HAL_ADC_Start_IT+0x2a>
 8001d6e:	2302      	movs	r3, #2
 8001d70:	e11e      	b.n	8001fb0 <HAL_ADC_Start_IT+0x268>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f001 f844 	bl	8002e08 <ADC_Enable>
 8001d80:	4603      	mov	r3, r0
 8001d82:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d84:	7bfb      	ldrb	r3, [r7, #15]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f040 810a 	bne.w	8001fa0 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d94:	f023 0301 	bic.w	r3, r3, #1
 8001d98:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001da8:	d004      	beq.n	8001db4 <HAL_ADC_Start_IT+0x6c>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a82      	ldr	r2, [pc, #520]	; (8001fb8 <HAL_ADC_Start_IT+0x270>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d106      	bne.n	8001dc2 <HAL_ADC_Start_IT+0x7a>
 8001db4:	4b81      	ldr	r3, [pc, #516]	; (8001fbc <HAL_ADC_Start_IT+0x274>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f003 031f 	and.w	r3, r3, #31
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d010      	beq.n	8001de2 <HAL_ADC_Start_IT+0x9a>
 8001dc0:	e005      	b.n	8001dce <HAL_ADC_Start_IT+0x86>
 8001dc2:	4b7f      	ldr	r3, [pc, #508]	; (8001fc0 <HAL_ADC_Start_IT+0x278>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f003 031f 	and.w	r3, r3, #31
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d009      	beq.n	8001de2 <HAL_ADC_Start_IT+0x9a>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dd6:	d004      	beq.n	8001de2 <HAL_ADC_Start_IT+0x9a>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a79      	ldr	r2, [pc, #484]	; (8001fc4 <HAL_ADC_Start_IT+0x27c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d115      	bne.n	8001e0e <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d036      	beq.n	8001e6a <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e00:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e04:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001e0c:	e02d      	b.n	8001e6a <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e22:	d004      	beq.n	8001e2e <HAL_ADC_Start_IT+0xe6>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a63      	ldr	r2, [pc, #396]	; (8001fb8 <HAL_ADC_Start_IT+0x270>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d10a      	bne.n	8001e44 <HAL_ADC_Start_IT+0xfc>
 8001e2e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	bf14      	ite	ne
 8001e3c:	2301      	movne	r3, #1
 8001e3e:	2300      	moveq	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	e008      	b.n	8001e56 <HAL_ADC_Start_IT+0x10e>
 8001e44:	4b5f      	ldr	r3, [pc, #380]	; (8001fc4 <HAL_ADC_Start_IT+0x27c>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	bf14      	ite	ne
 8001e50:	2301      	movne	r3, #1
 8001e52:	2300      	moveq	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d007      	beq.n	8001e6a <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e62:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e76:	d106      	bne.n	8001e86 <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7c:	f023 0206 	bic.w	r2, r3, #6
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	645a      	str	r2, [r3, #68]	; 0x44
 8001e84:	e002      	b.n	8001e8c <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	221c      	movs	r2, #28
 8001e9a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	695b      	ldr	r3, [r3, #20]
 8001ea0:	2b08      	cmp	r3, #8
 8001ea2:	d110      	bne.n	8001ec6 <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0204 	bic.w	r2, r2, #4
 8001eb2:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f042 0208 	orr.w	r2, r2, #8
 8001ec2:	605a      	str	r2, [r3, #4]
          break;
 8001ec4:	e008      	b.n	8001ed8 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f042 020c 	orr.w	r2, r2, #12
 8001ed4:	605a      	str	r2, [r3, #4]
          break;
 8001ed6:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d107      	bne.n	8001ef0 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 0210 	bic.w	r2, r2, #16
 8001eee:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ef8:	d004      	beq.n	8001f04 <HAL_ADC_Start_IT+0x1bc>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a2e      	ldr	r2, [pc, #184]	; (8001fb8 <HAL_ADC_Start_IT+0x270>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d106      	bne.n	8001f12 <HAL_ADC_Start_IT+0x1ca>
 8001f04:	4b2d      	ldr	r3, [pc, #180]	; (8001fbc <HAL_ADC_Start_IT+0x274>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 031f 	and.w	r3, r3, #31
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d03e      	beq.n	8001f8e <HAL_ADC_Start_IT+0x246>
 8001f10:	e005      	b.n	8001f1e <HAL_ADC_Start_IT+0x1d6>
 8001f12:	4b2b      	ldr	r3, [pc, #172]	; (8001fc0 <HAL_ADC_Start_IT+0x278>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 031f 	and.w	r3, r3, #31
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d037      	beq.n	8001f8e <HAL_ADC_Start_IT+0x246>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f26:	d004      	beq.n	8001f32 <HAL_ADC_Start_IT+0x1ea>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a22      	ldr	r2, [pc, #136]	; (8001fb8 <HAL_ADC_Start_IT+0x270>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d106      	bne.n	8001f40 <HAL_ADC_Start_IT+0x1f8>
 8001f32:	4b22      	ldr	r3, [pc, #136]	; (8001fbc <HAL_ADC_Start_IT+0x274>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 031f 	and.w	r3, r3, #31
 8001f3a:	2b05      	cmp	r3, #5
 8001f3c:	d027      	beq.n	8001f8e <HAL_ADC_Start_IT+0x246>
 8001f3e:	e005      	b.n	8001f4c <HAL_ADC_Start_IT+0x204>
 8001f40:	4b1f      	ldr	r3, [pc, #124]	; (8001fc0 <HAL_ADC_Start_IT+0x278>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 031f 	and.w	r3, r3, #31
 8001f48:	2b05      	cmp	r3, #5
 8001f4a:	d020      	beq.n	8001f8e <HAL_ADC_Start_IT+0x246>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f54:	d004      	beq.n	8001f60 <HAL_ADC_Start_IT+0x218>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a17      	ldr	r2, [pc, #92]	; (8001fb8 <HAL_ADC_Start_IT+0x270>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d106      	bne.n	8001f6e <HAL_ADC_Start_IT+0x226>
 8001f60:	4b16      	ldr	r3, [pc, #88]	; (8001fbc <HAL_ADC_Start_IT+0x274>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f003 031f 	and.w	r3, r3, #31
 8001f68:	2b09      	cmp	r3, #9
 8001f6a:	d010      	beq.n	8001f8e <HAL_ADC_Start_IT+0x246>
 8001f6c:	e005      	b.n	8001f7a <HAL_ADC_Start_IT+0x232>
 8001f6e:	4b14      	ldr	r3, [pc, #80]	; (8001fc0 <HAL_ADC_Start_IT+0x278>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 031f 	and.w	r3, r3, #31
 8001f76:	2b09      	cmp	r3, #9
 8001f78:	d009      	beq.n	8001f8e <HAL_ADC_Start_IT+0x246>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f82:	d004      	beq.n	8001f8e <HAL_ADC_Start_IT+0x246>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a0e      	ldr	r2, [pc, #56]	; (8001fc4 <HAL_ADC_Start_IT+0x27c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d10f      	bne.n	8001fae <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f042 0204 	orr.w	r2, r2, #4
 8001f9c:	609a      	str	r2, [r3, #8]
 8001f9e:	e006      	b.n	8001fae <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001fa8:	e001      	b.n	8001fae <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001faa:	2302      	movs	r3, #2
 8001fac:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	50000100 	.word	0x50000100
 8001fbc:	50000300 	.word	0x50000300
 8001fc0:	50000700 	.word	0x50000700
 8001fc4:	50000400 	.word	0x50000400

08001fc8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
	...

08001fe4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	2b04      	cmp	r3, #4
 8002004:	d106      	bne.n	8002014 <HAL_ADC_IRQHandler+0x30>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b04      	cmp	r3, #4
 8002012:	d00f      	beq.n	8002034 <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800201e:	2b08      	cmp	r3, #8
 8002020:	f040 80c0 	bne.w	80021a4 <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 0308 	and.w	r3, r3, #8
 800202e:	2b08      	cmp	r3, #8
 8002030:	f040 80b8 	bne.w	80021a4 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002038:	f003 0310 	and.w	r3, r3, #16
 800203c:	2b00      	cmp	r3, #0
 800203e:	d105      	bne.n	800204c <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002044:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002054:	d004      	beq.n	8002060 <HAL_ADC_IRQHandler+0x7c>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a95      	ldr	r2, [pc, #596]	; (80022b0 <HAL_ADC_IRQHandler+0x2cc>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d106      	bne.n	800206e <HAL_ADC_IRQHandler+0x8a>
 8002060:	4b94      	ldr	r3, [pc, #592]	; (80022b4 <HAL_ADC_IRQHandler+0x2d0>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 031f 	and.w	r3, r3, #31
 8002068:	2b00      	cmp	r3, #0
 800206a:	d03e      	beq.n	80020ea <HAL_ADC_IRQHandler+0x106>
 800206c:	e005      	b.n	800207a <HAL_ADC_IRQHandler+0x96>
 800206e:	4b92      	ldr	r3, [pc, #584]	; (80022b8 <HAL_ADC_IRQHandler+0x2d4>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 031f 	and.w	r3, r3, #31
 8002076:	2b00      	cmp	r3, #0
 8002078:	d037      	beq.n	80020ea <HAL_ADC_IRQHandler+0x106>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002082:	d004      	beq.n	800208e <HAL_ADC_IRQHandler+0xaa>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a89      	ldr	r2, [pc, #548]	; (80022b0 <HAL_ADC_IRQHandler+0x2cc>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d106      	bne.n	800209c <HAL_ADC_IRQHandler+0xb8>
 800208e:	4b89      	ldr	r3, [pc, #548]	; (80022b4 <HAL_ADC_IRQHandler+0x2d0>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 031f 	and.w	r3, r3, #31
 8002096:	2b05      	cmp	r3, #5
 8002098:	d027      	beq.n	80020ea <HAL_ADC_IRQHandler+0x106>
 800209a:	e005      	b.n	80020a8 <HAL_ADC_IRQHandler+0xc4>
 800209c:	4b86      	ldr	r3, [pc, #536]	; (80022b8 <HAL_ADC_IRQHandler+0x2d4>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 031f 	and.w	r3, r3, #31
 80020a4:	2b05      	cmp	r3, #5
 80020a6:	d020      	beq.n	80020ea <HAL_ADC_IRQHandler+0x106>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020b0:	d004      	beq.n	80020bc <HAL_ADC_IRQHandler+0xd8>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a7e      	ldr	r2, [pc, #504]	; (80022b0 <HAL_ADC_IRQHandler+0x2cc>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d106      	bne.n	80020ca <HAL_ADC_IRQHandler+0xe6>
 80020bc:	4b7d      	ldr	r3, [pc, #500]	; (80022b4 <HAL_ADC_IRQHandler+0x2d0>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 031f 	and.w	r3, r3, #31
 80020c4:	2b09      	cmp	r3, #9
 80020c6:	d010      	beq.n	80020ea <HAL_ADC_IRQHandler+0x106>
 80020c8:	e005      	b.n	80020d6 <HAL_ADC_IRQHandler+0xf2>
 80020ca:	4b7b      	ldr	r3, [pc, #492]	; (80022b8 <HAL_ADC_IRQHandler+0x2d4>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 031f 	and.w	r3, r3, #31
 80020d2:	2b09      	cmp	r3, #9
 80020d4:	d009      	beq.n	80020ea <HAL_ADC_IRQHandler+0x106>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020de:	d004      	beq.n	80020ea <HAL_ADC_IRQHandler+0x106>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a75      	ldr	r2, [pc, #468]	; (80022bc <HAL_ADC_IRQHandler+0x2d8>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d104      	bne.n	80020f4 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	613b      	str	r3, [r7, #16]
 80020f2:	e00f      	b.n	8002114 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020fc:	d004      	beq.n	8002108 <HAL_ADC_IRQHandler+0x124>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a6b      	ldr	r2, [pc, #428]	; (80022b0 <HAL_ADC_IRQHandler+0x2cc>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d102      	bne.n	800210e <HAL_ADC_IRQHandler+0x12a>
 8002108:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800210c:	e000      	b.n	8002110 <HAL_ADC_IRQHandler+0x12c>
 800210e:	4b6b      	ldr	r3, [pc, #428]	; (80022bc <HAL_ADC_IRQHandler+0x2d8>)
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800211e:	2b00      	cmp	r3, #0
 8002120:	d139      	bne.n	8002196 <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002128:	2b00      	cmp	r3, #0
 800212a:	d134      	bne.n	8002196 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	2b08      	cmp	r3, #8
 8002138:	d12d      	bne.n	8002196 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	d11a      	bne.n	800217e <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 020c 	bic.w	r2, r2, #12
 8002156:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002168:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d112      	bne.n	8002196 <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002174:	f043 0201 	orr.w	r2, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	641a      	str	r2, [r3, #64]	; 0x40
 800217c:	e00b      	b.n	8002196 <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	f043 0210 	orr.w	r2, r3, #16
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218e:	f043 0201 	orr.w	r2, r3, #1
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7ff fbd8 	bl	800194c <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	220c      	movs	r2, #12
 80021a2:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0320 	and.w	r3, r3, #32
 80021ae:	2b20      	cmp	r3, #32
 80021b0:	d106      	bne.n	80021c0 <HAL_ADC_IRQHandler+0x1dc>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 0320 	and.w	r3, r3, #32
 80021bc:	2b20      	cmp	r3, #32
 80021be:	d00f      	beq.n	80021e0 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 80021ca:	2b40      	cmp	r3, #64	; 0x40
 80021cc:	f040 813c 	bne.w	8002448 <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021da:	2b40      	cmp	r3, #64	; 0x40
 80021dc:	f040 8134 	bne.w	8002448 <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021f4:	d004      	beq.n	8002200 <HAL_ADC_IRQHandler+0x21c>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a2d      	ldr	r2, [pc, #180]	; (80022b0 <HAL_ADC_IRQHandler+0x2cc>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d106      	bne.n	800220e <HAL_ADC_IRQHandler+0x22a>
 8002200:	4b2c      	ldr	r3, [pc, #176]	; (80022b4 <HAL_ADC_IRQHandler+0x2d0>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 031f 	and.w	r3, r3, #31
 8002208:	2b00      	cmp	r3, #0
 800220a:	d03e      	beq.n	800228a <HAL_ADC_IRQHandler+0x2a6>
 800220c:	e005      	b.n	800221a <HAL_ADC_IRQHandler+0x236>
 800220e:	4b2a      	ldr	r3, [pc, #168]	; (80022b8 <HAL_ADC_IRQHandler+0x2d4>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 031f 	and.w	r3, r3, #31
 8002216:	2b00      	cmp	r3, #0
 8002218:	d037      	beq.n	800228a <HAL_ADC_IRQHandler+0x2a6>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002222:	d004      	beq.n	800222e <HAL_ADC_IRQHandler+0x24a>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a21      	ldr	r2, [pc, #132]	; (80022b0 <HAL_ADC_IRQHandler+0x2cc>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d106      	bne.n	800223c <HAL_ADC_IRQHandler+0x258>
 800222e:	4b21      	ldr	r3, [pc, #132]	; (80022b4 <HAL_ADC_IRQHandler+0x2d0>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 031f 	and.w	r3, r3, #31
 8002236:	2b05      	cmp	r3, #5
 8002238:	d027      	beq.n	800228a <HAL_ADC_IRQHandler+0x2a6>
 800223a:	e005      	b.n	8002248 <HAL_ADC_IRQHandler+0x264>
 800223c:	4b1e      	ldr	r3, [pc, #120]	; (80022b8 <HAL_ADC_IRQHandler+0x2d4>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 031f 	and.w	r3, r3, #31
 8002244:	2b05      	cmp	r3, #5
 8002246:	d020      	beq.n	800228a <HAL_ADC_IRQHandler+0x2a6>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002250:	d004      	beq.n	800225c <HAL_ADC_IRQHandler+0x278>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a16      	ldr	r2, [pc, #88]	; (80022b0 <HAL_ADC_IRQHandler+0x2cc>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d106      	bne.n	800226a <HAL_ADC_IRQHandler+0x286>
 800225c:	4b15      	ldr	r3, [pc, #84]	; (80022b4 <HAL_ADC_IRQHandler+0x2d0>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 031f 	and.w	r3, r3, #31
 8002264:	2b09      	cmp	r3, #9
 8002266:	d010      	beq.n	800228a <HAL_ADC_IRQHandler+0x2a6>
 8002268:	e005      	b.n	8002276 <HAL_ADC_IRQHandler+0x292>
 800226a:	4b13      	ldr	r3, [pc, #76]	; (80022b8 <HAL_ADC_IRQHandler+0x2d4>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 031f 	and.w	r3, r3, #31
 8002272:	2b09      	cmp	r3, #9
 8002274:	d009      	beq.n	800228a <HAL_ADC_IRQHandler+0x2a6>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800227e:	d004      	beq.n	800228a <HAL_ADC_IRQHandler+0x2a6>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a0d      	ldr	r2, [pc, #52]	; (80022bc <HAL_ADC_IRQHandler+0x2d8>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d104      	bne.n	8002294 <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	613b      	str	r3, [r7, #16]
 8002292:	e018      	b.n	80022c6 <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800229c:	d004      	beq.n	80022a8 <HAL_ADC_IRQHandler+0x2c4>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a03      	ldr	r2, [pc, #12]	; (80022b0 <HAL_ADC_IRQHandler+0x2cc>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d10b      	bne.n	80022c0 <HAL_ADC_IRQHandler+0x2dc>
 80022a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80022ac:	e009      	b.n	80022c2 <HAL_ADC_IRQHandler+0x2de>
 80022ae:	bf00      	nop
 80022b0:	50000100 	.word	0x50000100
 80022b4:	50000300 	.word	0x50000300
 80022b8:	50000700 	.word	0x50000700
 80022bc:	50000400 	.word	0x50000400
 80022c0:	4b9d      	ldr	r3, [pc, #628]	; (8002538 <HAL_ADC_IRQHandler+0x554>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022cc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f040 80b2 	bne.w	800243a <HAL_ADC_IRQHandler+0x456>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00d      	beq.n	80022fc <HAL_ADC_IRQHandler+0x318>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f040 80a5 	bne.w	800243a <HAL_ADC_IRQHandler+0x456>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f040 809f 	bne.w	800243a <HAL_ADC_IRQHandler+0x456>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002306:	2b40      	cmp	r3, #64	; 0x40
 8002308:	f040 8097 	bne.w	800243a <HAL_ADC_IRQHandler+0x456>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002314:	d004      	beq.n	8002320 <HAL_ADC_IRQHandler+0x33c>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a88      	ldr	r2, [pc, #544]	; (800253c <HAL_ADC_IRQHandler+0x558>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d106      	bne.n	800232e <HAL_ADC_IRQHandler+0x34a>
 8002320:	4b87      	ldr	r3, [pc, #540]	; (8002540 <HAL_ADC_IRQHandler+0x55c>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f003 031f 	and.w	r3, r3, #31
 8002328:	2b00      	cmp	r3, #0
 800232a:	d03e      	beq.n	80023aa <HAL_ADC_IRQHandler+0x3c6>
 800232c:	e005      	b.n	800233a <HAL_ADC_IRQHandler+0x356>
 800232e:	4b85      	ldr	r3, [pc, #532]	; (8002544 <HAL_ADC_IRQHandler+0x560>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 031f 	and.w	r3, r3, #31
 8002336:	2b00      	cmp	r3, #0
 8002338:	d037      	beq.n	80023aa <HAL_ADC_IRQHandler+0x3c6>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002342:	d004      	beq.n	800234e <HAL_ADC_IRQHandler+0x36a>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a7c      	ldr	r2, [pc, #496]	; (800253c <HAL_ADC_IRQHandler+0x558>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d106      	bne.n	800235c <HAL_ADC_IRQHandler+0x378>
 800234e:	4b7c      	ldr	r3, [pc, #496]	; (8002540 <HAL_ADC_IRQHandler+0x55c>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 031f 	and.w	r3, r3, #31
 8002356:	2b06      	cmp	r3, #6
 8002358:	d027      	beq.n	80023aa <HAL_ADC_IRQHandler+0x3c6>
 800235a:	e005      	b.n	8002368 <HAL_ADC_IRQHandler+0x384>
 800235c:	4b79      	ldr	r3, [pc, #484]	; (8002544 <HAL_ADC_IRQHandler+0x560>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f003 031f 	and.w	r3, r3, #31
 8002364:	2b06      	cmp	r3, #6
 8002366:	d020      	beq.n	80023aa <HAL_ADC_IRQHandler+0x3c6>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002370:	d004      	beq.n	800237c <HAL_ADC_IRQHandler+0x398>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a71      	ldr	r2, [pc, #452]	; (800253c <HAL_ADC_IRQHandler+0x558>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d106      	bne.n	800238a <HAL_ADC_IRQHandler+0x3a6>
 800237c:	4b70      	ldr	r3, [pc, #448]	; (8002540 <HAL_ADC_IRQHandler+0x55c>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 031f 	and.w	r3, r3, #31
 8002384:	2b07      	cmp	r3, #7
 8002386:	d010      	beq.n	80023aa <HAL_ADC_IRQHandler+0x3c6>
 8002388:	e005      	b.n	8002396 <HAL_ADC_IRQHandler+0x3b2>
 800238a:	4b6e      	ldr	r3, [pc, #440]	; (8002544 <HAL_ADC_IRQHandler+0x560>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f003 031f 	and.w	r3, r3, #31
 8002392:	2b07      	cmp	r3, #7
 8002394:	d009      	beq.n	80023aa <HAL_ADC_IRQHandler+0x3c6>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800239e:	d004      	beq.n	80023aa <HAL_ADC_IRQHandler+0x3c6>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a64      	ldr	r2, [pc, #400]	; (8002538 <HAL_ADC_IRQHandler+0x554>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d104      	bne.n	80023b4 <HAL_ADC_IRQHandler+0x3d0>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	e00f      	b.n	80023d4 <HAL_ADC_IRQHandler+0x3f0>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023bc:	d004      	beq.n	80023c8 <HAL_ADC_IRQHandler+0x3e4>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a5e      	ldr	r2, [pc, #376]	; (800253c <HAL_ADC_IRQHandler+0x558>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d102      	bne.n	80023ce <HAL_ADC_IRQHandler+0x3ea>
 80023c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80023cc:	e000      	b.n	80023d0 <HAL_ADC_IRQHandler+0x3ec>
 80023ce:	4b5a      	ldr	r3, [pc, #360]	; (8002538 <HAL_ADC_IRQHandler+0x554>)
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d12d      	bne.n	800243a <HAL_ADC_IRQHandler+0x456>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f003 0308 	and.w	r3, r3, #8
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d11a      	bne.n	8002422 <HAL_ADC_IRQHandler+0x43e>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80023fa:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002400:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002410:	2b00      	cmp	r3, #0
 8002412:	d112      	bne.n	800243a <HAL_ADC_IRQHandler+0x456>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	f043 0201 	orr.w	r2, r3, #1
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	641a      	str	r2, [r3, #64]	; 0x40
 8002420:	e00b      	b.n	800243a <HAL_ADC_IRQHandler+0x456>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f043 0210 	orr.w	r2, r3, #16
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002432:	f043 0201 	orr.w	r2, r3, #1
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f8de 	bl	80025fc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2260      	movs	r2, #96	; 0x60
 8002446:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002452:	2b80      	cmp	r3, #128	; 0x80
 8002454:	d113      	bne.n	800247e <HAL_ADC_IRQHandler+0x49a>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002460:	2b80      	cmp	r3, #128	; 0x80
 8002462:	d10c      	bne.n	800247e <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002468:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7ff fa75 	bl	8001960 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2280      	movs	r2, #128	; 0x80
 800247c:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002488:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800248c:	d115      	bne.n	80024ba <HAL_ADC_IRQHandler+0x4d6>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002498:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800249c:	d10d      	bne.n	80024ba <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f8ba 	bl	8002624 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024b8:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024c8:	d115      	bne.n	80024f6 <HAL_ADC_IRQHandler+0x512>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024d8:	d10d      	bne.n	80024f6 <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f8a6 	bl	8002638 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024f4:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0310 	and.w	r3, r3, #16
 8002500:	2b10      	cmp	r3, #16
 8002502:	d151      	bne.n	80025a8 <HAL_ADC_IRQHandler+0x5c4>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f003 0310 	and.w	r3, r3, #16
 800250e:	2b10      	cmp	r3, #16
 8002510:	d14a      	bne.n	80025a8 <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002516:	2b01      	cmp	r3, #1
 8002518:	d102      	bne.n	8002520 <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 800251a:	2301      	movs	r3, #1
 800251c:	617b      	str	r3, [r7, #20]
 800251e:	e02d      	b.n	800257c <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002528:	d004      	beq.n	8002534 <HAL_ADC_IRQHandler+0x550>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a03      	ldr	r2, [pc, #12]	; (800253c <HAL_ADC_IRQHandler+0x558>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d109      	bne.n	8002548 <HAL_ADC_IRQHandler+0x564>
 8002534:	4b02      	ldr	r3, [pc, #8]	; (8002540 <HAL_ADC_IRQHandler+0x55c>)
 8002536:	e008      	b.n	800254a <HAL_ADC_IRQHandler+0x566>
 8002538:	50000400 	.word	0x50000400
 800253c:	50000100 	.word	0x50000100
 8002540:	50000300 	.word	0x50000300
 8002544:	50000700 	.word	0x50000700
 8002548:	4b2b      	ldr	r3, [pc, #172]	; (80025f8 <HAL_ADC_IRQHandler+0x614>)
 800254a:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f003 031f 	and.w	r3, r3, #31
 8002554:	2b00      	cmp	r3, #0
 8002556:	d109      	bne.n	800256c <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b01      	cmp	r3, #1
 8002564:	d10a      	bne.n	800257c <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8002566:	2301      	movs	r3, #1
 8002568:	617b      	str	r3, [r7, #20]
 800256a:	e007      	b.n	800257c <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 8002578:	2301      	movs	r3, #1
 800257a:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d10e      	bne.n	80025a0 <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002592:	f043 0202 	orr.w	r2, r3, #2
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7ff f9ea 	bl	8001974 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2210      	movs	r2, #16
 80025a6:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025b6:	d11b      	bne.n	80025f0 <HAL_ADC_IRQHandler+0x60c>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025c6:	d113      	bne.n	80025f0 <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025cc:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d8:	f043 0208 	orr.w	r2, r3, #8
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025e8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f810 	bl	8002610 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 80025f0:	bf00      	nop
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	50000700 	.word	0x50000700

080025fc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800264c:	b480      	push	{r7}
 800264e:	b09b      	sub	sp, #108	; 0x6c
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002656:	2300      	movs	r3, #0
 8002658:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <HAL_ADC_ConfigChannel+0x22>
 800266a:	2302      	movs	r3, #2
 800266c:	e2cb      	b.n	8002c06 <HAL_ADC_ConfigChannel+0x5ba>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	f040 82af 	bne.w	8002be4 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b04      	cmp	r3, #4
 800268c:	d81c      	bhi.n	80026c8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	4613      	mov	r3, r2
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	4413      	add	r3, r2
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	461a      	mov	r2, r3
 80026a2:	231f      	movs	r3, #31
 80026a4:	4093      	lsls	r3, r2
 80026a6:	43db      	mvns	r3, r3
 80026a8:	4019      	ands	r1, r3
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	6818      	ldr	r0, [r3, #0]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	4613      	mov	r3, r2
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	4413      	add	r3, r2
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	fa00 f203 	lsl.w	r2, r0, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	631a      	str	r2, [r3, #48]	; 0x30
 80026c6:	e063      	b.n	8002790 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b09      	cmp	r3, #9
 80026ce:	d81e      	bhi.n	800270e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	4613      	mov	r3, r2
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	4413      	add	r3, r2
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	3b1e      	subs	r3, #30
 80026e4:	221f      	movs	r2, #31
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	43db      	mvns	r3, r3
 80026ec:	4019      	ands	r1, r3
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	6818      	ldr	r0, [r3, #0]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	4613      	mov	r3, r2
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	4413      	add	r3, r2
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	3b1e      	subs	r3, #30
 8002700:	fa00 f203 	lsl.w	r2, r0, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	635a      	str	r2, [r3, #52]	; 0x34
 800270c:	e040      	b.n	8002790 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b0e      	cmp	r3, #14
 8002714:	d81e      	bhi.n	8002754 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	4613      	mov	r3, r2
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	4413      	add	r3, r2
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	3b3c      	subs	r3, #60	; 0x3c
 800272a:	221f      	movs	r2, #31
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	4019      	ands	r1, r3
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	6818      	ldr	r0, [r3, #0]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	4413      	add	r3, r2
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	3b3c      	subs	r3, #60	; 0x3c
 8002746:	fa00 f203 	lsl.w	r2, r0, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	430a      	orrs	r2, r1
 8002750:	639a      	str	r2, [r3, #56]	; 0x38
 8002752:	e01d      	b.n	8002790 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685a      	ldr	r2, [r3, #4]
 800275e:	4613      	mov	r3, r2
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	4413      	add	r3, r2
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	3b5a      	subs	r3, #90	; 0x5a
 8002768:	221f      	movs	r2, #31
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43db      	mvns	r3, r3
 8002770:	4019      	ands	r1, r3
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	6818      	ldr	r0, [r3, #0]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	4613      	mov	r3, r2
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	4413      	add	r3, r2
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	3b5a      	subs	r3, #90	; 0x5a
 8002784:	fa00 f203 	lsl.w	r2, r0, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 030c 	and.w	r3, r3, #12
 800279a:	2b00      	cmp	r3, #0
 800279c:	f040 80e5 	bne.w	800296a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2b09      	cmp	r3, #9
 80027a6:	d91c      	bls.n	80027e2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6999      	ldr	r1, [r3, #24]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	4613      	mov	r3, r2
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	4413      	add	r3, r2
 80027b8:	3b1e      	subs	r3, #30
 80027ba:	2207      	movs	r2, #7
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	43db      	mvns	r3, r3
 80027c2:	4019      	ands	r1, r3
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	6898      	ldr	r0, [r3, #8]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	4613      	mov	r3, r2
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	4413      	add	r3, r2
 80027d2:	3b1e      	subs	r3, #30
 80027d4:	fa00 f203 	lsl.w	r2, r0, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	619a      	str	r2, [r3, #24]
 80027e0:	e019      	b.n	8002816 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6959      	ldr	r1, [r3, #20]
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	4613      	mov	r3, r2
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	4413      	add	r3, r2
 80027f2:	2207      	movs	r2, #7
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	43db      	mvns	r3, r3
 80027fa:	4019      	ands	r1, r3
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	6898      	ldr	r0, [r3, #8]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	4613      	mov	r3, r2
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	4413      	add	r3, r2
 800280a:	fa00 f203 	lsl.w	r2, r0, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	430a      	orrs	r2, r1
 8002814:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	695a      	ldr	r2, [r3, #20]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	08db      	lsrs	r3, r3, #3
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	3b01      	subs	r3, #1
 8002834:	2b03      	cmp	r3, #3
 8002836:	d84f      	bhi.n	80028d8 <HAL_ADC_ConfigChannel+0x28c>
 8002838:	a201      	add	r2, pc, #4	; (adr r2, 8002840 <HAL_ADC_ConfigChannel+0x1f4>)
 800283a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283e:	bf00      	nop
 8002840:	08002851 	.word	0x08002851
 8002844:	08002873 	.word	0x08002873
 8002848:	08002895 	.word	0x08002895
 800284c:	080028b7 	.word	0x080028b7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002856:	4b9f      	ldr	r3, [pc, #636]	; (8002ad4 <HAL_ADC_ConfigChannel+0x488>)
 8002858:	4013      	ands	r3, r2
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	6812      	ldr	r2, [r2, #0]
 800285e:	0691      	lsls	r1, r2, #26
 8002860:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002862:	430a      	orrs	r2, r1
 8002864:	431a      	orrs	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800286e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002870:	e07e      	b.n	8002970 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002878:	4b96      	ldr	r3, [pc, #600]	; (8002ad4 <HAL_ADC_ConfigChannel+0x488>)
 800287a:	4013      	ands	r3, r2
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	6812      	ldr	r2, [r2, #0]
 8002880:	0691      	lsls	r1, r2, #26
 8002882:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002884:	430a      	orrs	r2, r1
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002890:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002892:	e06d      	b.n	8002970 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800289a:	4b8e      	ldr	r3, [pc, #568]	; (8002ad4 <HAL_ADC_ConfigChannel+0x488>)
 800289c:	4013      	ands	r3, r2
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	6812      	ldr	r2, [r2, #0]
 80028a2:	0691      	lsls	r1, r2, #26
 80028a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80028a6:	430a      	orrs	r2, r1
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80028b2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80028b4:	e05c      	b.n	8002970 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80028bc:	4b85      	ldr	r3, [pc, #532]	; (8002ad4 <HAL_ADC_ConfigChannel+0x488>)
 80028be:	4013      	ands	r3, r2
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	6812      	ldr	r2, [r2, #0]
 80028c4:	0691      	lsls	r1, r2, #26
 80028c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80028c8:	430a      	orrs	r2, r1
 80028ca:	431a      	orrs	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80028d4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80028d6:	e04b      	b.n	8002970 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	069b      	lsls	r3, r3, #26
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d107      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80028fa:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002902:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	069b      	lsls	r3, r3, #26
 800290c:	429a      	cmp	r2, r3
 800290e:	d107      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800291e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002926:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	069b      	lsls	r3, r3, #26
 8002930:	429a      	cmp	r2, r3
 8002932:	d107      	bne.n	8002944 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002942:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800294a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	069b      	lsls	r3, r3, #26
 8002954:	429a      	cmp	r2, r3
 8002956:	d10a      	bne.n	800296e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002966:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002968:	e001      	b.n	800296e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800296a:	bf00      	nop
 800296c:	e000      	b.n	8002970 <HAL_ADC_ConfigChannel+0x324>
      break;
 800296e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	2b01      	cmp	r3, #1
 800297c:	d108      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x344>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b01      	cmp	r3, #1
 800298a:	d101      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x344>
 800298c:	2301      	movs	r3, #1
 800298e:	e000      	b.n	8002992 <HAL_ADC_ConfigChannel+0x346>
 8002990:	2300      	movs	r3, #0
 8002992:	2b00      	cmp	r3, #0
 8002994:	f040 8131 	bne.w	8002bfa <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d00f      	beq.n	80029c0 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2201      	movs	r2, #1
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	43da      	mvns	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	400a      	ands	r2, r1
 80029ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80029be:	e049      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2201      	movs	r2, #1
 80029ce:	409a      	lsls	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2b09      	cmp	r3, #9
 80029e0:	d91c      	bls.n	8002a1c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6999      	ldr	r1, [r3, #24]
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	4613      	mov	r3, r2
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	4413      	add	r3, r2
 80029f2:	3b1b      	subs	r3, #27
 80029f4:	2207      	movs	r2, #7
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	43db      	mvns	r3, r3
 80029fc:	4019      	ands	r1, r3
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	6898      	ldr	r0, [r3, #8]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	4613      	mov	r3, r2
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3b1b      	subs	r3, #27
 8002a0e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	619a      	str	r2, [r3, #24]
 8002a1a:	e01b      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6959      	ldr	r1, [r3, #20]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	1c5a      	adds	r2, r3, #1
 8002a28:	4613      	mov	r3, r2
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	4413      	add	r3, r2
 8002a2e:	2207      	movs	r2, #7
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	43db      	mvns	r3, r3
 8002a36:	4019      	ands	r1, r3
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	6898      	ldr	r0, [r3, #8]
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	4613      	mov	r3, r2
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	4413      	add	r3, r2
 8002a48:	fa00 f203 	lsl.w	r2, r0, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	430a      	orrs	r2, r1
 8002a52:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a5c:	d004      	beq.n	8002a68 <HAL_ADC_ConfigChannel+0x41c>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a1d      	ldr	r2, [pc, #116]	; (8002ad8 <HAL_ADC_ConfigChannel+0x48c>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d101      	bne.n	8002a6c <HAL_ADC_ConfigChannel+0x420>
 8002a68:	4b1c      	ldr	r3, [pc, #112]	; (8002adc <HAL_ADC_ConfigChannel+0x490>)
 8002a6a:	e000      	b.n	8002a6e <HAL_ADC_ConfigChannel+0x422>
 8002a6c:	4b1c      	ldr	r3, [pc, #112]	; (8002ae0 <HAL_ADC_ConfigChannel+0x494>)
 8002a6e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b10      	cmp	r3, #16
 8002a76:	d105      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002a78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d015      	beq.n	8002ab0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002a88:	2b11      	cmp	r3, #17
 8002a8a:	d105      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002a8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00b      	beq.n	8002ab0 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002a9c:	2b12      	cmp	r3, #18
 8002a9e:	f040 80ac 	bne.w	8002bfa <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002aa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f040 80a5 	bne.w	8002bfa <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ab8:	d102      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x474>
 8002aba:	4b07      	ldr	r3, [pc, #28]	; (8002ad8 <HAL_ADC_ConfigChannel+0x48c>)
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	e023      	b.n	8002b08 <HAL_ADC_ConfigChannel+0x4bc>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a04      	ldr	r2, [pc, #16]	; (8002ad8 <HAL_ADC_ConfigChannel+0x48c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d10c      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x498>
 8002aca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	e01a      	b.n	8002b08 <HAL_ADC_ConfigChannel+0x4bc>
 8002ad2:	bf00      	nop
 8002ad4:	83fff000 	.word	0x83fff000
 8002ad8:	50000100 	.word	0x50000100
 8002adc:	50000300 	.word	0x50000300
 8002ae0:	50000700 	.word	0x50000700
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a4a      	ldr	r2, [pc, #296]	; (8002c14 <HAL_ADC_ConfigChannel+0x5c8>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d102      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x4a8>
 8002aee:	4b4a      	ldr	r3, [pc, #296]	; (8002c18 <HAL_ADC_ConfigChannel+0x5cc>)
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	e009      	b.n	8002b08 <HAL_ADC_ConfigChannel+0x4bc>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a47      	ldr	r2, [pc, #284]	; (8002c18 <HAL_ADC_ConfigChannel+0x5cc>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d102      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x4b8>
 8002afe:	4b45      	ldr	r3, [pc, #276]	; (8002c14 <HAL_ADC_ConfigChannel+0x5c8>)
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	e001      	b.n	8002b08 <HAL_ADC_ConfigChannel+0x4bc>
 8002b04:	2300      	movs	r3, #0
 8002b06:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d108      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x4dc>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d101      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x4dc>
 8002b24:	2301      	movs	r3, #1
 8002b26:	e000      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x4de>
 8002b28:	2300      	movs	r3, #0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d150      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002b2e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d010      	beq.n	8002b56 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 0303 	and.w	r3, r3, #3
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d107      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x504>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d101      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x504>
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e000      	b.n	8002b52 <HAL_ADC_ConfigChannel+0x506>
 8002b50:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d13c      	bne.n	8002bd0 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2b10      	cmp	r3, #16
 8002b5c:	d11d      	bne.n	8002b9a <HAL_ADC_ConfigChannel+0x54e>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b66:	d118      	bne.n	8002b9a <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002b68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b72:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b74:	4b29      	ldr	r3, [pc, #164]	; (8002c1c <HAL_ADC_ConfigChannel+0x5d0>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a29      	ldr	r2, [pc, #164]	; (8002c20 <HAL_ADC_ConfigChannel+0x5d4>)
 8002b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7e:	0c9a      	lsrs	r2, r3, #18
 8002b80:	4613      	mov	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4413      	add	r3, r2
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b8a:	e002      	b.n	8002b92 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1f9      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b98:	e02e      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2b11      	cmp	r3, #17
 8002ba0:	d10b      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x56e>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002baa:	d106      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002bac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002bb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bb6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002bb8:	e01e      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2b12      	cmp	r3, #18
 8002bc0:	d11a      	bne.n	8002bf8 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002bc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002bca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bcc:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002bce:	e013      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd4:	f043 0220 	orr.w	r2, r3, #32
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002be2:	e00a      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	f043 0220 	orr.w	r2, r3, #32
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002bf6:	e000      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002bf8:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002c02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	376c      	adds	r7, #108	; 0x6c
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	50000400 	.word	0x50000400
 8002c18:	50000500 	.word	0x50000500
 8002c1c:	2000003c 	.word	0x2000003c
 8002c20:	431bde83 	.word	0x431bde83

08002c24 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b099      	sub	sp, #100	; 0x64
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c3c:	d102      	bne.n	8002c44 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002c3e:	4b6d      	ldr	r3, [pc, #436]	; (8002df4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002c40:	60bb      	str	r3, [r7, #8]
 8002c42:	e01a      	b.n	8002c7a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a6a      	ldr	r2, [pc, #424]	; (8002df4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d103      	bne.n	8002c56 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002c4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c52:	60bb      	str	r3, [r7, #8]
 8002c54:	e011      	b.n	8002c7a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a67      	ldr	r2, [pc, #412]	; (8002df8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d102      	bne.n	8002c66 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002c60:	4b66      	ldr	r3, [pc, #408]	; (8002dfc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002c62:	60bb      	str	r3, [r7, #8]
 8002c64:	e009      	b.n	8002c7a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a64      	ldr	r2, [pc, #400]	; (8002dfc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d102      	bne.n	8002c76 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002c70:	4b61      	ldr	r3, [pc, #388]	; (8002df8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002c72:	60bb      	str	r3, [r7, #8]
 8002c74:	e001      	b.n	8002c7a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002c76:	2300      	movs	r3, #0
 8002c78:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e0b0      	b.n	8002de6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d101      	bne.n	8002c92 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002c8e:	2302      	movs	r3, #2
 8002c90:	e0a9      	b.n	8002de6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f040 808d 	bne.w	8002dc4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 0304 	and.w	r3, r3, #4
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f040 8086 	bne.w	8002dc4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cc0:	d004      	beq.n	8002ccc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a4b      	ldr	r2, [pc, #300]	; (8002df4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d101      	bne.n	8002cd0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002ccc:	4b4c      	ldr	r3, [pc, #304]	; (8002e00 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002cce:	e000      	b.n	8002cd2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002cd0:	4b4c      	ldr	r3, [pc, #304]	; (8002e04 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002cd2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d040      	beq.n	8002d5e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002cdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	6859      	ldr	r1, [r3, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cee:	035b      	lsls	r3, r3, #13
 8002cf0:	430b      	orrs	r3, r1
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cf6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d108      	bne.n	8002d18 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d101      	bne.n	8002d18 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002d14:	2301      	movs	r3, #1
 8002d16:	e000      	b.n	8002d1a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002d18:	2300      	movs	r3, #0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d15c      	bne.n	8002dd8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d107      	bne.n	8002d3a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d101      	bne.n	8002d3a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002d3a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d14b      	bne.n	8002dd8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002d40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002d48:	f023 030f 	bic.w	r3, r3, #15
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	6811      	ldr	r1, [r2, #0]
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	6892      	ldr	r2, [r2, #8]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	431a      	orrs	r2, r3
 8002d58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d5a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d5c:	e03c      	b.n	8002dd8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002d5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d68:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 0303 	and.w	r3, r3, #3
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d108      	bne.n	8002d8a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d101      	bne.n	8002d8a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d123      	bne.n	8002dd8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f003 0303 	and.w	r3, r3, #3
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d107      	bne.n	8002dac <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d101      	bne.n	8002dac <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002da8:	2301      	movs	r3, #1
 8002daa:	e000      	b.n	8002dae <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002dac:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d112      	bne.n	8002dd8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002db2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002dba:	f023 030f 	bic.w	r3, r3, #15
 8002dbe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002dc0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002dc2:	e009      	b.n	8002dd8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	f043 0220 	orr.w	r2, r3, #32
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002dd6:	e000      	b.n	8002dda <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002dd8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002de2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002de6:	4618      	mov	r0, r3
 8002de8:	3764      	adds	r7, #100	; 0x64
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	50000100 	.word	0x50000100
 8002df8:	50000400 	.word	0x50000400
 8002dfc:	50000500 	.word	0x50000500
 8002e00:	50000300 	.word	0x50000300
 8002e04:	50000700 	.word	0x50000700

08002e08 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d108      	bne.n	8002e34 <ADC_Enable+0x2c>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d101      	bne.n	8002e34 <ADC_Enable+0x2c>
 8002e30:	2301      	movs	r3, #1
 8002e32:	e000      	b.n	8002e36 <ADC_Enable+0x2e>
 8002e34:	2300      	movs	r3, #0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d143      	bne.n	8002ec2 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	4b22      	ldr	r3, [pc, #136]	; (8002ecc <ADC_Enable+0xc4>)
 8002e42:	4013      	ands	r3, r2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00d      	beq.n	8002e64 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4c:	f043 0210 	orr.w	r2, r3, #16
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e58:	f043 0201 	orr.w	r2, r3, #1
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e02f      	b.n	8002ec4 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689a      	ldr	r2, [r3, #8]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 0201 	orr.w	r2, r2, #1
 8002e72:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002e74:	f7fe fd3a 	bl	80018ec <HAL_GetTick>
 8002e78:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e7a:	e01b      	b.n	8002eb4 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e7c:	f7fe fd36 	bl	80018ec <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d914      	bls.n	8002eb4 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d00d      	beq.n	8002eb4 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	f043 0210 	orr.w	r2, r3, #16
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea8:	f043 0201 	orr.w	r2, r3, #1
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e007      	b.n	8002ec4 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d1dc      	bne.n	8002e7c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	8000003f 	.word	0x8000003f

08002ed0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d108      	bne.n	8002efc <ADC_Disable+0x2c>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d101      	bne.n	8002efc <ADC_Disable+0x2c>
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e000      	b.n	8002efe <ADC_Disable+0x2e>
 8002efc:	2300      	movs	r3, #0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d047      	beq.n	8002f92 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f003 030d 	and.w	r3, r3, #13
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d10f      	bne.n	8002f30 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0202 	orr.w	r2, r2, #2
 8002f1e:	609a      	str	r2, [r3, #8]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2203      	movs	r2, #3
 8002f26:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002f28:	f7fe fce0 	bl	80018ec <HAL_GetTick>
 8002f2c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002f2e:	e029      	b.n	8002f84 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f34:	f043 0210 	orr.w	r2, r3, #16
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f40:	f043 0201 	orr.w	r2, r3, #1
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e023      	b.n	8002f94 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f4c:	f7fe fcce 	bl	80018ec <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d914      	bls.n	8002f84 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d10d      	bne.n	8002f84 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	f043 0210 	orr.w	r2, r3, #16
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f78:	f043 0201 	orr.w	r2, r3, #1
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e007      	b.n	8002f94 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d0dc      	beq.n	8002f4c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fac:	4b0c      	ldr	r3, [pc, #48]	; (8002fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fb2:	68ba      	ldr	r2, [r7, #8]
 8002fb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fb8:	4013      	ands	r3, r2
 8002fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fce:	4a04      	ldr	r2, [pc, #16]	; (8002fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	60d3      	str	r3, [r2, #12]
}
 8002fd4:	bf00      	nop
 8002fd6:	3714      	adds	r7, #20
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	e000ed00 	.word	0xe000ed00

08002fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fe8:	4b04      	ldr	r3, [pc, #16]	; (8002ffc <__NVIC_GetPriorityGrouping+0x18>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	0a1b      	lsrs	r3, r3, #8
 8002fee:	f003 0307 	and.w	r3, r3, #7
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	e000ed00 	.word	0xe000ed00

08003000 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	4603      	mov	r3, r0
 8003008:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800300a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300e:	2b00      	cmp	r3, #0
 8003010:	db0b      	blt.n	800302a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003012:	79fb      	ldrb	r3, [r7, #7]
 8003014:	f003 021f 	and.w	r2, r3, #31
 8003018:	4907      	ldr	r1, [pc, #28]	; (8003038 <__NVIC_EnableIRQ+0x38>)
 800301a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301e:	095b      	lsrs	r3, r3, #5
 8003020:	2001      	movs	r0, #1
 8003022:	fa00 f202 	lsl.w	r2, r0, r2
 8003026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800302a:	bf00      	nop
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	e000e100 	.word	0xe000e100

0800303c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	4603      	mov	r3, r0
 8003044:	6039      	str	r1, [r7, #0]
 8003046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304c:	2b00      	cmp	r3, #0
 800304e:	db0a      	blt.n	8003066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	b2da      	uxtb	r2, r3
 8003054:	490c      	ldr	r1, [pc, #48]	; (8003088 <__NVIC_SetPriority+0x4c>)
 8003056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305a:	0112      	lsls	r2, r2, #4
 800305c:	b2d2      	uxtb	r2, r2
 800305e:	440b      	add	r3, r1
 8003060:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003064:	e00a      	b.n	800307c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	b2da      	uxtb	r2, r3
 800306a:	4908      	ldr	r1, [pc, #32]	; (800308c <__NVIC_SetPriority+0x50>)
 800306c:	79fb      	ldrb	r3, [r7, #7]
 800306e:	f003 030f 	and.w	r3, r3, #15
 8003072:	3b04      	subs	r3, #4
 8003074:	0112      	lsls	r2, r2, #4
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	440b      	add	r3, r1
 800307a:	761a      	strb	r2, [r3, #24]
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr
 8003088:	e000e100 	.word	0xe000e100
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003090:	b480      	push	{r7}
 8003092:	b089      	sub	sp, #36	; 0x24
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	f1c3 0307 	rsb	r3, r3, #7
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	bf28      	it	cs
 80030ae:	2304      	movcs	r3, #4
 80030b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	3304      	adds	r3, #4
 80030b6:	2b06      	cmp	r3, #6
 80030b8:	d902      	bls.n	80030c0 <NVIC_EncodePriority+0x30>
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	3b03      	subs	r3, #3
 80030be:	e000      	b.n	80030c2 <NVIC_EncodePriority+0x32>
 80030c0:	2300      	movs	r3, #0
 80030c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c4:	f04f 32ff 	mov.w	r2, #4294967295
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	43da      	mvns	r2, r3
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	401a      	ands	r2, r3
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030d8:	f04f 31ff 	mov.w	r1, #4294967295
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	fa01 f303 	lsl.w	r3, r1, r3
 80030e2:	43d9      	mvns	r1, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030e8:	4313      	orrs	r3, r2
         );
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3724      	adds	r7, #36	; 0x24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
	...

080030f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3b01      	subs	r3, #1
 8003104:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003108:	d301      	bcc.n	800310e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800310a:	2301      	movs	r3, #1
 800310c:	e00f      	b.n	800312e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800310e:	4a0a      	ldr	r2, [pc, #40]	; (8003138 <SysTick_Config+0x40>)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3b01      	subs	r3, #1
 8003114:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003116:	210f      	movs	r1, #15
 8003118:	f04f 30ff 	mov.w	r0, #4294967295
 800311c:	f7ff ff8e 	bl	800303c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003120:	4b05      	ldr	r3, [pc, #20]	; (8003138 <SysTick_Config+0x40>)
 8003122:	2200      	movs	r2, #0
 8003124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003126:	4b04      	ldr	r3, [pc, #16]	; (8003138 <SysTick_Config+0x40>)
 8003128:	2207      	movs	r2, #7
 800312a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	e000e010 	.word	0xe000e010

0800313c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7ff ff29 	bl	8002f9c <__NVIC_SetPriorityGrouping>
}
 800314a:	bf00      	nop
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b086      	sub	sp, #24
 8003156:	af00      	add	r7, sp, #0
 8003158:	4603      	mov	r3, r0
 800315a:	60b9      	str	r1, [r7, #8]
 800315c:	607a      	str	r2, [r7, #4]
 800315e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003160:	2300      	movs	r3, #0
 8003162:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003164:	f7ff ff3e 	bl	8002fe4 <__NVIC_GetPriorityGrouping>
 8003168:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	68b9      	ldr	r1, [r7, #8]
 800316e:	6978      	ldr	r0, [r7, #20]
 8003170:	f7ff ff8e 	bl	8003090 <NVIC_EncodePriority>
 8003174:	4602      	mov	r2, r0
 8003176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800317a:	4611      	mov	r1, r2
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff ff5d 	bl	800303c <__NVIC_SetPriority>
}
 8003182:	bf00      	nop
 8003184:	3718      	adds	r7, #24
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b082      	sub	sp, #8
 800318e:	af00      	add	r7, sp, #0
 8003190:	4603      	mov	r3, r0
 8003192:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff ff31 	bl	8003000 <__NVIC_EnableIRQ>
}
 800319e:	bf00      	nop
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b082      	sub	sp, #8
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f7ff ffa2 	bl	80030f8 <SysTick_Config>
 80031b4:	4603      	mov	r3, r0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
	...

080031c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b087      	sub	sp, #28
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031ca:	2300      	movs	r3, #0
 80031cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031ce:	e154      	b.n	800347a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	2101      	movs	r1, #1
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	fa01 f303 	lsl.w	r3, r1, r3
 80031dc:	4013      	ands	r3, r2
 80031de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 8146 	beq.w	8003474 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f003 0303 	and.w	r3, r3, #3
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d005      	beq.n	8003200 <HAL_GPIO_Init+0x40>
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f003 0303 	and.w	r3, r3, #3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d130      	bne.n	8003262 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	2203      	movs	r2, #3
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	43db      	mvns	r3, r3
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	4013      	ands	r3, r2
 8003216:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	68da      	ldr	r2, [r3, #12]
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	4313      	orrs	r3, r2
 8003228:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003236:	2201      	movs	r2, #1
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	43db      	mvns	r3, r3
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	4013      	ands	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	091b      	lsrs	r3, r3, #4
 800324c:	f003 0201 	and.w	r2, r3, #1
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	4313      	orrs	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	2b03      	cmp	r3, #3
 800326c:	d017      	beq.n	800329e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	2203      	movs	r2, #3
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	43db      	mvns	r3, r3
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	4013      	ands	r3, r2
 8003284:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	689a      	ldr	r2, [r3, #8]
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	4313      	orrs	r3, r2
 8003296:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f003 0303 	and.w	r3, r3, #3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d123      	bne.n	80032f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	08da      	lsrs	r2, r3, #3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	3208      	adds	r2, #8
 80032b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	f003 0307 	and.w	r3, r3, #7
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	220f      	movs	r2, #15
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	43db      	mvns	r3, r3
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	4013      	ands	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	691a      	ldr	r2, [r3, #16]
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f003 0307 	and.w	r3, r3, #7
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	08da      	lsrs	r2, r3, #3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3208      	adds	r2, #8
 80032ec:	6939      	ldr	r1, [r7, #16]
 80032ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	2203      	movs	r2, #3
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	43db      	mvns	r3, r3
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	4013      	ands	r3, r2
 8003308:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f003 0203 	and.w	r2, r3, #3
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	4313      	orrs	r3, r2
 800331e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 80a0 	beq.w	8003474 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003334:	4b58      	ldr	r3, [pc, #352]	; (8003498 <HAL_GPIO_Init+0x2d8>)
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	4a57      	ldr	r2, [pc, #348]	; (8003498 <HAL_GPIO_Init+0x2d8>)
 800333a:	f043 0301 	orr.w	r3, r3, #1
 800333e:	6193      	str	r3, [r2, #24]
 8003340:	4b55      	ldr	r3, [pc, #340]	; (8003498 <HAL_GPIO_Init+0x2d8>)
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	60bb      	str	r3, [r7, #8]
 800334a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800334c:	4a53      	ldr	r2, [pc, #332]	; (800349c <HAL_GPIO_Init+0x2dc>)
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	089b      	lsrs	r3, r3, #2
 8003352:	3302      	adds	r3, #2
 8003354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003358:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f003 0303 	and.w	r3, r3, #3
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	220f      	movs	r2, #15
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	43db      	mvns	r3, r3
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	4013      	ands	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003376:	d019      	beq.n	80033ac <HAL_GPIO_Init+0x1ec>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a49      	ldr	r2, [pc, #292]	; (80034a0 <HAL_GPIO_Init+0x2e0>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d013      	beq.n	80033a8 <HAL_GPIO_Init+0x1e8>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a48      	ldr	r2, [pc, #288]	; (80034a4 <HAL_GPIO_Init+0x2e4>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d00d      	beq.n	80033a4 <HAL_GPIO_Init+0x1e4>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a47      	ldr	r2, [pc, #284]	; (80034a8 <HAL_GPIO_Init+0x2e8>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d007      	beq.n	80033a0 <HAL_GPIO_Init+0x1e0>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a46      	ldr	r2, [pc, #280]	; (80034ac <HAL_GPIO_Init+0x2ec>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d101      	bne.n	800339c <HAL_GPIO_Init+0x1dc>
 8003398:	2304      	movs	r3, #4
 800339a:	e008      	b.n	80033ae <HAL_GPIO_Init+0x1ee>
 800339c:	2305      	movs	r3, #5
 800339e:	e006      	b.n	80033ae <HAL_GPIO_Init+0x1ee>
 80033a0:	2303      	movs	r3, #3
 80033a2:	e004      	b.n	80033ae <HAL_GPIO_Init+0x1ee>
 80033a4:	2302      	movs	r3, #2
 80033a6:	e002      	b.n	80033ae <HAL_GPIO_Init+0x1ee>
 80033a8:	2301      	movs	r3, #1
 80033aa:	e000      	b.n	80033ae <HAL_GPIO_Init+0x1ee>
 80033ac:	2300      	movs	r3, #0
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	f002 0203 	and.w	r2, r2, #3
 80033b4:	0092      	lsls	r2, r2, #2
 80033b6:	4093      	lsls	r3, r2
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80033be:	4937      	ldr	r1, [pc, #220]	; (800349c <HAL_GPIO_Init+0x2dc>)
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	089b      	lsrs	r3, r3, #2
 80033c4:	3302      	adds	r3, #2
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033cc:	4b38      	ldr	r3, [pc, #224]	; (80034b0 <HAL_GPIO_Init+0x2f0>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	43db      	mvns	r3, r3
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	4013      	ands	r3, r2
 80033da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80033f0:	4a2f      	ldr	r2, [pc, #188]	; (80034b0 <HAL_GPIO_Init+0x2f0>)
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80033f6:	4b2e      	ldr	r3, [pc, #184]	; (80034b0 <HAL_GPIO_Init+0x2f0>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	43db      	mvns	r3, r3
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	4013      	ands	r3, r2
 8003404:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4313      	orrs	r3, r2
 8003418:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800341a:	4a25      	ldr	r2, [pc, #148]	; (80034b0 <HAL_GPIO_Init+0x2f0>)
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003420:	4b23      	ldr	r3, [pc, #140]	; (80034b0 <HAL_GPIO_Init+0x2f0>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	43db      	mvns	r3, r3
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	4013      	ands	r3, r2
 800342e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	4313      	orrs	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003444:	4a1a      	ldr	r2, [pc, #104]	; (80034b0 <HAL_GPIO_Init+0x2f0>)
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800344a:	4b19      	ldr	r3, [pc, #100]	; (80034b0 <HAL_GPIO_Init+0x2f0>)
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	43db      	mvns	r3, r3
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	4013      	ands	r3, r2
 8003458:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4313      	orrs	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800346e:	4a10      	ldr	r2, [pc, #64]	; (80034b0 <HAL_GPIO_Init+0x2f0>)
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	3301      	adds	r3, #1
 8003478:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	fa22 f303 	lsr.w	r3, r2, r3
 8003484:	2b00      	cmp	r3, #0
 8003486:	f47f aea3 	bne.w	80031d0 <HAL_GPIO_Init+0x10>
  }
}
 800348a:	bf00      	nop
 800348c:	bf00      	nop
 800348e:	371c      	adds	r7, #28
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	40021000 	.word	0x40021000
 800349c:	40010000 	.word	0x40010000
 80034a0:	48000400 	.word	0x48000400
 80034a4:	48000800 	.word	0x48000800
 80034a8:	48000c00 	.word	0x48000c00
 80034ac:	48001000 	.word	0x48001000
 80034b0:	40010400 	.word	0x40010400

080034b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	460b      	mov	r3, r1
 80034be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	691a      	ldr	r2, [r3, #16]
 80034c4:	887b      	ldrh	r3, [r7, #2]
 80034c6:	4013      	ands	r3, r2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d002      	beq.n	80034d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034cc:	2301      	movs	r3, #1
 80034ce:	73fb      	strb	r3, [r7, #15]
 80034d0:	e001      	b.n	80034d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034d2:	2300      	movs	r3, #0
 80034d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	460b      	mov	r3, r1
 80034ee:	807b      	strh	r3, [r7, #2]
 80034f0:	4613      	mov	r3, r2
 80034f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034f4:	787b      	ldrb	r3, [r7, #1]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034fa:	887a      	ldrh	r2, [r7, #2]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003500:	e002      	b.n	8003508 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003502:	887a      	ldrh	r2, [r7, #2]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	4603      	mov	r3, r0
 800351c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800351e:	4b08      	ldr	r3, [pc, #32]	; (8003540 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003520:	695a      	ldr	r2, [r3, #20]
 8003522:	88fb      	ldrh	r3, [r7, #6]
 8003524:	4013      	ands	r3, r2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d006      	beq.n	8003538 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800352a:	4a05      	ldr	r2, [pc, #20]	; (8003540 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800352c:	88fb      	ldrh	r3, [r7, #6]
 800352e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003530:	88fb      	ldrh	r3, [r7, #6]
 8003532:	4618      	mov	r0, r3
 8003534:	f000 f806 	bl	8003544 <HAL_GPIO_EXTI_Callback>
  }
}
 8003538:	bf00      	nop
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40010400 	.word	0x40010400

08003544 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	4603      	mov	r3, r0
 800354c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800354e:	bf00      	nop
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr

0800355a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b082      	sub	sp, #8
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e081      	b.n	8003670 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	d106      	bne.n	8003586 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f7fd fecf 	bl	8001324 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2224      	movs	r2, #36	; 0x24
 800358a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 0201 	bic.w	r2, r2, #1
 800359c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035aa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689a      	ldr	r2, [r3, #8]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035ba:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d107      	bne.n	80035d4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035d0:	609a      	str	r2, [r3, #8]
 80035d2:	e006      	b.n	80035e2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80035e0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d104      	bne.n	80035f4 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035f2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6812      	ldr	r2, [r2, #0]
 80035fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003606:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003616:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	691a      	ldr	r2, [r3, #16]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69d9      	ldr	r1, [r3, #28]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a1a      	ldr	r2, [r3, #32]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f042 0201 	orr.w	r2, r2, #1
 8003650:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3708      	adds	r7, #8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b20      	cmp	r3, #32
 800368c:	d138      	bne.n	8003700 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003694:	2b01      	cmp	r3, #1
 8003696:	d101      	bne.n	800369c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003698:	2302      	movs	r3, #2
 800369a:	e032      	b.n	8003702 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2224      	movs	r2, #36	; 0x24
 80036a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0201 	bic.w	r2, r2, #1
 80036ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6819      	ldr	r1, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	430a      	orrs	r2, r1
 80036da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0201 	orr.w	r2, r2, #1
 80036ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2220      	movs	r2, #32
 80036f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036fc:	2300      	movs	r3, #0
 80036fe:	e000      	b.n	8003702 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003700:	2302      	movs	r3, #2
  }
}
 8003702:	4618      	mov	r0, r3
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800370e:	b480      	push	{r7}
 8003710:	b085      	sub	sp, #20
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
 8003716:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b20      	cmp	r3, #32
 8003722:	d139      	bne.n	8003798 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800372a:	2b01      	cmp	r3, #1
 800372c:	d101      	bne.n	8003732 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800372e:	2302      	movs	r3, #2
 8003730:	e033      	b.n	800379a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2224      	movs	r2, #36	; 0x24
 800373e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0201 	bic.w	r2, r2, #1
 8003750:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003760:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	021b      	lsls	r3, r3, #8
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	4313      	orrs	r3, r2
 800376a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 0201 	orr.w	r2, r2, #1
 8003782:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2220      	movs	r2, #32
 8003788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003794:	2300      	movs	r3, #0
 8003796:	e000      	b.n	800379a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003798:	2302      	movs	r3, #2
  }
}
 800379a:	4618      	mov	r0, r3
 800379c:	3714      	adds	r7, #20
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80037a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037a8:	b08b      	sub	sp, #44	; 0x2c
 80037aa:	af06      	add	r7, sp, #24
 80037ac:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e0d0      	b.n	800395a <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d106      	bne.n	80037d2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f7fd fe95 	bl	80014fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2203      	movs	r2, #3
 80037d6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f002 fbde 	bl	8005fa0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037e4:	2300      	movs	r3, #0
 80037e6:	73fb      	strb	r3, [r7, #15]
 80037e8:	e04c      	b.n	8003884 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037ea:	7bfb      	ldrb	r3, [r7, #15]
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	1c5a      	adds	r2, r3, #1
 80037f0:	4613      	mov	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	440b      	add	r3, r1
 80037fa:	3301      	adds	r3, #1
 80037fc:	2201      	movs	r2, #1
 80037fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003800:	7bfb      	ldrb	r3, [r7, #15]
 8003802:	6879      	ldr	r1, [r7, #4]
 8003804:	1c5a      	adds	r2, r3, #1
 8003806:	4613      	mov	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4413      	add	r3, r2
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	440b      	add	r3, r1
 8003810:	7bfa      	ldrb	r2, [r7, #15]
 8003812:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003814:	7bfa      	ldrb	r2, [r7, #15]
 8003816:	7bfb      	ldrb	r3, [r7, #15]
 8003818:	b298      	uxth	r0, r3
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	4613      	mov	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	440b      	add	r3, r1
 8003826:	3336      	adds	r3, #54	; 0x36
 8003828:	4602      	mov	r2, r0
 800382a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800382c:	7bfb      	ldrb	r3, [r7, #15]
 800382e:	6879      	ldr	r1, [r7, #4]
 8003830:	1c5a      	adds	r2, r3, #1
 8003832:	4613      	mov	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4413      	add	r3, r2
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	440b      	add	r3, r1
 800383c:	3303      	adds	r3, #3
 800383e:	2200      	movs	r2, #0
 8003840:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003842:	7bfa      	ldrb	r2, [r7, #15]
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	4613      	mov	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4413      	add	r3, r2
 800384c:	00db      	lsls	r3, r3, #3
 800384e:	440b      	add	r3, r1
 8003850:	3338      	adds	r3, #56	; 0x38
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003856:	7bfa      	ldrb	r2, [r7, #15]
 8003858:	6879      	ldr	r1, [r7, #4]
 800385a:	4613      	mov	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4413      	add	r3, r2
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	440b      	add	r3, r1
 8003864:	333c      	adds	r3, #60	; 0x3c
 8003866:	2200      	movs	r2, #0
 8003868:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800386a:	7bfa      	ldrb	r2, [r7, #15]
 800386c:	6879      	ldr	r1, [r7, #4]
 800386e:	4613      	mov	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	440b      	add	r3, r1
 8003878:	3340      	adds	r3, #64	; 0x40
 800387a:	2200      	movs	r2, #0
 800387c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800387e:	7bfb      	ldrb	r3, [r7, #15]
 8003880:	3301      	adds	r3, #1
 8003882:	73fb      	strb	r3, [r7, #15]
 8003884:	7bfa      	ldrb	r2, [r7, #15]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	429a      	cmp	r2, r3
 800388c:	d3ad      	bcc.n	80037ea <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800388e:	2300      	movs	r3, #0
 8003890:	73fb      	strb	r3, [r7, #15]
 8003892:	e044      	b.n	800391e <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003894:	7bfa      	ldrb	r2, [r7, #15]
 8003896:	6879      	ldr	r1, [r7, #4]
 8003898:	4613      	mov	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	440b      	add	r3, r1
 80038a2:	f203 1369 	addw	r3, r3, #361	; 0x169
 80038a6:	2200      	movs	r2, #0
 80038a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80038aa:	7bfa      	ldrb	r2, [r7, #15]
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	4613      	mov	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4413      	add	r3, r2
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	440b      	add	r3, r1
 80038b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80038bc:	7bfa      	ldrb	r2, [r7, #15]
 80038be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80038c0:	7bfa      	ldrb	r2, [r7, #15]
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	4613      	mov	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4413      	add	r3, r2
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	440b      	add	r3, r1
 80038ce:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80038d2:	2200      	movs	r2, #0
 80038d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80038d6:	7bfa      	ldrb	r2, [r7, #15]
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	4613      	mov	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	4413      	add	r3, r2
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	440b      	add	r3, r1
 80038e4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038ec:	7bfa      	ldrb	r2, [r7, #15]
 80038ee:	6879      	ldr	r1, [r7, #4]
 80038f0:	4613      	mov	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4413      	add	r3, r2
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	440b      	add	r3, r1
 80038fa:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80038fe:	2200      	movs	r2, #0
 8003900:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003902:	7bfa      	ldrb	r2, [r7, #15]
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	4613      	mov	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	4413      	add	r3, r2
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	440b      	add	r3, r1
 8003910:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003918:	7bfb      	ldrb	r3, [r7, #15]
 800391a:	3301      	adds	r3, #1
 800391c:	73fb      	strb	r3, [r7, #15]
 800391e:	7bfa      	ldrb	r2, [r7, #15]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	429a      	cmp	r2, r3
 8003926:	d3b5      	bcc.n	8003894 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	603b      	str	r3, [r7, #0]
 800392e:	687e      	ldr	r6, [r7, #4]
 8003930:	466d      	mov	r5, sp
 8003932:	f106 0410 	add.w	r4, r6, #16
 8003936:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003938:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800393a:	6823      	ldr	r3, [r4, #0]
 800393c:	602b      	str	r3, [r5, #0]
 800393e:	1d33      	adds	r3, r6, #4
 8003940:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003942:	6838      	ldr	r0, [r7, #0]
 8003944:	f002 fb47 	bl	8005fd6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003964 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800396a:	af00      	add	r7, sp, #0
 800396c:	1d3b      	adds	r3, r7, #4
 800396e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003970:	1d3b      	adds	r3, r7, #4
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d102      	bne.n	800397e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	f000 bef4 	b.w	8004766 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800397e:	1d3b      	adds	r3, r7, #4
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 816a 	beq.w	8003c62 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800398e:	4bb3      	ldr	r3, [pc, #716]	; (8003c5c <HAL_RCC_OscConfig+0x2f8>)
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f003 030c 	and.w	r3, r3, #12
 8003996:	2b04      	cmp	r3, #4
 8003998:	d00c      	beq.n	80039b4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800399a:	4bb0      	ldr	r3, [pc, #704]	; (8003c5c <HAL_RCC_OscConfig+0x2f8>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f003 030c 	and.w	r3, r3, #12
 80039a2:	2b08      	cmp	r3, #8
 80039a4:	d159      	bne.n	8003a5a <HAL_RCC_OscConfig+0xf6>
 80039a6:	4bad      	ldr	r3, [pc, #692]	; (8003c5c <HAL_RCC_OscConfig+0x2f8>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b2:	d152      	bne.n	8003a5a <HAL_RCC_OscConfig+0xf6>
 80039b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039b8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039bc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80039c0:	fa93 f3a3 	rbit	r3, r3
 80039c4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 80039c8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039cc:	fab3 f383 	clz	r3, r3
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	095b      	lsrs	r3, r3, #5
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	f043 0301 	orr.w	r3, r3, #1
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d102      	bne.n	80039e6 <HAL_RCC_OscConfig+0x82>
 80039e0:	4b9e      	ldr	r3, [pc, #632]	; (8003c5c <HAL_RCC_OscConfig+0x2f8>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	e015      	b.n	8003a12 <HAL_RCC_OscConfig+0xae>
 80039e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039ea:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ee:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80039f2:	fa93 f3a3 	rbit	r3, r3
 80039f6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80039fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80039fe:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003a02:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003a06:	fa93 f3a3 	rbit	r3, r3
 8003a0a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003a0e:	4b93      	ldr	r3, [pc, #588]	; (8003c5c <HAL_RCC_OscConfig+0x2f8>)
 8003a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a16:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003a1a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003a1e:	fa92 f2a2 	rbit	r2, r2
 8003a22:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003a26:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003a2a:	fab2 f282 	clz	r2, r2
 8003a2e:	b2d2      	uxtb	r2, r2
 8003a30:	f042 0220 	orr.w	r2, r2, #32
 8003a34:	b2d2      	uxtb	r2, r2
 8003a36:	f002 021f 	and.w	r2, r2, #31
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a40:	4013      	ands	r3, r2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 810c 	beq.w	8003c60 <HAL_RCC_OscConfig+0x2fc>
 8003a48:	1d3b      	adds	r3, r7, #4
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f040 8106 	bne.w	8003c60 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	f000 be86 	b.w	8004766 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a5a:	1d3b      	adds	r3, r7, #4
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a64:	d106      	bne.n	8003a74 <HAL_RCC_OscConfig+0x110>
 8003a66:	4b7d      	ldr	r3, [pc, #500]	; (8003c5c <HAL_RCC_OscConfig+0x2f8>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a7c      	ldr	r2, [pc, #496]	; (8003c5c <HAL_RCC_OscConfig+0x2f8>)
 8003a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a70:	6013      	str	r3, [r2, #0]
 8003a72:	e030      	b.n	8003ad6 <HAL_RCC_OscConfig+0x172>
 8003a74:	1d3b      	adds	r3, r7, #4
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10c      	bne.n	8003a98 <HAL_RCC_OscConfig+0x134>
 8003a7e:	4b77      	ldr	r3, [pc, #476]	; (8003c5c <HAL_RCC_OscConfig+0x2f8>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a76      	ldr	r2, [pc, #472]	; (8003c5c <HAL_RCC_OscConfig+0x2f8>)
 8003a84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a88:	6013      	str	r3, [r2, #0]
 8003a8a:	4b74      	ldr	r3, [pc, #464]	; (8003c5c <HAL_RCC_OscConfig+0x2f8>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a73      	ldr	r2, [pc, #460]	; (8003c5c <HAL_RCC_OscConfig+0x2f8>)
 8003a90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a94:	6013      	str	r3, [r2, #0]
 8003a96:	e01e      	b.n	8003ad6 <HAL_RCC_OscConfig+0x172>
 8003a98:	1d3b      	adds	r3, r7, #4
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003aa2:	d10c      	bne.n	8003abe <HAL_RCC_OscConfig+0x15a>
 8003aa4:	4b6d      	ldr	r3, [pc, #436]	; (8003c5c <HAL_RCC_OscConfig+0x2f8>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a6c      	ldr	r2, [pc, #432]	; (8003c5c <HAL_RCC_OscConfig+0x2f8>)
 8003aaa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aae:	6013      	str	r3, [r2, #0]
 8003ab0:	4b6a      	ldr	r3, [pc, #424]	; (8003c5c <HAL_RCC_OscConfig+0x2f8>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a69      	ldr	r2, [pc, #420]	; (8003c5c <HAL_RCC_OscConfig+0x2f8>)
 8003ab6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aba:	6013      	str	r3, [r2, #0]
 8003abc:	e00b      	b.n	8003ad6 <HAL_RCC_OscConfig+0x172>
 8003abe:	4b67      	ldr	r3, [pc, #412]	; (8003c5c <HAL_RCC_OscConfig+0x2f8>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a66      	ldr	r2, [pc, #408]	; (8003c5c <HAL_RCC_OscConfig+0x2f8>)
 8003ac4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ac8:	6013      	str	r3, [r2, #0]
 8003aca:	4b64      	ldr	r3, [pc, #400]	; (8003c5c <HAL_RCC_OscConfig+0x2f8>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a63      	ldr	r2, [pc, #396]	; (8003c5c <HAL_RCC_OscConfig+0x2f8>)
 8003ad0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ad4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ad6:	4b61      	ldr	r3, [pc, #388]	; (8003c5c <HAL_RCC_OscConfig+0x2f8>)
 8003ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ada:	f023 020f 	bic.w	r2, r3, #15
 8003ade:	1d3b      	adds	r3, r7, #4
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	495d      	ldr	r1, [pc, #372]	; (8003c5c <HAL_RCC_OscConfig+0x2f8>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003aea:	1d3b      	adds	r3, r7, #4
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d059      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af4:	f7fd fefa 	bl	80018ec <HAL_GetTick>
 8003af8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003afc:	e00a      	b.n	8003b14 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003afe:	f7fd fef5 	bl	80018ec <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b64      	cmp	r3, #100	; 0x64
 8003b0c:	d902      	bls.n	8003b14 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	f000 be29 	b.w	8004766 <HAL_RCC_OscConfig+0xe02>
 8003b14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b18:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003b20:	fa93 f3a3 	rbit	r3, r3
 8003b24:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003b28:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b2c:	fab3 f383 	clz	r3, r3
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	095b      	lsrs	r3, r3, #5
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	f043 0301 	orr.w	r3, r3, #1
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d102      	bne.n	8003b46 <HAL_RCC_OscConfig+0x1e2>
 8003b40:	4b46      	ldr	r3, [pc, #280]	; (8003c5c <HAL_RCC_OscConfig+0x2f8>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	e015      	b.n	8003b72 <HAL_RCC_OscConfig+0x20e>
 8003b46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b4a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003b52:	fa93 f3a3 	rbit	r3, r3
 8003b56:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003b5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b5e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003b62:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003b66:	fa93 f3a3 	rbit	r3, r3
 8003b6a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003b6e:	4b3b      	ldr	r3, [pc, #236]	; (8003c5c <HAL_RCC_OscConfig+0x2f8>)
 8003b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b76:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003b7a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003b7e:	fa92 f2a2 	rbit	r2, r2
 8003b82:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003b86:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003b8a:	fab2 f282 	clz	r2, r2
 8003b8e:	b2d2      	uxtb	r2, r2
 8003b90:	f042 0220 	orr.w	r2, r2, #32
 8003b94:	b2d2      	uxtb	r2, r2
 8003b96:	f002 021f 	and.w	r2, r2, #31
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0ab      	beq.n	8003afe <HAL_RCC_OscConfig+0x19a>
 8003ba6:	e05c      	b.n	8003c62 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba8:	f7fd fea0 	bl	80018ec <HAL_GetTick>
 8003bac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bb0:	e00a      	b.n	8003bc8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bb2:	f7fd fe9b 	bl	80018ec <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b64      	cmp	r3, #100	; 0x64
 8003bc0:	d902      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	f000 bdcf 	b.w	8004766 <HAL_RCC_OscConfig+0xe02>
 8003bc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bcc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003bd4:	fa93 f3a3 	rbit	r3, r3
 8003bd8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003bdc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003be0:	fab3 f383 	clz	r3, r3
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	095b      	lsrs	r3, r3, #5
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	f043 0301 	orr.w	r3, r3, #1
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d102      	bne.n	8003bfa <HAL_RCC_OscConfig+0x296>
 8003bf4:	4b19      	ldr	r3, [pc, #100]	; (8003c5c <HAL_RCC_OscConfig+0x2f8>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	e015      	b.n	8003c26 <HAL_RCC_OscConfig+0x2c2>
 8003bfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bfe:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c02:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003c06:	fa93 f3a3 	rbit	r3, r3
 8003c0a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003c0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c12:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003c16:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003c1a:	fa93 f3a3 	rbit	r3, r3
 8003c1e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003c22:	4b0e      	ldr	r3, [pc, #56]	; (8003c5c <HAL_RCC_OscConfig+0x2f8>)
 8003c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c2a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003c2e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003c32:	fa92 f2a2 	rbit	r2, r2
 8003c36:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003c3a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003c3e:	fab2 f282 	clz	r2, r2
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	f042 0220 	orr.w	r2, r2, #32
 8003c48:	b2d2      	uxtb	r2, r2
 8003c4a:	f002 021f 	and.w	r2, r2, #31
 8003c4e:	2101      	movs	r1, #1
 8003c50:	fa01 f202 	lsl.w	r2, r1, r2
 8003c54:	4013      	ands	r3, r2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1ab      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x24e>
 8003c5a:	e002      	b.n	8003c62 <HAL_RCC_OscConfig+0x2fe>
 8003c5c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c62:	1d3b      	adds	r3, r7, #4
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 816f 	beq.w	8003f50 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003c72:	4bd0      	ldr	r3, [pc, #832]	; (8003fb4 <HAL_RCC_OscConfig+0x650>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f003 030c 	and.w	r3, r3, #12
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00b      	beq.n	8003c96 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003c7e:	4bcd      	ldr	r3, [pc, #820]	; (8003fb4 <HAL_RCC_OscConfig+0x650>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f003 030c 	and.w	r3, r3, #12
 8003c86:	2b08      	cmp	r3, #8
 8003c88:	d16c      	bne.n	8003d64 <HAL_RCC_OscConfig+0x400>
 8003c8a:	4bca      	ldr	r3, [pc, #808]	; (8003fb4 <HAL_RCC_OscConfig+0x650>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d166      	bne.n	8003d64 <HAL_RCC_OscConfig+0x400>
 8003c96:	2302      	movs	r3, #2
 8003c98:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003ca0:	fa93 f3a3 	rbit	r3, r3
 8003ca4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003ca8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cac:	fab3 f383 	clz	r3, r3
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	095b      	lsrs	r3, r3, #5
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	f043 0301 	orr.w	r3, r3, #1
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d102      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x362>
 8003cc0:	4bbc      	ldr	r3, [pc, #752]	; (8003fb4 <HAL_RCC_OscConfig+0x650>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	e013      	b.n	8003cee <HAL_RCC_OscConfig+0x38a>
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ccc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003cd0:	fa93 f3a3 	rbit	r3, r3
 8003cd4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003cd8:	2302      	movs	r3, #2
 8003cda:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003cde:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003ce2:	fa93 f3a3 	rbit	r3, r3
 8003ce6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003cea:	4bb2      	ldr	r3, [pc, #712]	; (8003fb4 <HAL_RCC_OscConfig+0x650>)
 8003cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cee:	2202      	movs	r2, #2
 8003cf0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003cf4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003cf8:	fa92 f2a2 	rbit	r2, r2
 8003cfc:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003d00:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003d04:	fab2 f282 	clz	r2, r2
 8003d08:	b2d2      	uxtb	r2, r2
 8003d0a:	f042 0220 	orr.w	r2, r2, #32
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	f002 021f 	and.w	r2, r2, #31
 8003d14:	2101      	movs	r1, #1
 8003d16:	fa01 f202 	lsl.w	r2, r1, r2
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d007      	beq.n	8003d30 <HAL_RCC_OscConfig+0x3cc>
 8003d20:	1d3b      	adds	r3, r7, #4
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d002      	beq.n	8003d30 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	f000 bd1b 	b.w	8004766 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d30:	4ba0      	ldr	r3, [pc, #640]	; (8003fb4 <HAL_RCC_OscConfig+0x650>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d38:	1d3b      	adds	r3, r7, #4
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	21f8      	movs	r1, #248	; 0xf8
 8003d40:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d44:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003d48:	fa91 f1a1 	rbit	r1, r1
 8003d4c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003d50:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003d54:	fab1 f181 	clz	r1, r1
 8003d58:	b2c9      	uxtb	r1, r1
 8003d5a:	408b      	lsls	r3, r1
 8003d5c:	4995      	ldr	r1, [pc, #596]	; (8003fb4 <HAL_RCC_OscConfig+0x650>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d62:	e0f5      	b.n	8003f50 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d64:	1d3b      	adds	r3, r7, #4
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 8085 	beq.w	8003e7a <HAL_RCC_OscConfig+0x516>
 8003d70:	2301      	movs	r3, #1
 8003d72:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d76:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003d7a:	fa93 f3a3 	rbit	r3, r3
 8003d7e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003d82:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d86:	fab3 f383 	clz	r3, r3
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d90:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	461a      	mov	r2, r3
 8003d98:	2301      	movs	r3, #1
 8003d9a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d9c:	f7fd fda6 	bl	80018ec <HAL_GetTick>
 8003da0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da4:	e00a      	b.n	8003dbc <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003da6:	f7fd fda1 	bl	80018ec <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d902      	bls.n	8003dbc <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	f000 bcd5 	b.w	8004766 <HAL_RCC_OscConfig+0xe02>
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003dc6:	fa93 f3a3 	rbit	r3, r3
 8003dca:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003dce:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd2:	fab3 f383 	clz	r3, r3
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	095b      	lsrs	r3, r3, #5
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	f043 0301 	orr.w	r3, r3, #1
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d102      	bne.n	8003dec <HAL_RCC_OscConfig+0x488>
 8003de6:	4b73      	ldr	r3, [pc, #460]	; (8003fb4 <HAL_RCC_OscConfig+0x650>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	e013      	b.n	8003e14 <HAL_RCC_OscConfig+0x4b0>
 8003dec:	2302      	movs	r3, #2
 8003dee:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003df6:	fa93 f3a3 	rbit	r3, r3
 8003dfa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003dfe:	2302      	movs	r3, #2
 8003e00:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003e04:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003e08:	fa93 f3a3 	rbit	r3, r3
 8003e0c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003e10:	4b68      	ldr	r3, [pc, #416]	; (8003fb4 <HAL_RCC_OscConfig+0x650>)
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	2202      	movs	r2, #2
 8003e16:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003e1a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003e1e:	fa92 f2a2 	rbit	r2, r2
 8003e22:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003e26:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003e2a:	fab2 f282 	clz	r2, r2
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	f042 0220 	orr.w	r2, r2, #32
 8003e34:	b2d2      	uxtb	r2, r2
 8003e36:	f002 021f 	and.w	r2, r2, #31
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e40:	4013      	ands	r3, r2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0af      	beq.n	8003da6 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e46:	4b5b      	ldr	r3, [pc, #364]	; (8003fb4 <HAL_RCC_OscConfig+0x650>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e4e:	1d3b      	adds	r3, r7, #4
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	695b      	ldr	r3, [r3, #20]
 8003e54:	21f8      	movs	r1, #248	; 0xf8
 8003e56:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003e5e:	fa91 f1a1 	rbit	r1, r1
 8003e62:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003e66:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003e6a:	fab1 f181 	clz	r1, r1
 8003e6e:	b2c9      	uxtb	r1, r1
 8003e70:	408b      	lsls	r3, r1
 8003e72:	4950      	ldr	r1, [pc, #320]	; (8003fb4 <HAL_RCC_OscConfig+0x650>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	600b      	str	r3, [r1, #0]
 8003e78:	e06a      	b.n	8003f50 <HAL_RCC_OscConfig+0x5ec>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e80:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003e84:	fa93 f3a3 	rbit	r3, r3
 8003e88:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003e8c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e90:	fab3 f383 	clz	r3, r3
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e9a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea6:	f7fd fd21 	bl	80018ec <HAL_GetTick>
 8003eaa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eae:	e00a      	b.n	8003ec6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eb0:	f7fd fd1c 	bl	80018ec <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d902      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	f000 bc50 	b.w	8004766 <HAL_RCC_OscConfig+0xe02>
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ecc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003ed0:	fa93 f3a3 	rbit	r3, r3
 8003ed4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003ed8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003edc:	fab3 f383 	clz	r3, r3
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	095b      	lsrs	r3, r3, #5
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	f043 0301 	orr.w	r3, r3, #1
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d102      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x592>
 8003ef0:	4b30      	ldr	r3, [pc, #192]	; (8003fb4 <HAL_RCC_OscConfig+0x650>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	e013      	b.n	8003f1e <HAL_RCC_OscConfig+0x5ba>
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003f00:	fa93 f3a3 	rbit	r3, r3
 8003f04:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003f08:	2302      	movs	r3, #2
 8003f0a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003f0e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003f12:	fa93 f3a3 	rbit	r3, r3
 8003f16:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003f1a:	4b26      	ldr	r3, [pc, #152]	; (8003fb4 <HAL_RCC_OscConfig+0x650>)
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	2202      	movs	r2, #2
 8003f20:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003f24:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003f28:	fa92 f2a2 	rbit	r2, r2
 8003f2c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003f30:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003f34:	fab2 f282 	clz	r2, r2
 8003f38:	b2d2      	uxtb	r2, r2
 8003f3a:	f042 0220 	orr.w	r2, r2, #32
 8003f3e:	b2d2      	uxtb	r2, r2
 8003f40:	f002 021f 	and.w	r2, r2, #31
 8003f44:	2101      	movs	r1, #1
 8003f46:	fa01 f202 	lsl.w	r2, r1, r2
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1af      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f50:	1d3b      	adds	r3, r7, #4
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0308 	and.w	r3, r3, #8
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 80da 	beq.w	8004114 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f60:	1d3b      	adds	r3, r7, #4
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d069      	beq.n	800403e <HAL_RCC_OscConfig+0x6da>
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f70:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003f74:	fa93 f3a3 	rbit	r3, r3
 8003f78:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003f7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f80:	fab3 f383 	clz	r3, r3
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	461a      	mov	r2, r3
 8003f88:	4b0b      	ldr	r3, [pc, #44]	; (8003fb8 <HAL_RCC_OscConfig+0x654>)
 8003f8a:	4413      	add	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	461a      	mov	r2, r3
 8003f90:	2301      	movs	r3, #1
 8003f92:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f94:	f7fd fcaa 	bl	80018ec <HAL_GetTick>
 8003f98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f9c:	e00e      	b.n	8003fbc <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f9e:	f7fd fca5 	bl	80018ec <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d906      	bls.n	8003fbc <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e3d9      	b.n	8004766 <HAL_RCC_OscConfig+0xe02>
 8003fb2:	bf00      	nop
 8003fb4:	40021000 	.word	0x40021000
 8003fb8:	10908120 	.word	0x10908120
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003fc6:	fa93 f3a3 	rbit	r3, r3
 8003fca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003fce:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	fa93 f2a3 	rbit	r2, r3
 8003fe0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003fea:	2202      	movs	r2, #2
 8003fec:	601a      	str	r2, [r3, #0]
 8003fee:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	fa93 f2a3 	rbit	r2, r3
 8003ff8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003ffc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ffe:	4ba5      	ldr	r3, [pc, #660]	; (8004294 <HAL_RCC_OscConfig+0x930>)
 8004000:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004002:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004006:	2102      	movs	r1, #2
 8004008:	6019      	str	r1, [r3, #0]
 800400a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	fa93 f1a3 	rbit	r1, r3
 8004014:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004018:	6019      	str	r1, [r3, #0]
  return result;
 800401a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	fab3 f383 	clz	r3, r3
 8004024:	b2db      	uxtb	r3, r3
 8004026:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800402a:	b2db      	uxtb	r3, r3
 800402c:	f003 031f 	and.w	r3, r3, #31
 8004030:	2101      	movs	r1, #1
 8004032:	fa01 f303 	lsl.w	r3, r1, r3
 8004036:	4013      	ands	r3, r2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d0b0      	beq.n	8003f9e <HAL_RCC_OscConfig+0x63a>
 800403c:	e06a      	b.n	8004114 <HAL_RCC_OscConfig+0x7b0>
 800403e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004042:	2201      	movs	r2, #1
 8004044:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004046:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	fa93 f2a3 	rbit	r2, r3
 8004050:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004054:	601a      	str	r2, [r3, #0]
  return result;
 8004056:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800405a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800405c:	fab3 f383 	clz	r3, r3
 8004060:	b2db      	uxtb	r3, r3
 8004062:	461a      	mov	r2, r3
 8004064:	4b8c      	ldr	r3, [pc, #560]	; (8004298 <HAL_RCC_OscConfig+0x934>)
 8004066:	4413      	add	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	461a      	mov	r2, r3
 800406c:	2300      	movs	r3, #0
 800406e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004070:	f7fd fc3c 	bl	80018ec <HAL_GetTick>
 8004074:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004078:	e009      	b.n	800408e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800407a:	f7fd fc37 	bl	80018ec <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b02      	cmp	r3, #2
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e36b      	b.n	8004766 <HAL_RCC_OscConfig+0xe02>
 800408e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004092:	2202      	movs	r2, #2
 8004094:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004096:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	fa93 f2a3 	rbit	r2, r3
 80040a0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80040a4:	601a      	str	r2, [r3, #0]
 80040a6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80040aa:	2202      	movs	r2, #2
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	fa93 f2a3 	rbit	r2, r3
 80040b8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80040bc:	601a      	str	r2, [r3, #0]
 80040be:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80040c2:	2202      	movs	r2, #2
 80040c4:	601a      	str	r2, [r3, #0]
 80040c6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	fa93 f2a3 	rbit	r2, r3
 80040d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80040d4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040d6:	4b6f      	ldr	r3, [pc, #444]	; (8004294 <HAL_RCC_OscConfig+0x930>)
 80040d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040da:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80040de:	2102      	movs	r1, #2
 80040e0:	6019      	str	r1, [r3, #0]
 80040e2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	fa93 f1a3 	rbit	r1, r3
 80040ec:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80040f0:	6019      	str	r1, [r3, #0]
  return result;
 80040f2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	fab3 f383 	clz	r3, r3
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004102:	b2db      	uxtb	r3, r3
 8004104:	f003 031f 	and.w	r3, r3, #31
 8004108:	2101      	movs	r1, #1
 800410a:	fa01 f303 	lsl.w	r3, r1, r3
 800410e:	4013      	ands	r3, r2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1b2      	bne.n	800407a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004114:	1d3b      	adds	r3, r7, #4
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0304 	and.w	r3, r3, #4
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 8158 	beq.w	80043d4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004124:	2300      	movs	r3, #0
 8004126:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800412a:	4b5a      	ldr	r3, [pc, #360]	; (8004294 <HAL_RCC_OscConfig+0x930>)
 800412c:	69db      	ldr	r3, [r3, #28]
 800412e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d112      	bne.n	800415c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004136:	4b57      	ldr	r3, [pc, #348]	; (8004294 <HAL_RCC_OscConfig+0x930>)
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	4a56      	ldr	r2, [pc, #344]	; (8004294 <HAL_RCC_OscConfig+0x930>)
 800413c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004140:	61d3      	str	r3, [r2, #28]
 8004142:	4b54      	ldr	r3, [pc, #336]	; (8004294 <HAL_RCC_OscConfig+0x930>)
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800414a:	f107 0308 	add.w	r3, r7, #8
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	f107 0308 	add.w	r3, r7, #8
 8004154:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004156:	2301      	movs	r3, #1
 8004158:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800415c:	4b4f      	ldr	r3, [pc, #316]	; (800429c <HAL_RCC_OscConfig+0x938>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004164:	2b00      	cmp	r3, #0
 8004166:	d11a      	bne.n	800419e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004168:	4b4c      	ldr	r3, [pc, #304]	; (800429c <HAL_RCC_OscConfig+0x938>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a4b      	ldr	r2, [pc, #300]	; (800429c <HAL_RCC_OscConfig+0x938>)
 800416e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004172:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004174:	f7fd fbba 	bl	80018ec <HAL_GetTick>
 8004178:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800417c:	e009      	b.n	8004192 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800417e:	f7fd fbb5 	bl	80018ec <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b64      	cmp	r3, #100	; 0x64
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e2e9      	b.n	8004766 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004192:	4b42      	ldr	r3, [pc, #264]	; (800429c <HAL_RCC_OscConfig+0x938>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800419a:	2b00      	cmp	r3, #0
 800419c:	d0ef      	beq.n	800417e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800419e:	1d3b      	adds	r3, r7, #4
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d106      	bne.n	80041b6 <HAL_RCC_OscConfig+0x852>
 80041a8:	4b3a      	ldr	r3, [pc, #232]	; (8004294 <HAL_RCC_OscConfig+0x930>)
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	4a39      	ldr	r2, [pc, #228]	; (8004294 <HAL_RCC_OscConfig+0x930>)
 80041ae:	f043 0301 	orr.w	r3, r3, #1
 80041b2:	6213      	str	r3, [r2, #32]
 80041b4:	e02f      	b.n	8004216 <HAL_RCC_OscConfig+0x8b2>
 80041b6:	1d3b      	adds	r3, r7, #4
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10c      	bne.n	80041da <HAL_RCC_OscConfig+0x876>
 80041c0:	4b34      	ldr	r3, [pc, #208]	; (8004294 <HAL_RCC_OscConfig+0x930>)
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	4a33      	ldr	r2, [pc, #204]	; (8004294 <HAL_RCC_OscConfig+0x930>)
 80041c6:	f023 0301 	bic.w	r3, r3, #1
 80041ca:	6213      	str	r3, [r2, #32]
 80041cc:	4b31      	ldr	r3, [pc, #196]	; (8004294 <HAL_RCC_OscConfig+0x930>)
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	4a30      	ldr	r2, [pc, #192]	; (8004294 <HAL_RCC_OscConfig+0x930>)
 80041d2:	f023 0304 	bic.w	r3, r3, #4
 80041d6:	6213      	str	r3, [r2, #32]
 80041d8:	e01d      	b.n	8004216 <HAL_RCC_OscConfig+0x8b2>
 80041da:	1d3b      	adds	r3, r7, #4
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	2b05      	cmp	r3, #5
 80041e2:	d10c      	bne.n	80041fe <HAL_RCC_OscConfig+0x89a>
 80041e4:	4b2b      	ldr	r3, [pc, #172]	; (8004294 <HAL_RCC_OscConfig+0x930>)
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	4a2a      	ldr	r2, [pc, #168]	; (8004294 <HAL_RCC_OscConfig+0x930>)
 80041ea:	f043 0304 	orr.w	r3, r3, #4
 80041ee:	6213      	str	r3, [r2, #32]
 80041f0:	4b28      	ldr	r3, [pc, #160]	; (8004294 <HAL_RCC_OscConfig+0x930>)
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	4a27      	ldr	r2, [pc, #156]	; (8004294 <HAL_RCC_OscConfig+0x930>)
 80041f6:	f043 0301 	orr.w	r3, r3, #1
 80041fa:	6213      	str	r3, [r2, #32]
 80041fc:	e00b      	b.n	8004216 <HAL_RCC_OscConfig+0x8b2>
 80041fe:	4b25      	ldr	r3, [pc, #148]	; (8004294 <HAL_RCC_OscConfig+0x930>)
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	4a24      	ldr	r2, [pc, #144]	; (8004294 <HAL_RCC_OscConfig+0x930>)
 8004204:	f023 0301 	bic.w	r3, r3, #1
 8004208:	6213      	str	r3, [r2, #32]
 800420a:	4b22      	ldr	r3, [pc, #136]	; (8004294 <HAL_RCC_OscConfig+0x930>)
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	4a21      	ldr	r2, [pc, #132]	; (8004294 <HAL_RCC_OscConfig+0x930>)
 8004210:	f023 0304 	bic.w	r3, r3, #4
 8004214:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004216:	1d3b      	adds	r3, r7, #4
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d06b      	beq.n	80042f8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004220:	f7fd fb64 	bl	80018ec <HAL_GetTick>
 8004224:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004228:	e00b      	b.n	8004242 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800422a:	f7fd fb5f 	bl	80018ec <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	f241 3288 	movw	r2, #5000	; 0x1388
 800423a:	4293      	cmp	r3, r2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e291      	b.n	8004766 <HAL_RCC_OscConfig+0xe02>
 8004242:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8004246:	2202      	movs	r2, #2
 8004248:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	fa93 f2a3 	rbit	r2, r3
 8004254:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800425e:	2202      	movs	r2, #2
 8004260:	601a      	str	r2, [r3, #0]
 8004262:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	fa93 f2a3 	rbit	r2, r3
 800426c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004270:	601a      	str	r2, [r3, #0]
  return result;
 8004272:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004276:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004278:	fab3 f383 	clz	r3, r3
 800427c:	b2db      	uxtb	r3, r3
 800427e:	095b      	lsrs	r3, r3, #5
 8004280:	b2db      	uxtb	r3, r3
 8004282:	f043 0302 	orr.w	r3, r3, #2
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b02      	cmp	r3, #2
 800428a:	d109      	bne.n	80042a0 <HAL_RCC_OscConfig+0x93c>
 800428c:	4b01      	ldr	r3, [pc, #4]	; (8004294 <HAL_RCC_OscConfig+0x930>)
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	e014      	b.n	80042bc <HAL_RCC_OscConfig+0x958>
 8004292:	bf00      	nop
 8004294:	40021000 	.word	0x40021000
 8004298:	10908120 	.word	0x10908120
 800429c:	40007000 	.word	0x40007000
 80042a0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80042a4:	2202      	movs	r2, #2
 80042a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	fa93 f2a3 	rbit	r2, r3
 80042b2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80042b6:	601a      	str	r2, [r3, #0]
 80042b8:	4bbb      	ldr	r3, [pc, #748]	; (80045a8 <HAL_RCC_OscConfig+0xc44>)
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80042c0:	2102      	movs	r1, #2
 80042c2:	6011      	str	r1, [r2, #0]
 80042c4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80042c8:	6812      	ldr	r2, [r2, #0]
 80042ca:	fa92 f1a2 	rbit	r1, r2
 80042ce:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80042d2:	6011      	str	r1, [r2, #0]
  return result;
 80042d4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80042d8:	6812      	ldr	r2, [r2, #0]
 80042da:	fab2 f282 	clz	r2, r2
 80042de:	b2d2      	uxtb	r2, r2
 80042e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042e4:	b2d2      	uxtb	r2, r2
 80042e6:	f002 021f 	and.w	r2, r2, #31
 80042ea:	2101      	movs	r1, #1
 80042ec:	fa01 f202 	lsl.w	r2, r1, r2
 80042f0:	4013      	ands	r3, r2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d099      	beq.n	800422a <HAL_RCC_OscConfig+0x8c6>
 80042f6:	e063      	b.n	80043c0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042f8:	f7fd faf8 	bl	80018ec <HAL_GetTick>
 80042fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004300:	e00b      	b.n	800431a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004302:	f7fd faf3 	bl	80018ec <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004312:	4293      	cmp	r3, r2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e225      	b.n	8004766 <HAL_RCC_OscConfig+0xe02>
 800431a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800431e:	2202      	movs	r2, #2
 8004320:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004322:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	fa93 f2a3 	rbit	r2, r3
 800432c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004336:	2202      	movs	r2, #2
 8004338:	601a      	str	r2, [r3, #0]
 800433a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	fa93 f2a3 	rbit	r2, r3
 8004344:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004348:	601a      	str	r2, [r3, #0]
  return result;
 800434a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800434e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004350:	fab3 f383 	clz	r3, r3
 8004354:	b2db      	uxtb	r3, r3
 8004356:	095b      	lsrs	r3, r3, #5
 8004358:	b2db      	uxtb	r3, r3
 800435a:	f043 0302 	orr.w	r3, r3, #2
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d102      	bne.n	800436a <HAL_RCC_OscConfig+0xa06>
 8004364:	4b90      	ldr	r3, [pc, #576]	; (80045a8 <HAL_RCC_OscConfig+0xc44>)
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	e00d      	b.n	8004386 <HAL_RCC_OscConfig+0xa22>
 800436a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800436e:	2202      	movs	r2, #2
 8004370:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004372:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	fa93 f2a3 	rbit	r2, r3
 800437c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	4b89      	ldr	r3, [pc, #548]	; (80045a8 <HAL_RCC_OscConfig+0xc44>)
 8004384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004386:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800438a:	2102      	movs	r1, #2
 800438c:	6011      	str	r1, [r2, #0]
 800438e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004392:	6812      	ldr	r2, [r2, #0]
 8004394:	fa92 f1a2 	rbit	r1, r2
 8004398:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800439c:	6011      	str	r1, [r2, #0]
  return result;
 800439e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80043a2:	6812      	ldr	r2, [r2, #0]
 80043a4:	fab2 f282 	clz	r2, r2
 80043a8:	b2d2      	uxtb	r2, r2
 80043aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043ae:	b2d2      	uxtb	r2, r2
 80043b0:	f002 021f 	and.w	r2, r2, #31
 80043b4:	2101      	movs	r1, #1
 80043b6:	fa01 f202 	lsl.w	r2, r1, r2
 80043ba:	4013      	ands	r3, r2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1a0      	bne.n	8004302 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80043c0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d105      	bne.n	80043d4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043c8:	4b77      	ldr	r3, [pc, #476]	; (80045a8 <HAL_RCC_OscConfig+0xc44>)
 80043ca:	69db      	ldr	r3, [r3, #28]
 80043cc:	4a76      	ldr	r2, [pc, #472]	; (80045a8 <HAL_RCC_OscConfig+0xc44>)
 80043ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043d2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043d4:	1d3b      	adds	r3, r7, #4
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f000 81c2 	beq.w	8004764 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043e0:	4b71      	ldr	r3, [pc, #452]	; (80045a8 <HAL_RCC_OscConfig+0xc44>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f003 030c 	and.w	r3, r3, #12
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	f000 819c 	beq.w	8004726 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043ee:	1d3b      	adds	r3, r7, #4
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	f040 8114 	bne.w	8004622 <HAL_RCC_OscConfig+0xcbe>
 80043fa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80043fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004402:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004404:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	fa93 f2a3 	rbit	r2, r3
 800440e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004412:	601a      	str	r2, [r3, #0]
  return result;
 8004414:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004418:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800441a:	fab3 f383 	clz	r3, r3
 800441e:	b2db      	uxtb	r3, r3
 8004420:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004424:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	461a      	mov	r2, r3
 800442c:	2300      	movs	r3, #0
 800442e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004430:	f7fd fa5c 	bl	80018ec <HAL_GetTick>
 8004434:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004438:	e009      	b.n	800444e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800443a:	f7fd fa57 	bl	80018ec <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e18b      	b.n	8004766 <HAL_RCC_OscConfig+0xe02>
 800444e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004452:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004456:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004458:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	fa93 f2a3 	rbit	r2, r3
 8004462:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004466:	601a      	str	r2, [r3, #0]
  return result;
 8004468:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800446c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800446e:	fab3 f383 	clz	r3, r3
 8004472:	b2db      	uxtb	r3, r3
 8004474:	095b      	lsrs	r3, r3, #5
 8004476:	b2db      	uxtb	r3, r3
 8004478:	f043 0301 	orr.w	r3, r3, #1
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b01      	cmp	r3, #1
 8004480:	d102      	bne.n	8004488 <HAL_RCC_OscConfig+0xb24>
 8004482:	4b49      	ldr	r3, [pc, #292]	; (80045a8 <HAL_RCC_OscConfig+0xc44>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	e01b      	b.n	80044c0 <HAL_RCC_OscConfig+0xb5c>
 8004488:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800448c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004490:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004492:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	fa93 f2a3 	rbit	r2, r3
 800449c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80044a0:	601a      	str	r2, [r3, #0]
 80044a2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80044a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	fa93 f2a3 	rbit	r2, r3
 80044b6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	4b3a      	ldr	r3, [pc, #232]	; (80045a8 <HAL_RCC_OscConfig+0xc44>)
 80044be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80044c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80044c8:	6011      	str	r1, [r2, #0]
 80044ca:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80044ce:	6812      	ldr	r2, [r2, #0]
 80044d0:	fa92 f1a2 	rbit	r1, r2
 80044d4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80044d8:	6011      	str	r1, [r2, #0]
  return result;
 80044da:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80044de:	6812      	ldr	r2, [r2, #0]
 80044e0:	fab2 f282 	clz	r2, r2
 80044e4:	b2d2      	uxtb	r2, r2
 80044e6:	f042 0220 	orr.w	r2, r2, #32
 80044ea:	b2d2      	uxtb	r2, r2
 80044ec:	f002 021f 	and.w	r2, r2, #31
 80044f0:	2101      	movs	r1, #1
 80044f2:	fa01 f202 	lsl.w	r2, r1, r2
 80044f6:	4013      	ands	r3, r2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d19e      	bne.n	800443a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044fc:	4b2a      	ldr	r3, [pc, #168]	; (80045a8 <HAL_RCC_OscConfig+0xc44>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004504:	1d3b      	adds	r3, r7, #4
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800450a:	1d3b      	adds	r3, r7, #4
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	430b      	orrs	r3, r1
 8004512:	4925      	ldr	r1, [pc, #148]	; (80045a8 <HAL_RCC_OscConfig+0xc44>)
 8004514:	4313      	orrs	r3, r2
 8004516:	604b      	str	r3, [r1, #4]
 8004518:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800451c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004520:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004522:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	fa93 f2a3 	rbit	r2, r3
 800452c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004530:	601a      	str	r2, [r3, #0]
  return result;
 8004532:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004536:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004538:	fab3 f383 	clz	r3, r3
 800453c:	b2db      	uxtb	r3, r3
 800453e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004542:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	461a      	mov	r2, r3
 800454a:	2301      	movs	r3, #1
 800454c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800454e:	f7fd f9cd 	bl	80018ec <HAL_GetTick>
 8004552:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004556:	e009      	b.n	800456c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004558:	f7fd f9c8 	bl	80018ec <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d901      	bls.n	800456c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e0fc      	b.n	8004766 <HAL_RCC_OscConfig+0xe02>
 800456c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004570:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004574:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004576:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	fa93 f2a3 	rbit	r2, r3
 8004580:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004584:	601a      	str	r2, [r3, #0]
  return result;
 8004586:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800458a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800458c:	fab3 f383 	clz	r3, r3
 8004590:	b2db      	uxtb	r3, r3
 8004592:	095b      	lsrs	r3, r3, #5
 8004594:	b2db      	uxtb	r3, r3
 8004596:	f043 0301 	orr.w	r3, r3, #1
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b01      	cmp	r3, #1
 800459e:	d105      	bne.n	80045ac <HAL_RCC_OscConfig+0xc48>
 80045a0:	4b01      	ldr	r3, [pc, #4]	; (80045a8 <HAL_RCC_OscConfig+0xc44>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	e01e      	b.n	80045e4 <HAL_RCC_OscConfig+0xc80>
 80045a6:	bf00      	nop
 80045a8:	40021000 	.word	0x40021000
 80045ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80045b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	fa93 f2a3 	rbit	r2, r3
 80045c0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80045c4:	601a      	str	r2, [r3, #0]
 80045c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80045ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80045ce:	601a      	str	r2, [r3, #0]
 80045d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	fa93 f2a3 	rbit	r2, r3
 80045da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80045de:	601a      	str	r2, [r3, #0]
 80045e0:	4b63      	ldr	r3, [pc, #396]	; (8004770 <HAL_RCC_OscConfig+0xe0c>)
 80045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80045e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80045ec:	6011      	str	r1, [r2, #0]
 80045ee:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80045f2:	6812      	ldr	r2, [r2, #0]
 80045f4:	fa92 f1a2 	rbit	r1, r2
 80045f8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80045fc:	6011      	str	r1, [r2, #0]
  return result;
 80045fe:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004602:	6812      	ldr	r2, [r2, #0]
 8004604:	fab2 f282 	clz	r2, r2
 8004608:	b2d2      	uxtb	r2, r2
 800460a:	f042 0220 	orr.w	r2, r2, #32
 800460e:	b2d2      	uxtb	r2, r2
 8004610:	f002 021f 	and.w	r2, r2, #31
 8004614:	2101      	movs	r1, #1
 8004616:	fa01 f202 	lsl.w	r2, r1, r2
 800461a:	4013      	ands	r3, r2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d09b      	beq.n	8004558 <HAL_RCC_OscConfig+0xbf4>
 8004620:	e0a0      	b.n	8004764 <HAL_RCC_OscConfig+0xe00>
 8004622:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004626:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800462a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	fa93 f2a3 	rbit	r2, r3
 8004636:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800463a:	601a      	str	r2, [r3, #0]
  return result;
 800463c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004640:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004642:	fab3 f383 	clz	r3, r3
 8004646:	b2db      	uxtb	r3, r3
 8004648:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800464c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	461a      	mov	r2, r3
 8004654:	2300      	movs	r3, #0
 8004656:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004658:	f7fd f948 	bl	80018ec <HAL_GetTick>
 800465c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004660:	e009      	b.n	8004676 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004662:	f7fd f943 	bl	80018ec <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e077      	b.n	8004766 <HAL_RCC_OscConfig+0xe02>
 8004676:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800467a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800467e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004680:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	fa93 f2a3 	rbit	r2, r3
 800468a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800468e:	601a      	str	r2, [r3, #0]
  return result;
 8004690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004694:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004696:	fab3 f383 	clz	r3, r3
 800469a:	b2db      	uxtb	r3, r3
 800469c:	095b      	lsrs	r3, r3, #5
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	f043 0301 	orr.w	r3, r3, #1
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d102      	bne.n	80046b0 <HAL_RCC_OscConfig+0xd4c>
 80046aa:	4b31      	ldr	r3, [pc, #196]	; (8004770 <HAL_RCC_OscConfig+0xe0c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	e01b      	b.n	80046e8 <HAL_RCC_OscConfig+0xd84>
 80046b0:	f107 0320 	add.w	r3, r7, #32
 80046b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ba:	f107 0320 	add.w	r3, r7, #32
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	fa93 f2a3 	rbit	r2, r3
 80046c4:	f107 031c 	add.w	r3, r7, #28
 80046c8:	601a      	str	r2, [r3, #0]
 80046ca:	f107 0318 	add.w	r3, r7, #24
 80046ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046d2:	601a      	str	r2, [r3, #0]
 80046d4:	f107 0318 	add.w	r3, r7, #24
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	fa93 f2a3 	rbit	r2, r3
 80046de:	f107 0314 	add.w	r3, r7, #20
 80046e2:	601a      	str	r2, [r3, #0]
 80046e4:	4b22      	ldr	r3, [pc, #136]	; (8004770 <HAL_RCC_OscConfig+0xe0c>)
 80046e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e8:	f107 0210 	add.w	r2, r7, #16
 80046ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80046f0:	6011      	str	r1, [r2, #0]
 80046f2:	f107 0210 	add.w	r2, r7, #16
 80046f6:	6812      	ldr	r2, [r2, #0]
 80046f8:	fa92 f1a2 	rbit	r1, r2
 80046fc:	f107 020c 	add.w	r2, r7, #12
 8004700:	6011      	str	r1, [r2, #0]
  return result;
 8004702:	f107 020c 	add.w	r2, r7, #12
 8004706:	6812      	ldr	r2, [r2, #0]
 8004708:	fab2 f282 	clz	r2, r2
 800470c:	b2d2      	uxtb	r2, r2
 800470e:	f042 0220 	orr.w	r2, r2, #32
 8004712:	b2d2      	uxtb	r2, r2
 8004714:	f002 021f 	and.w	r2, r2, #31
 8004718:	2101      	movs	r1, #1
 800471a:	fa01 f202 	lsl.w	r2, r1, r2
 800471e:	4013      	ands	r3, r2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d19e      	bne.n	8004662 <HAL_RCC_OscConfig+0xcfe>
 8004724:	e01e      	b.n	8004764 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004726:	1d3b      	adds	r3, r7, #4
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	69db      	ldr	r3, [r3, #28]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d101      	bne.n	8004734 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e018      	b.n	8004766 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004734:	4b0e      	ldr	r3, [pc, #56]	; (8004770 <HAL_RCC_OscConfig+0xe0c>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800473c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004740:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004744:	1d3b      	adds	r3, r7, #4
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	429a      	cmp	r2, r3
 800474c:	d108      	bne.n	8004760 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800474e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004752:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004756:	1d3b      	adds	r3, r7, #4
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800475c:	429a      	cmp	r2, r3
 800475e:	d001      	beq.n	8004764 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e000      	b.n	8004766 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	40021000 	.word	0x40021000

08004774 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b09e      	sub	sp, #120	; 0x78
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800477e:	2300      	movs	r3, #0
 8004780:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d101      	bne.n	800478c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e162      	b.n	8004a52 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800478c:	4b90      	ldr	r3, [pc, #576]	; (80049d0 <HAL_RCC_ClockConfig+0x25c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0307 	and.w	r3, r3, #7
 8004794:	683a      	ldr	r2, [r7, #0]
 8004796:	429a      	cmp	r2, r3
 8004798:	d910      	bls.n	80047bc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800479a:	4b8d      	ldr	r3, [pc, #564]	; (80049d0 <HAL_RCC_ClockConfig+0x25c>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f023 0207 	bic.w	r2, r3, #7
 80047a2:	498b      	ldr	r1, [pc, #556]	; (80049d0 <HAL_RCC_ClockConfig+0x25c>)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047aa:	4b89      	ldr	r3, [pc, #548]	; (80049d0 <HAL_RCC_ClockConfig+0x25c>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d001      	beq.n	80047bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e14a      	b.n	8004a52 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d008      	beq.n	80047da <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047c8:	4b82      	ldr	r3, [pc, #520]	; (80049d4 <HAL_RCC_ClockConfig+0x260>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	497f      	ldr	r1, [pc, #508]	; (80049d4 <HAL_RCC_ClockConfig+0x260>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 80dc 	beq.w	80049a0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d13c      	bne.n	800486a <HAL_RCC_ClockConfig+0xf6>
 80047f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047f4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047f8:	fa93 f3a3 	rbit	r3, r3
 80047fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80047fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004800:	fab3 f383 	clz	r3, r3
 8004804:	b2db      	uxtb	r3, r3
 8004806:	095b      	lsrs	r3, r3, #5
 8004808:	b2db      	uxtb	r3, r3
 800480a:	f043 0301 	orr.w	r3, r3, #1
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b01      	cmp	r3, #1
 8004812:	d102      	bne.n	800481a <HAL_RCC_ClockConfig+0xa6>
 8004814:	4b6f      	ldr	r3, [pc, #444]	; (80049d4 <HAL_RCC_ClockConfig+0x260>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	e00f      	b.n	800483a <HAL_RCC_ClockConfig+0xc6>
 800481a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800481e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004820:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004822:	fa93 f3a3 	rbit	r3, r3
 8004826:	667b      	str	r3, [r7, #100]	; 0x64
 8004828:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800482c:	663b      	str	r3, [r7, #96]	; 0x60
 800482e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004830:	fa93 f3a3 	rbit	r3, r3
 8004834:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004836:	4b67      	ldr	r3, [pc, #412]	; (80049d4 <HAL_RCC_ClockConfig+0x260>)
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800483e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004840:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004842:	fa92 f2a2 	rbit	r2, r2
 8004846:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004848:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800484a:	fab2 f282 	clz	r2, r2
 800484e:	b2d2      	uxtb	r2, r2
 8004850:	f042 0220 	orr.w	r2, r2, #32
 8004854:	b2d2      	uxtb	r2, r2
 8004856:	f002 021f 	and.w	r2, r2, #31
 800485a:	2101      	movs	r1, #1
 800485c:	fa01 f202 	lsl.w	r2, r1, r2
 8004860:	4013      	ands	r3, r2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d17b      	bne.n	800495e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e0f3      	b.n	8004a52 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	2b02      	cmp	r3, #2
 8004870:	d13c      	bne.n	80048ec <HAL_RCC_ClockConfig+0x178>
 8004872:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004876:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004878:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800487a:	fa93 f3a3 	rbit	r3, r3
 800487e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004882:	fab3 f383 	clz	r3, r3
 8004886:	b2db      	uxtb	r3, r3
 8004888:	095b      	lsrs	r3, r3, #5
 800488a:	b2db      	uxtb	r3, r3
 800488c:	f043 0301 	orr.w	r3, r3, #1
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b01      	cmp	r3, #1
 8004894:	d102      	bne.n	800489c <HAL_RCC_ClockConfig+0x128>
 8004896:	4b4f      	ldr	r3, [pc, #316]	; (80049d4 <HAL_RCC_ClockConfig+0x260>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	e00f      	b.n	80048bc <HAL_RCC_ClockConfig+0x148>
 800489c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048a0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048a4:	fa93 f3a3 	rbit	r3, r3
 80048a8:	647b      	str	r3, [r7, #68]	; 0x44
 80048aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048ae:	643b      	str	r3, [r7, #64]	; 0x40
 80048b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048b2:	fa93 f3a3 	rbit	r3, r3
 80048b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048b8:	4b46      	ldr	r3, [pc, #280]	; (80049d4 <HAL_RCC_ClockConfig+0x260>)
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048c0:	63ba      	str	r2, [r7, #56]	; 0x38
 80048c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048c4:	fa92 f2a2 	rbit	r2, r2
 80048c8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80048ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048cc:	fab2 f282 	clz	r2, r2
 80048d0:	b2d2      	uxtb	r2, r2
 80048d2:	f042 0220 	orr.w	r2, r2, #32
 80048d6:	b2d2      	uxtb	r2, r2
 80048d8:	f002 021f 	and.w	r2, r2, #31
 80048dc:	2101      	movs	r1, #1
 80048de:	fa01 f202 	lsl.w	r2, r1, r2
 80048e2:	4013      	ands	r3, r2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d13a      	bne.n	800495e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e0b2      	b.n	8004a52 <HAL_RCC_ClockConfig+0x2de>
 80048ec:	2302      	movs	r3, #2
 80048ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f2:	fa93 f3a3 	rbit	r3, r3
 80048f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80048f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048fa:	fab3 f383 	clz	r3, r3
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	095b      	lsrs	r3, r3, #5
 8004902:	b2db      	uxtb	r3, r3
 8004904:	f043 0301 	orr.w	r3, r3, #1
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b01      	cmp	r3, #1
 800490c:	d102      	bne.n	8004914 <HAL_RCC_ClockConfig+0x1a0>
 800490e:	4b31      	ldr	r3, [pc, #196]	; (80049d4 <HAL_RCC_ClockConfig+0x260>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	e00d      	b.n	8004930 <HAL_RCC_ClockConfig+0x1bc>
 8004914:	2302      	movs	r3, #2
 8004916:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491a:	fa93 f3a3 	rbit	r3, r3
 800491e:	627b      	str	r3, [r7, #36]	; 0x24
 8004920:	2302      	movs	r3, #2
 8004922:	623b      	str	r3, [r7, #32]
 8004924:	6a3b      	ldr	r3, [r7, #32]
 8004926:	fa93 f3a3 	rbit	r3, r3
 800492a:	61fb      	str	r3, [r7, #28]
 800492c:	4b29      	ldr	r3, [pc, #164]	; (80049d4 <HAL_RCC_ClockConfig+0x260>)
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	2202      	movs	r2, #2
 8004932:	61ba      	str	r2, [r7, #24]
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	fa92 f2a2 	rbit	r2, r2
 800493a:	617a      	str	r2, [r7, #20]
  return result;
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	fab2 f282 	clz	r2, r2
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	f042 0220 	orr.w	r2, r2, #32
 8004948:	b2d2      	uxtb	r2, r2
 800494a:	f002 021f 	and.w	r2, r2, #31
 800494e:	2101      	movs	r1, #1
 8004950:	fa01 f202 	lsl.w	r2, r1, r2
 8004954:	4013      	ands	r3, r2
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e079      	b.n	8004a52 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800495e:	4b1d      	ldr	r3, [pc, #116]	; (80049d4 <HAL_RCC_ClockConfig+0x260>)
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f023 0203 	bic.w	r2, r3, #3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	491a      	ldr	r1, [pc, #104]	; (80049d4 <HAL_RCC_ClockConfig+0x260>)
 800496c:	4313      	orrs	r3, r2
 800496e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004970:	f7fc ffbc 	bl	80018ec <HAL_GetTick>
 8004974:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004976:	e00a      	b.n	800498e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004978:	f7fc ffb8 	bl	80018ec <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	f241 3288 	movw	r2, #5000	; 0x1388
 8004986:	4293      	cmp	r3, r2
 8004988:	d901      	bls.n	800498e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e061      	b.n	8004a52 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800498e:	4b11      	ldr	r3, [pc, #68]	; (80049d4 <HAL_RCC_ClockConfig+0x260>)
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f003 020c 	and.w	r2, r3, #12
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	429a      	cmp	r2, r3
 800499e:	d1eb      	bne.n	8004978 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049a0:	4b0b      	ldr	r3, [pc, #44]	; (80049d0 <HAL_RCC_ClockConfig+0x25c>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0307 	and.w	r3, r3, #7
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d214      	bcs.n	80049d8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ae:	4b08      	ldr	r3, [pc, #32]	; (80049d0 <HAL_RCC_ClockConfig+0x25c>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f023 0207 	bic.w	r2, r3, #7
 80049b6:	4906      	ldr	r1, [pc, #24]	; (80049d0 <HAL_RCC_ClockConfig+0x25c>)
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049be:	4b04      	ldr	r3, [pc, #16]	; (80049d0 <HAL_RCC_ClockConfig+0x25c>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0307 	and.w	r3, r3, #7
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d005      	beq.n	80049d8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e040      	b.n	8004a52 <HAL_RCC_ClockConfig+0x2de>
 80049d0:	40022000 	.word	0x40022000
 80049d4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0304 	and.w	r3, r3, #4
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d008      	beq.n	80049f6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049e4:	4b1d      	ldr	r3, [pc, #116]	; (8004a5c <HAL_RCC_ClockConfig+0x2e8>)
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	491a      	ldr	r1, [pc, #104]	; (8004a5c <HAL_RCC_ClockConfig+0x2e8>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0308 	and.w	r3, r3, #8
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d009      	beq.n	8004a16 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a02:	4b16      	ldr	r3, [pc, #88]	; (8004a5c <HAL_RCC_ClockConfig+0x2e8>)
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	4912      	ldr	r1, [pc, #72]	; (8004a5c <HAL_RCC_ClockConfig+0x2e8>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004a16:	f000 f829 	bl	8004a6c <HAL_RCC_GetSysClockFreq>
 8004a1a:	4601      	mov	r1, r0
 8004a1c:	4b0f      	ldr	r3, [pc, #60]	; (8004a5c <HAL_RCC_ClockConfig+0x2e8>)
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a24:	22f0      	movs	r2, #240	; 0xf0
 8004a26:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	fa92 f2a2 	rbit	r2, r2
 8004a2e:	60fa      	str	r2, [r7, #12]
  return result;
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	fab2 f282 	clz	r2, r2
 8004a36:	b2d2      	uxtb	r2, r2
 8004a38:	40d3      	lsrs	r3, r2
 8004a3a:	4a09      	ldr	r2, [pc, #36]	; (8004a60 <HAL_RCC_ClockConfig+0x2ec>)
 8004a3c:	5cd3      	ldrb	r3, [r2, r3]
 8004a3e:	fa21 f303 	lsr.w	r3, r1, r3
 8004a42:	4a08      	ldr	r2, [pc, #32]	; (8004a64 <HAL_RCC_ClockConfig+0x2f0>)
 8004a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004a46:	4b08      	ldr	r3, [pc, #32]	; (8004a68 <HAL_RCC_ClockConfig+0x2f4>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7fc ff0a 	bl	8001864 <HAL_InitTick>
  
  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3778      	adds	r7, #120	; 0x78
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	40021000 	.word	0x40021000
 8004a60:	08006970 	.word	0x08006970
 8004a64:	2000003c 	.word	0x2000003c
 8004a68:	20000040 	.word	0x20000040

08004a6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b08b      	sub	sp, #44	; 0x2c
 8004a70:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a72:	2300      	movs	r3, #0
 8004a74:	61fb      	str	r3, [r7, #28]
 8004a76:	2300      	movs	r3, #0
 8004a78:	61bb      	str	r3, [r7, #24]
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a7e:	2300      	movs	r3, #0
 8004a80:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004a86:	4b29      	ldr	r3, [pc, #164]	; (8004b2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	f003 030c 	and.w	r3, r3, #12
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	d002      	beq.n	8004a9c <HAL_RCC_GetSysClockFreq+0x30>
 8004a96:	2b08      	cmp	r3, #8
 8004a98:	d003      	beq.n	8004aa2 <HAL_RCC_GetSysClockFreq+0x36>
 8004a9a:	e03c      	b.n	8004b16 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a9c:	4b24      	ldr	r3, [pc, #144]	; (8004b30 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004a9e:	623b      	str	r3, [r7, #32]
      break;
 8004aa0:	e03c      	b.n	8004b1c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004aa8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004aac:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	fa92 f2a2 	rbit	r2, r2
 8004ab4:	607a      	str	r2, [r7, #4]
  return result;
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	fab2 f282 	clz	r2, r2
 8004abc:	b2d2      	uxtb	r2, r2
 8004abe:	40d3      	lsrs	r3, r2
 8004ac0:	4a1c      	ldr	r2, [pc, #112]	; (8004b34 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004ac2:	5cd3      	ldrb	r3, [r2, r3]
 8004ac4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004ac6:	4b19      	ldr	r3, [pc, #100]	; (8004b2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aca:	f003 030f 	and.w	r3, r3, #15
 8004ace:	220f      	movs	r2, #15
 8004ad0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	fa92 f2a2 	rbit	r2, r2
 8004ad8:	60fa      	str	r2, [r7, #12]
  return result;
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	fab2 f282 	clz	r2, r2
 8004ae0:	b2d2      	uxtb	r2, r2
 8004ae2:	40d3      	lsrs	r3, r2
 8004ae4:	4a14      	ldr	r2, [pc, #80]	; (8004b38 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004ae6:	5cd3      	ldrb	r3, [r2, r3]
 8004ae8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d008      	beq.n	8004b06 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004af4:	4a0e      	ldr	r2, [pc, #56]	; (8004b30 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	fb02 f303 	mul.w	r3, r2, r3
 8004b02:	627b      	str	r3, [r7, #36]	; 0x24
 8004b04:	e004      	b.n	8004b10 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	4a0c      	ldr	r2, [pc, #48]	; (8004b3c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b0a:	fb02 f303 	mul.w	r3, r2, r3
 8004b0e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	623b      	str	r3, [r7, #32]
      break;
 8004b14:	e002      	b.n	8004b1c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b16:	4b06      	ldr	r3, [pc, #24]	; (8004b30 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004b18:	623b      	str	r3, [r7, #32]
      break;
 8004b1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	372c      	adds	r7, #44	; 0x2c
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	007a1200 	.word	0x007a1200
 8004b34:	08006980 	.word	0x08006980
 8004b38:	08006990 	.word	0x08006990
 8004b3c:	003d0900 	.word	0x003d0900

08004b40 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b092      	sub	sp, #72	; 0x48
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004b50:	2300      	movs	r3, #0
 8004b52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f000 80d4 	beq.w	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b64:	4b4e      	ldr	r3, [pc, #312]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b66:	69db      	ldr	r3, [r3, #28]
 8004b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d10e      	bne.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b70:	4b4b      	ldr	r3, [pc, #300]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b72:	69db      	ldr	r3, [r3, #28]
 8004b74:	4a4a      	ldr	r2, [pc, #296]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b7a:	61d3      	str	r3, [r2, #28]
 8004b7c:	4b48      	ldr	r3, [pc, #288]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b84:	60bb      	str	r3, [r7, #8]
 8004b86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b8e:	4b45      	ldr	r3, [pc, #276]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d118      	bne.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b9a:	4b42      	ldr	r3, [pc, #264]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a41      	ldr	r2, [pc, #260]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ba4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ba6:	f7fc fea1 	bl	80018ec <HAL_GetTick>
 8004baa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bac:	e008      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bae:	f7fc fe9d 	bl	80018ec <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	2b64      	cmp	r3, #100	; 0x64
 8004bba:	d901      	bls.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e169      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bc0:	4b38      	ldr	r3, [pc, #224]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d0f0      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bcc:	4b34      	ldr	r3, [pc, #208]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f000 8084 	beq.w	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004be6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d07c      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bec:	4b2c      	ldr	r3, [pc, #176]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004bfa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfe:	fa93 f3a3 	rbit	r3, r3
 8004c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c06:	fab3 f383 	clz	r3, r3
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	4b26      	ldr	r3, [pc, #152]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c10:	4413      	add	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	461a      	mov	r2, r3
 8004c16:	2301      	movs	r3, #1
 8004c18:	6013      	str	r3, [r2, #0]
 8004c1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c22:	fa93 f3a3 	rbit	r3, r3
 8004c26:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c2a:	fab3 f383 	clz	r3, r3
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	461a      	mov	r2, r3
 8004c32:	4b1d      	ldr	r3, [pc, #116]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c34:	4413      	add	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	461a      	mov	r2, r3
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004c3e:	4a18      	ldr	r2, [pc, #96]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c42:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d04b      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c4e:	f7fc fe4d 	bl	80018ec <HAL_GetTick>
 8004c52:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c54:	e00a      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c56:	f7fc fe49 	bl	80018ec <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d901      	bls.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e113      	b.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c72:	fa93 f3a3 	rbit	r3, r3
 8004c76:	627b      	str	r3, [r7, #36]	; 0x24
 8004c78:	2302      	movs	r3, #2
 8004c7a:	623b      	str	r3, [r7, #32]
 8004c7c:	6a3b      	ldr	r3, [r7, #32]
 8004c7e:	fa93 f3a3 	rbit	r3, r3
 8004c82:	61fb      	str	r3, [r7, #28]
  return result;
 8004c84:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c86:	fab3 f383 	clz	r3, r3
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	095b      	lsrs	r3, r3, #5
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	f043 0302 	orr.w	r3, r3, #2
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d108      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004c9a:	4b01      	ldr	r3, [pc, #4]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	e00d      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004ca0:	40021000 	.word	0x40021000
 8004ca4:	40007000 	.word	0x40007000
 8004ca8:	10908100 	.word	0x10908100
 8004cac:	2302      	movs	r3, #2
 8004cae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	fa93 f3a3 	rbit	r3, r3
 8004cb6:	617b      	str	r3, [r7, #20]
 8004cb8:	4b78      	ldr	r3, [pc, #480]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	2202      	movs	r2, #2
 8004cbe:	613a      	str	r2, [r7, #16]
 8004cc0:	693a      	ldr	r2, [r7, #16]
 8004cc2:	fa92 f2a2 	rbit	r2, r2
 8004cc6:	60fa      	str	r2, [r7, #12]
  return result;
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	fab2 f282 	clz	r2, r2
 8004cce:	b2d2      	uxtb	r2, r2
 8004cd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cd4:	b2d2      	uxtb	r2, r2
 8004cd6:	f002 021f 	and.w	r2, r2, #31
 8004cda:	2101      	movs	r1, #1
 8004cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d0b7      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004ce6:	4b6d      	ldr	r3, [pc, #436]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	496a      	ldr	r1, [pc, #424]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004cf8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d105      	bne.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d00:	4b66      	ldr	r3, [pc, #408]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d02:	69db      	ldr	r3, [r3, #28]
 8004d04:	4a65      	ldr	r2, [pc, #404]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d0a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d008      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d18:	4b60      	ldr	r3, [pc, #384]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1c:	f023 0203 	bic.w	r2, r3, #3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	495d      	ldr	r1, [pc, #372]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d008      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d36:	4b59      	ldr	r3, [pc, #356]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	4956      	ldr	r1, [pc, #344]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0304 	and.w	r3, r3, #4
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d008      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d54:	4b51      	ldr	r3, [pc, #324]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	494e      	ldr	r1, [pc, #312]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0320 	and.w	r3, r3, #32
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d008      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d72:	4b4a      	ldr	r3, [pc, #296]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d76:	f023 0210 	bic.w	r2, r3, #16
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	69db      	ldr	r3, [r3, #28]
 8004d7e:	4947      	ldr	r1, [pc, #284]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d008      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004d90:	4b42      	ldr	r3, [pc, #264]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9c:	493f      	ldr	r1, [pc, #252]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d008      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004dae:	4b3b      	ldr	r3, [pc, #236]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db2:	f023 0220 	bic.w	r2, r3, #32
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	4938      	ldr	r1, [pc, #224]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0308 	and.w	r3, r3, #8
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d008      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004dcc:	4b33      	ldr	r3, [pc, #204]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	4930      	ldr	r1, [pc, #192]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0310 	and.w	r3, r3, #16
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d008      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004dea:	4b2c      	ldr	r3, [pc, #176]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	4929      	ldr	r1, [pc, #164]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d008      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004e08:	4b24      	ldr	r3, [pc, #144]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e14:	4921      	ldr	r1, [pc, #132]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d008      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004e26:	4b1d      	ldr	r3, [pc, #116]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	491a      	ldr	r1, [pc, #104]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d008      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004e44:	4b15      	ldr	r3, [pc, #84]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e48:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e50:	4912      	ldr	r1, [pc, #72]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d008      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004e62:	4b0e      	ldr	r3, [pc, #56]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6e:	490b      	ldr	r1, [pc, #44]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d008      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004e80:	4b06      	ldr	r3, [pc, #24]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e84:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e8c:	4903      	ldr	r1, [pc, #12]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3748      	adds	r7, #72	; 0x48
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	40021000 	.word	0x40021000

08004ea0 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d101      	bne.n	8004eb2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e083      	b.n	8004fba <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	7f5b      	ldrb	r3, [r3, #29]
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d105      	bne.n	8004ec8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f7fc fa72 	bl	80013ac <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2202      	movs	r2, #2
 8004ecc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	22ca      	movs	r2, #202	; 0xca
 8004ed4:	625a      	str	r2, [r3, #36]	; 0x24
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2253      	movs	r2, #83	; 0x53
 8004edc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 faa8 	bl	8005434 <RTC_EnterInitMode>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d008      	beq.n	8004efc <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	22ff      	movs	r2, #255	; 0xff
 8004ef0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2204      	movs	r2, #4
 8004ef6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e05e      	b.n	8004fba <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	6812      	ldr	r2, [r2, #0]
 8004f06:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004f0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f0e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	6899      	ldr	r1, [r3, #8]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685a      	ldr	r2, [r3, #4]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	695b      	ldr	r3, [r3, #20]
 8004f24:	431a      	orrs	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	68d2      	ldr	r2, [r2, #12]
 8004f36:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6919      	ldr	r1, [r3, #16]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	041a      	lsls	r2, r3, #16
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68da      	ldr	r2, [r3, #12]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f5a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f003 0320 	and.w	r3, r3, #32
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10e      	bne.n	8004f88 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 fa3a 	bl	80053e4 <HAL_RTC_WaitForSynchro>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d008      	beq.n	8004f88 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	22ff      	movs	r2, #255	; 0xff
 8004f7c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2204      	movs	r2, #4
 8004f82:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e018      	b.n	8004fba <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f96:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	699a      	ldr	r2, [r3, #24]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	430a      	orrs	r2, r1
 8004fa8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	22ff      	movs	r2, #255	; 0xff
 8004fb0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
  }
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3708      	adds	r7, #8
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004fc2:	b590      	push	{r4, r7, lr}
 8004fc4:	b087      	sub	sp, #28
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	60f8      	str	r0, [r7, #12]
 8004fca:	60b9      	str	r1, [r7, #8]
 8004fcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	7f1b      	ldrb	r3, [r3, #28]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d101      	bne.n	8004fde <HAL_RTC_SetTime+0x1c>
 8004fda:	2302      	movs	r3, #2
 8004fdc:	e0aa      	b.n	8005134 <HAL_RTC_SetTime+0x172>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d126      	bne.n	800503e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d102      	bne.n	8005004 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	2200      	movs	r2, #0
 8005002:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	4618      	mov	r0, r3
 800500a:	f000 fa3f 	bl	800548c <RTC_ByteToBcd2>
 800500e:	4603      	mov	r3, r0
 8005010:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	785b      	ldrb	r3, [r3, #1]
 8005016:	4618      	mov	r0, r3
 8005018:	f000 fa38 	bl	800548c <RTC_ByteToBcd2>
 800501c:	4603      	mov	r3, r0
 800501e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005020:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	789b      	ldrb	r3, [r3, #2]
 8005026:	4618      	mov	r0, r3
 8005028:	f000 fa30 	bl	800548c <RTC_ByteToBcd2>
 800502c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800502e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	78db      	ldrb	r3, [r3, #3]
 8005036:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005038:	4313      	orrs	r3, r2
 800503a:	617b      	str	r3, [r7, #20]
 800503c:	e018      	b.n	8005070 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005048:	2b00      	cmp	r3, #0
 800504a:	d102      	bne.n	8005052 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	2200      	movs	r2, #0
 8005050:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	785b      	ldrb	r3, [r3, #1]
 800505c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800505e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005064:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	78db      	ldrb	r3, [r3, #3]
 800506a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800506c:	4313      	orrs	r3, r2
 800506e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	22ca      	movs	r2, #202	; 0xca
 8005076:	625a      	str	r2, [r3, #36]	; 0x24
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2253      	movs	r2, #83	; 0x53
 800507e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f000 f9d7 	bl	8005434 <RTC_EnterInitMode>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00b      	beq.n	80050a4 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	22ff      	movs	r2, #255	; 0xff
 8005092:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2204      	movs	r2, #4
 8005098:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e047      	b.n	8005134 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80050ae:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80050b2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689a      	ldr	r2, [r3, #8]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80050c2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	6899      	ldr	r1, [r3, #8]
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	68da      	ldr	r2, [r3, #12]
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	431a      	orrs	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	430a      	orrs	r2, r1
 80050da:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68da      	ldr	r2, [r3, #12]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050ea:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f003 0320 	and.w	r3, r3, #32
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d111      	bne.n	800511e <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f000 f972 	bl	80053e4 <HAL_RTC_WaitForSynchro>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00b      	beq.n	800511e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	22ff      	movs	r2, #255	; 0xff
 800510c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2204      	movs	r2, #4
 8005112:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2200      	movs	r2, #0
 8005118:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e00a      	b.n	8005134 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	22ff      	movs	r2, #255	; 0xff
 8005124:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2201      	movs	r2, #1
 800512a:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005132:	2300      	movs	r3, #0
  }
}
 8005134:	4618      	mov	r0, r3
 8005136:	371c      	adds	r7, #28
 8005138:	46bd      	mov	sp, r7
 800513a:	bd90      	pop	{r4, r7, pc}

0800513c <HAL_RTC_GetTime>:
  * @note   Call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
  *         in the higher-order calendar shadow registers.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b086      	sub	sp, #24
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005148:	2300      	movs	r3, #0
 800514a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800516e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005172:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	0c1b      	lsrs	r3, r3, #16
 8005178:	b2db      	uxtb	r3, r3
 800517a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800517e:	b2da      	uxtb	r2, r3
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	0a1b      	lsrs	r3, r3, #8
 8005188:	b2db      	uxtb	r3, r3
 800518a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800518e:	b2da      	uxtb	r2, r3
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	b2db      	uxtb	r3, r3
 8005198:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800519c:	b2da      	uxtb	r2, r3
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	0c1b      	lsrs	r3, r3, #16
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ac:	b2da      	uxtb	r2, r3
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d11a      	bne.n	80051ee <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	4618      	mov	r0, r3
 80051be:	f000 f983 	bl	80054c8 <RTC_Bcd2ToByte>
 80051c2:	4603      	mov	r3, r0
 80051c4:	461a      	mov	r2, r3
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	785b      	ldrb	r3, [r3, #1]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f000 f97a 	bl	80054c8 <RTC_Bcd2ToByte>
 80051d4:	4603      	mov	r3, r0
 80051d6:	461a      	mov	r2, r3
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	789b      	ldrb	r3, [r3, #2]
 80051e0:	4618      	mov	r0, r3
 80051e2:	f000 f971 	bl	80054c8 <RTC_Bcd2ToByte>
 80051e6:	4603      	mov	r3, r0
 80051e8:	461a      	mov	r2, r3
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3718      	adds	r7, #24
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80051f8:	b590      	push	{r4, r7, lr}
 80051fa:	b087      	sub	sp, #28
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005204:	2300      	movs	r3, #0
 8005206:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	7f1b      	ldrb	r3, [r3, #28]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d101      	bne.n	8005214 <HAL_RTC_SetDate+0x1c>
 8005210:	2302      	movs	r3, #2
 8005212:	e094      	b.n	800533e <HAL_RTC_SetDate+0x146>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2201      	movs	r2, #1
 8005218:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2202      	movs	r2, #2
 800521e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10e      	bne.n	8005244 <HAL_RTC_SetDate+0x4c>
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	785b      	ldrb	r3, [r3, #1]
 800522a:	f003 0310 	and.w	r3, r3, #16
 800522e:	2b00      	cmp	r3, #0
 8005230:	d008      	beq.n	8005244 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	785b      	ldrb	r3, [r3, #1]
 8005236:	f023 0310 	bic.w	r3, r3, #16
 800523a:	b2db      	uxtb	r3, r3
 800523c:	330a      	adds	r3, #10
 800523e:	b2da      	uxtb	r2, r3
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d11c      	bne.n	8005284 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	78db      	ldrb	r3, [r3, #3]
 800524e:	4618      	mov	r0, r3
 8005250:	f000 f91c 	bl	800548c <RTC_ByteToBcd2>
 8005254:	4603      	mov	r3, r0
 8005256:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	785b      	ldrb	r3, [r3, #1]
 800525c:	4618      	mov	r0, r3
 800525e:	f000 f915 	bl	800548c <RTC_ByteToBcd2>
 8005262:	4603      	mov	r3, r0
 8005264:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005266:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	789b      	ldrb	r3, [r3, #2]
 800526c:	4618      	mov	r0, r3
 800526e:	f000 f90d 	bl	800548c <RTC_ByteToBcd2>
 8005272:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005274:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800527e:	4313      	orrs	r3, r2
 8005280:	617b      	str	r3, [r7, #20]
 8005282:	e00e      	b.n	80052a2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	78db      	ldrb	r3, [r3, #3]
 8005288:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	785b      	ldrb	r3, [r3, #1]
 800528e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005290:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005296:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800529e:	4313      	orrs	r3, r2
 80052a0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	22ca      	movs	r2, #202	; 0xca
 80052a8:	625a      	str	r2, [r3, #36]	; 0x24
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2253      	movs	r2, #83	; 0x53
 80052b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f000 f8be 	bl	8005434 <RTC_EnterInitMode>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00b      	beq.n	80052d6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	22ff      	movs	r2, #255	; 0xff
 80052c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2204      	movs	r2, #4
 80052ca:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2200      	movs	r2, #0
 80052d0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e033      	b.n	800533e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80052e0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80052e4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68da      	ldr	r2, [r3, #12]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052f4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f003 0320 	and.w	r3, r3, #32
 8005300:	2b00      	cmp	r3, #0
 8005302:	d111      	bne.n	8005328 <HAL_RTC_SetDate+0x130>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f000 f86d 	bl	80053e4 <HAL_RTC_WaitForSynchro>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00b      	beq.n	8005328 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	22ff      	movs	r2, #255	; 0xff
 8005316:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2204      	movs	r2, #4
 800531c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e00a      	b.n	800533e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	22ff      	movs	r2, #255	; 0xff
 800532e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2201      	movs	r2, #1
 8005334:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800533c:	2300      	movs	r3, #0
  }
}
 800533e:	4618      	mov	r0, r3
 8005340:	371c      	adds	r7, #28
 8005342:	46bd      	mov	sp, r7
 8005344:	bd90      	pop	{r4, r7, pc}

08005346 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN :  Binary data format
  *            @arg RTC_FORMAT_BCD :  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005346:	b580      	push	{r7, lr}
 8005348:	b086      	sub	sp, #24
 800534a:	af00      	add	r7, sp, #0
 800534c:	60f8      	str	r0, [r7, #12]
 800534e:	60b9      	str	r1, [r7, #8]
 8005350:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005352:	2300      	movs	r3, #0
 8005354:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005360:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005364:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	0c1b      	lsrs	r3, r3, #16
 800536a:	b2da      	uxtb	r2, r3
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	0a1b      	lsrs	r3, r3, #8
 8005374:	b2db      	uxtb	r3, r3
 8005376:	f003 031f 	and.w	r3, r3, #31
 800537a:	b2da      	uxtb	r2, r3
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	b2db      	uxtb	r3, r3
 8005384:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005388:	b2da      	uxtb	r2, r3
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	0b5b      	lsrs	r3, r3, #13
 8005392:	b2db      	uxtb	r3, r3
 8005394:	f003 0307 	and.w	r3, r3, #7
 8005398:	b2da      	uxtb	r2, r3
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d11a      	bne.n	80053da <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	78db      	ldrb	r3, [r3, #3]
 80053a8:	4618      	mov	r0, r3
 80053aa:	f000 f88d 	bl	80054c8 <RTC_Bcd2ToByte>
 80053ae:	4603      	mov	r3, r0
 80053b0:	461a      	mov	r2, r3
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	785b      	ldrb	r3, [r3, #1]
 80053ba:	4618      	mov	r0, r3
 80053bc:	f000 f884 	bl	80054c8 <RTC_Bcd2ToByte>
 80053c0:	4603      	mov	r3, r0
 80053c2:	461a      	mov	r2, r3
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	789b      	ldrb	r3, [r3, #2]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f000 f87b 	bl	80054c8 <RTC_Bcd2ToByte>
 80053d2:	4603      	mov	r3, r0
 80053d4:	461a      	mov	r2, r3
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3718      	adds	r7, #24
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053ec:	2300      	movs	r3, #0
 80053ee:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68da      	ldr	r2, [r3, #12]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80053fe:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005400:	f7fc fa74 	bl	80018ec <HAL_GetTick>
 8005404:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005406:	e009      	b.n	800541c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005408:	f7fc fa70 	bl	80018ec <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005416:	d901      	bls.n	800541c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e007      	b.n	800542c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	f003 0320 	and.w	r3, r3, #32
 8005426:	2b00      	cmp	r3, #0
 8005428:	d0ee      	beq.n	8005408 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800543c:	2300      	movs	r3, #0
 800543e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800544a:	2b00      	cmp	r3, #0
 800544c:	d119      	bne.n	8005482 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f04f 32ff 	mov.w	r2, #4294967295
 8005456:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005458:	f7fc fa48 	bl	80018ec <HAL_GetTick>
 800545c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800545e:	e009      	b.n	8005474 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005460:	f7fc fa44 	bl	80018ec <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800546e:	d901      	bls.n	8005474 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e007      	b.n	8005484 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547e:	2b00      	cmp	r3, #0
 8005480:	d0ee      	beq.n	8005460 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	4603      	mov	r3, r0
 8005494:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005496:	2300      	movs	r3, #0
 8005498:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800549a:	e005      	b.n	80054a8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	3301      	adds	r3, #1
 80054a0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80054a2:	79fb      	ldrb	r3, [r7, #7]
 80054a4:	3b0a      	subs	r3, #10
 80054a6:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80054a8:	79fb      	ldrb	r3, [r7, #7]
 80054aa:	2b09      	cmp	r3, #9
 80054ac:	d8f6      	bhi.n	800549c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	011b      	lsls	r3, r3, #4
 80054b4:	b2da      	uxtb	r2, r3
 80054b6:	79fb      	ldrb	r3, [r7, #7]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	b2db      	uxtb	r3, r3
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3714      	adds	r7, #20
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	4603      	mov	r3, r0
 80054d0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80054d2:	2300      	movs	r3, #0
 80054d4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 80054d6:	79fb      	ldrb	r3, [r7, #7]
 80054d8:	091b      	lsrs	r3, r3, #4
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	461a      	mov	r2, r3
 80054de:	4613      	mov	r3, r2
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	4413      	add	r3, r2
 80054e4:	005b      	lsls	r3, r3, #1
 80054e6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0FU));
 80054e8:	79fb      	ldrb	r3, [r7, #7]
 80054ea:	f003 030f 	and.w	r3, r3, #15
 80054ee:	b2da      	uxtb	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	4413      	add	r3, r2
 80054f6:	b2db      	uxtb	r3, r3
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3714      	adds	r7, #20
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e09d      	b.n	8005652 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551a:	2b00      	cmp	r3, #0
 800551c:	d108      	bne.n	8005530 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005526:	d009      	beq.n	800553c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	61da      	str	r2, [r3, #28]
 800552e:	e005      	b.n	800553c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d106      	bne.n	800555c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7fb ff4e 	bl	80013f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2202      	movs	r2, #2
 8005560:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005572:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800557c:	d902      	bls.n	8005584 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800557e:	2300      	movs	r3, #0
 8005580:	60fb      	str	r3, [r7, #12]
 8005582:	e002      	b.n	800558a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005584:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005588:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005592:	d007      	beq.n	80055a4 <HAL_SPI_Init+0xa0>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800559c:	d002      	beq.n	80055a4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80055b4:	431a      	orrs	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	431a      	orrs	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	f003 0301 	and.w	r3, r3, #1
 80055c8:	431a      	orrs	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055d2:	431a      	orrs	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	69db      	ldr	r3, [r3, #28]
 80055d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055dc:	431a      	orrs	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055e6:	ea42 0103 	orr.w	r1, r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	0c1b      	lsrs	r3, r3, #16
 8005600:	f003 0204 	and.w	r2, r3, #4
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005608:	f003 0310 	and.w	r3, r3, #16
 800560c:	431a      	orrs	r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005612:	f003 0308 	and.w	r3, r3, #8
 8005616:	431a      	orrs	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005620:	ea42 0103 	orr.w	r1, r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	430a      	orrs	r2, r1
 8005630:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	69da      	ldr	r2, [r3, #28]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005640:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3710      	adds	r7, #16
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}

0800565a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800565a:	b580      	push	{r7, lr}
 800565c:	b082      	sub	sp, #8
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d101      	bne.n	800566c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e049      	b.n	8005700 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005672:	b2db      	uxtb	r3, r3
 8005674:	2b00      	cmp	r3, #0
 8005676:	d106      	bne.n	8005686 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f7fb fefb 	bl	800147c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2202      	movs	r2, #2
 800568a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	3304      	adds	r3, #4
 8005696:	4619      	mov	r1, r3
 8005698:	4610      	mov	r0, r2
 800569a:	f000 fab9 	bl	8005c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3708      	adds	r7, #8
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b01      	cmp	r3, #1
 800571a:	d001      	beq.n	8005720 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e04a      	b.n	80057b6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2202      	movs	r2, #2
 8005724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68da      	ldr	r2, [r3, #12]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f042 0201 	orr.w	r2, r2, #1
 8005736:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a21      	ldr	r2, [pc, #132]	; (80057c4 <HAL_TIM_Base_Start_IT+0xbc>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d018      	beq.n	8005774 <HAL_TIM_Base_Start_IT+0x6c>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800574a:	d013      	beq.n	8005774 <HAL_TIM_Base_Start_IT+0x6c>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a1d      	ldr	r2, [pc, #116]	; (80057c8 <HAL_TIM_Base_Start_IT+0xc0>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d00e      	beq.n	8005774 <HAL_TIM_Base_Start_IT+0x6c>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a1c      	ldr	r2, [pc, #112]	; (80057cc <HAL_TIM_Base_Start_IT+0xc4>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d009      	beq.n	8005774 <HAL_TIM_Base_Start_IT+0x6c>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a1a      	ldr	r2, [pc, #104]	; (80057d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d004      	beq.n	8005774 <HAL_TIM_Base_Start_IT+0x6c>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a19      	ldr	r2, [pc, #100]	; (80057d4 <HAL_TIM_Base_Start_IT+0xcc>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d115      	bne.n	80057a0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	689a      	ldr	r2, [r3, #8]
 800577a:	4b17      	ldr	r3, [pc, #92]	; (80057d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800577c:	4013      	ands	r3, r2
 800577e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2b06      	cmp	r3, #6
 8005784:	d015      	beq.n	80057b2 <HAL_TIM_Base_Start_IT+0xaa>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800578c:	d011      	beq.n	80057b2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f042 0201 	orr.w	r2, r2, #1
 800579c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800579e:	e008      	b.n	80057b2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f042 0201 	orr.w	r2, r2, #1
 80057ae:	601a      	str	r2, [r3, #0]
 80057b0:	e000      	b.n	80057b4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	40012c00 	.word	0x40012c00
 80057c8:	40000400 	.word	0x40000400
 80057cc:	40000800 	.word	0x40000800
 80057d0:	40013400 	.word	0x40013400
 80057d4:	40014000 	.word	0x40014000
 80057d8:	00010007 	.word	0x00010007

080057dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	f003 0302 	and.w	r3, r3, #2
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d122      	bne.n	8005838 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	f003 0302 	and.w	r3, r3, #2
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d11b      	bne.n	8005838 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f06f 0202 	mvn.w	r2, #2
 8005808:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	f003 0303 	and.w	r3, r3, #3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d003      	beq.n	8005826 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f9d8 	bl	8005bd4 <HAL_TIM_IC_CaptureCallback>
 8005824:	e005      	b.n	8005832 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f9ca 	bl	8005bc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 f9db 	bl	8005be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	f003 0304 	and.w	r3, r3, #4
 8005842:	2b04      	cmp	r3, #4
 8005844:	d122      	bne.n	800588c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	f003 0304 	and.w	r3, r3, #4
 8005850:	2b04      	cmp	r3, #4
 8005852:	d11b      	bne.n	800588c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f06f 0204 	mvn.w	r2, #4
 800585c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2202      	movs	r2, #2
 8005862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f9ae 	bl	8005bd4 <HAL_TIM_IC_CaptureCallback>
 8005878:	e005      	b.n	8005886 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f9a0 	bl	8005bc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 f9b1 	bl	8005be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	f003 0308 	and.w	r3, r3, #8
 8005896:	2b08      	cmp	r3, #8
 8005898:	d122      	bne.n	80058e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f003 0308 	and.w	r3, r3, #8
 80058a4:	2b08      	cmp	r3, #8
 80058a6:	d11b      	bne.n	80058e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f06f 0208 	mvn.w	r2, #8
 80058b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2204      	movs	r2, #4
 80058b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	69db      	ldr	r3, [r3, #28]
 80058be:	f003 0303 	and.w	r3, r3, #3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d003      	beq.n	80058ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f984 	bl	8005bd4 <HAL_TIM_IC_CaptureCallback>
 80058cc:	e005      	b.n	80058da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f976 	bl	8005bc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f987 	bl	8005be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	f003 0310 	and.w	r3, r3, #16
 80058ea:	2b10      	cmp	r3, #16
 80058ec:	d122      	bne.n	8005934 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f003 0310 	and.w	r3, r3, #16
 80058f8:	2b10      	cmp	r3, #16
 80058fa:	d11b      	bne.n	8005934 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f06f 0210 	mvn.w	r2, #16
 8005904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2208      	movs	r2, #8
 800590a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005916:	2b00      	cmp	r3, #0
 8005918:	d003      	beq.n	8005922 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f95a 	bl	8005bd4 <HAL_TIM_IC_CaptureCallback>
 8005920:	e005      	b.n	800592e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f94c 	bl	8005bc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 f95d 	bl	8005be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b01      	cmp	r3, #1
 8005940:	d10e      	bne.n	8005960 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	f003 0301 	and.w	r3, r3, #1
 800594c:	2b01      	cmp	r3, #1
 800594e:	d107      	bne.n	8005960 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f06f 0201 	mvn.w	r2, #1
 8005958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 f926 	bl	8005bac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800596a:	2b80      	cmp	r3, #128	; 0x80
 800596c:	d10e      	bne.n	800598c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005978:	2b80      	cmp	r3, #128	; 0x80
 800597a:	d107      	bne.n	800598c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 faf6 	bl	8005f78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005996:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800599a:	d10e      	bne.n	80059ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059a6:	2b80      	cmp	r3, #128	; 0x80
 80059a8:	d107      	bne.n	80059ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80059b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 fae9 	bl	8005f8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c4:	2b40      	cmp	r3, #64	; 0x40
 80059c6:	d10e      	bne.n	80059e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d2:	2b40      	cmp	r3, #64	; 0x40
 80059d4:	d107      	bne.n	80059e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 f90b 	bl	8005bfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	f003 0320 	and.w	r3, r3, #32
 80059f0:	2b20      	cmp	r3, #32
 80059f2:	d10e      	bne.n	8005a12 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	f003 0320 	and.w	r3, r3, #32
 80059fe:	2b20      	cmp	r3, #32
 8005a00:	d107      	bne.n	8005a12 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f06f 0220 	mvn.w	r2, #32
 8005a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 faa9 	bl	8005f64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a12:	bf00      	nop
 8005a14:	3708      	adds	r7, #8
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}

08005a1a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	b084      	sub	sp, #16
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
 8005a22:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a24:	2300      	movs	r3, #0
 8005a26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d101      	bne.n	8005a36 <HAL_TIM_ConfigClockSource+0x1c>
 8005a32:	2302      	movs	r3, #2
 8005a34:	e0b6      	b.n	8005ba4 <HAL_TIM_ConfigClockSource+0x18a>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2202      	movs	r2, #2
 8005a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a54:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a58:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a60:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68ba      	ldr	r2, [r7, #8]
 8005a68:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a72:	d03e      	beq.n	8005af2 <HAL_TIM_ConfigClockSource+0xd8>
 8005a74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a78:	f200 8087 	bhi.w	8005b8a <HAL_TIM_ConfigClockSource+0x170>
 8005a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a80:	f000 8086 	beq.w	8005b90 <HAL_TIM_ConfigClockSource+0x176>
 8005a84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a88:	d87f      	bhi.n	8005b8a <HAL_TIM_ConfigClockSource+0x170>
 8005a8a:	2b70      	cmp	r3, #112	; 0x70
 8005a8c:	d01a      	beq.n	8005ac4 <HAL_TIM_ConfigClockSource+0xaa>
 8005a8e:	2b70      	cmp	r3, #112	; 0x70
 8005a90:	d87b      	bhi.n	8005b8a <HAL_TIM_ConfigClockSource+0x170>
 8005a92:	2b60      	cmp	r3, #96	; 0x60
 8005a94:	d050      	beq.n	8005b38 <HAL_TIM_ConfigClockSource+0x11e>
 8005a96:	2b60      	cmp	r3, #96	; 0x60
 8005a98:	d877      	bhi.n	8005b8a <HAL_TIM_ConfigClockSource+0x170>
 8005a9a:	2b50      	cmp	r3, #80	; 0x50
 8005a9c:	d03c      	beq.n	8005b18 <HAL_TIM_ConfigClockSource+0xfe>
 8005a9e:	2b50      	cmp	r3, #80	; 0x50
 8005aa0:	d873      	bhi.n	8005b8a <HAL_TIM_ConfigClockSource+0x170>
 8005aa2:	2b40      	cmp	r3, #64	; 0x40
 8005aa4:	d058      	beq.n	8005b58 <HAL_TIM_ConfigClockSource+0x13e>
 8005aa6:	2b40      	cmp	r3, #64	; 0x40
 8005aa8:	d86f      	bhi.n	8005b8a <HAL_TIM_ConfigClockSource+0x170>
 8005aaa:	2b30      	cmp	r3, #48	; 0x30
 8005aac:	d064      	beq.n	8005b78 <HAL_TIM_ConfigClockSource+0x15e>
 8005aae:	2b30      	cmp	r3, #48	; 0x30
 8005ab0:	d86b      	bhi.n	8005b8a <HAL_TIM_ConfigClockSource+0x170>
 8005ab2:	2b20      	cmp	r3, #32
 8005ab4:	d060      	beq.n	8005b78 <HAL_TIM_ConfigClockSource+0x15e>
 8005ab6:	2b20      	cmp	r3, #32
 8005ab8:	d867      	bhi.n	8005b8a <HAL_TIM_ConfigClockSource+0x170>
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d05c      	beq.n	8005b78 <HAL_TIM_ConfigClockSource+0x15e>
 8005abe:	2b10      	cmp	r3, #16
 8005ac0:	d05a      	beq.n	8005b78 <HAL_TIM_ConfigClockSource+0x15e>
 8005ac2:	e062      	b.n	8005b8a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6818      	ldr	r0, [r3, #0]
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	6899      	ldr	r1, [r3, #8]
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	685a      	ldr	r2, [r3, #4]
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	f000 f9a6 	bl	8005e24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ae6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	609a      	str	r2, [r3, #8]
      break;
 8005af0:	e04f      	b.n	8005b92 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6818      	ldr	r0, [r3, #0]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	6899      	ldr	r1, [r3, #8]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	685a      	ldr	r2, [r3, #4]
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	f000 f98f 	bl	8005e24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	689a      	ldr	r2, [r3, #8]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b14:	609a      	str	r2, [r3, #8]
      break;
 8005b16:	e03c      	b.n	8005b92 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6818      	ldr	r0, [r3, #0]
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	6859      	ldr	r1, [r3, #4]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	461a      	mov	r2, r3
 8005b26:	f000 f903 	bl	8005d30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2150      	movs	r1, #80	; 0x50
 8005b30:	4618      	mov	r0, r3
 8005b32:	f000 f95c 	bl	8005dee <TIM_ITRx_SetConfig>
      break;
 8005b36:	e02c      	b.n	8005b92 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6818      	ldr	r0, [r3, #0]
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	6859      	ldr	r1, [r3, #4]
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	461a      	mov	r2, r3
 8005b46:	f000 f922 	bl	8005d8e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2160      	movs	r1, #96	; 0x60
 8005b50:	4618      	mov	r0, r3
 8005b52:	f000 f94c 	bl	8005dee <TIM_ITRx_SetConfig>
      break;
 8005b56:	e01c      	b.n	8005b92 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6818      	ldr	r0, [r3, #0]
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	6859      	ldr	r1, [r3, #4]
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	461a      	mov	r2, r3
 8005b66:	f000 f8e3 	bl	8005d30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2140      	movs	r1, #64	; 0x40
 8005b70:	4618      	mov	r0, r3
 8005b72:	f000 f93c 	bl	8005dee <TIM_ITRx_SetConfig>
      break;
 8005b76:	e00c      	b.n	8005b92 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4619      	mov	r1, r3
 8005b82:	4610      	mov	r0, r2
 8005b84:	f000 f933 	bl	8005dee <TIM_ITRx_SetConfig>
      break;
 8005b88:	e003      	b.n	8005b92 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	73fb      	strb	r3, [r7, #15]
      break;
 8005b8e:	e000      	b.n	8005b92 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005b90:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005bb4:	bf00      	nop
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bc8:	bf00      	nop
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c04:	bf00      	nop
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a3c      	ldr	r2, [pc, #240]	; (8005d14 <TIM_Base_SetConfig+0x104>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d00f      	beq.n	8005c48 <TIM_Base_SetConfig+0x38>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c2e:	d00b      	beq.n	8005c48 <TIM_Base_SetConfig+0x38>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a39      	ldr	r2, [pc, #228]	; (8005d18 <TIM_Base_SetConfig+0x108>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d007      	beq.n	8005c48 <TIM_Base_SetConfig+0x38>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a38      	ldr	r2, [pc, #224]	; (8005d1c <TIM_Base_SetConfig+0x10c>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d003      	beq.n	8005c48 <TIM_Base_SetConfig+0x38>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a37      	ldr	r2, [pc, #220]	; (8005d20 <TIM_Base_SetConfig+0x110>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d108      	bne.n	8005c5a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a2d      	ldr	r2, [pc, #180]	; (8005d14 <TIM_Base_SetConfig+0x104>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d01b      	beq.n	8005c9a <TIM_Base_SetConfig+0x8a>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c68:	d017      	beq.n	8005c9a <TIM_Base_SetConfig+0x8a>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a2a      	ldr	r2, [pc, #168]	; (8005d18 <TIM_Base_SetConfig+0x108>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d013      	beq.n	8005c9a <TIM_Base_SetConfig+0x8a>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a29      	ldr	r2, [pc, #164]	; (8005d1c <TIM_Base_SetConfig+0x10c>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d00f      	beq.n	8005c9a <TIM_Base_SetConfig+0x8a>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a28      	ldr	r2, [pc, #160]	; (8005d20 <TIM_Base_SetConfig+0x110>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d00b      	beq.n	8005c9a <TIM_Base_SetConfig+0x8a>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a27      	ldr	r2, [pc, #156]	; (8005d24 <TIM_Base_SetConfig+0x114>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d007      	beq.n	8005c9a <TIM_Base_SetConfig+0x8a>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a26      	ldr	r2, [pc, #152]	; (8005d28 <TIM_Base_SetConfig+0x118>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d003      	beq.n	8005c9a <TIM_Base_SetConfig+0x8a>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a25      	ldr	r2, [pc, #148]	; (8005d2c <TIM_Base_SetConfig+0x11c>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d108      	bne.n	8005cac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ca0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a10      	ldr	r2, [pc, #64]	; (8005d14 <TIM_Base_SetConfig+0x104>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d00f      	beq.n	8005cf8 <TIM_Base_SetConfig+0xe8>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a11      	ldr	r2, [pc, #68]	; (8005d20 <TIM_Base_SetConfig+0x110>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d00b      	beq.n	8005cf8 <TIM_Base_SetConfig+0xe8>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a10      	ldr	r2, [pc, #64]	; (8005d24 <TIM_Base_SetConfig+0x114>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d007      	beq.n	8005cf8 <TIM_Base_SetConfig+0xe8>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a0f      	ldr	r2, [pc, #60]	; (8005d28 <TIM_Base_SetConfig+0x118>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d003      	beq.n	8005cf8 <TIM_Base_SetConfig+0xe8>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a0e      	ldr	r2, [pc, #56]	; (8005d2c <TIM_Base_SetConfig+0x11c>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d103      	bne.n	8005d00 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	691a      	ldr	r2, [r3, #16]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	615a      	str	r2, [r3, #20]
}
 8005d06:	bf00      	nop
 8005d08:	3714      	adds	r7, #20
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	40012c00 	.word	0x40012c00
 8005d18:	40000400 	.word	0x40000400
 8005d1c:	40000800 	.word	0x40000800
 8005d20:	40013400 	.word	0x40013400
 8005d24:	40014000 	.word	0x40014000
 8005d28:	40014400 	.word	0x40014400
 8005d2c:	40014800 	.word	0x40014800

08005d30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6a1b      	ldr	r3, [r3, #32]
 8005d40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	f023 0201 	bic.w	r2, r3, #1
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	011b      	lsls	r3, r3, #4
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	f023 030a 	bic.w	r3, r3, #10
 8005d6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	621a      	str	r2, [r3, #32]
}
 8005d82:	bf00      	nop
 8005d84:	371c      	adds	r7, #28
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b087      	sub	sp, #28
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	60f8      	str	r0, [r7, #12]
 8005d96:	60b9      	str	r1, [r7, #8]
 8005d98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6a1b      	ldr	r3, [r3, #32]
 8005d9e:	f023 0210 	bic.w	r2, r3, #16
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	699b      	ldr	r3, [r3, #24]
 8005daa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6a1b      	ldr	r3, [r3, #32]
 8005db0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005db8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	031b      	lsls	r3, r3, #12
 8005dbe:	697a      	ldr	r2, [r7, #20]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	011b      	lsls	r3, r3, #4
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	621a      	str	r2, [r3, #32]
}
 8005de2:	bf00      	nop
 8005de4:	371c      	adds	r7, #28
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b085      	sub	sp, #20
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
 8005df6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	f043 0307 	orr.w	r3, r3, #7
 8005e10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	609a      	str	r2, [r3, #8]
}
 8005e18:	bf00      	nop
 8005e1a:	3714      	adds	r7, #20
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b087      	sub	sp, #28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
 8005e30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	021a      	lsls	r2, r3, #8
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	431a      	orrs	r2, r3
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	609a      	str	r2, [r3, #8]
}
 8005e58:	bf00      	nop
 8005e5a:	371c      	adds	r7, #28
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d101      	bne.n	8005e7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e78:	2302      	movs	r3, #2
 8005e7a:	e063      	b.n	8005f44 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2202      	movs	r2, #2
 8005e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a2b      	ldr	r2, [pc, #172]	; (8005f50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d004      	beq.n	8005eb0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a2a      	ldr	r2, [pc, #168]	; (8005f54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d108      	bne.n	8005ec2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005eb6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a1b      	ldr	r2, [pc, #108]	; (8005f50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d018      	beq.n	8005f18 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eee:	d013      	beq.n	8005f18 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a18      	ldr	r2, [pc, #96]	; (8005f58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d00e      	beq.n	8005f18 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a17      	ldr	r2, [pc, #92]	; (8005f5c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d009      	beq.n	8005f18 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a12      	ldr	r2, [pc, #72]	; (8005f54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d004      	beq.n	8005f18 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a13      	ldr	r2, [pc, #76]	; (8005f60 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d10c      	bne.n	8005f32 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f1e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68ba      	ldr	r2, [r7, #8]
 8005f30:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3714      	adds	r7, #20
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr
 8005f50:	40012c00 	.word	0x40012c00
 8005f54:	40013400 	.word	0x40013400
 8005f58:	40000400 	.word	0x40000400
 8005f5c:	40000800 	.word	0x40000800
 8005f60:	40014000 	.word	0x40014000

08005f64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005fa8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005fac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	43db      	mvns	r3, r3
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3714      	adds	r7, #20
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	f107 0014 	add.w	r0, r7, #20
 8005fe4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	370c      	adds	r7, #12
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	b004      	add	sp, #16
 8006016:	4770      	bx	lr

08006018 <__errno>:
 8006018:	4b01      	ldr	r3, [pc, #4]	; (8006020 <__errno+0x8>)
 800601a:	6818      	ldr	r0, [r3, #0]
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	20000048 	.word	0x20000048

08006024 <__libc_init_array>:
 8006024:	b570      	push	{r4, r5, r6, lr}
 8006026:	4d0d      	ldr	r5, [pc, #52]	; (800605c <__libc_init_array+0x38>)
 8006028:	4c0d      	ldr	r4, [pc, #52]	; (8006060 <__libc_init_array+0x3c>)
 800602a:	1b64      	subs	r4, r4, r5
 800602c:	10a4      	asrs	r4, r4, #2
 800602e:	2600      	movs	r6, #0
 8006030:	42a6      	cmp	r6, r4
 8006032:	d109      	bne.n	8006048 <__libc_init_array+0x24>
 8006034:	4d0b      	ldr	r5, [pc, #44]	; (8006064 <__libc_init_array+0x40>)
 8006036:	4c0c      	ldr	r4, [pc, #48]	; (8006068 <__libc_init_array+0x44>)
 8006038:	f000 fc4e 	bl	80068d8 <_init>
 800603c:	1b64      	subs	r4, r4, r5
 800603e:	10a4      	asrs	r4, r4, #2
 8006040:	2600      	movs	r6, #0
 8006042:	42a6      	cmp	r6, r4
 8006044:	d105      	bne.n	8006052 <__libc_init_array+0x2e>
 8006046:	bd70      	pop	{r4, r5, r6, pc}
 8006048:	f855 3b04 	ldr.w	r3, [r5], #4
 800604c:	4798      	blx	r3
 800604e:	3601      	adds	r6, #1
 8006050:	e7ee      	b.n	8006030 <__libc_init_array+0xc>
 8006052:	f855 3b04 	ldr.w	r3, [r5], #4
 8006056:	4798      	blx	r3
 8006058:	3601      	adds	r6, #1
 800605a:	e7f2      	b.n	8006042 <__libc_init_array+0x1e>
 800605c:	080069d4 	.word	0x080069d4
 8006060:	080069d4 	.word	0x080069d4
 8006064:	080069d4 	.word	0x080069d4
 8006068:	080069d8 	.word	0x080069d8

0800606c <memset>:
 800606c:	4402      	add	r2, r0
 800606e:	4603      	mov	r3, r0
 8006070:	4293      	cmp	r3, r2
 8006072:	d100      	bne.n	8006076 <memset+0xa>
 8006074:	4770      	bx	lr
 8006076:	f803 1b01 	strb.w	r1, [r3], #1
 800607a:	e7f9      	b.n	8006070 <memset+0x4>

0800607c <siprintf>:
 800607c:	b40e      	push	{r1, r2, r3}
 800607e:	b500      	push	{lr}
 8006080:	b09c      	sub	sp, #112	; 0x70
 8006082:	ab1d      	add	r3, sp, #116	; 0x74
 8006084:	9002      	str	r0, [sp, #8]
 8006086:	9006      	str	r0, [sp, #24]
 8006088:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800608c:	4809      	ldr	r0, [pc, #36]	; (80060b4 <siprintf+0x38>)
 800608e:	9107      	str	r1, [sp, #28]
 8006090:	9104      	str	r1, [sp, #16]
 8006092:	4909      	ldr	r1, [pc, #36]	; (80060b8 <siprintf+0x3c>)
 8006094:	f853 2b04 	ldr.w	r2, [r3], #4
 8006098:	9105      	str	r1, [sp, #20]
 800609a:	6800      	ldr	r0, [r0, #0]
 800609c:	9301      	str	r3, [sp, #4]
 800609e:	a902      	add	r1, sp, #8
 80060a0:	f000 f868 	bl	8006174 <_svfiprintf_r>
 80060a4:	9b02      	ldr	r3, [sp, #8]
 80060a6:	2200      	movs	r2, #0
 80060a8:	701a      	strb	r2, [r3, #0]
 80060aa:	b01c      	add	sp, #112	; 0x70
 80060ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80060b0:	b003      	add	sp, #12
 80060b2:	4770      	bx	lr
 80060b4:	20000048 	.word	0x20000048
 80060b8:	ffff0208 	.word	0xffff0208

080060bc <__ssputs_r>:
 80060bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060c0:	688e      	ldr	r6, [r1, #8]
 80060c2:	429e      	cmp	r6, r3
 80060c4:	4682      	mov	sl, r0
 80060c6:	460c      	mov	r4, r1
 80060c8:	4690      	mov	r8, r2
 80060ca:	461f      	mov	r7, r3
 80060cc:	d838      	bhi.n	8006140 <__ssputs_r+0x84>
 80060ce:	898a      	ldrh	r2, [r1, #12]
 80060d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80060d4:	d032      	beq.n	800613c <__ssputs_r+0x80>
 80060d6:	6825      	ldr	r5, [r4, #0]
 80060d8:	6909      	ldr	r1, [r1, #16]
 80060da:	eba5 0901 	sub.w	r9, r5, r1
 80060de:	6965      	ldr	r5, [r4, #20]
 80060e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80060e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80060e8:	3301      	adds	r3, #1
 80060ea:	444b      	add	r3, r9
 80060ec:	106d      	asrs	r5, r5, #1
 80060ee:	429d      	cmp	r5, r3
 80060f0:	bf38      	it	cc
 80060f2:	461d      	movcc	r5, r3
 80060f4:	0553      	lsls	r3, r2, #21
 80060f6:	d531      	bpl.n	800615c <__ssputs_r+0xa0>
 80060f8:	4629      	mov	r1, r5
 80060fa:	f000 fb47 	bl	800678c <_malloc_r>
 80060fe:	4606      	mov	r6, r0
 8006100:	b950      	cbnz	r0, 8006118 <__ssputs_r+0x5c>
 8006102:	230c      	movs	r3, #12
 8006104:	f8ca 3000 	str.w	r3, [sl]
 8006108:	89a3      	ldrh	r3, [r4, #12]
 800610a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800610e:	81a3      	strh	r3, [r4, #12]
 8006110:	f04f 30ff 	mov.w	r0, #4294967295
 8006114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006118:	6921      	ldr	r1, [r4, #16]
 800611a:	464a      	mov	r2, r9
 800611c:	f000 fabe 	bl	800669c <memcpy>
 8006120:	89a3      	ldrh	r3, [r4, #12]
 8006122:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800612a:	81a3      	strh	r3, [r4, #12]
 800612c:	6126      	str	r6, [r4, #16]
 800612e:	6165      	str	r5, [r4, #20]
 8006130:	444e      	add	r6, r9
 8006132:	eba5 0509 	sub.w	r5, r5, r9
 8006136:	6026      	str	r6, [r4, #0]
 8006138:	60a5      	str	r5, [r4, #8]
 800613a:	463e      	mov	r6, r7
 800613c:	42be      	cmp	r6, r7
 800613e:	d900      	bls.n	8006142 <__ssputs_r+0x86>
 8006140:	463e      	mov	r6, r7
 8006142:	4632      	mov	r2, r6
 8006144:	6820      	ldr	r0, [r4, #0]
 8006146:	4641      	mov	r1, r8
 8006148:	f000 fab6 	bl	80066b8 <memmove>
 800614c:	68a3      	ldr	r3, [r4, #8]
 800614e:	6822      	ldr	r2, [r4, #0]
 8006150:	1b9b      	subs	r3, r3, r6
 8006152:	4432      	add	r2, r6
 8006154:	60a3      	str	r3, [r4, #8]
 8006156:	6022      	str	r2, [r4, #0]
 8006158:	2000      	movs	r0, #0
 800615a:	e7db      	b.n	8006114 <__ssputs_r+0x58>
 800615c:	462a      	mov	r2, r5
 800615e:	f000 fb6f 	bl	8006840 <_realloc_r>
 8006162:	4606      	mov	r6, r0
 8006164:	2800      	cmp	r0, #0
 8006166:	d1e1      	bne.n	800612c <__ssputs_r+0x70>
 8006168:	6921      	ldr	r1, [r4, #16]
 800616a:	4650      	mov	r0, sl
 800616c:	f000 fabe 	bl	80066ec <_free_r>
 8006170:	e7c7      	b.n	8006102 <__ssputs_r+0x46>
	...

08006174 <_svfiprintf_r>:
 8006174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006178:	4698      	mov	r8, r3
 800617a:	898b      	ldrh	r3, [r1, #12]
 800617c:	061b      	lsls	r3, r3, #24
 800617e:	b09d      	sub	sp, #116	; 0x74
 8006180:	4607      	mov	r7, r0
 8006182:	460d      	mov	r5, r1
 8006184:	4614      	mov	r4, r2
 8006186:	d50e      	bpl.n	80061a6 <_svfiprintf_r+0x32>
 8006188:	690b      	ldr	r3, [r1, #16]
 800618a:	b963      	cbnz	r3, 80061a6 <_svfiprintf_r+0x32>
 800618c:	2140      	movs	r1, #64	; 0x40
 800618e:	f000 fafd 	bl	800678c <_malloc_r>
 8006192:	6028      	str	r0, [r5, #0]
 8006194:	6128      	str	r0, [r5, #16]
 8006196:	b920      	cbnz	r0, 80061a2 <_svfiprintf_r+0x2e>
 8006198:	230c      	movs	r3, #12
 800619a:	603b      	str	r3, [r7, #0]
 800619c:	f04f 30ff 	mov.w	r0, #4294967295
 80061a0:	e0d1      	b.n	8006346 <_svfiprintf_r+0x1d2>
 80061a2:	2340      	movs	r3, #64	; 0x40
 80061a4:	616b      	str	r3, [r5, #20]
 80061a6:	2300      	movs	r3, #0
 80061a8:	9309      	str	r3, [sp, #36]	; 0x24
 80061aa:	2320      	movs	r3, #32
 80061ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80061b4:	2330      	movs	r3, #48	; 0x30
 80061b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006360 <_svfiprintf_r+0x1ec>
 80061ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061be:	f04f 0901 	mov.w	r9, #1
 80061c2:	4623      	mov	r3, r4
 80061c4:	469a      	mov	sl, r3
 80061c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061ca:	b10a      	cbz	r2, 80061d0 <_svfiprintf_r+0x5c>
 80061cc:	2a25      	cmp	r2, #37	; 0x25
 80061ce:	d1f9      	bne.n	80061c4 <_svfiprintf_r+0x50>
 80061d0:	ebba 0b04 	subs.w	fp, sl, r4
 80061d4:	d00b      	beq.n	80061ee <_svfiprintf_r+0x7a>
 80061d6:	465b      	mov	r3, fp
 80061d8:	4622      	mov	r2, r4
 80061da:	4629      	mov	r1, r5
 80061dc:	4638      	mov	r0, r7
 80061de:	f7ff ff6d 	bl	80060bc <__ssputs_r>
 80061e2:	3001      	adds	r0, #1
 80061e4:	f000 80aa 	beq.w	800633c <_svfiprintf_r+0x1c8>
 80061e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061ea:	445a      	add	r2, fp
 80061ec:	9209      	str	r2, [sp, #36]	; 0x24
 80061ee:	f89a 3000 	ldrb.w	r3, [sl]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	f000 80a2 	beq.w	800633c <_svfiprintf_r+0x1c8>
 80061f8:	2300      	movs	r3, #0
 80061fa:	f04f 32ff 	mov.w	r2, #4294967295
 80061fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006202:	f10a 0a01 	add.w	sl, sl, #1
 8006206:	9304      	str	r3, [sp, #16]
 8006208:	9307      	str	r3, [sp, #28]
 800620a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800620e:	931a      	str	r3, [sp, #104]	; 0x68
 8006210:	4654      	mov	r4, sl
 8006212:	2205      	movs	r2, #5
 8006214:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006218:	4851      	ldr	r0, [pc, #324]	; (8006360 <_svfiprintf_r+0x1ec>)
 800621a:	f7f9 ffe1 	bl	80001e0 <memchr>
 800621e:	9a04      	ldr	r2, [sp, #16]
 8006220:	b9d8      	cbnz	r0, 800625a <_svfiprintf_r+0xe6>
 8006222:	06d0      	lsls	r0, r2, #27
 8006224:	bf44      	itt	mi
 8006226:	2320      	movmi	r3, #32
 8006228:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800622c:	0711      	lsls	r1, r2, #28
 800622e:	bf44      	itt	mi
 8006230:	232b      	movmi	r3, #43	; 0x2b
 8006232:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006236:	f89a 3000 	ldrb.w	r3, [sl]
 800623a:	2b2a      	cmp	r3, #42	; 0x2a
 800623c:	d015      	beq.n	800626a <_svfiprintf_r+0xf6>
 800623e:	9a07      	ldr	r2, [sp, #28]
 8006240:	4654      	mov	r4, sl
 8006242:	2000      	movs	r0, #0
 8006244:	f04f 0c0a 	mov.w	ip, #10
 8006248:	4621      	mov	r1, r4
 800624a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800624e:	3b30      	subs	r3, #48	; 0x30
 8006250:	2b09      	cmp	r3, #9
 8006252:	d94e      	bls.n	80062f2 <_svfiprintf_r+0x17e>
 8006254:	b1b0      	cbz	r0, 8006284 <_svfiprintf_r+0x110>
 8006256:	9207      	str	r2, [sp, #28]
 8006258:	e014      	b.n	8006284 <_svfiprintf_r+0x110>
 800625a:	eba0 0308 	sub.w	r3, r0, r8
 800625e:	fa09 f303 	lsl.w	r3, r9, r3
 8006262:	4313      	orrs	r3, r2
 8006264:	9304      	str	r3, [sp, #16]
 8006266:	46a2      	mov	sl, r4
 8006268:	e7d2      	b.n	8006210 <_svfiprintf_r+0x9c>
 800626a:	9b03      	ldr	r3, [sp, #12]
 800626c:	1d19      	adds	r1, r3, #4
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	9103      	str	r1, [sp, #12]
 8006272:	2b00      	cmp	r3, #0
 8006274:	bfbb      	ittet	lt
 8006276:	425b      	neglt	r3, r3
 8006278:	f042 0202 	orrlt.w	r2, r2, #2
 800627c:	9307      	strge	r3, [sp, #28]
 800627e:	9307      	strlt	r3, [sp, #28]
 8006280:	bfb8      	it	lt
 8006282:	9204      	strlt	r2, [sp, #16]
 8006284:	7823      	ldrb	r3, [r4, #0]
 8006286:	2b2e      	cmp	r3, #46	; 0x2e
 8006288:	d10c      	bne.n	80062a4 <_svfiprintf_r+0x130>
 800628a:	7863      	ldrb	r3, [r4, #1]
 800628c:	2b2a      	cmp	r3, #42	; 0x2a
 800628e:	d135      	bne.n	80062fc <_svfiprintf_r+0x188>
 8006290:	9b03      	ldr	r3, [sp, #12]
 8006292:	1d1a      	adds	r2, r3, #4
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	9203      	str	r2, [sp, #12]
 8006298:	2b00      	cmp	r3, #0
 800629a:	bfb8      	it	lt
 800629c:	f04f 33ff 	movlt.w	r3, #4294967295
 80062a0:	3402      	adds	r4, #2
 80062a2:	9305      	str	r3, [sp, #20]
 80062a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006370 <_svfiprintf_r+0x1fc>
 80062a8:	7821      	ldrb	r1, [r4, #0]
 80062aa:	2203      	movs	r2, #3
 80062ac:	4650      	mov	r0, sl
 80062ae:	f7f9 ff97 	bl	80001e0 <memchr>
 80062b2:	b140      	cbz	r0, 80062c6 <_svfiprintf_r+0x152>
 80062b4:	2340      	movs	r3, #64	; 0x40
 80062b6:	eba0 000a 	sub.w	r0, r0, sl
 80062ba:	fa03 f000 	lsl.w	r0, r3, r0
 80062be:	9b04      	ldr	r3, [sp, #16]
 80062c0:	4303      	orrs	r3, r0
 80062c2:	3401      	adds	r4, #1
 80062c4:	9304      	str	r3, [sp, #16]
 80062c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062ca:	4826      	ldr	r0, [pc, #152]	; (8006364 <_svfiprintf_r+0x1f0>)
 80062cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062d0:	2206      	movs	r2, #6
 80062d2:	f7f9 ff85 	bl	80001e0 <memchr>
 80062d6:	2800      	cmp	r0, #0
 80062d8:	d038      	beq.n	800634c <_svfiprintf_r+0x1d8>
 80062da:	4b23      	ldr	r3, [pc, #140]	; (8006368 <_svfiprintf_r+0x1f4>)
 80062dc:	bb1b      	cbnz	r3, 8006326 <_svfiprintf_r+0x1b2>
 80062de:	9b03      	ldr	r3, [sp, #12]
 80062e0:	3307      	adds	r3, #7
 80062e2:	f023 0307 	bic.w	r3, r3, #7
 80062e6:	3308      	adds	r3, #8
 80062e8:	9303      	str	r3, [sp, #12]
 80062ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ec:	4433      	add	r3, r6
 80062ee:	9309      	str	r3, [sp, #36]	; 0x24
 80062f0:	e767      	b.n	80061c2 <_svfiprintf_r+0x4e>
 80062f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80062f6:	460c      	mov	r4, r1
 80062f8:	2001      	movs	r0, #1
 80062fa:	e7a5      	b.n	8006248 <_svfiprintf_r+0xd4>
 80062fc:	2300      	movs	r3, #0
 80062fe:	3401      	adds	r4, #1
 8006300:	9305      	str	r3, [sp, #20]
 8006302:	4619      	mov	r1, r3
 8006304:	f04f 0c0a 	mov.w	ip, #10
 8006308:	4620      	mov	r0, r4
 800630a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800630e:	3a30      	subs	r2, #48	; 0x30
 8006310:	2a09      	cmp	r2, #9
 8006312:	d903      	bls.n	800631c <_svfiprintf_r+0x1a8>
 8006314:	2b00      	cmp	r3, #0
 8006316:	d0c5      	beq.n	80062a4 <_svfiprintf_r+0x130>
 8006318:	9105      	str	r1, [sp, #20]
 800631a:	e7c3      	b.n	80062a4 <_svfiprintf_r+0x130>
 800631c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006320:	4604      	mov	r4, r0
 8006322:	2301      	movs	r3, #1
 8006324:	e7f0      	b.n	8006308 <_svfiprintf_r+0x194>
 8006326:	ab03      	add	r3, sp, #12
 8006328:	9300      	str	r3, [sp, #0]
 800632a:	462a      	mov	r2, r5
 800632c:	4b0f      	ldr	r3, [pc, #60]	; (800636c <_svfiprintf_r+0x1f8>)
 800632e:	a904      	add	r1, sp, #16
 8006330:	4638      	mov	r0, r7
 8006332:	f3af 8000 	nop.w
 8006336:	1c42      	adds	r2, r0, #1
 8006338:	4606      	mov	r6, r0
 800633a:	d1d6      	bne.n	80062ea <_svfiprintf_r+0x176>
 800633c:	89ab      	ldrh	r3, [r5, #12]
 800633e:	065b      	lsls	r3, r3, #25
 8006340:	f53f af2c 	bmi.w	800619c <_svfiprintf_r+0x28>
 8006344:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006346:	b01d      	add	sp, #116	; 0x74
 8006348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800634c:	ab03      	add	r3, sp, #12
 800634e:	9300      	str	r3, [sp, #0]
 8006350:	462a      	mov	r2, r5
 8006352:	4b06      	ldr	r3, [pc, #24]	; (800636c <_svfiprintf_r+0x1f8>)
 8006354:	a904      	add	r1, sp, #16
 8006356:	4638      	mov	r0, r7
 8006358:	f000 f87a 	bl	8006450 <_printf_i>
 800635c:	e7eb      	b.n	8006336 <_svfiprintf_r+0x1c2>
 800635e:	bf00      	nop
 8006360:	080069a0 	.word	0x080069a0
 8006364:	080069aa 	.word	0x080069aa
 8006368:	00000000 	.word	0x00000000
 800636c:	080060bd 	.word	0x080060bd
 8006370:	080069a6 	.word	0x080069a6

08006374 <_printf_common>:
 8006374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006378:	4616      	mov	r6, r2
 800637a:	4699      	mov	r9, r3
 800637c:	688a      	ldr	r2, [r1, #8]
 800637e:	690b      	ldr	r3, [r1, #16]
 8006380:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006384:	4293      	cmp	r3, r2
 8006386:	bfb8      	it	lt
 8006388:	4613      	movlt	r3, r2
 800638a:	6033      	str	r3, [r6, #0]
 800638c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006390:	4607      	mov	r7, r0
 8006392:	460c      	mov	r4, r1
 8006394:	b10a      	cbz	r2, 800639a <_printf_common+0x26>
 8006396:	3301      	adds	r3, #1
 8006398:	6033      	str	r3, [r6, #0]
 800639a:	6823      	ldr	r3, [r4, #0]
 800639c:	0699      	lsls	r1, r3, #26
 800639e:	bf42      	ittt	mi
 80063a0:	6833      	ldrmi	r3, [r6, #0]
 80063a2:	3302      	addmi	r3, #2
 80063a4:	6033      	strmi	r3, [r6, #0]
 80063a6:	6825      	ldr	r5, [r4, #0]
 80063a8:	f015 0506 	ands.w	r5, r5, #6
 80063ac:	d106      	bne.n	80063bc <_printf_common+0x48>
 80063ae:	f104 0a19 	add.w	sl, r4, #25
 80063b2:	68e3      	ldr	r3, [r4, #12]
 80063b4:	6832      	ldr	r2, [r6, #0]
 80063b6:	1a9b      	subs	r3, r3, r2
 80063b8:	42ab      	cmp	r3, r5
 80063ba:	dc26      	bgt.n	800640a <_printf_common+0x96>
 80063bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80063c0:	1e13      	subs	r3, r2, #0
 80063c2:	6822      	ldr	r2, [r4, #0]
 80063c4:	bf18      	it	ne
 80063c6:	2301      	movne	r3, #1
 80063c8:	0692      	lsls	r2, r2, #26
 80063ca:	d42b      	bmi.n	8006424 <_printf_common+0xb0>
 80063cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063d0:	4649      	mov	r1, r9
 80063d2:	4638      	mov	r0, r7
 80063d4:	47c0      	blx	r8
 80063d6:	3001      	adds	r0, #1
 80063d8:	d01e      	beq.n	8006418 <_printf_common+0xa4>
 80063da:	6823      	ldr	r3, [r4, #0]
 80063dc:	68e5      	ldr	r5, [r4, #12]
 80063de:	6832      	ldr	r2, [r6, #0]
 80063e0:	f003 0306 	and.w	r3, r3, #6
 80063e4:	2b04      	cmp	r3, #4
 80063e6:	bf08      	it	eq
 80063e8:	1aad      	subeq	r5, r5, r2
 80063ea:	68a3      	ldr	r3, [r4, #8]
 80063ec:	6922      	ldr	r2, [r4, #16]
 80063ee:	bf0c      	ite	eq
 80063f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063f4:	2500      	movne	r5, #0
 80063f6:	4293      	cmp	r3, r2
 80063f8:	bfc4      	itt	gt
 80063fa:	1a9b      	subgt	r3, r3, r2
 80063fc:	18ed      	addgt	r5, r5, r3
 80063fe:	2600      	movs	r6, #0
 8006400:	341a      	adds	r4, #26
 8006402:	42b5      	cmp	r5, r6
 8006404:	d11a      	bne.n	800643c <_printf_common+0xc8>
 8006406:	2000      	movs	r0, #0
 8006408:	e008      	b.n	800641c <_printf_common+0xa8>
 800640a:	2301      	movs	r3, #1
 800640c:	4652      	mov	r2, sl
 800640e:	4649      	mov	r1, r9
 8006410:	4638      	mov	r0, r7
 8006412:	47c0      	blx	r8
 8006414:	3001      	adds	r0, #1
 8006416:	d103      	bne.n	8006420 <_printf_common+0xac>
 8006418:	f04f 30ff 	mov.w	r0, #4294967295
 800641c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006420:	3501      	adds	r5, #1
 8006422:	e7c6      	b.n	80063b2 <_printf_common+0x3e>
 8006424:	18e1      	adds	r1, r4, r3
 8006426:	1c5a      	adds	r2, r3, #1
 8006428:	2030      	movs	r0, #48	; 0x30
 800642a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800642e:	4422      	add	r2, r4
 8006430:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006434:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006438:	3302      	adds	r3, #2
 800643a:	e7c7      	b.n	80063cc <_printf_common+0x58>
 800643c:	2301      	movs	r3, #1
 800643e:	4622      	mov	r2, r4
 8006440:	4649      	mov	r1, r9
 8006442:	4638      	mov	r0, r7
 8006444:	47c0      	blx	r8
 8006446:	3001      	adds	r0, #1
 8006448:	d0e6      	beq.n	8006418 <_printf_common+0xa4>
 800644a:	3601      	adds	r6, #1
 800644c:	e7d9      	b.n	8006402 <_printf_common+0x8e>
	...

08006450 <_printf_i>:
 8006450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006454:	460c      	mov	r4, r1
 8006456:	4691      	mov	r9, r2
 8006458:	7e27      	ldrb	r7, [r4, #24]
 800645a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800645c:	2f78      	cmp	r7, #120	; 0x78
 800645e:	4680      	mov	r8, r0
 8006460:	469a      	mov	sl, r3
 8006462:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006466:	d807      	bhi.n	8006478 <_printf_i+0x28>
 8006468:	2f62      	cmp	r7, #98	; 0x62
 800646a:	d80a      	bhi.n	8006482 <_printf_i+0x32>
 800646c:	2f00      	cmp	r7, #0
 800646e:	f000 80d8 	beq.w	8006622 <_printf_i+0x1d2>
 8006472:	2f58      	cmp	r7, #88	; 0x58
 8006474:	f000 80a3 	beq.w	80065be <_printf_i+0x16e>
 8006478:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800647c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006480:	e03a      	b.n	80064f8 <_printf_i+0xa8>
 8006482:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006486:	2b15      	cmp	r3, #21
 8006488:	d8f6      	bhi.n	8006478 <_printf_i+0x28>
 800648a:	a001      	add	r0, pc, #4	; (adr r0, 8006490 <_printf_i+0x40>)
 800648c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006490:	080064e9 	.word	0x080064e9
 8006494:	080064fd 	.word	0x080064fd
 8006498:	08006479 	.word	0x08006479
 800649c:	08006479 	.word	0x08006479
 80064a0:	08006479 	.word	0x08006479
 80064a4:	08006479 	.word	0x08006479
 80064a8:	080064fd 	.word	0x080064fd
 80064ac:	08006479 	.word	0x08006479
 80064b0:	08006479 	.word	0x08006479
 80064b4:	08006479 	.word	0x08006479
 80064b8:	08006479 	.word	0x08006479
 80064bc:	08006609 	.word	0x08006609
 80064c0:	0800652d 	.word	0x0800652d
 80064c4:	080065eb 	.word	0x080065eb
 80064c8:	08006479 	.word	0x08006479
 80064cc:	08006479 	.word	0x08006479
 80064d0:	0800662b 	.word	0x0800662b
 80064d4:	08006479 	.word	0x08006479
 80064d8:	0800652d 	.word	0x0800652d
 80064dc:	08006479 	.word	0x08006479
 80064e0:	08006479 	.word	0x08006479
 80064e4:	080065f3 	.word	0x080065f3
 80064e8:	680b      	ldr	r3, [r1, #0]
 80064ea:	1d1a      	adds	r2, r3, #4
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	600a      	str	r2, [r1, #0]
 80064f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80064f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064f8:	2301      	movs	r3, #1
 80064fa:	e0a3      	b.n	8006644 <_printf_i+0x1f4>
 80064fc:	6825      	ldr	r5, [r4, #0]
 80064fe:	6808      	ldr	r0, [r1, #0]
 8006500:	062e      	lsls	r6, r5, #24
 8006502:	f100 0304 	add.w	r3, r0, #4
 8006506:	d50a      	bpl.n	800651e <_printf_i+0xce>
 8006508:	6805      	ldr	r5, [r0, #0]
 800650a:	600b      	str	r3, [r1, #0]
 800650c:	2d00      	cmp	r5, #0
 800650e:	da03      	bge.n	8006518 <_printf_i+0xc8>
 8006510:	232d      	movs	r3, #45	; 0x2d
 8006512:	426d      	negs	r5, r5
 8006514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006518:	485e      	ldr	r0, [pc, #376]	; (8006694 <_printf_i+0x244>)
 800651a:	230a      	movs	r3, #10
 800651c:	e019      	b.n	8006552 <_printf_i+0x102>
 800651e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006522:	6805      	ldr	r5, [r0, #0]
 8006524:	600b      	str	r3, [r1, #0]
 8006526:	bf18      	it	ne
 8006528:	b22d      	sxthne	r5, r5
 800652a:	e7ef      	b.n	800650c <_printf_i+0xbc>
 800652c:	680b      	ldr	r3, [r1, #0]
 800652e:	6825      	ldr	r5, [r4, #0]
 8006530:	1d18      	adds	r0, r3, #4
 8006532:	6008      	str	r0, [r1, #0]
 8006534:	0628      	lsls	r0, r5, #24
 8006536:	d501      	bpl.n	800653c <_printf_i+0xec>
 8006538:	681d      	ldr	r5, [r3, #0]
 800653a:	e002      	b.n	8006542 <_printf_i+0xf2>
 800653c:	0669      	lsls	r1, r5, #25
 800653e:	d5fb      	bpl.n	8006538 <_printf_i+0xe8>
 8006540:	881d      	ldrh	r5, [r3, #0]
 8006542:	4854      	ldr	r0, [pc, #336]	; (8006694 <_printf_i+0x244>)
 8006544:	2f6f      	cmp	r7, #111	; 0x6f
 8006546:	bf0c      	ite	eq
 8006548:	2308      	moveq	r3, #8
 800654a:	230a      	movne	r3, #10
 800654c:	2100      	movs	r1, #0
 800654e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006552:	6866      	ldr	r6, [r4, #4]
 8006554:	60a6      	str	r6, [r4, #8]
 8006556:	2e00      	cmp	r6, #0
 8006558:	bfa2      	ittt	ge
 800655a:	6821      	ldrge	r1, [r4, #0]
 800655c:	f021 0104 	bicge.w	r1, r1, #4
 8006560:	6021      	strge	r1, [r4, #0]
 8006562:	b90d      	cbnz	r5, 8006568 <_printf_i+0x118>
 8006564:	2e00      	cmp	r6, #0
 8006566:	d04d      	beq.n	8006604 <_printf_i+0x1b4>
 8006568:	4616      	mov	r6, r2
 800656a:	fbb5 f1f3 	udiv	r1, r5, r3
 800656e:	fb03 5711 	mls	r7, r3, r1, r5
 8006572:	5dc7      	ldrb	r7, [r0, r7]
 8006574:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006578:	462f      	mov	r7, r5
 800657a:	42bb      	cmp	r3, r7
 800657c:	460d      	mov	r5, r1
 800657e:	d9f4      	bls.n	800656a <_printf_i+0x11a>
 8006580:	2b08      	cmp	r3, #8
 8006582:	d10b      	bne.n	800659c <_printf_i+0x14c>
 8006584:	6823      	ldr	r3, [r4, #0]
 8006586:	07df      	lsls	r7, r3, #31
 8006588:	d508      	bpl.n	800659c <_printf_i+0x14c>
 800658a:	6923      	ldr	r3, [r4, #16]
 800658c:	6861      	ldr	r1, [r4, #4]
 800658e:	4299      	cmp	r1, r3
 8006590:	bfde      	ittt	le
 8006592:	2330      	movle	r3, #48	; 0x30
 8006594:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006598:	f106 36ff 	addle.w	r6, r6, #4294967295
 800659c:	1b92      	subs	r2, r2, r6
 800659e:	6122      	str	r2, [r4, #16]
 80065a0:	f8cd a000 	str.w	sl, [sp]
 80065a4:	464b      	mov	r3, r9
 80065a6:	aa03      	add	r2, sp, #12
 80065a8:	4621      	mov	r1, r4
 80065aa:	4640      	mov	r0, r8
 80065ac:	f7ff fee2 	bl	8006374 <_printf_common>
 80065b0:	3001      	adds	r0, #1
 80065b2:	d14c      	bne.n	800664e <_printf_i+0x1fe>
 80065b4:	f04f 30ff 	mov.w	r0, #4294967295
 80065b8:	b004      	add	sp, #16
 80065ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065be:	4835      	ldr	r0, [pc, #212]	; (8006694 <_printf_i+0x244>)
 80065c0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80065c4:	6823      	ldr	r3, [r4, #0]
 80065c6:	680e      	ldr	r6, [r1, #0]
 80065c8:	061f      	lsls	r7, r3, #24
 80065ca:	f856 5b04 	ldr.w	r5, [r6], #4
 80065ce:	600e      	str	r6, [r1, #0]
 80065d0:	d514      	bpl.n	80065fc <_printf_i+0x1ac>
 80065d2:	07d9      	lsls	r1, r3, #31
 80065d4:	bf44      	itt	mi
 80065d6:	f043 0320 	orrmi.w	r3, r3, #32
 80065da:	6023      	strmi	r3, [r4, #0]
 80065dc:	b91d      	cbnz	r5, 80065e6 <_printf_i+0x196>
 80065de:	6823      	ldr	r3, [r4, #0]
 80065e0:	f023 0320 	bic.w	r3, r3, #32
 80065e4:	6023      	str	r3, [r4, #0]
 80065e6:	2310      	movs	r3, #16
 80065e8:	e7b0      	b.n	800654c <_printf_i+0xfc>
 80065ea:	6823      	ldr	r3, [r4, #0]
 80065ec:	f043 0320 	orr.w	r3, r3, #32
 80065f0:	6023      	str	r3, [r4, #0]
 80065f2:	2378      	movs	r3, #120	; 0x78
 80065f4:	4828      	ldr	r0, [pc, #160]	; (8006698 <_printf_i+0x248>)
 80065f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80065fa:	e7e3      	b.n	80065c4 <_printf_i+0x174>
 80065fc:	065e      	lsls	r6, r3, #25
 80065fe:	bf48      	it	mi
 8006600:	b2ad      	uxthmi	r5, r5
 8006602:	e7e6      	b.n	80065d2 <_printf_i+0x182>
 8006604:	4616      	mov	r6, r2
 8006606:	e7bb      	b.n	8006580 <_printf_i+0x130>
 8006608:	680b      	ldr	r3, [r1, #0]
 800660a:	6826      	ldr	r6, [r4, #0]
 800660c:	6960      	ldr	r0, [r4, #20]
 800660e:	1d1d      	adds	r5, r3, #4
 8006610:	600d      	str	r5, [r1, #0]
 8006612:	0635      	lsls	r5, r6, #24
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	d501      	bpl.n	800661c <_printf_i+0x1cc>
 8006618:	6018      	str	r0, [r3, #0]
 800661a:	e002      	b.n	8006622 <_printf_i+0x1d2>
 800661c:	0671      	lsls	r1, r6, #25
 800661e:	d5fb      	bpl.n	8006618 <_printf_i+0x1c8>
 8006620:	8018      	strh	r0, [r3, #0]
 8006622:	2300      	movs	r3, #0
 8006624:	6123      	str	r3, [r4, #16]
 8006626:	4616      	mov	r6, r2
 8006628:	e7ba      	b.n	80065a0 <_printf_i+0x150>
 800662a:	680b      	ldr	r3, [r1, #0]
 800662c:	1d1a      	adds	r2, r3, #4
 800662e:	600a      	str	r2, [r1, #0]
 8006630:	681e      	ldr	r6, [r3, #0]
 8006632:	6862      	ldr	r2, [r4, #4]
 8006634:	2100      	movs	r1, #0
 8006636:	4630      	mov	r0, r6
 8006638:	f7f9 fdd2 	bl	80001e0 <memchr>
 800663c:	b108      	cbz	r0, 8006642 <_printf_i+0x1f2>
 800663e:	1b80      	subs	r0, r0, r6
 8006640:	6060      	str	r0, [r4, #4]
 8006642:	6863      	ldr	r3, [r4, #4]
 8006644:	6123      	str	r3, [r4, #16]
 8006646:	2300      	movs	r3, #0
 8006648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800664c:	e7a8      	b.n	80065a0 <_printf_i+0x150>
 800664e:	6923      	ldr	r3, [r4, #16]
 8006650:	4632      	mov	r2, r6
 8006652:	4649      	mov	r1, r9
 8006654:	4640      	mov	r0, r8
 8006656:	47d0      	blx	sl
 8006658:	3001      	adds	r0, #1
 800665a:	d0ab      	beq.n	80065b4 <_printf_i+0x164>
 800665c:	6823      	ldr	r3, [r4, #0]
 800665e:	079b      	lsls	r3, r3, #30
 8006660:	d413      	bmi.n	800668a <_printf_i+0x23a>
 8006662:	68e0      	ldr	r0, [r4, #12]
 8006664:	9b03      	ldr	r3, [sp, #12]
 8006666:	4298      	cmp	r0, r3
 8006668:	bfb8      	it	lt
 800666a:	4618      	movlt	r0, r3
 800666c:	e7a4      	b.n	80065b8 <_printf_i+0x168>
 800666e:	2301      	movs	r3, #1
 8006670:	4632      	mov	r2, r6
 8006672:	4649      	mov	r1, r9
 8006674:	4640      	mov	r0, r8
 8006676:	47d0      	blx	sl
 8006678:	3001      	adds	r0, #1
 800667a:	d09b      	beq.n	80065b4 <_printf_i+0x164>
 800667c:	3501      	adds	r5, #1
 800667e:	68e3      	ldr	r3, [r4, #12]
 8006680:	9903      	ldr	r1, [sp, #12]
 8006682:	1a5b      	subs	r3, r3, r1
 8006684:	42ab      	cmp	r3, r5
 8006686:	dcf2      	bgt.n	800666e <_printf_i+0x21e>
 8006688:	e7eb      	b.n	8006662 <_printf_i+0x212>
 800668a:	2500      	movs	r5, #0
 800668c:	f104 0619 	add.w	r6, r4, #25
 8006690:	e7f5      	b.n	800667e <_printf_i+0x22e>
 8006692:	bf00      	nop
 8006694:	080069b1 	.word	0x080069b1
 8006698:	080069c2 	.word	0x080069c2

0800669c <memcpy>:
 800669c:	440a      	add	r2, r1
 800669e:	4291      	cmp	r1, r2
 80066a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80066a4:	d100      	bne.n	80066a8 <memcpy+0xc>
 80066a6:	4770      	bx	lr
 80066a8:	b510      	push	{r4, lr}
 80066aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066b2:	4291      	cmp	r1, r2
 80066b4:	d1f9      	bne.n	80066aa <memcpy+0xe>
 80066b6:	bd10      	pop	{r4, pc}

080066b8 <memmove>:
 80066b8:	4288      	cmp	r0, r1
 80066ba:	b510      	push	{r4, lr}
 80066bc:	eb01 0402 	add.w	r4, r1, r2
 80066c0:	d902      	bls.n	80066c8 <memmove+0x10>
 80066c2:	4284      	cmp	r4, r0
 80066c4:	4623      	mov	r3, r4
 80066c6:	d807      	bhi.n	80066d8 <memmove+0x20>
 80066c8:	1e43      	subs	r3, r0, #1
 80066ca:	42a1      	cmp	r1, r4
 80066cc:	d008      	beq.n	80066e0 <memmove+0x28>
 80066ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066d6:	e7f8      	b.n	80066ca <memmove+0x12>
 80066d8:	4402      	add	r2, r0
 80066da:	4601      	mov	r1, r0
 80066dc:	428a      	cmp	r2, r1
 80066de:	d100      	bne.n	80066e2 <memmove+0x2a>
 80066e0:	bd10      	pop	{r4, pc}
 80066e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80066ea:	e7f7      	b.n	80066dc <memmove+0x24>

080066ec <_free_r>:
 80066ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066ee:	2900      	cmp	r1, #0
 80066f0:	d048      	beq.n	8006784 <_free_r+0x98>
 80066f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066f6:	9001      	str	r0, [sp, #4]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f1a1 0404 	sub.w	r4, r1, #4
 80066fe:	bfb8      	it	lt
 8006700:	18e4      	addlt	r4, r4, r3
 8006702:	f000 f8d3 	bl	80068ac <__malloc_lock>
 8006706:	4a20      	ldr	r2, [pc, #128]	; (8006788 <_free_r+0x9c>)
 8006708:	9801      	ldr	r0, [sp, #4]
 800670a:	6813      	ldr	r3, [r2, #0]
 800670c:	4615      	mov	r5, r2
 800670e:	b933      	cbnz	r3, 800671e <_free_r+0x32>
 8006710:	6063      	str	r3, [r4, #4]
 8006712:	6014      	str	r4, [r2, #0]
 8006714:	b003      	add	sp, #12
 8006716:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800671a:	f000 b8cd 	b.w	80068b8 <__malloc_unlock>
 800671e:	42a3      	cmp	r3, r4
 8006720:	d90b      	bls.n	800673a <_free_r+0x4e>
 8006722:	6821      	ldr	r1, [r4, #0]
 8006724:	1862      	adds	r2, r4, r1
 8006726:	4293      	cmp	r3, r2
 8006728:	bf04      	itt	eq
 800672a:	681a      	ldreq	r2, [r3, #0]
 800672c:	685b      	ldreq	r3, [r3, #4]
 800672e:	6063      	str	r3, [r4, #4]
 8006730:	bf04      	itt	eq
 8006732:	1852      	addeq	r2, r2, r1
 8006734:	6022      	streq	r2, [r4, #0]
 8006736:	602c      	str	r4, [r5, #0]
 8006738:	e7ec      	b.n	8006714 <_free_r+0x28>
 800673a:	461a      	mov	r2, r3
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	b10b      	cbz	r3, 8006744 <_free_r+0x58>
 8006740:	42a3      	cmp	r3, r4
 8006742:	d9fa      	bls.n	800673a <_free_r+0x4e>
 8006744:	6811      	ldr	r1, [r2, #0]
 8006746:	1855      	adds	r5, r2, r1
 8006748:	42a5      	cmp	r5, r4
 800674a:	d10b      	bne.n	8006764 <_free_r+0x78>
 800674c:	6824      	ldr	r4, [r4, #0]
 800674e:	4421      	add	r1, r4
 8006750:	1854      	adds	r4, r2, r1
 8006752:	42a3      	cmp	r3, r4
 8006754:	6011      	str	r1, [r2, #0]
 8006756:	d1dd      	bne.n	8006714 <_free_r+0x28>
 8006758:	681c      	ldr	r4, [r3, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	6053      	str	r3, [r2, #4]
 800675e:	4421      	add	r1, r4
 8006760:	6011      	str	r1, [r2, #0]
 8006762:	e7d7      	b.n	8006714 <_free_r+0x28>
 8006764:	d902      	bls.n	800676c <_free_r+0x80>
 8006766:	230c      	movs	r3, #12
 8006768:	6003      	str	r3, [r0, #0]
 800676a:	e7d3      	b.n	8006714 <_free_r+0x28>
 800676c:	6825      	ldr	r5, [r4, #0]
 800676e:	1961      	adds	r1, r4, r5
 8006770:	428b      	cmp	r3, r1
 8006772:	bf04      	itt	eq
 8006774:	6819      	ldreq	r1, [r3, #0]
 8006776:	685b      	ldreq	r3, [r3, #4]
 8006778:	6063      	str	r3, [r4, #4]
 800677a:	bf04      	itt	eq
 800677c:	1949      	addeq	r1, r1, r5
 800677e:	6021      	streq	r1, [r4, #0]
 8006780:	6054      	str	r4, [r2, #4]
 8006782:	e7c7      	b.n	8006714 <_free_r+0x28>
 8006784:	b003      	add	sp, #12
 8006786:	bd30      	pop	{r4, r5, pc}
 8006788:	200000d8 	.word	0x200000d8

0800678c <_malloc_r>:
 800678c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800678e:	1ccd      	adds	r5, r1, #3
 8006790:	f025 0503 	bic.w	r5, r5, #3
 8006794:	3508      	adds	r5, #8
 8006796:	2d0c      	cmp	r5, #12
 8006798:	bf38      	it	cc
 800679a:	250c      	movcc	r5, #12
 800679c:	2d00      	cmp	r5, #0
 800679e:	4606      	mov	r6, r0
 80067a0:	db01      	blt.n	80067a6 <_malloc_r+0x1a>
 80067a2:	42a9      	cmp	r1, r5
 80067a4:	d903      	bls.n	80067ae <_malloc_r+0x22>
 80067a6:	230c      	movs	r3, #12
 80067a8:	6033      	str	r3, [r6, #0]
 80067aa:	2000      	movs	r0, #0
 80067ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067ae:	f000 f87d 	bl	80068ac <__malloc_lock>
 80067b2:	4921      	ldr	r1, [pc, #132]	; (8006838 <_malloc_r+0xac>)
 80067b4:	680a      	ldr	r2, [r1, #0]
 80067b6:	4614      	mov	r4, r2
 80067b8:	b99c      	cbnz	r4, 80067e2 <_malloc_r+0x56>
 80067ba:	4f20      	ldr	r7, [pc, #128]	; (800683c <_malloc_r+0xb0>)
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	b923      	cbnz	r3, 80067ca <_malloc_r+0x3e>
 80067c0:	4621      	mov	r1, r4
 80067c2:	4630      	mov	r0, r6
 80067c4:	f000 f862 	bl	800688c <_sbrk_r>
 80067c8:	6038      	str	r0, [r7, #0]
 80067ca:	4629      	mov	r1, r5
 80067cc:	4630      	mov	r0, r6
 80067ce:	f000 f85d 	bl	800688c <_sbrk_r>
 80067d2:	1c43      	adds	r3, r0, #1
 80067d4:	d123      	bne.n	800681e <_malloc_r+0x92>
 80067d6:	230c      	movs	r3, #12
 80067d8:	6033      	str	r3, [r6, #0]
 80067da:	4630      	mov	r0, r6
 80067dc:	f000 f86c 	bl	80068b8 <__malloc_unlock>
 80067e0:	e7e3      	b.n	80067aa <_malloc_r+0x1e>
 80067e2:	6823      	ldr	r3, [r4, #0]
 80067e4:	1b5b      	subs	r3, r3, r5
 80067e6:	d417      	bmi.n	8006818 <_malloc_r+0x8c>
 80067e8:	2b0b      	cmp	r3, #11
 80067ea:	d903      	bls.n	80067f4 <_malloc_r+0x68>
 80067ec:	6023      	str	r3, [r4, #0]
 80067ee:	441c      	add	r4, r3
 80067f0:	6025      	str	r5, [r4, #0]
 80067f2:	e004      	b.n	80067fe <_malloc_r+0x72>
 80067f4:	6863      	ldr	r3, [r4, #4]
 80067f6:	42a2      	cmp	r2, r4
 80067f8:	bf0c      	ite	eq
 80067fa:	600b      	streq	r3, [r1, #0]
 80067fc:	6053      	strne	r3, [r2, #4]
 80067fe:	4630      	mov	r0, r6
 8006800:	f000 f85a 	bl	80068b8 <__malloc_unlock>
 8006804:	f104 000b 	add.w	r0, r4, #11
 8006808:	1d23      	adds	r3, r4, #4
 800680a:	f020 0007 	bic.w	r0, r0, #7
 800680e:	1ac2      	subs	r2, r0, r3
 8006810:	d0cc      	beq.n	80067ac <_malloc_r+0x20>
 8006812:	1a1b      	subs	r3, r3, r0
 8006814:	50a3      	str	r3, [r4, r2]
 8006816:	e7c9      	b.n	80067ac <_malloc_r+0x20>
 8006818:	4622      	mov	r2, r4
 800681a:	6864      	ldr	r4, [r4, #4]
 800681c:	e7cc      	b.n	80067b8 <_malloc_r+0x2c>
 800681e:	1cc4      	adds	r4, r0, #3
 8006820:	f024 0403 	bic.w	r4, r4, #3
 8006824:	42a0      	cmp	r0, r4
 8006826:	d0e3      	beq.n	80067f0 <_malloc_r+0x64>
 8006828:	1a21      	subs	r1, r4, r0
 800682a:	4630      	mov	r0, r6
 800682c:	f000 f82e 	bl	800688c <_sbrk_r>
 8006830:	3001      	adds	r0, #1
 8006832:	d1dd      	bne.n	80067f0 <_malloc_r+0x64>
 8006834:	e7cf      	b.n	80067d6 <_malloc_r+0x4a>
 8006836:	bf00      	nop
 8006838:	200000d8 	.word	0x200000d8
 800683c:	200000dc 	.word	0x200000dc

08006840 <_realloc_r>:
 8006840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006842:	4607      	mov	r7, r0
 8006844:	4614      	mov	r4, r2
 8006846:	460e      	mov	r6, r1
 8006848:	b921      	cbnz	r1, 8006854 <_realloc_r+0x14>
 800684a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800684e:	4611      	mov	r1, r2
 8006850:	f7ff bf9c 	b.w	800678c <_malloc_r>
 8006854:	b922      	cbnz	r2, 8006860 <_realloc_r+0x20>
 8006856:	f7ff ff49 	bl	80066ec <_free_r>
 800685a:	4625      	mov	r5, r4
 800685c:	4628      	mov	r0, r5
 800685e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006860:	f000 f830 	bl	80068c4 <_malloc_usable_size_r>
 8006864:	42a0      	cmp	r0, r4
 8006866:	d20f      	bcs.n	8006888 <_realloc_r+0x48>
 8006868:	4621      	mov	r1, r4
 800686a:	4638      	mov	r0, r7
 800686c:	f7ff ff8e 	bl	800678c <_malloc_r>
 8006870:	4605      	mov	r5, r0
 8006872:	2800      	cmp	r0, #0
 8006874:	d0f2      	beq.n	800685c <_realloc_r+0x1c>
 8006876:	4631      	mov	r1, r6
 8006878:	4622      	mov	r2, r4
 800687a:	f7ff ff0f 	bl	800669c <memcpy>
 800687e:	4631      	mov	r1, r6
 8006880:	4638      	mov	r0, r7
 8006882:	f7ff ff33 	bl	80066ec <_free_r>
 8006886:	e7e9      	b.n	800685c <_realloc_r+0x1c>
 8006888:	4635      	mov	r5, r6
 800688a:	e7e7      	b.n	800685c <_realloc_r+0x1c>

0800688c <_sbrk_r>:
 800688c:	b538      	push	{r3, r4, r5, lr}
 800688e:	4d06      	ldr	r5, [pc, #24]	; (80068a8 <_sbrk_r+0x1c>)
 8006890:	2300      	movs	r3, #0
 8006892:	4604      	mov	r4, r0
 8006894:	4608      	mov	r0, r1
 8006896:	602b      	str	r3, [r5, #0]
 8006898:	f7fa ff5c 	bl	8001754 <_sbrk>
 800689c:	1c43      	adds	r3, r0, #1
 800689e:	d102      	bne.n	80068a6 <_sbrk_r+0x1a>
 80068a0:	682b      	ldr	r3, [r5, #0]
 80068a2:	b103      	cbz	r3, 80068a6 <_sbrk_r+0x1a>
 80068a4:	6023      	str	r3, [r4, #0]
 80068a6:	bd38      	pop	{r3, r4, r5, pc}
 80068a8:	200005dc 	.word	0x200005dc

080068ac <__malloc_lock>:
 80068ac:	4801      	ldr	r0, [pc, #4]	; (80068b4 <__malloc_lock+0x8>)
 80068ae:	f000 b811 	b.w	80068d4 <__retarget_lock_acquire_recursive>
 80068b2:	bf00      	nop
 80068b4:	200005e4 	.word	0x200005e4

080068b8 <__malloc_unlock>:
 80068b8:	4801      	ldr	r0, [pc, #4]	; (80068c0 <__malloc_unlock+0x8>)
 80068ba:	f000 b80c 	b.w	80068d6 <__retarget_lock_release_recursive>
 80068be:	bf00      	nop
 80068c0:	200005e4 	.word	0x200005e4

080068c4 <_malloc_usable_size_r>:
 80068c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068c8:	1f18      	subs	r0, r3, #4
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	bfbc      	itt	lt
 80068ce:	580b      	ldrlt	r3, [r1, r0]
 80068d0:	18c0      	addlt	r0, r0, r3
 80068d2:	4770      	bx	lr

080068d4 <__retarget_lock_acquire_recursive>:
 80068d4:	4770      	bx	lr

080068d6 <__retarget_lock_release_recursive>:
 80068d6:	4770      	bx	lr

080068d8 <_init>:
 80068d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068da:	bf00      	nop
 80068dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068de:	bc08      	pop	{r3}
 80068e0:	469e      	mov	lr, r3
 80068e2:	4770      	bx	lr

080068e4 <_fini>:
 80068e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068e6:	bf00      	nop
 80068e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ea:	bc08      	pop	{r3}
 80068ec:	469e      	mov	lr, r3
 80068ee:	4770      	bx	lr
